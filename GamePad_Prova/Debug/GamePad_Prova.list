
GamePad_Prova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009db8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009f40  08009f40  0000af40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fd0  08009fd0  0000b170  2**0
                  CONTENTS
  4 .ARM          00000000  08009fd0  08009fd0  0000b170  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fd0  08009fd0  0000b170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08009fd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b170  2**0
                  CONTENTS
 10 .bss          000009b4  20000170  20000170  0000b170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  0000b170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b170  2**0
                  CONTENTS, READONLY
 13 .debug_info   000138d9  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ff  00000000  00000000  0001ea79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00022078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c66  00000000  00000000  000230e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207a8  00000000  00000000  00023d4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d8a  00000000  00000000  000444f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b723a  00000000  00000000  0005b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001124ba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004294  00000000  00000000  00112500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  00116794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009f28 	.word	0x08009f28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	08009f28 	.word	0x08009f28

080001c8 <HAL_GPIO_EXTI_Callback>:

static uint32_t analogBuffer1[2], analogBuffer2[2];

uint8_t gamepadBuffer[7];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]

	uint8_t current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4810      	ldr	r0, [pc, #64]	@ (8000218 <HAL_GPIO_EXTI_Callback+0x50>)
 80001d8:	f002 fa24 	bl	8002624 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	73fb      	strb	r3, [r7, #15]

	if (current_pin_state)
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d007      	beq.n	80001f6 <HAL_GPIO_EXTI_Callback+0x2e>
		gamepad.buttons |= GPIO_Pin;
 80001e6:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001e8:	88da      	ldrh	r2, [r3, #6]
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001f2:	80da      	strh	r2, [r3, #6]
	else
		gamepad.buttons &= ~GPIO_Pin;
}
 80001f4:	e00b      	b.n	800020e <HAL_GPIO_EXTI_Callback+0x46>
		gamepad.buttons &= ~GPIO_Pin;
 80001f6:	4b09      	ldr	r3, [pc, #36]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001f8:	88db      	ldrh	r3, [r3, #6]
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000200:	43db      	mvns	r3, r3
 8000202:	b21b      	sxth	r3, r3
 8000204:	4013      	ands	r3, r2
 8000206:	b21b      	sxth	r3, r3
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b04      	ldr	r3, [pc, #16]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 800020c:	80da      	strh	r2, [r3, #6]
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	48000c00 	.word	0x48000c00
 800021c:	20000308 	.word	0x20000308

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd10 	bl	8000c48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f880 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa3e 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 fa0a 	bl	8000648 <MX_DMA_Init>
  MX_I2C1_Init();
 8000234:	f000 f9c8 	bl	80005c8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000238:	f009 fa32 	bl	80096a0 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800023c:	f000 f8da 	bl	80003f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000240:	f000 f956 	bl	80004f0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, analogBuffer1, 2); // start adc in dma mode for multichannel
 8000244:	2202      	movs	r2, #2
 8000246:	4932      	ldr	r1, [pc, #200]	@ (8000310 <main+0xf0>)
 8000248:	4832      	ldr	r0, [pc, #200]	@ (8000314 <main+0xf4>)
 800024a:	f000 ff85 	bl	8001158 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, analogBuffer2, 2); // start adc in dma mode for multichannel
 800024e:	2202      	movs	r2, #2
 8000250:	4931      	ldr	r1, [pc, #196]	@ (8000318 <main+0xf8>)
 8000252:	4832      	ldr	r0, [pc, #200]	@ (800031c <main+0xfc>)
 8000254:	f000 ff80 	bl	8001158 <HAL_ADC_Start_DMA>

  gamepad.id=1;
 8000258:	4b31      	ldr	r3, [pc, #196]	@ (8000320 <main+0x100>)
 800025a:	2201      	movs	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]

  gamepad.leftAxis[0] = 0;
 800025e:	4b30      	ldr	r3, [pc, #192]	@ (8000320 <main+0x100>)
 8000260:	2200      	movs	r2, #0
 8000262:	705a      	strb	r2, [r3, #1]
  gamepad.leftAxis[1] = 0;
 8000264:	4b2e      	ldr	r3, [pc, #184]	@ (8000320 <main+0x100>)
 8000266:	2200      	movs	r2, #0
 8000268:	709a      	strb	r2, [r3, #2]

  gamepad.rightAxis[0] = 0;
 800026a:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <main+0x100>)
 800026c:	2200      	movs	r2, #0
 800026e:	70da      	strb	r2, [r3, #3]
  gamepad.rightAxis[1] = 0;
 8000270:	4b2b      	ldr	r3, [pc, #172]	@ (8000320 <main+0x100>)
 8000272:	2200      	movs	r2, #0
 8000274:	711a      	strb	r2, [r3, #4]

  gamepad.buttons = 0;
 8000276:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <main+0x100>)
 8000278:	2200      	movs	r2, #0
 800027a:	80da      	strh	r2, [r3, #6]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  gamepad.leftAxis[0] = (analogBuffer1[0]-2048)/16;
 800027c:	4b24      	ldr	r3, [pc, #144]	@ (8000310 <main+0xf0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000284:	091b      	lsrs	r3, r3, #4
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b25      	ldr	r3, [pc, #148]	@ (8000320 <main+0x100>)
 800028a:	705a      	strb	r2, [r3, #1]
	  gamepad.leftAxis[1] = (analogBuffer1[1]-2048)/16;
 800028c:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <main+0xf0>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000294:	091b      	lsrs	r3, r3, #4
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <main+0x100>)
 800029a:	709a      	strb	r2, [r3, #2]

	  gamepad.rightAxis[0] = (analogBuffer2[0]-2048)/16;
 800029c:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <main+0xf8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <main+0x100>)
 80002aa:	70da      	strb	r2, [r3, #3]
	  gamepad.rightAxis[1] = (analogBuffer2[1]-2048)/16;
 80002ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <main+0xf8>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002b4:	091b      	lsrs	r3, r3, #4
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <main+0x100>)
 80002ba:	711a      	strb	r2, [r3, #4]

	  gamepadBuffer[0] = gamepad.id; // id
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <main+0x100>)
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <main+0x104>)
 80002c2:	701a      	strb	r2, [r3, #0]

	  gamepadBuffer[1] = gamepad.leftAxis[0]; // left movement (-1,1)
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <main+0x100>)
 80002c6:	785a      	ldrb	r2, [r3, #1]
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <main+0x104>)
 80002ca:	705a      	strb	r2, [r3, #1]
	  gamepadBuffer[2] = gamepad.leftAxis[1]; // right movement
 80002cc:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <main+0x100>)
 80002ce:	789a      	ldrb	r2, [r3, #2]
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <main+0x104>)
 80002d2:	709a      	strb	r2, [r3, #2]

	  gamepadBuffer[3] = gamepad.rightAxis[0]; // left movement (-1,1)
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <main+0x100>)
 80002d6:	78da      	ldrb	r2, [r3, #3]
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <main+0x104>)
 80002da:	70da      	strb	r2, [r3, #3]
	  gamepadBuffer[4] = gamepad.rightAxis[1]; // right movement
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <main+0x100>)
 80002de:	791a      	ldrb	r2, [r3, #4]
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <main+0x104>)
 80002e2:	711a      	strb	r2, [r3, #4]

	  gamepadBuffer[5] = (uint8_t) (0x00FF & gamepad.buttons); // buttons
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <main+0x100>)
 80002e6:	88db      	ldrh	r3, [r3, #6]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <main+0x104>)
 80002ec:	715a      	strb	r2, [r3, #5]
	  gamepadBuffer[6] = (uint8_t) ((0xFF00 & gamepad.buttons) >> 8); // buttons
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <main+0x100>)
 80002f0:	88db      	ldrh	r3, [r3, #6]
 80002f2:	0a1b      	lsrs	r3, r3, #8
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <main+0x104>)
 80002fa:	719a      	strb	r2, [r3, #6]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, gamepadBuffer, 7);
 80002fc:	2207      	movs	r2, #7
 80002fe:	4909      	ldr	r1, [pc, #36]	@ (8000324 <main+0x104>)
 8000300:	4809      	ldr	r0, [pc, #36]	@ (8000328 <main+0x108>)
 8000302:	f008 f861 	bl	80083c8 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8000306:	2064      	movs	r0, #100	@ 0x64
 8000308:	f000 fd04 	bl	8000d14 <HAL_Delay>
	  gamepad.leftAxis[0] = (analogBuffer1[0]-2048)/16;
 800030c:	bf00      	nop
 800030e:	e7b5      	b.n	800027c <main+0x5c>
 8000310:	20000310 	.word	0x20000310
 8000314:	2000018c 	.word	0x2000018c
 8000318:	20000318 	.word	0x20000318
 800031c:	200001dc 	.word	0x200001dc
 8000320:	20000308 	.word	0x20000308
 8000324:	20000320 	.word	0x20000320
 8000328:	20000334 	.word	0x20000334

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09e      	sub	sp, #120	@ 0x78
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000336:	2228      	movs	r2, #40	@ 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f009 fdc8 	bl	8009ed0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	223c      	movs	r2, #60	@ 0x3c
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f009 fdba 	bl	8009ed0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800035c:	2303      	movs	r3, #3
 800035e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000364:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	2302      	movs	r3, #2
 8000374:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800037a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800037c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000380:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000386:	4618      	mov	r0, r3
 8000388:	f003 ff78 	bl	800427c <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000392:	f000 fa55 	bl	8000840 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
 8000398:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2302      	movs	r3, #2
 800039c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f004 ffa0 	bl	80052f8 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003be:	f000 fa3f 	bl	8000840 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80003c2:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <SystemClock_Config+0xc4>)
 80003c4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ca:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	4618      	mov	r0, r3
 80003da:	f005 f95d 	bl	8005698 <HAL_RCCEx_PeriphCLKConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003e4:	f000 fa2c 	bl	8000840 <Error_Handler>
  }
}
 80003e8:	bf00      	nop
 80003ea:	3778      	adds	r7, #120	@ 0x78
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	000200a0 	.word	0x000200a0

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	@ 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000416:	4b35      	ldr	r3, [pc, #212]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000418:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800041c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041e:	4b33      	ldr	r3, [pc, #204]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000424:	4b31      	ldr	r3, [pc, #196]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800042a:	4b30      	ldr	r3, [pc, #192]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800042c:	2201      	movs	r2, #1
 800042e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000430:	4b2e      	ldr	r3, [pc, #184]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000432:	2201      	movs	r2, #1
 8000434:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043e:	4b2b      	ldr	r3, [pc, #172]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000440:	2200      	movs	r2, #0
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b29      	ldr	r3, [pc, #164]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000446:	2201      	movs	r2, #1
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000450:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000452:	2202      	movs	r2, #2
 8000454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000456:	4b25      	ldr	r3, [pc, #148]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000460:	2208      	movs	r2, #8
 8000462:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000464:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000466:	2200      	movs	r2, #0
 8000468:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800046a:	4b20      	ldr	r3, [pc, #128]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	481e      	ldr	r0, [pc, #120]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000472:	f000 fc91 	bl	8000d98 <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800047c:	f000 f9e0 	bl	8000840 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000484:	f107 031c 	add.w	r3, r7, #28
 8000488:	4619      	mov	r1, r3
 800048a:	4818      	ldr	r0, [pc, #96]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800048c:	f001 fa6a 	bl	8001964 <HAL_ADCEx_MultiModeConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000496:	f000 f9d3 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800049a:	2301      	movs	r3, #1
 800049c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049e:	2301      	movs	r3, #1
 80004a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004a6:	2307      	movs	r3, #7
 80004a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	480d      	ldr	r0, [pc, #52]	@ (80004ec <MX_ADC1_Init+0xf8>)
 80004b8:	f000 ff6a 	bl	8001390 <HAL_ADC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004c2:	f000 f9bd 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	4806      	ldr	r0, [pc, #24]	@ (80004ec <MX_ADC1_Init+0xf8>)
 80004d4:	f000 ff5c 	bl	8001390 <HAL_ADC_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80004de:	f000 f9af 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	@ 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000018c 	.word	0x2000018c

080004f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000506:	4b2e      	ldr	r3, [pc, #184]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000508:	4a2e      	ldr	r2, [pc, #184]	@ (80005c4 <MX_ADC2_Init+0xd4>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800050c:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000512:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800051a:	2201      	movs	r2, #1
 800051c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800051e:	4b28      	ldr	r3, [pc, #160]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000520:	2201      	movs	r2, #1
 8000522:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000524:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000534:	2201      	movs	r2, #1
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000540:	2202      	movs	r2, #2
 8000542:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000546:	2201      	movs	r2, #1
 8000548:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800054c:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800054e:	2208      	movs	r2, #8
 8000550:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000552:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000554:	2200      	movs	r2, #0
 8000556:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800055a:	2200      	movs	r2, #0
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800055e:	4818      	ldr	r0, [pc, #96]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000560:	f000 fc1a 	bl	8000d98 <HAL_ADC_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800056a:	f000 f969 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800056e:	2305      	movs	r3, #5
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000572:	2301      	movs	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800057a:	2307      	movs	r3, #7
 800057c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800058c:	f000 ff00 	bl	8001390 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000596:	f000 f953 	bl	8000840 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800059a:	2306      	movs	r3, #6
 800059c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800059e:	2302      	movs	r3, #2
 80005a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 80005a8:	f000 fef2 	bl	8001390 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80005b2:	f000 f945 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200001dc 	.word	0x200001dc
 80005c4:	50000100 	.word	0x50000100

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_I2C1_Init+0x74>)
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_I2C1_Init+0x7c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <MX_I2C1_Init+0x74>)
 8000604:	f002 f856 	bl	80026b4 <HAL_I2C_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060e:	f000 f917 	bl	8000840 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <MX_I2C1_Init+0x74>)
 8000616:	f002 f8e8 	bl	80027ea <HAL_I2CEx_ConfigAnalogFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f90e 	bl	8000840 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_I2C1_Init+0x74>)
 8000628:	f002 f92a 	bl	8002880 <HAL_I2CEx_ConfigDigitalFilter>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f905 	bl	8000840 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002b4 	.word	0x200002b4
 8000640:	40005400 	.word	0x40005400
 8000644:	2000090e 	.word	0x2000090e

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_DMA_Init+0x60>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <MX_DMA_Init+0x60>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200b      	movs	r0, #11
 8000684:	f001 fc6b 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f001 fc84 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2038      	movs	r0, #56	@ 0x38
 8000694:	f001 fc63 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000698:	2038      	movs	r0, #56	@ 0x38
 800069a:	f001 fc7c 	bl	8001f96 <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	@ 0x30
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c2:	4b5c      	ldr	r3, [pc, #368]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a5b      	ldr	r2, [pc, #364]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b59      	ldr	r3, [pc, #356]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b56      	ldr	r3, [pc, #344]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a55      	ldr	r2, [pc, #340]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b53      	ldr	r3, [pc, #332]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b50      	ldr	r3, [pc, #320]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a4f      	ldr	r2, [pc, #316]	@ (8000834 <MX_GPIO_Init+0x188>)
 80006f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b4d      	ldr	r3, [pc, #308]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b4a      	ldr	r3, [pc, #296]	@ (8000834 <MX_GPIO_Init+0x188>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a49      	ldr	r2, [pc, #292]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b47      	ldr	r3, [pc, #284]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	4b44      	ldr	r3, [pc, #272]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a43      	ldr	r2, [pc, #268]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000728:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b41      	ldr	r3, [pc, #260]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b3e      	ldr	r3, [pc, #248]	@ (8000834 <MX_GPIO_Init+0x188>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a3d      	ldr	r2, [pc, #244]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b3b      	ldr	r3, [pc, #236]	@ (8000834 <MX_GPIO_Init+0x188>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 8000752:	2200      	movs	r2, #0
 8000754:	f64d 1108 	movw	r1, #55560	@ 0xd908
 8000758:	4837      	ldr	r0, [pc, #220]	@ (8000838 <MX_GPIO_Init+0x18c>)
 800075a:	f001 ff7b 	bl	8002654 <HAL_GPIO_WritePin>
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD7_Pin LD9_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 800075e:	f64d 1308 	movw	r3, #55560	@ 0xd908
 8000762:	61fb      	str	r3, [r7, #28]
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	4830      	ldr	r0, [pc, #192]	@ (8000838 <MX_GPIO_Init+0x18c>)
 8000778:	f001 fdda 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000780:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4829      	ldr	r0, [pc, #164]	@ (8000838 <MX_GPIO_Init+0x18c>)
 8000792:	f001 fdcd 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000796:	23c0      	movs	r3, #192	@ 0xc0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f001 fdbc 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007b8:	230f      	movs	r3, #15
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007bc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	481b      	ldr	r0, [pc, #108]	@ (800083c <MX_GPIO_Init+0x190>)
 80007ce:	f001 fdaf 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007d2:	2310      	movs	r3, #16
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e0:	f107 031c 	add.w	r3, r7, #28
 80007e4:	4619      	mov	r1, r3
 80007e6:	4815      	ldr	r0, [pc, #84]	@ (800083c <MX_GPIO_Init+0x190>)
 80007e8:	f001 fda2 	bl	8002330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2006      	movs	r0, #6
 80007f2:	f001 fbb4 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007f6:	2006      	movs	r0, #6
 80007f8:	f001 fbcd 	bl	8001f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2100      	movs	r1, #0
 8000800:	2007      	movs	r0, #7
 8000802:	f001 fbac 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000806:	2007      	movs	r0, #7
 8000808:	f001 fbc5 	bl	8001f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800080c:	2200      	movs	r2, #0
 800080e:	2100      	movs	r1, #0
 8000810:	2008      	movs	r0, #8
 8000812:	f001 fba4 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000816:	2008      	movs	r0, #8
 8000818:	f001 fbbd 	bl	8001f96 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	2009      	movs	r0, #9
 8000822:	f001 fb9c 	bl	8001f5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000826:	2009      	movs	r0, #9
 8000828:	f001 fbb5 	bl	8001f96 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800082c:	bf00      	nop
 800082e:	3730      	adds	r7, #48	@ 0x30
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40021000 	.word	0x40021000
 8000838:	48001000 	.word	0x48001000
 800083c:	48000c00 	.word	0x48000c00

08000840 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000844:	b672      	cpsid	i
}
 8000846:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <Error_Handler+0x8>

0800084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <HAL_MspInit+0x44>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	4a0e      	ldr	r2, [pc, #56]	@ (8000890 <HAL_MspInit+0x44>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6193      	str	r3, [r2, #24]
 800085e:	4b0c      	ldr	r3, [pc, #48]	@ (8000890 <HAL_MspInit+0x44>)
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086a:	4b09      	ldr	r3, [pc, #36]	@ (8000890 <HAL_MspInit+0x44>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	4a08      	ldr	r2, [pc, #32]	@ (8000890 <HAL_MspInit+0x44>)
 8000870:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000874:	61d3      	str	r3, [r2, #28]
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <HAL_MspInit+0x44>)
 8000878:	69db      	ldr	r3, [r3, #28]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000882:	2007      	movs	r0, #7
 8000884:	f001 fb60 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000888:	bf00      	nop
 800088a:	3708      	adds	r7, #8
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40021000 	.word	0x40021000

08000894 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08c      	sub	sp, #48	@ 0x30
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	2200      	movs	r2, #0
 80008a2:	601a      	str	r2, [r3, #0]
 80008a4:	605a      	str	r2, [r3, #4]
 80008a6:	609a      	str	r2, [r3, #8]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008b4:	d156      	bne.n	8000964 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008b6:	4b67      	ldr	r3, [pc, #412]	@ (8000a54 <HAL_ADC_MspInit+0x1c0>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	3301      	adds	r3, #1
 80008bc:	4a65      	ldr	r2, [pc, #404]	@ (8000a54 <HAL_ADC_MspInit+0x1c0>)
 80008be:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008c0:	4b64      	ldr	r3, [pc, #400]	@ (8000a54 <HAL_ADC_MspInit+0x1c0>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b01      	cmp	r3, #1
 80008c6:	d10b      	bne.n	80008e0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008c8:	4b63      	ldr	r3, [pc, #396]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4a62      	ldr	r2, [pc, #392]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d2:	6153      	str	r3, [r2, #20]
 80008d4:	4b60      	ldr	r3, [pc, #384]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80008e2:	695b      	ldr	r3, [r3, #20]
 80008e4:	4a5c      	ldr	r2, [pc, #368]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80008e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008ea:	6153      	str	r3, [r2, #20]
 80008ec:	4b5a      	ldr	r3, [pc, #360]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80008ee:	695b      	ldr	r3, [r3, #20]
 80008f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008f4:	617b      	str	r3, [r7, #20]
 80008f6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008f8:	2303      	movs	r3, #3
 80008fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fc:	2303      	movs	r3, #3
 80008fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090e:	f001 fd0f 	bl	8002330 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000912:	4b52      	ldr	r3, [pc, #328]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 8000914:	4a52      	ldr	r2, [pc, #328]	@ (8000a60 <HAL_ADC_MspInit+0x1cc>)
 8000916:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800091e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000924:	4b4d      	ldr	r3, [pc, #308]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 8000926:	2280      	movs	r2, #128	@ 0x80
 8000928:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800092a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 800092c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000930:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000932:	4b4a      	ldr	r3, [pc, #296]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 8000934:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000938:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800093a:	4b48      	ldr	r3, [pc, #288]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 800093c:	2220      	movs	r2, #32
 800093e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000940:	4b46      	ldr	r3, [pc, #280]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000946:	4845      	ldr	r0, [pc, #276]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 8000948:	f001 fb3f 	bl	8001fca <HAL_DMA_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000952:	f7ff ff75 	bl	8000840 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a40      	ldr	r2, [pc, #256]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 800095a:	639a      	str	r2, [r3, #56]	@ 0x38
 800095c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a5c <HAL_ADC_MspInit+0x1c8>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000962:	e072      	b.n	8000a4a <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a3e      	ldr	r2, [pc, #248]	@ (8000a64 <HAL_ADC_MspInit+0x1d0>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d16d      	bne.n	8000a4a <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800096e:	4b39      	ldr	r3, [pc, #228]	@ (8000a54 <HAL_ADC_MspInit+0x1c0>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3301      	adds	r3, #1
 8000974:	4a37      	ldr	r2, [pc, #220]	@ (8000a54 <HAL_ADC_MspInit+0x1c0>)
 8000976:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000978:	4b36      	ldr	r3, [pc, #216]	@ (8000a54 <HAL_ADC_MspInit+0x1c0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d10b      	bne.n	8000998 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000980:	4b35      	ldr	r3, [pc, #212]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a34      	ldr	r2, [pc, #208]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 8000986:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800098a:	6153      	str	r3, [r2, #20]
 800098c:	4b32      	ldr	r3, [pc, #200]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000998:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 800099e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b0:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80009b2:	695b      	ldr	r3, [r3, #20]
 80009b4:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80009b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ba:	6153      	str	r3, [r2, #20]
 80009bc:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <HAL_ADC_MspInit+0x1c4>)
 80009be:	695b      	ldr	r3, [r3, #20]
 80009c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80009c8:	2311      	movs	r3, #17
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	4823      	ldr	r0, [pc, #140]	@ (8000a68 <HAL_ADC_MspInit+0x1d4>)
 80009dc:	f001 fca8 	bl	8002330 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009e0:	2320      	movs	r3, #32
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009f6:	f001 fc9b 	bl	8002330 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80009fa:	4b1c      	ldr	r3, [pc, #112]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 80009fc:	4a1c      	ldr	r2, [pc, #112]	@ (8000a70 <HAL_ADC_MspInit+0x1dc>)
 80009fe:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a00:	4b1a      	ldr	r3, [pc, #104]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b17      	ldr	r3, [pc, #92]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a0e:	2280      	movs	r2, #128	@ 0x80
 8000a10:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a12:	4b16      	ldr	r3, [pc, #88]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a14:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a18:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a1c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a20:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a24:	2220      	movs	r2, #32
 8000a26:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a28:	4b10      	ldr	r3, [pc, #64]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a2e:	480f      	ldr	r0, [pc, #60]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a30:	f001 facb 	bl	8001fca <HAL_DMA_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8000a3a:	f7ff ff01 	bl	8000840 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a42:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a44:	4a09      	ldr	r2, [pc, #36]	@ (8000a6c <HAL_ADC_MspInit+0x1d8>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000a4a:	bf00      	nop
 8000a4c:	3730      	adds	r7, #48	@ 0x30
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	20000328 	.word	0x20000328
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	2000022c 	.word	0x2000022c
 8000a60:	40020008 	.word	0x40020008
 8000a64:	50000100 	.word	0x50000100
 8000a68:	48000800 	.word	0x48000800
 8000a6c:	20000270 	.word	0x20000270
 8000a70:	40020408 	.word	0x40020408

08000a74 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a17      	ldr	r2, [pc, #92]	@ (8000af0 <HAL_I2C_MspInit+0x7c>)
 8000a92:	4293      	cmp	r3, r2
 8000a94:	d127      	bne.n	8000ae6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a96:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_I2C_MspInit+0x80>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	4a16      	ldr	r2, [pc, #88]	@ (8000af4 <HAL_I2C_MspInit+0x80>)
 8000a9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000aa0:	6153      	str	r3, [r2, #20]
 8000aa2:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_I2C_MspInit+0x80>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000aae:	23c0      	movs	r3, #192	@ 0xc0
 8000ab0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ab2:	2312      	movs	r3, #18
 8000ab4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aba:	2303      	movs	r3, #3
 8000abc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000abe:	2304      	movs	r3, #4
 8000ac0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac2:	f107 0314 	add.w	r3, r7, #20
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	480b      	ldr	r0, [pc, #44]	@ (8000af8 <HAL_I2C_MspInit+0x84>)
 8000aca:	f001 fc31 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ace:	4b09      	ldr	r3, [pc, #36]	@ (8000af4 <HAL_I2C_MspInit+0x80>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	4a08      	ldr	r2, [pc, #32]	@ (8000af4 <HAL_I2C_MspInit+0x80>)
 8000ad4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ad8:	61d3      	str	r3, [r2, #28]
 8000ada:	4b06      	ldr	r3, [pc, #24]	@ (8000af4 <HAL_I2C_MspInit+0x80>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ae2:	60fb      	str	r3, [r7, #12]
 8000ae4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	@ 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40005400 	.word	0x40005400
 8000af4:	40021000 	.word	0x40021000
 8000af8:	48000400 	.word	0x48000400

08000afc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <NMI_Handler+0x4>

08000b04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <MemManage_Handler+0x4>

08000b14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <BusFault_Handler+0x4>

08000b1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <UsageFault_Handler+0x4>

08000b24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b32:	b480      	push	{r7}
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr

08000b40 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b52:	f000 f8bf 	bl	8000cd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b5e:	2001      	movs	r0, #1
 8000b60:	f001 fd90 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b6c:	2002      	movs	r0, #2
 8000b6e:	f001 fd89 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b7a:	2004      	movs	r0, #4
 8000b7c:	f001 fd82 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b88:	2008      	movs	r0, #8
 8000b8a:	f001 fd7b 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b98:	4802      	ldr	r0, [pc, #8]	@ (8000ba4 <DMA1_Channel1_IRQHandler+0x10>)
 8000b9a:	f001 fabc 	bl	8002116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	2000022c 	.word	0x2000022c

08000ba8 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bac:	4802      	ldr	r0, [pc, #8]	@ (8000bb8 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000bae:	f001 ffa0 	bl	8002af2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	200007f8 	.word	0x200007f8

08000bbc <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000bc0:	4802      	ldr	r0, [pc, #8]	@ (8000bcc <DMA2_Channel1_IRQHandler+0x10>)
 8000bc2:	f001 faa8 	bl	8002116 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	20000270 	.word	0x20000270

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c2c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	@ (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	@ (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	@ (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	@ (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f009 f95d 	bl	8009ee0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fafb 	bl	8000220 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c2c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000c38:	08009fd8 	.word	0x08009fd8
  ldr r2, =_sbss
 8000c3c:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000c40:	20000b24 	.word	0x20000b24

08000c44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_2_IRQHandler>
	...

08000c48 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x28>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x28>)
 8000c52:	f043 0310 	orr.w	r3, r3, #16
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f001 f975 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 f808 	bl	8000c74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fdf2 	bl	800084c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40022000 	.word	0x40022000

08000c74 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c7c:	4b12      	ldr	r3, [pc, #72]	@ (8000cc8 <HAL_InitTick+0x54>)
 8000c7e:	681a      	ldr	r2, [r3, #0]
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <HAL_InitTick+0x58>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	4619      	mov	r1, r3
 8000c86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 f98d 	bl	8001fb2 <HAL_SYSTICK_Config>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00e      	b.n	8000cc0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2b0f      	cmp	r3, #15
 8000ca6:	d80a      	bhi.n	8000cbe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	6879      	ldr	r1, [r7, #4]
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb0:	f001 f955 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb4:	4a06      	ldr	r2, [pc, #24]	@ (8000cd0 <HAL_InitTick+0x5c>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e000      	b.n	8000cc0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cbe:	2301      	movs	r3, #1
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	20000008 	.word	0x20000008
 8000cd0:	20000004 	.word	0x20000004

08000cd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd8:	4b06      	ldr	r3, [pc, #24]	@ (8000cf4 <HAL_IncTick+0x20>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4413      	add	r3, r2
 8000ce4:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <HAL_IncTick+0x24>)
 8000ce6:	6013      	str	r3, [r2, #0]
}
 8000ce8:	bf00      	nop
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	20000008 	.word	0x20000008
 8000cf8:	2000032c 	.word	0x2000032c

08000cfc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d00:	4b03      	ldr	r3, [pc, #12]	@ (8000d10 <HAL_GetTick+0x14>)
 8000d02:	681b      	ldr	r3, [r3, #0]
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	2000032c 	.word	0x2000032c

08000d14 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d1c:	f7ff ffee 	bl	8000cfc <HAL_GetTick>
 8000d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d2c:	d005      	beq.n	8000d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <HAL_Delay+0x44>)
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d3a:	bf00      	nop
 8000d3c:	f7ff ffde 	bl	8000cfc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	68bb      	ldr	r3, [r7, #8]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	d8f7      	bhi.n	8000d3c <HAL_Delay+0x28>
  {
  }
}
 8000d4c:	bf00      	nop
 8000d4e:	bf00      	nop
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008

08000d5c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr

08000d70 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b09a      	sub	sp, #104	@ 0x68
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da0:	2300      	movs	r3, #0
 8000da2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000db4:	2301      	movs	r3, #1
 8000db6:	e1c9      	b.n	800114c <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc2:	f003 0310 	and.w	r3, r3, #16
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d176      	bne.n	8000eb8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d152      	bne.n	8000e78 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2200      	movs	r2, #0
 8000de2:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f7ff fd51 	bl	8000894 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d13b      	bne.n	8000e78 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 ff6b 	bl	8001cdc <ADC_Disable>
 8000e06:	4603      	mov	r3, r0
 8000e08:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e10:	f003 0310 	and.w	r3, r3, #16
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d12f      	bne.n	8000e78 <HAL_ADC_Init+0xe0>
 8000e18:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d12b      	bne.n	8000e78 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e24:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e28:	f023 0302 	bic.w	r3, r3, #2
 8000e2c:	f043 0202 	orr.w	r2, r3, #2
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e42:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e52:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e54:	4b86      	ldr	r3, [pc, #536]	@ (8001070 <HAL_ADC_Init+0x2d8>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a86      	ldr	r2, [pc, #536]	@ (8001074 <HAL_ADC_Init+0x2dc>)
 8000e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e5e:	0c9a      	lsrs	r2, r3, #18
 8000e60:	4613      	mov	r3, r2
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	4413      	add	r3, r2
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e6a:	e002      	b.n	8000e72 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1f9      	bne.n	8000e6c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689b      	ldr	r3, [r3, #8]
 8000e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e94:	d110      	bne.n	8000eb8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9a:	f023 0312 	bic.w	r3, r3, #18
 8000e9e:	f043 0210 	orr.w	r2, r3, #16
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eaa:	f043 0201 	orr.w	r2, r3, #1
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	f003 0310 	and.w	r3, r3, #16
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f040 8136 	bne.w	8001132 <HAL_ADC_Init+0x39a>
 8000ec6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 8131 	bne.w	8001132 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	f040 8129 	bne.w	8001132 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ee4:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ee8:	f043 0202 	orr.w	r2, r3, #2
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ef8:	d004      	beq.n	8000f04 <HAL_ADC_Init+0x16c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4a5e      	ldr	r2, [pc, #376]	@ (8001078 <HAL_ADC_Init+0x2e0>)
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d101      	bne.n	8000f08 <HAL_ADC_Init+0x170>
 8000f04:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_ADC_Init+0x2e4>)
 8000f06:	e000      	b.n	8000f0a <HAL_ADC_Init+0x172>
 8000f08:	4b5d      	ldr	r3, [pc, #372]	@ (8001080 <HAL_ADC_Init+0x2e8>)
 8000f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f14:	d102      	bne.n	8000f1c <HAL_ADC_Init+0x184>
 8000f16:	4b58      	ldr	r3, [pc, #352]	@ (8001078 <HAL_ADC_Init+0x2e0>)
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	e01a      	b.n	8000f52 <HAL_ADC_Init+0x1ba>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a55      	ldr	r2, [pc, #340]	@ (8001078 <HAL_ADC_Init+0x2e0>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d103      	bne.n	8000f2e <HAL_ADC_Init+0x196>
 8000f26:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	e011      	b.n	8000f52 <HAL_ADC_Init+0x1ba>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a54      	ldr	r2, [pc, #336]	@ (8001084 <HAL_ADC_Init+0x2ec>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d102      	bne.n	8000f3e <HAL_ADC_Init+0x1a6>
 8000f38:	4b53      	ldr	r3, [pc, #332]	@ (8001088 <HAL_ADC_Init+0x2f0>)
 8000f3a:	60fb      	str	r3, [r7, #12]
 8000f3c:	e009      	b.n	8000f52 <HAL_ADC_Init+0x1ba>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a51      	ldr	r2, [pc, #324]	@ (8001088 <HAL_ADC_Init+0x2f0>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d102      	bne.n	8000f4e <HAL_ADC_Init+0x1b6>
 8000f48:	4b4e      	ldr	r3, [pc, #312]	@ (8001084 <HAL_ADC_Init+0x2ec>)
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e001      	b.n	8000f52 <HAL_ADC_Init+0x1ba>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	f003 0303 	and.w	r3, r3, #3
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d108      	bne.n	8000f72 <HAL_ADC_Init+0x1da>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d101      	bne.n	8000f72 <HAL_ADC_Init+0x1da>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e000      	b.n	8000f74 <HAL_ADC_Init+0x1dc>
 8000f72:	2300      	movs	r3, #0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11c      	bne.n	8000fb2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d010      	beq.n	8000fa0 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d107      	bne.n	8000f9a <HAL_ADC_Init+0x202>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d101      	bne.n	8000f9a <HAL_ADC_Init+0x202>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_ADC_Init+0x204>
 8000f9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d108      	bne.n	8000fb2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000fa0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	431a      	orrs	r2, r3
 8000fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000fb0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7e5b      	ldrb	r3, [r3, #25]
 8000fb6:	035b      	lsls	r3, r3, #13
 8000fb8:	687a      	ldr	r2, [r7, #4]
 8000fba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000fbc:	2a01      	cmp	r2, #1
 8000fbe:	d002      	beq.n	8000fc6 <HAL_ADC_Init+0x22e>
 8000fc0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fc4:	e000      	b.n	8000fc8 <HAL_ADC_Init+0x230>
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d11b      	bne.n	800101e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	7e5b      	ldrb	r3, [r3, #25]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d109      	bne.n	8001002 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	045a      	lsls	r2, r3, #17
 8000ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ffe:	663b      	str	r3, [r7, #96]	@ 0x60
 8001000:	e00d      	b.n	800101e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800100a:	f043 0220 	orr.w	r2, r3, #32
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001022:	2b01      	cmp	r3, #1
 8001024:	d03a      	beq.n	800109c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a16      	ldr	r2, [pc, #88]	@ (8001084 <HAL_ADC_Init+0x2ec>)
 800102c:	4293      	cmp	r3, r2
 800102e:	d004      	beq.n	800103a <HAL_ADC_Init+0x2a2>
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a14      	ldr	r2, [pc, #80]	@ (8001088 <HAL_ADC_Init+0x2f0>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d128      	bne.n	800108c <HAL_ADC_Init+0x2f4>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103e:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001042:	d012      	beq.n	800106a <HAL_ADC_Init+0x2d2>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001048:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800104c:	d00a      	beq.n	8001064 <HAL_ADC_Init+0x2cc>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001052:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001056:	d002      	beq.n	800105e <HAL_ADC_Init+0x2c6>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105c:	e018      	b.n	8001090 <HAL_ADC_Init+0x2f8>
 800105e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001062:	e015      	b.n	8001090 <HAL_ADC_Init+0x2f8>
 8001064:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001068:	e012      	b.n	8001090 <HAL_ADC_Init+0x2f8>
 800106a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800106e:	e00f      	b.n	8001090 <HAL_ADC_Init+0x2f8>
 8001070:	20000000 	.word	0x20000000
 8001074:	431bde83 	.word	0x431bde83
 8001078:	50000100 	.word	0x50000100
 800107c:	50000300 	.word	0x50000300
 8001080:	50000700 	.word	0x50000700
 8001084:	50000400 	.word	0x50000400
 8001088:	50000500 	.word	0x50000500
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001094:	4313      	orrs	r3, r2
 8001096:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001098:	4313      	orrs	r3, r2
 800109a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d114      	bne.n	80010d4 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010b8:	f023 0302 	bic.w	r3, r3, #2
 80010bc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7e1b      	ldrb	r3, [r3, #24]
 80010c2:	039a      	lsls	r2, r3, #14
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4313      	orrs	r3, r2
 80010ce:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010d0:	4313      	orrs	r3, r2
 80010d2:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	4b1e      	ldr	r3, [pc, #120]	@ (8001154 <HAL_ADC_Init+0x3bc>)
 80010dc:	4013      	ands	r3, r2
 80010de:	687a      	ldr	r2, [r7, #4]
 80010e0:	6812      	ldr	r2, [r2, #0]
 80010e2:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80010e4:	430b      	orrs	r3, r1
 80010e6:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d10c      	bne.n	800110a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f023 010f 	bic.w	r1, r3, #15
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	1e5a      	subs	r2, r3, #1
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	430a      	orrs	r2, r1
 8001106:	631a      	str	r2, [r3, #48]	@ 0x30
 8001108:	e007      	b.n	800111a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 020f 	bic.w	r2, r2, #15
 8001118:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001124:	f023 0303 	bic.w	r3, r3, #3
 8001128:	f043 0201 	orr.w	r2, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001130:	e00a      	b.n	8001148 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001136:	f023 0312 	bic.w	r3, r3, #18
 800113a:	f043 0210 	orr.w	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001142:	2301      	movs	r3, #1
 8001144:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001148:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800114c:	4618      	mov	r0, r3
 800114e:	3768      	adds	r7, #104	@ 0x68
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	fff0c007 	.word	0xfff0c007

08001158 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	2b00      	cmp	r3, #0
 8001174:	f040 80f7 	bne.w	8001366 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800117e:	2b01      	cmp	r3, #1
 8001180:	d101      	bne.n	8001186 <HAL_ADC_Start_DMA+0x2e>
 8001182:	2302      	movs	r3, #2
 8001184:	e0f2      	b.n	800136c <HAL_ADC_Start_DMA+0x214>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2201      	movs	r2, #1
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001196:	d004      	beq.n	80011a2 <HAL_ADC_Start_DMA+0x4a>
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a75      	ldr	r2, [pc, #468]	@ (8001374 <HAL_ADC_Start_DMA+0x21c>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d109      	bne.n	80011b6 <HAL_ADC_Start_DMA+0x5e>
 80011a2:	4b75      	ldr	r3, [pc, #468]	@ (8001378 <HAL_ADC_Start_DMA+0x220>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	bf0c      	ite	eq
 80011ae:	2301      	moveq	r3, #1
 80011b0:	2300      	movne	r3, #0
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	e008      	b.n	80011c8 <HAL_ADC_Start_DMA+0x70>
 80011b6:	4b71      	ldr	r3, [pc, #452]	@ (800137c <HAL_ADC_Start_DMA+0x224>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f003 031f 	and.w	r3, r3, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	bf0c      	ite	eq
 80011c2:	2301      	moveq	r3, #1
 80011c4:	2300      	movne	r3, #0
 80011c6:	b2db      	uxtb	r3, r3
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	f000 80c5 	beq.w	8001358 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011ce:	68f8      	ldr	r0, [r7, #12]
 80011d0:	f000 fd20 	bl	8001c14 <ADC_Enable>
 80011d4:	4603      	mov	r3, r0
 80011d6:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011d8:	7dfb      	ldrb	r3, [r7, #23]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f040 80b7 	bne.w	800134e <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011e8:	f023 0301 	bic.w	r3, r3, #1
 80011ec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011fc:	d004      	beq.n	8001208 <HAL_ADC_Start_DMA+0xb0>
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a5c      	ldr	r2, [pc, #368]	@ (8001374 <HAL_ADC_Start_DMA+0x21c>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d106      	bne.n	8001216 <HAL_ADC_Start_DMA+0xbe>
 8001208:	4b5b      	ldr	r3, [pc, #364]	@ (8001378 <HAL_ADC_Start_DMA+0x220>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 031f 	and.w	r3, r3, #31
 8001210:	2b00      	cmp	r3, #0
 8001212:	d010      	beq.n	8001236 <HAL_ADC_Start_DMA+0xde>
 8001214:	e005      	b.n	8001222 <HAL_ADC_Start_DMA+0xca>
 8001216:	4b59      	ldr	r3, [pc, #356]	@ (800137c <HAL_ADC_Start_DMA+0x224>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2b00      	cmp	r3, #0
 8001220:	d009      	beq.n	8001236 <HAL_ADC_Start_DMA+0xde>
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800122a:	d004      	beq.n	8001236 <HAL_ADC_Start_DMA+0xde>
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a53      	ldr	r2, [pc, #332]	@ (8001380 <HAL_ADC_Start_DMA+0x228>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d115      	bne.n	8001262 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d036      	beq.n	80012be <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001254:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001258:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001260:	e02d      	b.n	80012be <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001266:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001276:	d004      	beq.n	8001282 <HAL_ADC_Start_DMA+0x12a>
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a3d      	ldr	r2, [pc, #244]	@ (8001374 <HAL_ADC_Start_DMA+0x21c>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d10a      	bne.n	8001298 <HAL_ADC_Start_DMA+0x140>
 8001282:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128c:	2b00      	cmp	r3, #0
 800128e:	bf14      	ite	ne
 8001290:	2301      	movne	r3, #1
 8001292:	2300      	moveq	r3, #0
 8001294:	b2db      	uxtb	r3, r3
 8001296:	e008      	b.n	80012aa <HAL_ADC_Start_DMA+0x152>
 8001298:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <HAL_ADC_Start_DMA+0x228>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	bf14      	ite	ne
 80012a4:	2301      	movne	r3, #1
 80012a6:	2300      	moveq	r3, #0
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d007      	beq.n	80012be <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012b6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012ca:	d106      	bne.n	80012da <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012d0:	f023 0206 	bic.w	r2, r3, #6
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	645a      	str	r2, [r3, #68]	@ 0x44
 80012d8:	e002      	b.n	80012e0 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2200      	movs	r2, #0
 80012de:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2200      	movs	r2, #0
 80012e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012ec:	4a25      	ldr	r2, [pc, #148]	@ (8001384 <HAL_ADC_Start_DMA+0x22c>)
 80012ee:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012f4:	4a24      	ldr	r2, [pc, #144]	@ (8001388 <HAL_ADC_Start_DMA+0x230>)
 80012f6:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012fc:	4a23      	ldr	r2, [pc, #140]	@ (800138c <HAL_ADC_Start_DMA+0x234>)
 80012fe:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	221c      	movs	r2, #28
 8001306:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f042 0210 	orr.w	r2, r2, #16
 8001316:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
 8001326:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	3340      	adds	r3, #64	@ 0x40
 8001332:	4619      	mov	r1, r3
 8001334:	68ba      	ldr	r2, [r7, #8]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	f000 fe8e 	bl	8002058 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	689a      	ldr	r2, [r3, #8]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f042 0204 	orr.w	r2, r2, #4
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	e00d      	b.n	800136a <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2200      	movs	r2, #0
 8001352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001356:	e008      	b.n	800136a <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001364:	e001      	b.n	800136a <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001366:	2302      	movs	r3, #2
 8001368:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800136a:	7dfb      	ldrb	r3, [r7, #23]
}
 800136c:	4618      	mov	r0, r3
 800136e:	3718      	adds	r7, #24
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	50000100 	.word	0x50000100
 8001378:	50000300 	.word	0x50000300
 800137c:	50000700 	.word	0x50000700
 8001380:	50000400 	.word	0x50000400
 8001384:	08001b49 	.word	0x08001b49
 8001388:	08001bc3 	.word	0x08001bc3
 800138c:	08001bdf 	.word	0x08001bdf

08001390 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001390:	b480      	push	{r7}
 8001392:	b09b      	sub	sp, #108	@ 0x6c
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d101      	bne.n	80013b2 <HAL_ADC_ConfigChannel+0x22>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e2c8      	b.n	8001944 <HAL_ADC_ConfigChannel+0x5b4>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2201      	movs	r2, #1
 80013b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f040 82ac 	bne.w	8001922 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d81c      	bhi.n	800140c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685a      	ldr	r2, [r3, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	461a      	mov	r2, r3
 80013e6:	231f      	movs	r3, #31
 80013e8:	4093      	lsls	r3, r2
 80013ea:	43db      	mvns	r3, r3
 80013ec:	4019      	ands	r1, r3
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	6818      	ldr	r0, [r3, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	fa00 f203 	lsl.w	r2, r0, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	430a      	orrs	r2, r1
 8001408:	631a      	str	r2, [r3, #48]	@ 0x30
 800140a:	e063      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b09      	cmp	r3, #9
 8001412:	d81e      	bhi.n	8001452 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	685a      	ldr	r2, [r3, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	3b1e      	subs	r3, #30
 8001428:	221f      	movs	r2, #31
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	4019      	ands	r1, r3
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	6818      	ldr	r0, [r3, #0]
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	3b1e      	subs	r3, #30
 8001444:	fa00 f203 	lsl.w	r2, r0, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001450:	e040      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	2b0e      	cmp	r3, #14
 8001458:	d81e      	bhi.n	8001498 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	4413      	add	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	3b3c      	subs	r3, #60	@ 0x3c
 800146e:	221f      	movs	r2, #31
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	4019      	ands	r1, r3
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	6818      	ldr	r0, [r3, #0]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685a      	ldr	r2, [r3, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4413      	add	r3, r2
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	3b3c      	subs	r3, #60	@ 0x3c
 800148a:	fa00 f203 	lsl.w	r2, r0, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	430a      	orrs	r2, r1
 8001494:	639a      	str	r2, [r3, #56]	@ 0x38
 8001496:	e01d      	b.n	80014d4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	4413      	add	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	3b5a      	subs	r3, #90	@ 0x5a
 80014ac:	221f      	movs	r2, #31
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43db      	mvns	r3, r3
 80014b4:	4019      	ands	r1, r3
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	6818      	ldr	r0, [r3, #0]
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	3b5a      	subs	r3, #90	@ 0x5a
 80014c8:	fa00 f203 	lsl.w	r2, r0, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	f003 030c 	and.w	r3, r3, #12
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f040 80e5 	bne.w	80016ae <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	2b09      	cmp	r3, #9
 80014ea:	d91c      	bls.n	8001526 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	6999      	ldr	r1, [r3, #24]
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	3b1e      	subs	r3, #30
 80014fe:	2207      	movs	r2, #7
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	4019      	ands	r1, r3
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	6898      	ldr	r0, [r3, #8]
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4613      	mov	r3, r2
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	4413      	add	r3, r2
 8001516:	3b1e      	subs	r3, #30
 8001518:	fa00 f203 	lsl.w	r2, r0, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	430a      	orrs	r2, r1
 8001522:	619a      	str	r2, [r3, #24]
 8001524:	e019      	b.n	800155a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6959      	ldr	r1, [r3, #20]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	2207      	movs	r2, #7
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43db      	mvns	r3, r3
 800153e:	4019      	ands	r1, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	6898      	ldr	r0, [r3, #8]
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	fa00 f203 	lsl.w	r2, r0, r3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	430a      	orrs	r2, r1
 8001558:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	695a      	ldr	r2, [r3, #20]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	08db      	lsrs	r3, r3, #3
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	005b      	lsls	r3, r3, #1
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691b      	ldr	r3, [r3, #16]
 8001576:	3b01      	subs	r3, #1
 8001578:	2b03      	cmp	r3, #3
 800157a:	d84f      	bhi.n	800161c <HAL_ADC_ConfigChannel+0x28c>
 800157c:	a201      	add	r2, pc, #4	@ (adr r2, 8001584 <HAL_ADC_ConfigChannel+0x1f4>)
 800157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001582:	bf00      	nop
 8001584:	08001595 	.word	0x08001595
 8001588:	080015b7 	.word	0x080015b7
 800158c:	080015d9 	.word	0x080015d9
 8001590:	080015fb 	.word	0x080015fb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800159a:	4b99      	ldr	r3, [pc, #612]	@ (8001800 <HAL_ADC_ConfigChannel+0x470>)
 800159c:	4013      	ands	r3, r2
 800159e:	683a      	ldr	r2, [r7, #0]
 80015a0:	6812      	ldr	r2, [r2, #0]
 80015a2:	0691      	lsls	r1, r2, #26
 80015a4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015a6:	430a      	orrs	r2, r1
 80015a8:	431a      	orrs	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015b2:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015b4:	e07b      	b.n	80016ae <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015bc:	4b90      	ldr	r3, [pc, #576]	@ (8001800 <HAL_ADC_ConfigChannel+0x470>)
 80015be:	4013      	ands	r3, r2
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	0691      	lsls	r1, r2, #26
 80015c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015c8:	430a      	orrs	r2, r1
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015d4:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015d6:	e06a      	b.n	80016ae <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015de:	4b88      	ldr	r3, [pc, #544]	@ (8001800 <HAL_ADC_ConfigChannel+0x470>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	683a      	ldr	r2, [r7, #0]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	0691      	lsls	r1, r2, #26
 80015e8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015ea:	430a      	orrs	r2, r1
 80015ec:	431a      	orrs	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015f6:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015f8:	e059      	b.n	80016ae <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001600:	4b7f      	ldr	r3, [pc, #508]	@ (8001800 <HAL_ADC_ConfigChannel+0x470>)
 8001602:	4013      	ands	r3, r2
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	0691      	lsls	r1, r2, #26
 800160a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800160c:	430a      	orrs	r2, r1
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001618:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800161a:	e048      	b.n	80016ae <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	069b      	lsls	r3, r3, #26
 800162c:	429a      	cmp	r2, r3
 800162e:	d107      	bne.n	8001640 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800163e:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001646:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	069b      	lsls	r3, r3, #26
 8001650:	429a      	cmp	r2, r3
 8001652:	d107      	bne.n	8001664 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001662:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800166a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	069b      	lsls	r3, r3, #26
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001686:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800168e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	069b      	lsls	r3, r3, #26
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016aa:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80016ac:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d108      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x33e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d101      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x33e>
 80016ca:	2301      	movs	r3, #1
 80016cc:	e000      	b.n	80016d0 <HAL_ADC_ConfigChannel+0x340>
 80016ce:	2300      	movs	r3, #0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	f040 8131 	bne.w	8001938 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d00f      	beq.n	80016fe <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2201      	movs	r2, #1
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	43da      	mvns	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	400a      	ands	r2, r1
 80016f8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80016fc:	e049      	b.n	8001792 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	409a      	lsls	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b09      	cmp	r3, #9
 800171e:	d91c      	bls.n	800175a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6999      	ldr	r1, [r3, #24]
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	3b1b      	subs	r3, #27
 8001732:	2207      	movs	r2, #7
 8001734:	fa02 f303 	lsl.w	r3, r2, r3
 8001738:	43db      	mvns	r3, r3
 800173a:	4019      	ands	r1, r3
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6898      	ldr	r0, [r3, #8]
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4613      	mov	r3, r2
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	4413      	add	r3, r2
 800174a:	3b1b      	subs	r3, #27
 800174c:	fa00 f203 	lsl.w	r2, r0, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	619a      	str	r2, [r3, #24]
 8001758:	e01b      	b.n	8001792 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6959      	ldr	r1, [r3, #20]
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	2207      	movs	r2, #7
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43db      	mvns	r3, r3
 8001774:	4019      	ands	r1, r3
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	6898      	ldr	r0, [r3, #8]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	1c5a      	adds	r2, r3, #1
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	fa00 f203 	lsl.w	r2, r0, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800179a:	d004      	beq.n	80017a6 <HAL_ADC_ConfigChannel+0x416>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a18      	ldr	r2, [pc, #96]	@ (8001804 <HAL_ADC_ConfigChannel+0x474>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d101      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x41a>
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <HAL_ADC_ConfigChannel+0x478>)
 80017a8:	e000      	b.n	80017ac <HAL_ADC_ConfigChannel+0x41c>
 80017aa:	4b18      	ldr	r3, [pc, #96]	@ (800180c <HAL_ADC_ConfigChannel+0x47c>)
 80017ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b10      	cmp	r3, #16
 80017b4:	d105      	bne.n	80017c2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d015      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017c6:	2b11      	cmp	r3, #17
 80017c8:	d105      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d00b      	beq.n	80017ee <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017da:	2b12      	cmp	r3, #18
 80017dc:	f040 80ac 	bne.w	8001938 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f040 80a5 	bne.w	8001938 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f6:	d10b      	bne.n	8001810 <HAL_ADC_ConfigChannel+0x480>
 80017f8:	4b02      	ldr	r3, [pc, #8]	@ (8001804 <HAL_ADC_ConfigChannel+0x474>)
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	e023      	b.n	8001846 <HAL_ADC_ConfigChannel+0x4b6>
 80017fe:	bf00      	nop
 8001800:	83fff000 	.word	0x83fff000
 8001804:	50000100 	.word	0x50000100
 8001808:	50000300 	.word	0x50000300
 800180c:	50000700 	.word	0x50000700
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a4e      	ldr	r2, [pc, #312]	@ (8001950 <HAL_ADC_ConfigChannel+0x5c0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d103      	bne.n	8001822 <HAL_ADC_ConfigChannel+0x492>
 800181a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	e011      	b.n	8001846 <HAL_ADC_ConfigChannel+0x4b6>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a4b      	ldr	r2, [pc, #300]	@ (8001954 <HAL_ADC_ConfigChannel+0x5c4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d102      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x4a2>
 800182c:	4b4a      	ldr	r3, [pc, #296]	@ (8001958 <HAL_ADC_ConfigChannel+0x5c8>)
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e009      	b.n	8001846 <HAL_ADC_ConfigChannel+0x4b6>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a48      	ldr	r2, [pc, #288]	@ (8001958 <HAL_ADC_ConfigChannel+0x5c8>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d102      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x4b2>
 800183c:	4b45      	ldr	r3, [pc, #276]	@ (8001954 <HAL_ADC_ConfigChannel+0x5c4>)
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	e001      	b.n	8001846 <HAL_ADC_ConfigChannel+0x4b6>
 8001842:	2300      	movs	r3, #0
 8001844:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d108      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x4d6>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_ConfigChannel+0x4d6>
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_ADC_ConfigChannel+0x4d8>
 8001866:	2300      	movs	r3, #0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d150      	bne.n	800190e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800186c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800186e:	2b00      	cmp	r3, #0
 8001870:	d010      	beq.n	8001894 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 0303 	and.w	r3, r3, #3
 800187a:	2b01      	cmp	r3, #1
 800187c:	d107      	bne.n	800188e <HAL_ADC_ConfigChannel+0x4fe>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b01      	cmp	r3, #1
 8001888:	d101      	bne.n	800188e <HAL_ADC_ConfigChannel+0x4fe>
 800188a:	2301      	movs	r3, #1
 800188c:	e000      	b.n	8001890 <HAL_ADC_ConfigChannel+0x500>
 800188e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001890:	2b00      	cmp	r3, #0
 8001892:	d13c      	bne.n	800190e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b10      	cmp	r3, #16
 800189a:	d11d      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x548>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018a4:	d118      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80018ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018b0:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b2:	4b2a      	ldr	r3, [pc, #168]	@ (800195c <HAL_ADC_ConfigChannel+0x5cc>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001960 <HAL_ADC_ConfigChannel+0x5d0>)
 80018b8:	fba2 2303 	umull	r2, r3, r2, r3
 80018bc:	0c9a      	lsrs	r2, r3, #18
 80018be:	4613      	mov	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	4413      	add	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018c8:	e002      	b.n	80018d0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	3b01      	subs	r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1f9      	bne.n	80018ca <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018d6:	e02e      	b.n	8001936 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2b11      	cmp	r3, #17
 80018de:	d10b      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x568>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018e8:	d106      	bne.n	80018f8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80018f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018f4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f6:	e01e      	b.n	8001936 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	2b12      	cmp	r3, #18
 80018fe:	d11a      	bne.n	8001936 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001900:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001908:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800190a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800190c:	e013      	b.n	8001936 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f043 0220 	orr.w	r2, r3, #32
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001920:	e00a      	b.n	8001938 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001926:	f043 0220 	orr.w	r2, r3, #32
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001934:	e000      	b.n	8001938 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001936:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001940:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001944:	4618      	mov	r0, r3
 8001946:	376c      	adds	r7, #108	@ 0x6c
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr
 8001950:	50000100 	.word	0x50000100
 8001954:	50000400 	.word	0x50000400
 8001958:	50000500 	.word	0x50000500
 800195c:	20000000 	.word	0x20000000
 8001960:	431bde83 	.word	0x431bde83

08001964 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001964:	b480      	push	{r7}
 8001966:	b099      	sub	sp, #100	@ 0x64
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800197c:	d102      	bne.n	8001984 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800197e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001980:	60bb      	str	r3, [r7, #8]
 8001982:	e01a      	b.n	80019ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	4a6a      	ldr	r2, [pc, #424]	@ (8001b34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d103      	bne.n	8001996 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800198e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	e011      	b.n	80019ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a67      	ldr	r2, [pc, #412]	@ (8001b38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d102      	bne.n	80019a6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80019a0:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	e009      	b.n	80019ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a64      	ldr	r2, [pc, #400]	@ (8001b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d102      	bne.n	80019b6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80019b0:	4b61      	ldr	r3, [pc, #388]	@ (8001b38 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	e001      	b.n	80019ba <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d101      	bne.n	80019c4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e0b0      	b.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d101      	bne.n	80019d2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80019ce:	2302      	movs	r3, #2
 80019d0:	e0a9      	b.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2201      	movs	r2, #1
 80019d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f003 0304 	and.w	r3, r3, #4
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	f040 808d 	bne.w	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	f040 8086 	bne.w	8001b04 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a00:	d004      	beq.n	8001a0c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a4b      	ldr	r2, [pc, #300]	@ (8001b34 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001a0c:	4b4c      	ldr	r3, [pc, #304]	@ (8001b40 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001a0e:	e000      	b.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001a10:	4b4c      	ldr	r3, [pc, #304]	@ (8001b44 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001a12:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d040      	beq.n	8001a9e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	6859      	ldr	r1, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a2e:	035b      	lsls	r3, r3, #13
 8001a30:	430b      	orrs	r3, r1
 8001a32:	431a      	orrs	r2, r3
 8001a34:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a36:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d108      	bne.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0301 	and.w	r3, r3, #1
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d101      	bne.n	8001a58 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a54:	2301      	movs	r3, #1
 8001a56:	e000      	b.n	8001a5a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d15c      	bne.n	8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 0303 	and.w	r3, r3, #3
 8001a66:	2b01      	cmp	r3, #1
 8001a68:	d107      	bne.n	8001a7a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d101      	bne.n	8001a7a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a76:	2301      	movs	r3, #1
 8001a78:	e000      	b.n	8001a7c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a7a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d14b      	bne.n	8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001a88:	f023 030f 	bic.w	r3, r3, #15
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	6811      	ldr	r1, [r2, #0]
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	6892      	ldr	r2, [r2, #8]
 8001a94:	430a      	orrs	r2, r1
 8001a96:	431a      	orrs	r2, r3
 8001a98:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a9a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a9c:	e03c      	b.n	8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aa8:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d108      	bne.n	8001aca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d101      	bne.n	8001aca <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001aca:	2300      	movs	r3, #0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d123      	bne.n	8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 0303 	and.w	r3, r3, #3
 8001ad8:	2b01      	cmp	r3, #1
 8001ada:	d107      	bne.n	8001aec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d101      	bne.n	8001aec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e000      	b.n	8001aee <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001aec:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d112      	bne.n	8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001af2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001afa:	f023 030f 	bic.w	r3, r3, #15
 8001afe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b00:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b02:	e009      	b.n	8001b18 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b08:	f043 0220 	orr.w	r2, r3, #32
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001b16:	e000      	b.n	8001b1a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b18:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b22:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001b26:	4618      	mov	r0, r3
 8001b28:	3764      	adds	r7, #100	@ 0x64
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	50000100 	.word	0x50000100
 8001b38:	50000400 	.word	0x50000400
 8001b3c:	50000500 	.word	0x50000500
 8001b40:	50000300 	.word	0x50000300
 8001b44:	50000700 	.word	0x50000700

08001b48 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b54:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d126      	bne.n	8001bb0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d115      	bne.n	8001ba8 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d111      	bne.n	8001ba8 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d105      	bne.n	8001ba8 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0201 	orr.w	r2, r3, #1
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f7ff f8d7 	bl	8000d5c <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001bae:	e004      	b.n	8001bba <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	4798      	blx	r3
}
 8001bba:	bf00      	nop
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b084      	sub	sp, #16
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bce:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bd0:	68f8      	ldr	r0, [r7, #12]
 8001bd2:	f7ff f8cd 	bl	8000d70 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001bd6:	bf00      	nop
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b084      	sub	sp, #16
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bea:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bfc:	f043 0204 	orr.w	r2, r3, #4
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff f8bd 	bl	8000d84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f003 0303 	and.w	r3, r3, #3
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d108      	bne.n	8001c40 <ADC_Enable+0x2c>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d101      	bne.n	8001c40 <ADC_Enable+0x2c>
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e000      	b.n	8001c42 <ADC_Enable+0x2e>
 8001c40:	2300      	movs	r3, #0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d143      	bne.n	8001cce <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	4b22      	ldr	r3, [pc, #136]	@ (8001cd8 <ADC_Enable+0xc4>)
 8001c4e:	4013      	ands	r3, r2
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d00d      	beq.n	8001c70 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	f043 0210 	orr.w	r2, r3, #16
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c64:	f043 0201 	orr.w	r2, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e02f      	b.n	8001cd0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c80:	f7ff f83c 	bl	8000cfc <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c86:	e01b      	b.n	8001cc0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c88:	f7ff f838 	bl	8000cfc <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d914      	bls.n	8001cc0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d00d      	beq.n	8001cc0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca8:	f043 0210 	orr.w	r2, r3, #16
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb4:	f043 0201 	orr.w	r2, r3, #1
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e007      	b.n	8001cd0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0301 	and.w	r3, r3, #1
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d1dc      	bne.n	8001c88 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3710      	adds	r7, #16
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	8000003f 	.word	0x8000003f

08001cdc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b084      	sub	sp, #16
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0303 	and.w	r3, r3, #3
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d108      	bne.n	8001d08 <ADC_Disable+0x2c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d101      	bne.n	8001d08 <ADC_Disable+0x2c>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <ADC_Disable+0x2e>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d047      	beq.n	8001d9e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f003 030d 	and.w	r3, r3, #13
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d10f      	bne.n	8001d3c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f042 0202 	orr.w	r2, r2, #2
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2203      	movs	r2, #3
 8001d32:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d34:	f7fe ffe2 	bl	8000cfc <HAL_GetTick>
 8001d38:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d3a:	e029      	b.n	8001d90 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d40:	f043 0210 	orr.w	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e023      	b.n	8001da0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d58:	f7fe ffd0 	bl	8000cfc <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d914      	bls.n	8001d90 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f003 0301 	and.w	r3, r3, #1
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d10d      	bne.n	8001d90 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	f043 0210 	orr.w	r2, r3, #16
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d84:	f043 0201 	orr.w	r2, r3, #1
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e007      	b.n	8001da0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d0dc      	beq.n	8001d58 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d9e:	2300      	movs	r3, #0
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	@ (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4907      	ldr	r1, [pc, #28]	@ (8001e44 <__NVIC_EnableIRQ+0x38>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	e000e100 	.word	0xe000e100

08001e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b083      	sub	sp, #12
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	4603      	mov	r3, r0
 8001e50:	6039      	str	r1, [r7, #0]
 8001e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	db0a      	blt.n	8001e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	b2da      	uxtb	r2, r3
 8001e60:	490c      	ldr	r1, [pc, #48]	@ (8001e94 <__NVIC_SetPriority+0x4c>)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	0112      	lsls	r2, r2, #4
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	440b      	add	r3, r1
 8001e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e70:	e00a      	b.n	8001e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4908      	ldr	r1, [pc, #32]	@ (8001e98 <__NVIC_SetPriority+0x50>)
 8001e78:	79fb      	ldrb	r3, [r7, #7]
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	3b04      	subs	r3, #4
 8001e80:	0112      	lsls	r2, r2, #4
 8001e82:	b2d2      	uxtb	r2, r2
 8001e84:	440b      	add	r3, r1
 8001e86:	761a      	strb	r2, [r3, #24]
}
 8001e88:	bf00      	nop
 8001e8a:	370c      	adds	r7, #12
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000e100 	.word	0xe000e100
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b089      	sub	sp, #36	@ 0x24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	60f8      	str	r0, [r7, #12]
 8001ea4:	60b9      	str	r1, [r7, #8]
 8001ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0307 	and.w	r3, r3, #7
 8001eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb0:	69fb      	ldr	r3, [r7, #28]
 8001eb2:	f1c3 0307 	rsb	r3, r3, #7
 8001eb6:	2b04      	cmp	r3, #4
 8001eb8:	bf28      	it	cs
 8001eba:	2304      	movcs	r3, #4
 8001ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3304      	adds	r3, #4
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d902      	bls.n	8001ecc <NVIC_EncodePriority+0x30>
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3b03      	subs	r3, #3
 8001eca:	e000      	b.n	8001ece <NVIC_EncodePriority+0x32>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	43da      	mvns	r2, r3
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	401a      	ands	r2, r3
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	fa01 f303 	lsl.w	r3, r1, r3
 8001eee:	43d9      	mvns	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	4313      	orrs	r3, r2
         );
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3724      	adds	r7, #36	@ 0x24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
	...

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f28:	f7ff ff8e 	bl	8001e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	@ (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff29 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff3e 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff8e 	bl	8001e9c <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5d 	bl	8001e48 <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff31 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b084      	sub	sp, #16
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d101      	bne.n	8001fe0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e037      	b.n	8002050 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ff6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001ffa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002004:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002010:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800201c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	69db      	ldr	r3, [r3, #28]
 8002022:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	4313      	orrs	r3, r2
 8002028:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f940 	bl	80022b8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002066:	2300      	movs	r3, #0
 8002068:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Start_IT+0x20>
 8002074:	2302      	movs	r3, #2
 8002076:	e04a      	b.n	800210e <HAL_DMA_Start_IT+0xb6>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2201      	movs	r2, #1
 800207c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002086:	2b01      	cmp	r3, #1
 8002088:	d13a      	bne.n	8002100 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2202      	movs	r2, #2
 800208e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	2200      	movs	r2, #0
 8002096:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f022 0201 	bic.w	r2, r2, #1
 80020a6:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	68b9      	ldr	r1, [r7, #8]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f8d4 	bl	800225c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 020e 	orr.w	r2, r2, #14
 80020ca:	601a      	str	r2, [r3, #0]
 80020cc:	e00f      	b.n	80020ee <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f042 020a 	orr.w	r2, r2, #10
 80020dc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0204 	bic.w	r2, r2, #4
 80020ec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f042 0201 	orr.w	r2, r2, #1
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e005      	b.n	800210c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002108:	2302      	movs	r3, #2
 800210a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800210c:	7dfb      	ldrb	r3, [r7, #23]
}
 800210e:	4618      	mov	r0, r3
 8002110:	3718      	adds	r7, #24
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b084      	sub	sp, #16
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002132:	2204      	movs	r2, #4
 8002134:	409a      	lsls	r2, r3
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	4013      	ands	r3, r2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d024      	beq.n	8002188 <HAL_DMA_IRQHandler+0x72>
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d01f      	beq.n	8002188 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0320 	and.w	r3, r3, #32
 8002152:	2b00      	cmp	r3, #0
 8002154:	d107      	bne.n	8002166 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0204 	bic.w	r2, r2, #4
 8002164:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800216e:	2104      	movs	r1, #4
 8002170:	fa01 f202 	lsl.w	r2, r1, r2
 8002174:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06a      	beq.n	8002254 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002186:	e065      	b.n	8002254 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218c:	2202      	movs	r2, #2
 800218e:	409a      	lsls	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4013      	ands	r3, r2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d02c      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xdc>
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d027      	beq.n	80021f2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 020a 	bic.w	r2, r2, #10
 80021be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021d0:	2102      	movs	r1, #2
 80021d2:	fa01 f202 	lsl.w	r2, r1, r2
 80021d6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d035      	beq.n	8002254 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021f0:	e030      	b.n	8002254 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021f6:	2208      	movs	r2, #8
 80021f8:	409a      	lsls	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d028      	beq.n	8002254 <HAL_DMA_IRQHandler+0x13e>
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f003 0308 	and.w	r3, r3, #8
 8002208:	2b00      	cmp	r3, #0
 800220a:	d023      	beq.n	8002254 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020e 	bic.w	r2, r2, #14
 800221a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002224:	2101      	movs	r1, #1
 8002226:	fa01 f202 	lsl.w	r2, r1, r2
 800222a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2201      	movs	r2, #1
 8002230:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224e:	6878      	ldr	r0, [r7, #4]
 8002250:	4798      	blx	r3
    }
  }
}
 8002252:	e7ff      	b.n	8002254 <HAL_DMA_IRQHandler+0x13e>
 8002254:	bf00      	nop
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
 8002268:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d108      	bne.n	800229c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800229a:	e007      	b.n	80022ac <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68ba      	ldr	r2, [r7, #8]
 80022a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
}
 80022ac:	bf00      	nop
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	4b14      	ldr	r3, [pc, #80]	@ (8002318 <DMA_CalcBaseAndBitshift+0x60>)
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d80f      	bhi.n	80022ec <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4b12      	ldr	r3, [pc, #72]	@ (800231c <DMA_CalcBaseAndBitshift+0x64>)
 80022d4:	4413      	add	r3, r2
 80022d6:	4a12      	ldr	r2, [pc, #72]	@ (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	009a      	lsls	r2, r3, #2
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a0f      	ldr	r2, [pc, #60]	@ (8002324 <DMA_CalcBaseAndBitshift+0x6c>)
 80022e8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80022ea:	e00e      	b.n	800230a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	461a      	mov	r2, r3
 80022f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002328 <DMA_CalcBaseAndBitshift+0x70>)
 80022f4:	4413      	add	r3, r2
 80022f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002320 <DMA_CalcBaseAndBitshift+0x68>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	009a      	lsls	r2, r3, #2
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a09      	ldr	r2, [pc, #36]	@ (800232c <DMA_CalcBaseAndBitshift+0x74>)
 8002308:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40020407 	.word	0x40020407
 800231c:	bffdfff8 	.word	0xbffdfff8
 8002320:	cccccccd 	.word	0xcccccccd
 8002324:	40020000 	.word	0x40020000
 8002328:	bffdfbf8 	.word	0xbffdfbf8
 800232c:	40020400 	.word	0x40020400

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800233e:	e154      	b.n	80025ea <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2101      	movs	r1, #1
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	4013      	ands	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 8146 	beq.w	80025e4 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b01      	cmp	r3, #1
 8002362:	d005      	beq.n	8002370 <HAL_GPIO_Init+0x40>
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d130      	bne.n	80023d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023a6:	2201      	movs	r2, #1
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43db      	mvns	r3, r3
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	4013      	ands	r3, r2
 80023b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	091b      	lsrs	r3, r3, #4
 80023bc:	f003 0201 	and.w	r2, r3, #1
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	693a      	ldr	r2, [r7, #16]
 80023d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 0303 	and.w	r3, r3, #3
 80023da:	2b03      	cmp	r3, #3
 80023dc:	d017      	beq.n	800240e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	68db      	ldr	r3, [r3, #12]
 80023e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	2203      	movs	r2, #3
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43db      	mvns	r3, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4013      	ands	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689a      	ldr	r2, [r3, #8]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4313      	orrs	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	693a      	ldr	r2, [r7, #16]
 800240c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0303 	and.w	r3, r3, #3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d123      	bne.n	8002462 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	08da      	lsrs	r2, r3, #3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3208      	adds	r2, #8
 8002422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002426:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	f003 0307 	and.w	r3, r3, #7
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	220f      	movs	r2, #15
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	691a      	ldr	r2, [r3, #16]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	4313      	orrs	r3, r2
 8002452:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	08da      	lsrs	r2, r3, #3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	3208      	adds	r2, #8
 800245c:	6939      	ldr	r1, [r7, #16]
 800245e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	2203      	movs	r2, #3
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fa02 f303 	lsl.w	r3, r2, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4313      	orrs	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a0 	beq.w	80025e4 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a4:	4b58      	ldr	r3, [pc, #352]	@ (8002608 <HAL_GPIO_Init+0x2d8>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	4a57      	ldr	r2, [pc, #348]	@ (8002608 <HAL_GPIO_Init+0x2d8>)
 80024aa:	f043 0301 	orr.w	r3, r3, #1
 80024ae:	6193      	str	r3, [r2, #24]
 80024b0:	4b55      	ldr	r3, [pc, #340]	@ (8002608 <HAL_GPIO_Init+0x2d8>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	60bb      	str	r3, [r7, #8]
 80024ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024bc:	4a53      	ldr	r2, [pc, #332]	@ (800260c <HAL_GPIO_Init+0x2dc>)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	089b      	lsrs	r3, r3, #2
 80024c2:	3302      	adds	r3, #2
 80024c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	4013      	ands	r3, r2
 80024de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024e6:	d019      	beq.n	800251c <HAL_GPIO_Init+0x1ec>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a49      	ldr	r2, [pc, #292]	@ (8002610 <HAL_GPIO_Init+0x2e0>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d013      	beq.n	8002518 <HAL_GPIO_Init+0x1e8>
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a48      	ldr	r2, [pc, #288]	@ (8002614 <HAL_GPIO_Init+0x2e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d00d      	beq.n	8002514 <HAL_GPIO_Init+0x1e4>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4a47      	ldr	r2, [pc, #284]	@ (8002618 <HAL_GPIO_Init+0x2e8>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d007      	beq.n	8002510 <HAL_GPIO_Init+0x1e0>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	4a46      	ldr	r2, [pc, #280]	@ (800261c <HAL_GPIO_Init+0x2ec>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d101      	bne.n	800250c <HAL_GPIO_Init+0x1dc>
 8002508:	2304      	movs	r3, #4
 800250a:	e008      	b.n	800251e <HAL_GPIO_Init+0x1ee>
 800250c:	2305      	movs	r3, #5
 800250e:	e006      	b.n	800251e <HAL_GPIO_Init+0x1ee>
 8002510:	2303      	movs	r3, #3
 8002512:	e004      	b.n	800251e <HAL_GPIO_Init+0x1ee>
 8002514:	2302      	movs	r3, #2
 8002516:	e002      	b.n	800251e <HAL_GPIO_Init+0x1ee>
 8002518:	2301      	movs	r3, #1
 800251a:	e000      	b.n	800251e <HAL_GPIO_Init+0x1ee>
 800251c:	2300      	movs	r3, #0
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	f002 0203 	and.w	r2, r2, #3
 8002524:	0092      	lsls	r2, r2, #2
 8002526:	4093      	lsls	r3, r2
 8002528:	693a      	ldr	r2, [r7, #16]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800252e:	4937      	ldr	r1, [pc, #220]	@ (800260c <HAL_GPIO_Init+0x2dc>)
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	089b      	lsrs	r3, r3, #2
 8002534:	3302      	adds	r3, #2
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253c:	4b38      	ldr	r3, [pc, #224]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4313      	orrs	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002560:	4a2f      	ldr	r2, [pc, #188]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002566:	4b2e      	ldr	r3, [pc, #184]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	43db      	mvns	r3, r3
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	4013      	ands	r3, r2
 8002574:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d003      	beq.n	800258a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800258a:	4a25      	ldr	r2, [pc, #148]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002590:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	43db      	mvns	r3, r3
 800259a:	693a      	ldr	r2, [r7, #16]
 800259c:	4013      	ands	r3, r2
 800259e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80025b4:	4a1a      	ldr	r2, [pc, #104]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ba:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	43db      	mvns	r3, r3
 80025c4:	693a      	ldr	r2, [r7, #16]
 80025c6:	4013      	ands	r3, r2
 80025c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025d6:	693a      	ldr	r2, [r7, #16]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025de:	4a10      	ldr	r2, [pc, #64]	@ (8002620 <HAL_GPIO_Init+0x2f0>)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	3301      	adds	r3, #1
 80025e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	fa22 f303 	lsr.w	r3, r2, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f47f aea3 	bne.w	8002340 <HAL_GPIO_Init+0x10>
  }
}
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	40021000 	.word	0x40021000
 800260c:	40010000 	.word	0x40010000
 8002610:	48000400 	.word	0x48000400
 8002614:	48000800 	.word	0x48000800
 8002618:	48000c00 	.word	0x48000c00
 800261c:	48001000 	.word	0x48001000
 8002620:	40010400 	.word	0x40010400

08002624 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691a      	ldr	r2, [r3, #16]
 8002634:	887b      	ldrh	r3, [r7, #2]
 8002636:	4013      	ands	r3, r2
 8002638:	2b00      	cmp	r3, #0
 800263a:	d002      	beq.n	8002642 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800263c:	2301      	movs	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	e001      	b.n	8002646 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002642:	2300      	movs	r3, #0
 8002644:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002646:	7bfb      	ldrb	r3, [r7, #15]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	460b      	mov	r3, r1
 800265e:	807b      	strh	r3, [r7, #2]
 8002660:	4613      	mov	r3, r2
 8002662:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002664:	787b      	ldrb	r3, [r7, #1]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800266a:	887a      	ldrh	r2, [r7, #2]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002670:	e002      	b.n	8002678 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd fd90 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40010400 	.word	0x40010400

080026b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e08d      	b.n	80027e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7fe f9ca 	bl	8000a74 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2224      	movs	r2, #36	@ 0x24
 80026e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f022 0201 	bic.w	r2, r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002704:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002714:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d107      	bne.n	800272e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689a      	ldr	r2, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800272a:	609a      	str	r2, [r3, #8]
 800272c:	e006      	b.n	800273c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	689a      	ldr	r2, [r3, #8]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800273a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b02      	cmp	r3, #2
 8002742:	d108      	bne.n	8002756 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	e007      	b.n	8002766 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002764:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002774:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002778:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002788:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	691a      	ldr	r2, [r3, #16]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	699b      	ldr	r3, [r3, #24]
 800279a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	430a      	orrs	r2, r1
 80027a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1a      	ldr	r2, [r3, #32]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
 80027f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fa:	b2db      	uxtb	r3, r3
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d138      	bne.n	8002872 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002806:	2b01      	cmp	r3, #1
 8002808:	d101      	bne.n	800280e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800280a:	2302      	movs	r3, #2
 800280c:	e032      	b.n	8002874 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2224      	movs	r2, #36	@ 0x24
 800281a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0201 	bic.w	r2, r2, #1
 800282c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800283c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	430a      	orrs	r2, r1
 800284c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f042 0201 	orr.w	r2, r2, #1
 800285c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2220      	movs	r2, #32
 8002862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	4618      	mov	r0, r3
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002880:	b480      	push	{r7}
 8002882:	b085      	sub	sp, #20
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002890:	b2db      	uxtb	r3, r3
 8002892:	2b20      	cmp	r3, #32
 8002894:	d139      	bne.n	800290a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800289c:	2b01      	cmp	r3, #1
 800289e:	d101      	bne.n	80028a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028a0:	2302      	movs	r3, #2
 80028a2:	e033      	b.n	800290c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68fa      	ldr	r2, [r7, #12]
 80028e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0201 	orr.w	r2, r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2220      	movs	r2, #32
 80028fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e000      	b.n	800290c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800290a:	2302      	movs	r3, #2
  }
}
 800290c:	4618      	mov	r0, r3
 800290e:	3714      	adds	r7, #20
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d101      	bne.n	800292a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0b9      	b.n	8002a9e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f007 f80e 	bl	8009960 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4618      	mov	r0, r3
 8002952:	f003 f868 	bl	8005a26 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
 800295a:	e03e      	b.n	80029da <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800295c:	7bfa      	ldrb	r2, [r7, #15]
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	00db      	lsls	r3, r3, #3
 8002968:	440b      	add	r3, r1
 800296a:	3311      	adds	r3, #17
 800296c:	2201      	movs	r2, #1
 800296e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002970:	7bfa      	ldrb	r2, [r7, #15]
 8002972:	6879      	ldr	r1, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4413      	add	r3, r2
 800297a:	00db      	lsls	r3, r3, #3
 800297c:	440b      	add	r3, r1
 800297e:	3310      	adds	r3, #16
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002984:	7bfa      	ldrb	r2, [r7, #15]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	440b      	add	r3, r1
 8002992:	3313      	adds	r3, #19
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	440b      	add	r3, r1
 80029a6:	3320      	adds	r3, #32
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	4413      	add	r3, r2
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	440b      	add	r3, r1
 80029ba:	3324      	adds	r3, #36	@ 0x24
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029c0:	7bfb      	ldrb	r3, [r7, #15]
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	1c5a      	adds	r2, r3, #1
 80029c6:	4613      	mov	r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	4413      	add	r3, r2
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d4:	7bfb      	ldrb	r3, [r7, #15]
 80029d6:	3301      	adds	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	791b      	ldrb	r3, [r3, #4]
 80029de:	7bfa      	ldrb	r2, [r7, #15]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d3bb      	bcc.n	800295c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	73fb      	strb	r3, [r7, #15]
 80029e8:	e044      	b.n	8002a74 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029ea:	7bfa      	ldrb	r2, [r7, #15]
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	4613      	mov	r3, r2
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	4413      	add	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	440b      	add	r3, r1
 80029f8:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	440b      	add	r3, r1
 8002a0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a12:	7bfa      	ldrb	r2, [r7, #15]
 8002a14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	440b      	add	r3, r1
 8002a24:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a3e:	2200      	movs	r2, #0
 8002a40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a42:	7bfa      	ldrb	r2, [r7, #15]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a54:	2200      	movs	r2, #0
 8002a56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a58:	7bfa      	ldrb	r2, [r7, #15]
 8002a5a:	6879      	ldr	r1, [r7, #4]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a6e:	7bfb      	ldrb	r3, [r7, #15]
 8002a70:	3301      	adds	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	791b      	ldrb	r3, [r3, #4]
 8002a78:	7bfa      	ldrb	r2, [r7, #15]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d3b5      	bcc.n	80029ea <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6818      	ldr	r0, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3304      	adds	r3, #4
 8002a86:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a8a:	f002 ffe7 	bl	8005a5c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b082      	sub	sp, #8
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_PCD_Start+0x16>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e016      	b.n	8002aea <HAL_PCD_Start+0x44>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f002 ff95 	bl	80059f8 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ace:	2101      	movs	r1, #1
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f007 f9c5 	bl	8009e60 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f005 fa52 	bl	8007f84 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f005 fa4b 	bl	8007f9a <USB_ReadInterrupts>
 8002b04:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 fa99 	bl	8003048 <PCD_EP_ISR_Handler>

    return;
 8002b16:	e0bd      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d013      	beq.n	8002b4a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b34:	b292      	uxth	r2, r2
 8002b36:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f006 ffb1 	bl	8009aa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b40:	2100      	movs	r1, #0
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 f8a9 	bl	8002c9a <HAL_PCD_SetAddress>

    return;
 8002b48:	e0a4      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d00c      	beq.n	8002b6e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b66:	b292      	uxth	r2, r2
 8002b68:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b6c:	e092      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00c      	beq.n	8002b92 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b80:	b29a      	uxth	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b8a:	b292      	uxth	r2, r2
 8002b8c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b90:	e080      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d027      	beq.n	8002bec <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0204 	bic.w	r2, r2, #4
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bbc:	b29a      	uxth	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0208 	bic.w	r2, r2, #8
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f006 ffa1 	bl	8009b14 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002be4:	b292      	uxth	r2, r2
 8002be6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bea:	e053      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d027      	beq.n	8002c46 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f042 0208 	orr.w	r2, r2, #8
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f042 0204 	orr.w	r2, r2, #4
 8002c38:	b292      	uxth	r2, r2
 8002c3a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f006 ff4e 	bl	8009ae0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c44:	e026      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00f      	beq.n	8002c70 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c62:	b292      	uxth	r2, r2
 8002c64:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f006 ff0c 	bl	8009a86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c6e:	e011      	b.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d00c      	beq.n	8002c94 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c8c:	b292      	uxth	r2, r2
 8002c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c92:	bf00      	nop
  }
}
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_PCD_SetAddress+0x1a>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e012      	b.n	8002cda <HAL_PCD_SetAddress+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	4611      	mov	r1, r2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f005 f946 	bl	8007f5c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3708      	adds	r7, #8
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002ce2:	b580      	push	{r7, lr}
 8002ce4:	b084      	sub	sp, #16
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	4608      	mov	r0, r1
 8002cec:	4611      	mov	r1, r2
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	70fb      	strb	r3, [r7, #3]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	803b      	strh	r3, [r7, #0]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	da0e      	bge.n	8002d26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	f003 0207 	and.w	r2, r3, #7
 8002d0e:	4613      	mov	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	3310      	adds	r3, #16
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2201      	movs	r2, #1
 8002d22:	705a      	strb	r2, [r3, #1]
 8002d24:	e00e      	b.n	8002d44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	f003 0207 	and.w	r2, r3, #7
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	4413      	add	r3, r2
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2200      	movs	r2, #0
 8002d42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 0307 	and.w	r3, r3, #7
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d50:	883a      	ldrh	r2, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	78ba      	ldrb	r2, [r7, #2]
 8002d5a:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d5c:	78bb      	ldrb	r3, [r7, #2]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d102      	bne.n	8002d68 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d101      	bne.n	8002d76 <HAL_PCD_EP_Open+0x94>
 8002d72:	2302      	movs	r3, #2
 8002d74:	e00e      	b.n	8002d94 <HAL_PCD_EP_Open+0xb2>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2201      	movs	r2, #1
 8002d7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68f9      	ldr	r1, [r7, #12]
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fe87 	bl	8005a98 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002d92:	7afb      	ldrb	r3, [r7, #11]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	460b      	mov	r3, r1
 8002da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002da8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	da0e      	bge.n	8002dce <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	f003 0207 	and.w	r2, r3, #7
 8002db6:	4613      	mov	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	4413      	add	r3, r2
 8002dbc:	00db      	lsls	r3, r3, #3
 8002dbe:	3310      	adds	r3, #16
 8002dc0:	687a      	ldr	r2, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	705a      	strb	r2, [r3, #1]
 8002dcc:	e00e      	b.n	8002dec <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	f003 0207 	and.w	r2, r3, #7
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dec:	78fb      	ldrb	r3, [r7, #3]
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_EP_Close+0x6a>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e00e      	b.n	8002e24 <HAL_PCD_EP_Close+0x88>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68f9      	ldr	r1, [r7, #12]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f003 fa03 	bl	8006220 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	460b      	mov	r3, r1
 8002e3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	f003 0207 	and.w	r2, r3, #7
 8002e42:	4613      	mov	r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	00db      	lsls	r3, r3, #3
 8002e4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4413      	add	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2200      	movs	r2, #0
 8002e64:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6c:	7afb      	ldrb	r3, [r7, #11]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6979      	ldr	r1, [r7, #20]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 fbbb 	bl	80065fa <USB_EPStartXfer>

  return HAL_OK;
 8002e84:	2300      	movs	r3, #0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b086      	sub	sp, #24
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	60f8      	str	r0, [r7, #12]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e9e:	7afb      	ldrb	r3, [r7, #11]
 8002ea0:	f003 0207 	and.w	r2, r3, #7
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	00db      	lsls	r3, r3, #3
 8002eac:	3310      	adds	r3, #16
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eda:	7afb      	ldrb	r3, [r7, #11]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6979      	ldr	r1, [r7, #20]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f003 fb84 	bl	80065fa <USB_EPStartXfer>

  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3718      	adds	r7, #24
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	460b      	mov	r3, r1
 8002f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f08:	78fb      	ldrb	r3, [r7, #3]
 8002f0a:	f003 0307 	and.w	r3, r3, #7
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	7912      	ldrb	r2, [r2, #4]
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e03e      	b.n	8002f98 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	da0e      	bge.n	8002f40 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f22:	78fb      	ldrb	r3, [r7, #3]
 8002f24:	f003 0207 	and.w	r2, r3, #7
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	3310      	adds	r3, #16
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	4413      	add	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	705a      	strb	r2, [r3, #1]
 8002f3e:	e00c      	b.n	8002f5a <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f40:	78fa      	ldrb	r2, [r7, #3]
 8002f42:	4613      	mov	r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	4413      	add	r3, r2
 8002f48:	00db      	lsls	r3, r3, #3
 8002f4a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4413      	add	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2200      	movs	r2, #0
 8002f58:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 0307 	and.w	r3, r3, #7
 8002f66:	b2da      	uxtb	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d101      	bne.n	8002f7a <HAL_PCD_EP_SetStall+0x7e>
 8002f76:	2302      	movs	r3, #2
 8002f78:	e00e      	b.n	8002f98 <HAL_PCD_EP_SetStall+0x9c>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68f9      	ldr	r1, [r7, #12]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f004 fee8 	bl	8007d5e <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f96:	2300      	movs	r3, #0
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fac:	78fb      	ldrb	r3, [r7, #3]
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	7912      	ldrb	r2, [r2, #4]
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e040      	b.n	8003040 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	da0e      	bge.n	8002fe4 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	f003 0207 	and.w	r2, r3, #7
 8002fcc:	4613      	mov	r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	4413      	add	r3, r2
 8002fd2:	00db      	lsls	r3, r3, #3
 8002fd4:	3310      	adds	r3, #16
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	705a      	strb	r2, [r3, #1]
 8002fe2:	e00e      	b.n	8003002 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe4:	78fb      	ldrb	r3, [r7, #3]
 8002fe6:	f003 0207 	and.w	r2, r3, #7
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800301a:	2b01      	cmp	r3, #1
 800301c:	d101      	bne.n	8003022 <HAL_PCD_EP_ClrStall+0x82>
 800301e:	2302      	movs	r3, #2
 8003020:	e00e      	b.n	8003040 <HAL_PCD_EP_ClrStall+0xa0>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	4618      	mov	r0, r3
 8003032:	f004 fee5 	bl	8007e00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b096      	sub	sp, #88	@ 0x58
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003050:	e3bb      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800305a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800305e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 800306c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003070:	2b00      	cmp	r3, #0
 8003072:	f040 8175 	bne.w	8003360 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003076:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800307a:	f003 0310 	and.w	r3, r3, #16
 800307e:	2b00      	cmp	r3, #0
 8003080:	d14e      	bne.n	8003120 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800308e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003092:	81fb      	strh	r3, [r7, #14]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	89fb      	ldrh	r3, [r7, #14]
 800309a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800309e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030a2:	b29b      	uxth	r3, r3
 80030a4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3310      	adds	r3, #16
 80030aa:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4413      	add	r3, r2
 80030c0:	3302      	adds	r3, #2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030ce:	881b      	ldrh	r3, [r3, #0]
 80030d0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030d6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	441a      	add	r2, r3
 80030e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030e6:	2100      	movs	r1, #0
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f006 fcb2 	bl	8009a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7b1b      	ldrb	r3, [r3, #12]
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 8368 	beq.w	80037ca <PCD_EP_ISR_Handler+0x782>
 80030fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 8363 	bne.w	80037ca <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	7b1b      	ldrb	r3, [r3, #12]
 8003108:	b2db      	uxtb	r3, r3
 800310a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800310e:	b2da      	uxtb	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	731a      	strb	r2, [r3, #12]
 800311e:	e354      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003126:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003132:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003136:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800313a:	2b00      	cmp	r3, #0
 800313c:	d034      	beq.n	80031a8 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003146:	b29b      	uxth	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4413      	add	r3, r2
 8003152:	3306      	adds	r3, #6
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6812      	ldr	r2, [r2, #0]
 800315a:	4413      	add	r3, r2
 800315c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003160:	881b      	ldrh	r3, [r3, #0]
 8003162:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003166:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003168:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 8003174:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003176:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800317c:	b29b      	uxth	r3, r3
 800317e:	f004 ff62 	bl	8008046 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	881b      	ldrh	r3, [r3, #0]
 8003188:	b29a      	uxth	r2, r3
 800318a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800318e:	4013      	ands	r3, r2
 8003190:	823b      	strh	r3, [r7, #16]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	8a3a      	ldrh	r2, [r7, #16]
 8003198:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800319c:	b292      	uxth	r2, r2
 800319e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f006 fc29 	bl	80099f8 <HAL_PCD_SetupStageCallback>
 80031a6:	e310      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80031a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f280 830c 	bge.w	80037ca <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	881b      	ldrh	r3, [r3, #0]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031be:	4013      	ands	r3, r2
 80031c0:	83fb      	strh	r3, [r7, #30]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	8bfa      	ldrh	r2, [r7, #30]
 80031c8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031cc:	b292      	uxth	r2, r2
 80031ce:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031d8:	b29b      	uxth	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	00db      	lsls	r3, r3, #3
 80031e2:	4413      	add	r3, r2
 80031e4:	3306      	adds	r3, #6
 80031e6:	005b      	lsls	r3, r3, #1
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6812      	ldr	r2, [r2, #0]
 80031ec:	4413      	add	r3, r2
 80031ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d019      	beq.n	8003238 <PCD_EP_ISR_Handler+0x1f0>
 8003204:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6818      	ldr	r0, [r3, #0]
 8003210:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003212:	6959      	ldr	r1, [r3, #20]
 8003214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003216:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800321a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800321c:	b29b      	uxth	r3, r3
 800321e:	f004 ff12 	bl	8008046 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003222:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003224:	695a      	ldr	r2, [r3, #20]
 8003226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	441a      	add	r2, r3
 800322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003230:	2100      	movs	r1, #0
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f006 fbf2 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	881b      	ldrh	r3, [r3, #0]
 800323e:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003242:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003246:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800324a:	2b00      	cmp	r3, #0
 800324c:	f040 82bd 	bne.w	80037ca <PCD_EP_ISR_Handler+0x782>
 8003250:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003254:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003258:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800325c:	f000 82b5 	beq.w	80037ca <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800326e:	b29b      	uxth	r3, r3
 8003270:	461a      	mov	r2, r3
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	4413      	add	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800328a:	b29a      	uxth	r2, r3
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	801a      	strh	r2, [r3, #0]
 8003290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d10a      	bne.n	80032ae <PCD_EP_ISR_Handler+0x266>
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	801a      	strh	r2, [r3, #0]
 80032ac:	e039      	b.n	8003322 <PCD_EP_ISR_Handler+0x2da>
 80032ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b3e      	cmp	r3, #62	@ 0x3e
 80032b4:	d818      	bhi.n	80032e8 <PCD_EP_ISR_Handler+0x2a0>
 80032b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d002      	beq.n	80032d0 <PCD_EP_ISR_Handler+0x288>
 80032ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032cc:	3301      	adds	r3, #1
 80032ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d8:	b29b      	uxth	r3, r3
 80032da:	029b      	lsls	r3, r3, #10
 80032dc:	b29b      	uxth	r3, r3
 80032de:	4313      	orrs	r3, r2
 80032e0:	b29a      	uxth	r2, r3
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	801a      	strh	r2, [r3, #0]
 80032e6:	e01c      	b.n	8003322 <PCD_EP_ISR_Handler+0x2da>
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	095b      	lsrs	r3, r3, #5
 80032ee:	647b      	str	r3, [r7, #68]	@ 0x44
 80032f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d102      	bne.n	8003302 <PCD_EP_ISR_Handler+0x2ba>
 80032fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032fe:	3b01      	subs	r3, #1
 8003300:	647b      	str	r3, [r7, #68]	@ 0x44
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	881b      	ldrh	r3, [r3, #0]
 8003306:	b29a      	uxth	r2, r3
 8003308:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800330a:	b29b      	uxth	r3, r3
 800330c:	029b      	lsls	r3, r3, #10
 800330e:	b29b      	uxth	r3, r3
 8003310:	4313      	orrs	r3, r2
 8003312:	b29b      	uxth	r3, r3
 8003314:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003318:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800331c:	b29a      	uxth	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b29b      	uxth	r3, r3
 800332a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800332e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003332:	827b      	strh	r3, [r7, #18]
 8003334:	8a7b      	ldrh	r3, [r7, #18]
 8003336:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800333a:	827b      	strh	r3, [r7, #18]
 800333c:	8a7b      	ldrh	r3, [r7, #18]
 800333e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003342:	827b      	strh	r3, [r7, #18]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	8a7b      	ldrh	r3, [r7, #18]
 800334a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800334e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003352:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800335a:	b29b      	uxth	r3, r3
 800335c:	8013      	strh	r3, [r2, #0]
 800335e:	e234      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	461a      	mov	r2, r3
 8003366:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	4413      	add	r3, r2
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003378:	2b00      	cmp	r3, #0
 800337a:	f280 80fc 	bge.w	8003576 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	461a      	mov	r2, r3
 8003384:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	4413      	add	r3, r2
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	b29a      	uxth	r2, r3
 8003390:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003394:	4013      	ands	r3, r2
 8003396:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	461a      	mov	r2, r3
 80033a0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 80033ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80033b0:	b292      	uxth	r2, r2
 80033b2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80033b4:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	4413      	add	r3, r2
 80033c8:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033cc:	7b1b      	ldrb	r3, [r3, #12]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d125      	bne.n	800341e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033da:	b29b      	uxth	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	00db      	lsls	r3, r3, #3
 80033e4:	4413      	add	r3, r2
 80033e6:	3306      	adds	r3, #6
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	6812      	ldr	r2, [r2, #0]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033f4:	881b      	ldrh	r3, [r3, #0]
 80033f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033fa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80033fe:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 8092 	beq.w	800352c <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800340e:	6959      	ldr	r1, [r3, #20]
 8003410:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003412:	88da      	ldrh	r2, [r3, #6]
 8003414:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003418:	f004 fe15 	bl	8008046 <USB_ReadPMA>
 800341c:	e086      	b.n	800352c <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800341e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003420:	78db      	ldrb	r3, [r3, #3]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d10a      	bne.n	800343c <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003426:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800342a:	461a      	mov	r2, r3
 800342c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f9d9 	bl	80037e6 <HAL_PCD_EP_DB_Receive>
 8003434:	4603      	mov	r3, r0
 8003436:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800343a:	e077      	b.n	800352c <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	461a      	mov	r2, r3
 8003442:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	4413      	add	r3, r2
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	b29b      	uxth	r3, r3
 800344e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003452:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003456:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	461a      	mov	r2, r3
 8003460:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	441a      	add	r2, r3
 8003468:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800346c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003470:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003478:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800347c:	b29b      	uxth	r3, r3
 800347e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	461a      	mov	r2, r3
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	b29b      	uxth	r3, r3
 8003492:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d024      	beq.n	80034e4 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	00db      	lsls	r3, r3, #3
 80034ac:	4413      	add	r3, r2
 80034ae:	3302      	adds	r3, #2
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	6812      	ldr	r2, [r2, #0]
 80034b6:	4413      	add	r3, r2
 80034b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034bc:	881b      	ldrh	r3, [r3, #0]
 80034be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034c2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d02e      	beq.n	800352c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6818      	ldr	r0, [r3, #0]
 80034d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d4:	6959      	ldr	r1, [r3, #20]
 80034d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d8:	891a      	ldrh	r2, [r3, #8]
 80034da:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034de:	f004 fdb2 	bl	8008046 <USB_ReadPMA>
 80034e2:	e023      	b.n	800352c <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	461a      	mov	r2, r3
 80034f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	4413      	add	r3, r2
 80034f8:	3306      	adds	r3, #6
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	6812      	ldr	r2, [r2, #0]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800350c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003510:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003514:	2b00      	cmp	r3, #0
 8003516:	d009      	beq.n	800352c <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6818      	ldr	r0, [r3, #0]
 800351c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351e:	6959      	ldr	r1, [r3, #20]
 8003520:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003522:	895a      	ldrh	r2, [r3, #10]
 8003524:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003528:	f004 fd8d 	bl	8008046 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	69da      	ldr	r2, [r3, #28]
 8003530:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003534:	441a      	add	r2, r3
 8003536:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003538:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	695a      	ldr	r2, [r3, #20]
 800353e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003542:	441a      	add	r2, r3
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003548:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d005      	beq.n	800355c <PCD_EP_ISR_Handler+0x514>
 8003550:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8003554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	429a      	cmp	r2, r3
 800355a:	d206      	bcs.n	800356a <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800355c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4619      	mov	r1, r3
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f006 fa5a 	bl	8009a1c <HAL_PCD_DataOutStageCallback>
 8003568:	e005      	b.n	8003576 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003570:	4618      	mov	r0, r3
 8003572:	f003 f842 	bl	80065fa <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003576:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800357a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800357e:	2b00      	cmp	r3, #0
 8003580:	f000 8123 	beq.w	80037ca <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003584:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	3310      	adds	r3, #16
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	461a      	mov	r2, r3
 800359e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	881b      	ldrh	r3, [r3, #0]
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	441a      	add	r2, r3
 80035c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80035c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d6:	78db      	ldrb	r3, [r3, #3]
 80035d8:	2b01      	cmp	r3, #1
 80035da:	f040 80a2 	bne.w	8003722 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80035de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e0:	2200      	movs	r2, #0
 80035e2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e6:	7b1b      	ldrb	r3, [r3, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8093 	beq.w	8003714 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d046      	beq.n	8003688 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035fc:	785b      	ldrb	r3, [r3, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d126      	bne.n	8003650 <PCD_EP_ISR_Handler+0x608>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	627b      	str	r3, [r7, #36]	@ 0x24
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003610:	b29b      	uxth	r3, r3
 8003612:	461a      	mov	r2, r3
 8003614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003616:	4413      	add	r3, r2
 8003618:	627b      	str	r3, [r7, #36]	@ 0x24
 800361a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	011a      	lsls	r2, r3, #4
 8003620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003622:	4413      	add	r3, r2
 8003624:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003628:	623b      	str	r3, [r7, #32]
 800362a:	6a3b      	ldr	r3, [r7, #32]
 800362c:	881b      	ldrh	r3, [r3, #0]
 800362e:	b29b      	uxth	r3, r3
 8003630:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003634:	b29a      	uxth	r2, r3
 8003636:	6a3b      	ldr	r3, [r7, #32]
 8003638:	801a      	strh	r2, [r3, #0]
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	881b      	ldrh	r3, [r3, #0]
 800363e:	b29b      	uxth	r3, r3
 8003640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003648:	b29a      	uxth	r2, r3
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	801a      	strh	r2, [r3, #0]
 800364e:	e061      	b.n	8003714 <PCD_EP_ISR_Handler+0x6cc>
 8003650:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003652:	785b      	ldrb	r3, [r3, #1]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d15d      	bne.n	8003714 <PCD_EP_ISR_Handler+0x6cc>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003666:	b29b      	uxth	r3, r3
 8003668:	461a      	mov	r2, r3
 800366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366c:	4413      	add	r3, r2
 800366e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	011a      	lsls	r2, r3, #4
 8003676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003678:	4413      	add	r3, r2
 800367a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800367e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003682:	2200      	movs	r2, #0
 8003684:	801a      	strh	r2, [r3, #0]
 8003686:	e045      	b.n	8003714 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800368e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003690:	785b      	ldrb	r3, [r3, #1]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d126      	bne.n	80036e4 <PCD_EP_ISR_Handler+0x69c>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	637b      	str	r3, [r7, #52]	@ 0x34
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036aa:	4413      	add	r3, r2
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	011a      	lsls	r2, r3, #4
 80036b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b6:	4413      	add	r3, r2
 80036b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80036be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c0:	881b      	ldrh	r3, [r3, #0]
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036dc:	b29a      	uxth	r2, r3
 80036de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e017      	b.n	8003714 <PCD_EP_ISR_Handler+0x6cc>
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	785b      	ldrb	r3, [r3, #1]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d113      	bne.n	8003714 <PCD_EP_ISR_Handler+0x6cc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	461a      	mov	r2, r3
 80036f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036fa:	4413      	add	r3, r2
 80036fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	011a      	lsls	r2, r3, #4
 8003704:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003706:	4413      	add	r3, r2
 8003708:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800370c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800370e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003710:	2200      	movs	r2, #0
 8003712:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f006 f999 	bl	8009a52 <HAL_PCD_DataInStageCallback>
 8003720:	e053      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003722:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800372a:	2b00      	cmp	r3, #0
 800372c:	d146      	bne.n	80037bc <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003736:	b29b      	uxth	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800373c:	781b      	ldrb	r3, [r3, #0]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4413      	add	r3, r2
 8003742:	3302      	adds	r3, #2
 8003744:	005b      	lsls	r3, r3, #1
 8003746:	687a      	ldr	r2, [r7, #4]
 8003748:	6812      	ldr	r2, [r2, #0]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003756:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800375a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003762:	429a      	cmp	r2, r3
 8003764:	d907      	bls.n	8003776 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 8003766:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003768:	699a      	ldr	r2, [r3, #24]
 800376a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800376e:	1ad2      	subs	r2, r2, r3
 8003770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003772:	619a      	str	r2, [r3, #24]
 8003774:	e002      	b.n	800377c <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 8003776:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003778:	2200      	movs	r2, #0
 800377a:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800377c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	4619      	mov	r1, r3
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f006 f961 	bl	8009a52 <HAL_PCD_DataInStageCallback>
 8003790:	e01b      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003794:	695a      	ldr	r2, [r3, #20]
 8003796:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800379a:	441a      	add	r2, r3
 800379c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800379e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80037a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037a2:	69da      	ldr	r2, [r3, #28]
 80037a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037a8:	441a      	add	r2, r3
 80037aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ac:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 ff20 	bl	80065fa <USB_EPStartXfer>
 80037ba:	e006      	b.n	80037ca <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037c0:	461a      	mov	r2, r3
 80037c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 f91b 	bl	8003a00 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	b21b      	sxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f6ff ac3b 	blt.w	8003052 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3758      	adds	r7, #88	@ 0x58
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b088      	sub	sp, #32
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	4613      	mov	r3, r2
 80037f2:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d07e      	beq.n	80038fc <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003806:	b29b      	uxth	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	4413      	add	r3, r2
 8003812:	3302      	adds	r3, #2
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	68fa      	ldr	r2, [r7, #12]
 8003818:	6812      	ldr	r2, [r2, #0]
 800381a:	4413      	add	r3, r2
 800381c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003826:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	8b7b      	ldrh	r3, [r7, #26]
 800382e:	429a      	cmp	r2, r3
 8003830:	d306      	bcc.n	8003840 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	1ad2      	subs	r2, r2, r3
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	619a      	str	r2, [r3, #24]
 800383e:	e002      	b.n	8003846 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d123      	bne.n	8003896 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	461a      	mov	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	4413      	add	r3, r2
 800385c:	881b      	ldrh	r3, [r3, #0]
 800385e:	b29b      	uxth	r3, r3
 8003860:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003864:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003868:	833b      	strh	r3, [r7, #24]
 800386a:	8b3b      	ldrh	r3, [r7, #24]
 800386c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003870:	833b      	strh	r3, [r7, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	461a      	mov	r2, r3
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	441a      	add	r2, r3
 8003880:	8b3b      	ldrh	r3, [r7, #24]
 8003882:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003886:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800388a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800388e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003892:	b29b      	uxth	r3, r3
 8003894:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003896:	88fb      	ldrh	r3, [r7, #6]
 8003898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800389c:	2b00      	cmp	r3, #0
 800389e:	d01f      	beq.n	80038e0 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	781b      	ldrb	r3, [r3, #0]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4413      	add	r3, r2
 80038ae:	881b      	ldrh	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038ba:	82fb      	strh	r3, [r7, #22]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	461a      	mov	r2, r3
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	441a      	add	r2, r3
 80038ca:	8afb      	ldrh	r3, [r7, #22]
 80038cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038d8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038dc:	b29b      	uxth	r3, r3
 80038de:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038e0:	8b7b      	ldrh	r3, [r7, #26]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 8087 	beq.w	80039f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6818      	ldr	r0, [r3, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6959      	ldr	r1, [r3, #20]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	891a      	ldrh	r2, [r3, #8]
 80038f4:	8b7b      	ldrh	r3, [r7, #26]
 80038f6:	f004 fba6 	bl	8008046 <USB_ReadPMA>
 80038fa:	e07c      	b.n	80039f6 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003904:	b29b      	uxth	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	00db      	lsls	r3, r3, #3
 800390e:	4413      	add	r3, r2
 8003910:	3306      	adds	r3, #6
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	6812      	ldr	r2, [r2, #0]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800391e:	881b      	ldrh	r3, [r3, #0]
 8003920:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003924:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	699a      	ldr	r2, [r3, #24]
 800392a:	8b7b      	ldrh	r3, [r7, #26]
 800392c:	429a      	cmp	r2, r3
 800392e:	d306      	bcc.n	800393e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	699a      	ldr	r2, [r3, #24]
 8003934:	8b7b      	ldrh	r3, [r7, #26]
 8003936:	1ad2      	subs	r2, r2, r3
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	619a      	str	r2, [r3, #24]
 800393c:	e002      	b.n	8003944 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	2200      	movs	r2, #0
 8003942:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d123      	bne.n	8003994 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	461a      	mov	r2, r3
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003962:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003966:	83fb      	strh	r3, [r7, #30]
 8003968:	8bfb      	ldrh	r3, [r7, #30]
 800396a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800396e:	83fb      	strh	r3, [r7, #30]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	461a      	mov	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	8bfb      	ldrh	r3, [r7, #30]
 8003980:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003984:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003988:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800398c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003990:	b29b      	uxth	r3, r3
 8003992:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003994:	88fb      	ldrh	r3, [r7, #6]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d11f      	bne.n	80039de <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	461a      	mov	r2, r3
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	4413      	add	r3, r2
 80039ac:	881b      	ldrh	r3, [r3, #0]
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039b8:	83bb      	strh	r3, [r7, #28]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	461a      	mov	r2, r3
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	441a      	add	r2, r3
 80039c8:	8bbb      	ldrh	r3, [r7, #28]
 80039ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039da:	b29b      	uxth	r3, r3
 80039dc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039de:	8b7b      	ldrh	r3, [r7, #26]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6959      	ldr	r1, [r3, #20]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	895a      	ldrh	r2, [r3, #10]
 80039f0:	8b7b      	ldrh	r3, [r7, #26]
 80039f2:	f004 fb28 	bl	8008046 <USB_ReadPMA>
    }
  }

  return count;
 80039f6:	8b7b      	ldrh	r3, [r7, #26]
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3720      	adds	r7, #32
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b0a4      	sub	sp, #144	@ 0x90
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	60f8      	str	r0, [r7, #12]
 8003a08:	60b9      	str	r1, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a0e:	88fb      	ldrh	r3, [r7, #6]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 81dd 	beq.w	8003dd4 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	3302      	adds	r3, #2
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	6812      	ldr	r2, [r2, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a42:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	699a      	ldr	r2, [r3, #24]
 8003a4a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d907      	bls.n	8003a62 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a52:	68bb      	ldr	r3, [r7, #8]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a5a:	1ad2      	subs	r2, r2, r3
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	619a      	str	r2, [r3, #24]
 8003a60:	e002      	b.n	8003a68 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2200      	movs	r2, #0
 8003a66:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f040 80b9 	bne.w	8003be4 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	785b      	ldrb	r3, [r3, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d126      	bne.n	8003ac8 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a88:	b29b      	uxth	r3, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8e:	4413      	add	r3, r2
 8003a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	011a      	lsls	r2, r3, #4
 8003a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003aa0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab0:	801a      	strh	r2, [r3, #0]
 8003ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab4:	881b      	ldrh	r3, [r3, #0]
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003abc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ac4:	801a      	strh	r2, [r3, #0]
 8003ac6:	e01a      	b.n	8003afe <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	785b      	ldrb	r3, [r3, #1]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d116      	bne.n	8003afe <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ae4:	4413      	add	r3, r2
 8003ae6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	011a      	lsls	r2, r3, #4
 8003aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af0:	4413      	add	r3, r2
 8003af2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003af6:	633b      	str	r3, [r7, #48]	@ 0x30
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	2200      	movs	r2, #0
 8003afc:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	785b      	ldrb	r3, [r3, #1]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d126      	bne.n	8003b5a <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	461a      	mov	r2, r3
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	61fb      	str	r3, [r7, #28]
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	011a      	lsls	r2, r3, #4
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b32:	61bb      	str	r3, [r7, #24]
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b52:	b29a      	uxth	r2, r3
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	801a      	strh	r2, [r3, #0]
 8003b58:	e017      	b.n	8003b8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	785b      	ldrb	r3, [r3, #1]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d113      	bne.n	8003b8a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	4413      	add	r3, r2
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	011a      	lsls	r2, r3, #4
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	4413      	add	r3, r2
 8003b7e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b82:	623b      	str	r3, [r7, #32]
 8003b84:	6a3b      	ldr	r3, [r7, #32]
 8003b86:	2200      	movs	r2, #0
 8003b88:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f005 ff5e 	bl	8009a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b96:	88fb      	ldrh	r3, [r7, #6]
 8003b98:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 82fc 	beq.w	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	461a      	mov	r2, r3
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	881b      	ldrh	r3, [r3, #0]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bb8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bbc:	82fb      	strh	r3, [r7, #22]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	441a      	add	r2, r3
 8003bcc:	8afb      	ldrh	r3, [r7, #22]
 8003bce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	8013      	strh	r3, [r2, #0]
 8003be2:	e2da      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003be4:	88fb      	ldrh	r3, [r7, #6]
 8003be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d021      	beq.n	8003c32 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c04:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c08:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	441a      	add	r2, r3
 8003c1a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c1e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c22:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c26:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	f040 82ae 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	695a      	ldr	r2, [r3, #20]
 8003c42:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c46:	441a      	add	r2, r3
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	69da      	ldr	r2, [r3, #28]
 8003c50:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c54:	441a      	add	r2, r3
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	6a1a      	ldr	r2, [r3, #32]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d30b      	bcc.n	8003c7e <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	691b      	ldr	r3, [r3, #16]
 8003c6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c76:	1ad2      	subs	r2, r2, r3
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	621a      	str	r2, [r3, #32]
 8003c7c:	e017      	b.n	8003cae <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6a1b      	ldr	r3, [r3, #32]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d108      	bne.n	8003c98 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c86:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c96:	e00a      	b.n	8003cae <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	6a1b      	ldr	r3, [r3, #32]
 8003ca4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	2200      	movs	r2, #0
 8003cac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003cae:	68bb      	ldr	r3, [r7, #8]
 8003cb0:	785b      	ldrb	r3, [r3, #1]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d165      	bne.n	8003d82 <HAL_PCD_EP_DB_Transmit+0x382>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cca:	4413      	add	r3, r2
 8003ccc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	011a      	lsls	r2, r3, #4
 8003cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cdc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	801a      	strh	r2, [r3, #0]
 8003cee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d08:	801a      	strh	r2, [r3, #0]
 8003d0a:	e057      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d10:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d12:	d818      	bhi.n	8003d46 <HAL_PCD_EP_DB_Transmit+0x346>
 8003d14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d1c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d002      	beq.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x32e>
 8003d28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d30:	881b      	ldrh	r3, [r3, #0]
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	029b      	lsls	r3, r3, #10
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d42:	801a      	strh	r2, [r3, #0]
 8003d44:	e03a      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4a:	095b      	lsrs	r3, r3, #5
 8003d4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d52:	f003 031f 	and.w	r3, r3, #31
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <HAL_PCD_EP_DB_Transmit+0x360>
 8003d5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d62:	881b      	ldrh	r3, [r3, #0]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	029b      	lsls	r3, r3, #10
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7a:	b29a      	uxth	r2, r3
 8003d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d7e:	801a      	strh	r2, [r3, #0]
 8003d80:	e01c      	b.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	785b      	ldrb	r3, [r3, #1]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d118      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d9e:	4413      	add	r3, r2
 8003da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	011a      	lsls	r2, r3, #4
 8003da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003daa:	4413      	add	r3, r2
 8003dac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003db0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dba:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6818      	ldr	r0, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	6959      	ldr	r1, [r3, #20]
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	891a      	ldrh	r2, [r3, #8]
 8003dc8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	f004 f8f4 	bl	8007fba <USB_WritePMA>
 8003dd2:	e1e2      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	4413      	add	r3, r2
 8003de8:	3306      	adds	r3, #6
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	68fa      	ldr	r2, [r7, #12]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	4413      	add	r3, r2
 8003df2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfc:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	699a      	ldr	r2, [r3, #24]
 8003e04:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d307      	bcc.n	8003e1c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	699a      	ldr	r2, [r3, #24]
 8003e10:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e14:	1ad2      	subs	r2, r2, r3
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	619a      	str	r2, [r3, #24]
 8003e1a:	e002      	b.n	8003e22 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	f040 80c0 	bne.w	8003fac <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	785b      	ldrb	r3, [r3, #1]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d126      	bne.n	8003e82 <HAL_PCD_EP_DB_Transmit+0x482>
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	461a      	mov	r2, r3
 8003e46:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e48:	4413      	add	r3, r2
 8003e4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	011a      	lsls	r2, r3, #4
 8003e52:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e54:	4413      	add	r3, r2
 8003e56:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e5a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e5c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e6a:	801a      	strh	r2, [r3, #0]
 8003e6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e6e:	881b      	ldrh	r3, [r3, #0]
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e7e:	801a      	strh	r2, [r3, #0]
 8003e80:	e01a      	b.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	785b      	ldrb	r3, [r3, #1]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d116      	bne.n	8003eb8 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e9e:	4413      	add	r3, r2
 8003ea0:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	011a      	lsls	r2, r3, #4
 8003ea8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003eaa:	4413      	add	r3, r2
 8003eac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003eb0:	663b      	str	r3, [r7, #96]	@ 0x60
 8003eb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	785b      	ldrb	r3, [r3, #1]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d12b      	bne.n	8003f1e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003eda:	4413      	add	r3, r2
 8003edc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	011a      	lsls	r2, r3, #4
 8003ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003eec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ef0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f08:	881b      	ldrh	r3, [r3, #0]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f1a:	801a      	strh	r2, [r3, #0]
 8003f1c:	e017      	b.n	8003f4e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	785b      	ldrb	r3, [r3, #1]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d113      	bne.n	8003f4e <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f34:	4413      	add	r3, r2
 8003f36:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	781b      	ldrb	r3, [r3, #0]
 8003f3c:	011a      	lsls	r2, r3, #4
 8003f3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f40:	4413      	add	r3, r2
 8003f42:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f46:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f48:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	4619      	mov	r1, r3
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f005 fd7c 	bl	8009a52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f040 811a 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f80:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	441a      	add	r2, r3
 8003f92:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	8013      	strh	r3, [r2, #0]
 8003faa:	e0f6      	b.n	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d121      	bne.n	8003ffa <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fcc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fd0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	441a      	add	r2, r3
 8003fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004000:	2b01      	cmp	r3, #1
 8004002:	f040 80ca 	bne.w	800419a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800400e:	441a      	add	r2, r3
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	69da      	ldr	r2, [r3, #28]
 8004018:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800401c:	441a      	add	r2, r3
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	6a1a      	ldr	r2, [r3, #32]
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	429a      	cmp	r2, r3
 800402c:	d30b      	bcc.n	8004046 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6a1a      	ldr	r2, [r3, #32]
 800403a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800403e:	1ad2      	subs	r2, r2, r3
 8004040:	68bb      	ldr	r3, [r7, #8]
 8004042:	621a      	str	r2, [r3, #32]
 8004044:	e017      	b.n	8004076 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	6a1b      	ldr	r3, [r3, #32]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d108      	bne.n	8004060 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 800404e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004052:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 800405e:	e00a      	b.n	8004076 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	2200      	movs	r2, #0
 800406c:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	657b      	str	r3, [r7, #84]	@ 0x54
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	785b      	ldrb	r3, [r3, #1]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d165      	bne.n	8004150 <HAL_PCD_EP_DB_Transmit+0x750>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004092:	b29b      	uxth	r3, r3
 8004094:	461a      	mov	r2, r3
 8004096:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004098:	4413      	add	r3, r2
 800409a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	011a      	lsls	r2, r3, #4
 80040a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040a4:	4413      	add	r3, r2
 80040a6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80040aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80040ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040b6:	b29a      	uxth	r2, r3
 80040b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ba:	801a      	strh	r2, [r3, #0]
 80040bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d10a      	bne.n	80040da <HAL_PCD_EP_DB_Transmit+0x6da>
 80040c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040d2:	b29a      	uxth	r2, r3
 80040d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040d6:	801a      	strh	r2, [r3, #0]
 80040d8:	e054      	b.n	8004184 <HAL_PCD_EP_DB_Transmit+0x784>
 80040da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040de:	2b3e      	cmp	r3, #62	@ 0x3e
 80040e0:	d818      	bhi.n	8004114 <HAL_PCD_EP_DB_Transmit+0x714>
 80040e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ee:	f003 0301 	and.w	r3, r3, #1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d002      	beq.n	80040fc <HAL_PCD_EP_DB_Transmit+0x6fc>
 80040f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040f8:	3301      	adds	r3, #1
 80040fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29a      	uxth	r2, r3
 8004102:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004104:	b29b      	uxth	r3, r3
 8004106:	029b      	lsls	r3, r3, #10
 8004108:	b29b      	uxth	r3, r3
 800410a:	4313      	orrs	r3, r2
 800410c:	b29a      	uxth	r2, r3
 800410e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004110:	801a      	strh	r2, [r3, #0]
 8004112:	e037      	b.n	8004184 <HAL_PCD_EP_DB_Transmit+0x784>
 8004114:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800411c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	2b00      	cmp	r3, #0
 8004126:	d102      	bne.n	800412e <HAL_PCD_EP_DB_Transmit+0x72e>
 8004128:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800412a:	3b01      	subs	r3, #1
 800412c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800412e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29a      	uxth	r2, r3
 8004134:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004136:	b29b      	uxth	r3, r3
 8004138:	029b      	lsls	r3, r3, #10
 800413a:	b29b      	uxth	r3, r3
 800413c:	4313      	orrs	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004144:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004148:	b29a      	uxth	r2, r3
 800414a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800414c:	801a      	strh	r2, [r3, #0]
 800414e:	e019      	b.n	8004184 <HAL_PCD_EP_DB_Transmit+0x784>
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d115      	bne.n	8004184 <HAL_PCD_EP_DB_Transmit+0x784>
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004160:	b29b      	uxth	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004166:	4413      	add	r3, r2
 8004168:	657b      	str	r3, [r7, #84]	@ 0x54
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	011a      	lsls	r2, r3, #4
 8004170:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004172:	4413      	add	r3, r2
 8004174:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004178:	653b      	str	r3, [r7, #80]	@ 0x50
 800417a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417e:	b29a      	uxth	r2, r3
 8004180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004182:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	6959      	ldr	r1, [r3, #20]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	895a      	ldrh	r2, [r3, #10]
 8004190:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004194:	b29b      	uxth	r3, r3
 8004196:	f003 ff10 	bl	8007fba <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	461a      	mov	r2, r3
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	781b      	ldrb	r3, [r3, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	881b      	ldrh	r3, [r3, #0]
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041b4:	82bb      	strh	r3, [r7, #20]
 80041b6:	8abb      	ldrh	r3, [r7, #20]
 80041b8:	f083 0310 	eor.w	r3, r3, #16
 80041bc:	82bb      	strh	r3, [r7, #20]
 80041be:	8abb      	ldrh	r3, [r7, #20]
 80041c0:	f083 0320 	eor.w	r3, r3, #32
 80041c4:	82bb      	strh	r3, [r7, #20]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	441a      	add	r2, r3
 80041d4:	8abb      	ldrh	r3, [r7, #20]
 80041d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3790      	adds	r7, #144	@ 0x90
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b087      	sub	sp, #28
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	607b      	str	r3, [r7, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	817b      	strh	r3, [r7, #10]
 8004202:	4613      	mov	r3, r2
 8004204:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00b      	beq.n	800422a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004212:	897b      	ldrh	r3, [r7, #10]
 8004214:	f003 0207 	and.w	r2, r3, #7
 8004218:	4613      	mov	r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	4413      	add	r3, r2
 800421e:	00db      	lsls	r3, r3, #3
 8004220:	3310      	adds	r3, #16
 8004222:	68fa      	ldr	r2, [r7, #12]
 8004224:	4413      	add	r3, r2
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	e009      	b.n	800423e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800422a:	897a      	ldrh	r2, [r7, #10]
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	00db      	lsls	r3, r3, #3
 8004234:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800423e:	893b      	ldrh	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d107      	bne.n	8004254 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	2200      	movs	r2, #0
 8004248:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	b29a      	uxth	r2, r3
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	80da      	strh	r2, [r3, #6]
 8004252:	e00b      	b.n	800426c <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2201      	movs	r2, #1
 8004258:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	b29a      	uxth	r2, r3
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	b29a      	uxth	r2, r3
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	371c      	adds	r7, #28
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr
	...

0800427c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004282:	af00      	add	r7, sp, #0
 8004284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004288:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800428c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004292:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f001 b823 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 817d 	beq.w	80045b2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042b8:	4bbc      	ldr	r3, [pc, #752]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f003 030c 	and.w	r3, r3, #12
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d00c      	beq.n	80042de <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c4:	4bb9      	ldr	r3, [pc, #740]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 030c 	and.w	r3, r3, #12
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d15c      	bne.n	800438a <HAL_RCC_OscConfig+0x10e>
 80042d0:	4bb6      	ldr	r3, [pc, #728]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042dc:	d155      	bne.n	800438a <HAL_RCC_OscConfig+0x10e>
 80042de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80042ea:	fa93 f3a3 	rbit	r3, r3
 80042ee:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042f2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f6:	fab3 f383 	clz	r3, r3
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b01      	cmp	r3, #1
 8004308:	d102      	bne.n	8004310 <HAL_RCC_OscConfig+0x94>
 800430a:	4ba8      	ldr	r3, [pc, #672]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	e015      	b.n	800433c <HAL_RCC_OscConfig+0xc0>
 8004310:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004314:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800431c:	fa93 f3a3 	rbit	r3, r3
 8004320:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004324:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004328:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800432c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004330:	fa93 f3a3 	rbit	r3, r3
 8004334:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004338:	4b9c      	ldr	r3, [pc, #624]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004340:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8004344:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004348:	fa92 f2a2 	rbit	r2, r2
 800434c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004350:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8004354:	fab2 f282 	clz	r2, r2
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f042 0220 	orr.w	r2, r2, #32
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	f002 021f 	and.w	r2, r2, #31
 8004364:	2101      	movs	r1, #1
 8004366:	fa01 f202 	lsl.w	r2, r1, r2
 800436a:	4013      	ands	r3, r2
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 811f 	beq.w	80045b0 <HAL_RCC_OscConfig+0x334>
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	f040 8116 	bne.w	80045b0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f000 bfaf 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800438a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800438e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439a:	d106      	bne.n	80043aa <HAL_RCC_OscConfig+0x12e>
 800439c:	4b83      	ldr	r3, [pc, #524]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a82      	ldr	r2, [pc, #520]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	e036      	b.n	8004418 <HAL_RCC_OscConfig+0x19c>
 80043aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10c      	bne.n	80043d4 <HAL_RCC_OscConfig+0x158>
 80043ba:	4b7c      	ldr	r3, [pc, #496]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a7b      	ldr	r2, [pc, #492]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043c4:	6013      	str	r3, [r2, #0]
 80043c6:	4b79      	ldr	r3, [pc, #484]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a78      	ldr	r2, [pc, #480]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043d0:	6013      	str	r3, [r2, #0]
 80043d2:	e021      	b.n	8004418 <HAL_RCC_OscConfig+0x19c>
 80043d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043e4:	d10c      	bne.n	8004400 <HAL_RCC_OscConfig+0x184>
 80043e6:	4b71      	ldr	r3, [pc, #452]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a70      	ldr	r2, [pc, #448]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043f0:	6013      	str	r3, [r2, #0]
 80043f2:	4b6e      	ldr	r3, [pc, #440]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6d      	ldr	r2, [pc, #436]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80043f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043fc:	6013      	str	r3, [r2, #0]
 80043fe:	e00b      	b.n	8004418 <HAL_RCC_OscConfig+0x19c>
 8004400:	4b6a      	ldr	r3, [pc, #424]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a69      	ldr	r2, [pc, #420]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 8004406:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800440a:	6013      	str	r3, [r2, #0]
 800440c:	4b67      	ldr	r3, [pc, #412]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a66      	ldr	r2, [pc, #408]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 8004412:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004416:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 800441a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800441c:	f023 020f 	bic.w	r2, r3, #15
 8004420:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004424:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	495f      	ldr	r1, [pc, #380]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 800442e:	4313      	orrs	r3, r2
 8004430:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004432:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004436:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d059      	beq.n	80044f6 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004442:	f7fc fc5b 	bl	8000cfc <HAL_GetTick>
 8004446:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444a:	e00a      	b.n	8004462 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800444c:	f7fc fc56 	bl	8000cfc <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b64      	cmp	r3, #100	@ 0x64
 800445a:	d902      	bls.n	8004462 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	f000 bf43 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004462:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004466:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800446e:	fa93 f3a3 	rbit	r3, r3
 8004472:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8004476:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800447a:	fab3 f383 	clz	r3, r3
 800447e:	b2db      	uxtb	r3, r3
 8004480:	095b      	lsrs	r3, r3, #5
 8004482:	b2db      	uxtb	r3, r3
 8004484:	f043 0301 	orr.w	r3, r3, #1
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d102      	bne.n	8004494 <HAL_RCC_OscConfig+0x218>
 800448e:	4b47      	ldr	r3, [pc, #284]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	e015      	b.n	80044c0 <HAL_RCC_OscConfig+0x244>
 8004494:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004498:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80044a0:	fa93 f3a3 	rbit	r3, r3
 80044a4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80044a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044ac:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80044b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 80044b4:	fa93 f3a3 	rbit	r3, r3
 80044b8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80044bc:	4b3b      	ldr	r3, [pc, #236]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 80044be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044c4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80044c8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80044cc:	fa92 f2a2 	rbit	r2, r2
 80044d0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80044d4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80044d8:	fab2 f282 	clz	r2, r2
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	f042 0220 	orr.w	r2, r2, #32
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	f002 021f 	and.w	r2, r2, #31
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	4013      	ands	r3, r2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d0ab      	beq.n	800444c <HAL_RCC_OscConfig+0x1d0>
 80044f4:	e05d      	b.n	80045b2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f6:	f7fc fc01 	bl	8000cfc <HAL_GetTick>
 80044fa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004500:	f7fc fbfc 	bl	8000cfc <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b64      	cmp	r3, #100	@ 0x64
 800450e:	d902      	bls.n	8004516 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	f000 bee9 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004516:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800451a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8004522:	fa93 f3a3 	rbit	r3, r3
 8004526:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800452a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800452e:	fab3 f383 	clz	r3, r3
 8004532:	b2db      	uxtb	r3, r3
 8004534:	095b      	lsrs	r3, r3, #5
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b01      	cmp	r3, #1
 8004540:	d102      	bne.n	8004548 <HAL_RCC_OscConfig+0x2cc>
 8004542:	4b1a      	ldr	r3, [pc, #104]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	e015      	b.n	8004574 <HAL_RCC_OscConfig+0x2f8>
 8004548:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800454c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004550:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800455c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004560:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004564:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004568:	fa93 f3a3 	rbit	r3, r3
 800456c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004570:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <HAL_RCC_OscConfig+0x330>)
 8004572:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004574:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004578:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 800457c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004580:	fa92 f2a2 	rbit	r2, r2
 8004584:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004588:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800458c:	fab2 f282 	clz	r2, r2
 8004590:	b2d2      	uxtb	r2, r2
 8004592:	f042 0220 	orr.w	r2, r2, #32
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	f002 021f 	and.w	r2, r2, #31
 800459c:	2101      	movs	r1, #1
 800459e:	fa01 f202 	lsl.w	r2, r1, r2
 80045a2:	4013      	ands	r3, r2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ab      	bne.n	8004500 <HAL_RCC_OscConfig+0x284>
 80045a8:	e003      	b.n	80045b2 <HAL_RCC_OscConfig+0x336>
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80045b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 817d 	beq.w	80048c2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045c8:	4ba6      	ldr	r3, [pc, #664]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f003 030c 	and.w	r3, r3, #12
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d00b      	beq.n	80045ec <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045d4:	4ba3      	ldr	r3, [pc, #652]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d172      	bne.n	80046c6 <HAL_RCC_OscConfig+0x44a>
 80045e0:	4ba0      	ldr	r3, [pc, #640]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d16c      	bne.n	80046c6 <HAL_RCC_OscConfig+0x44a>
 80045ec:	2302      	movs	r3, #2
 80045ee:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045f2:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80045f6:	fa93 f3a3 	rbit	r3, r3
 80045fa:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80045fe:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004602:	fab3 f383 	clz	r3, r3
 8004606:	b2db      	uxtb	r3, r3
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	b2db      	uxtb	r3, r3
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b01      	cmp	r3, #1
 8004614:	d102      	bne.n	800461c <HAL_RCC_OscConfig+0x3a0>
 8004616:	4b93      	ldr	r3, [pc, #588]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	e013      	b.n	8004644 <HAL_RCC_OscConfig+0x3c8>
 800461c:	2302      	movs	r3, #2
 800461e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004622:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004626:	fa93 f3a3 	rbit	r3, r3
 800462a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800462e:	2302      	movs	r3, #2
 8004630:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004634:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004638:	fa93 f3a3 	rbit	r3, r3
 800463c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004640:	4b88      	ldr	r3, [pc, #544]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 8004642:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004644:	2202      	movs	r2, #2
 8004646:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800464a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800464e:	fa92 f2a2 	rbit	r2, r2
 8004652:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8004656:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800465a:	fab2 f282 	clz	r2, r2
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	f042 0220 	orr.w	r2, r2, #32
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	f002 021f 	and.w	r2, r2, #31
 800466a:	2101      	movs	r1, #1
 800466c:	fa01 f202 	lsl.w	r2, r1, r2
 8004670:	4013      	ands	r3, r2
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00a      	beq.n	800468c <HAL_RCC_OscConfig+0x410>
 8004676:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800467a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d002      	beq.n	800468c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	f000 be2e 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b75      	ldr	r3, [pc, #468]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004694:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004698:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	21f8      	movs	r1, #248	@ 0xf8
 80046a2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80046aa:	fa91 f1a1 	rbit	r1, r1
 80046ae:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80046b2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80046b6:	fab1 f181 	clz	r1, r1
 80046ba:	b2c9      	uxtb	r1, r1
 80046bc:	408b      	lsls	r3, r1
 80046be:	4969      	ldr	r1, [pc, #420]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046c4:	e0fd      	b.n	80048c2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 8088 	beq.w	80047e8 <HAL_RCC_OscConfig+0x56c>
 80046d8:	2301      	movs	r3, #1
 80046da:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046de:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80046e2:	fa93 f3a3 	rbit	r3, r3
 80046e6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80046ea:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046ee:	fab3 f383 	clz	r3, r3
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046f8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	461a      	mov	r2, r3
 8004700:	2301      	movs	r3, #1
 8004702:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004704:	f7fc fafa 	bl	8000cfc <HAL_GetTick>
 8004708:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800470c:	e00a      	b.n	8004724 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800470e:	f7fc faf5 	bl	8000cfc <HAL_GetTick>
 8004712:	4602      	mov	r2, r0
 8004714:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d902      	bls.n	8004724 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	f000 bde2 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004724:	2302      	movs	r3, #2
 8004726:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800472a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800472e:	fa93 f3a3 	rbit	r3, r3
 8004732:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004736:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473a:	fab3 f383 	clz	r3, r3
 800473e:	b2db      	uxtb	r3, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	b2db      	uxtb	r3, r3
 8004744:	f043 0301 	orr.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d102      	bne.n	8004754 <HAL_RCC_OscConfig+0x4d8>
 800474e:	4b45      	ldr	r3, [pc, #276]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	e013      	b.n	800477c <HAL_RCC_OscConfig+0x500>
 8004754:	2302      	movs	r3, #2
 8004756:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800475e:	fa93 f3a3 	rbit	r3, r3
 8004762:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8004766:	2302      	movs	r3, #2
 8004768:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800476c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004770:	fa93 f3a3 	rbit	r3, r3
 8004774:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004778:	4b3a      	ldr	r3, [pc, #232]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 800477a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800477c:	2202      	movs	r2, #2
 800477e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004782:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004786:	fa92 f2a2 	rbit	r2, r2
 800478a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800478e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004792:	fab2 f282 	clz	r2, r2
 8004796:	b2d2      	uxtb	r2, r2
 8004798:	f042 0220 	orr.w	r2, r2, #32
 800479c:	b2d2      	uxtb	r2, r2
 800479e:	f002 021f 	and.w	r2, r2, #31
 80047a2:	2101      	movs	r1, #1
 80047a4:	fa01 f202 	lsl.w	r2, r1, r2
 80047a8:	4013      	ands	r3, r2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d0af      	beq.n	800470e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ae:	4b2d      	ldr	r3, [pc, #180]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047ba:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	21f8      	movs	r1, #248	@ 0xf8
 80047c4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80047cc:	fa91 f1a1 	rbit	r1, r1
 80047d0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80047d4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80047d8:	fab1 f181 	clz	r1, r1
 80047dc:	b2c9      	uxtb	r1, r1
 80047de:	408b      	lsls	r3, r1
 80047e0:	4920      	ldr	r1, [pc, #128]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	600b      	str	r3, [r1, #0]
 80047e6:	e06c      	b.n	80048c2 <HAL_RCC_OscConfig+0x646>
 80047e8:	2301      	movs	r3, #1
 80047ea:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80047f2:	fa93 f3a3 	rbit	r3, r3
 80047f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80047fa:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004808:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	461a      	mov	r2, r3
 8004810:	2300      	movs	r3, #0
 8004812:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7fc fa72 	bl	8000cfc <HAL_GetTick>
 8004818:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800481c:	e00a      	b.n	8004834 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800481e:	f7fc fa6d 	bl	8000cfc <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004828:	1ad3      	subs	r3, r2, r3
 800482a:	2b02      	cmp	r3, #2
 800482c:	d902      	bls.n	8004834 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800482e:	2303      	movs	r3, #3
 8004830:	f000 bd5a 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004834:	2302      	movs	r3, #2
 8004836:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8004846:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	b2db      	uxtb	r3, r3
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	d104      	bne.n	8004868 <HAL_RCC_OscConfig+0x5ec>
 800485e:	4b01      	ldr	r3, [pc, #4]	@ (8004864 <HAL_RCC_OscConfig+0x5e8>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	e015      	b.n	8004890 <HAL_RCC_OscConfig+0x614>
 8004864:	40021000 	.word	0x40021000
 8004868:	2302      	movs	r3, #2
 800486a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800487a:	2302      	movs	r3, #2
 800487c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004880:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004884:	fa93 f3a3 	rbit	r3, r3
 8004888:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800488c:	4bc8      	ldr	r3, [pc, #800]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 800488e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004890:	2202      	movs	r2, #2
 8004892:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004896:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800489a:	fa92 f2a2 	rbit	r2, r2
 800489e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80048a2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80048a6:	fab2 f282 	clz	r2, r2
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	f042 0220 	orr.w	r2, r2, #32
 80048b0:	b2d2      	uxtb	r2, r2
 80048b2:	f002 021f 	and.w	r2, r2, #31
 80048b6:	2101      	movs	r1, #1
 80048b8:	fa01 f202 	lsl.w	r2, r1, r2
 80048bc:	4013      	ands	r3, r2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d1ad      	bne.n	800481e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8110 	beq.w	8004af8 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048dc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d079      	beq.n	80049dc <HAL_RCC_OscConfig+0x760>
 80048e8:	2301      	movs	r3, #1
 80048ea:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80048fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fe:	fab3 f383 	clz	r3, r3
 8004902:	b2db      	uxtb	r3, r3
 8004904:	461a      	mov	r2, r3
 8004906:	4bab      	ldr	r3, [pc, #684]	@ (8004bb4 <HAL_RCC_OscConfig+0x938>)
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	461a      	mov	r2, r3
 800490e:	2301      	movs	r3, #1
 8004910:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004912:	f7fc f9f3 	bl	8000cfc <HAL_GetTick>
 8004916:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	e00a      	b.n	8004932 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800491c:	f7fc f9ee 	bl	8000cfc <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d902      	bls.n	8004932 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	f000 bcdb 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004932:	2302      	movs	r3, #2
 8004934:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800493c:	fa93 f3a3 	rbit	r3, r3
 8004940:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8004944:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004948:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800494c:	2202      	movs	r2, #2
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004954:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	fa93 f2a3 	rbit	r2, r3
 800495e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8004966:	601a      	str	r2, [r3, #0]
 8004968:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004970:	2202      	movs	r2, #2
 8004972:	601a      	str	r2, [r3, #0]
 8004974:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004978:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	fa93 f2a3 	rbit	r2, r3
 8004982:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004986:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800498a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498c:	4b88      	ldr	r3, [pc, #544]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 800498e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004990:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004994:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004998:	2102      	movs	r1, #2
 800499a:	6019      	str	r1, [r3, #0]
 800499c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	fa93 f1a3 	rbit	r1, r3
 80049aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ae:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80049b2:	6019      	str	r1, [r3, #0]
  return result;
 80049b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	fab3 f383 	clz	r3, r3
 80049c2:	b2db      	uxtb	r3, r3
 80049c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f003 031f 	and.w	r3, r3, #31
 80049ce:	2101      	movs	r1, #1
 80049d0:	fa01 f303 	lsl.w	r3, r1, r3
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0a0      	beq.n	800491c <HAL_RCC_OscConfig+0x6a0>
 80049da:	e08d      	b.n	8004af8 <HAL_RCC_OscConfig+0x87c>
 80049dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049e4:	2201      	movs	r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	fa93 f2a3 	rbit	r2, r3
 80049f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80049fe:	601a      	str	r2, [r3, #0]
  return result;
 8004a00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a04:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a08:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a0a:	fab3 f383 	clz	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b68      	ldr	r3, [pc, #416]	@ (8004bb4 <HAL_RCC_OscConfig+0x938>)
 8004a14:	4413      	add	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	461a      	mov	r2, r3
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1e:	f7fc f96d 	bl	8000cfc <HAL_GetTick>
 8004a22:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a26:	e00a      	b.n	8004a3e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a28:	f7fc f968 	bl	8000cfc <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d902      	bls.n	8004a3e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	f000 bc55 	b.w	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004a3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a42:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a46:	2202      	movs	r2, #2
 8004a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	fa93 f2a3 	rbit	r2, r3
 8004a58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a60:	601a      	str	r2, [r3, #0]
 8004a62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a66:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a72:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	fa93 f2a3 	rbit	r2, r3
 8004a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a80:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a84:	601a      	str	r2, [r3, #0]
 8004a86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004a8e:	2202      	movs	r2, #2
 8004a90:	601a      	str	r2, [r3, #0]
 8004a92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a96:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	fa93 f2a3 	rbit	r2, r3
 8004aa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004aa8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aaa:	4b41      	ldr	r3, [pc, #260]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004aac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004ab6:	2102      	movs	r1, #2
 8004ab8:	6019      	str	r1, [r3, #0]
 8004aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	fa93 f1a3 	rbit	r1, r3
 8004ac8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004acc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004ad0:	6019      	str	r1, [r3, #0]
  return result;
 8004ad2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ad6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	fab3 f383 	clz	r3, r3
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2101      	movs	r1, #1
 8004aee:	fa01 f303 	lsl.w	r3, r1, r3
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d197      	bne.n	8004a28 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004afc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0304 	and.w	r3, r3, #4
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	f000 81a1 	beq.w	8004e50 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b14:	4b26      	ldr	r3, [pc, #152]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d116      	bne.n	8004b4e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b20:	4b23      	ldr	r3, [pc, #140]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	4a22      	ldr	r2, [pc, #136]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004b26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b2a:	61d3      	str	r3, [r2, #28]
 8004b2c:	4b20      	ldr	r3, [pc, #128]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004b34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b38:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b42:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004b46:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b4e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bb8 <HAL_RCC_OscConfig+0x93c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d11a      	bne.n	8004b90 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b5a:	4b17      	ldr	r3, [pc, #92]	@ (8004bb8 <HAL_RCC_OscConfig+0x93c>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a16      	ldr	r2, [pc, #88]	@ (8004bb8 <HAL_RCC_OscConfig+0x93c>)
 8004b60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b64:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b66:	f7fc f8c9 	bl	8000cfc <HAL_GetTick>
 8004b6a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	e009      	b.n	8004b84 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b70:	f7fc f8c4 	bl	8000cfc <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b64      	cmp	r3, #100	@ 0x64
 8004b7e:	d901      	bls.n	8004b84 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e3b1      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b84:	4b0c      	ldr	r3, [pc, #48]	@ (8004bb8 <HAL_RCC_OscConfig+0x93c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d0ef      	beq.n	8004b70 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b94:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d10d      	bne.n	8004bbc <HAL_RCC_OscConfig+0x940>
 8004ba0:	4b03      	ldr	r3, [pc, #12]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	4a02      	ldr	r2, [pc, #8]	@ (8004bb0 <HAL_RCC_OscConfig+0x934>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6213      	str	r3, [r2, #32]
 8004bac:	e03c      	b.n	8004c28 <HAL_RCC_OscConfig+0x9ac>
 8004bae:	bf00      	nop
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	10908120 	.word	0x10908120
 8004bb8:	40007000 	.word	0x40007000
 8004bbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d10c      	bne.n	8004be6 <HAL_RCC_OscConfig+0x96a>
 8004bcc:	4bc1      	ldr	r3, [pc, #772]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4ac0      	ldr	r2, [pc, #768]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	6213      	str	r3, [r2, #32]
 8004bd8:	4bbe      	ldr	r3, [pc, #760]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	4abd      	ldr	r2, [pc, #756]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004bde:	f023 0304 	bic.w	r3, r3, #4
 8004be2:	6213      	str	r3, [r2, #32]
 8004be4:	e020      	b.n	8004c28 <HAL_RCC_OscConfig+0x9ac>
 8004be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d10c      	bne.n	8004c10 <HAL_RCC_OscConfig+0x994>
 8004bf6:	4bb7      	ldr	r3, [pc, #732]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	4ab6      	ldr	r2, [pc, #728]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004bfc:	f043 0304 	orr.w	r3, r3, #4
 8004c00:	6213      	str	r3, [r2, #32]
 8004c02:	4bb4      	ldr	r3, [pc, #720]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	4ab3      	ldr	r2, [pc, #716]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	6213      	str	r3, [r2, #32]
 8004c0e:	e00b      	b.n	8004c28 <HAL_RCC_OscConfig+0x9ac>
 8004c10:	4bb0      	ldr	r3, [pc, #704]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004c12:	6a1b      	ldr	r3, [r3, #32]
 8004c14:	4aaf      	ldr	r2, [pc, #700]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004c16:	f023 0301 	bic.w	r3, r3, #1
 8004c1a:	6213      	str	r3, [r2, #32]
 8004c1c:	4bad      	ldr	r3, [pc, #692]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	4aac      	ldr	r2, [pc, #688]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004c22:	f023 0304 	bic.w	r3, r3, #4
 8004c26:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c2c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8081 	beq.w	8004d3c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fc f85f 	bl	8000cfc <HAL_GetTick>
 8004c3e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c42:	e00b      	b.n	8004c5c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c44:	f7fc f85a 	bl	8000cfc <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e345      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004c5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c60:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c64:	2202      	movs	r2, #2
 8004c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	fa93 f2a3 	rbit	r2, r3
 8004c76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c7a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004c7e:	601a      	str	r2, [r3, #0]
 8004c80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c84:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004c88:	2202      	movs	r2, #2
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c90:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	fa93 f2a3 	rbit	r2, r3
 8004c9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c9e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004ca2:	601a      	str	r2, [r3, #0]
  return result;
 8004ca4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ca8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004cac:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cae:	fab3 f383 	clz	r3, r3
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	095b      	lsrs	r3, r3, #5
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f043 0302 	orr.w	r3, r3, #2
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d102      	bne.n	8004cc8 <HAL_RCC_OscConfig+0xa4c>
 8004cc2:	4b84      	ldr	r3, [pc, #528]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004cc4:	6a1b      	ldr	r3, [r3, #32]
 8004cc6:	e013      	b.n	8004cf0 <HAL_RCC_OscConfig+0xa74>
 8004cc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ccc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	fa93 f2a3 	rbit	r2, r3
 8004ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	4b79      	ldr	r3, [pc, #484]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cf4:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004cf8:	2102      	movs	r1, #2
 8004cfa:	6011      	str	r1, [r2, #0]
 8004cfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d00:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	fa92 f1a2 	rbit	r1, r2
 8004d0a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d0e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d12:	6011      	str	r1, [r2, #0]
  return result;
 8004d14:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d18:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	fab2 f282 	clz	r2, r2
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	f002 021f 	and.w	r2, r2, #31
 8004d2e:	2101      	movs	r1, #1
 8004d30:	fa01 f202 	lsl.w	r2, r1, r2
 8004d34:	4013      	ands	r3, r2
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d084      	beq.n	8004c44 <HAL_RCC_OscConfig+0x9c8>
 8004d3a:	e07f      	b.n	8004e3c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d3c:	f7fb ffde 	bl	8000cfc <HAL_GetTick>
 8004d40:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d44:	e00b      	b.n	8004d5e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d46:	f7fb ffd9 	bl	8000cfc <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e2c4      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004d5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d62:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004d66:	2202      	movs	r2, #2
 8004d68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	fa93 f2a3 	rbit	r2, r3
 8004d78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004d80:	601a      	str	r2, [r3, #0]
 8004d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d86:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004d8a:	2202      	movs	r2, #2
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	fa93 f2a3 	rbit	r2, r3
 8004d9c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004da0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004da4:	601a      	str	r2, [r3, #0]
  return result;
 8004da6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004daa:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004dae:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	f043 0302 	orr.w	r3, r3, #2
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d102      	bne.n	8004dca <HAL_RCC_OscConfig+0xb4e>
 8004dc4:	4b43      	ldr	r3, [pc, #268]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	e013      	b.n	8004df2 <HAL_RCC_OscConfig+0xb76>
 8004dca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dce:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dda:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	fa93 f2a3 	rbit	r2, r3
 8004de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	4b39      	ldr	r3, [pc, #228]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004df6:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004dfa:	2102      	movs	r1, #2
 8004dfc:	6011      	str	r1, [r2, #0]
 8004dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e02:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	fa92 f1a2 	rbit	r1, r2
 8004e0c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e10:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e14:	6011      	str	r1, [r2, #0]
  return result;
 8004e16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e1a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e1e:	6812      	ldr	r2, [r2, #0]
 8004e20:	fab2 f282 	clz	r2, r2
 8004e24:	b2d2      	uxtb	r2, r2
 8004e26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	f002 021f 	and.w	r2, r2, #31
 8004e30:	2101      	movs	r1, #1
 8004e32:	fa01 f202 	lsl.w	r2, r1, r2
 8004e36:	4013      	ands	r3, r2
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d184      	bne.n	8004d46 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e3c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d105      	bne.n	8004e50 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e44:	4b23      	ldr	r3, [pc, #140]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	4a22      	ldr	r2, [pc, #136]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004e4a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e54:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	69db      	ldr	r3, [r3, #28]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 8242 	beq.w	80052e6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e62:	4b1c      	ldr	r3, [pc, #112]	@ (8004ed4 <HAL_RCC_OscConfig+0xc58>)
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	f000 8213 	beq.w	8005296 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	f040 8162 	bne.w	8005146 <HAL_RCC_OscConfig+0xeca>
 8004e82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e86:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004e8a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e94:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	fa93 f2a3 	rbit	r2, r3
 8004e9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ea2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004ea6:	601a      	str	r2, [r3, #0]
  return result;
 8004ea8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eac:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004eb0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	fab3 f383 	clz	r3, r3
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ebc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec8:	f7fb ff18 	bl	8000cfc <HAL_GetTick>
 8004ecc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ed0:	e00c      	b.n	8004eec <HAL_RCC_OscConfig+0xc70>
 8004ed2:	bf00      	nop
 8004ed4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ed8:	f7fb ff10 	bl	8000cfc <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e1fd      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
 8004eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef0:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004ef4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ef8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efe:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	fa93 f2a3 	rbit	r2, r3
 8004f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f0c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f10:	601a      	str	r2, [r3, #0]
  return result;
 8004f12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f16:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f1a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f1c:	fab3 f383 	clz	r3, r3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d102      	bne.n	8004f36 <HAL_RCC_OscConfig+0xcba>
 8004f30:	4bb0      	ldr	r3, [pc, #704]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	e027      	b.n	8004f86 <HAL_RCC_OscConfig+0xd0a>
 8004f36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f3e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f48:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	fa93 f2a3 	rbit	r2, r3
 8004f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f56:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004f5a:	601a      	str	r2, [r3, #0]
 8004f5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f60:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004f64:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f6e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	fa93 f2a3 	rbit	r2, r3
 8004f78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	4b9c      	ldr	r3, [pc, #624]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 8004f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f86:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f8a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004f8e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f92:	6011      	str	r1, [r2, #0]
 8004f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f98:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	fa92 f1a2 	rbit	r1, r2
 8004fa2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fa6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004faa:	6011      	str	r1, [r2, #0]
  return result;
 8004fac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fb0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004fb4:	6812      	ldr	r2, [r2, #0]
 8004fb6:	fab2 f282 	clz	r2, r2
 8004fba:	b2d2      	uxtb	r2, r2
 8004fbc:	f042 0220 	orr.w	r2, r2, #32
 8004fc0:	b2d2      	uxtb	r2, r2
 8004fc2:	f002 021f 	and.w	r2, r2, #31
 8004fc6:	2101      	movs	r1, #1
 8004fc8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d182      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fd2:	4b88      	ldr	r3, [pc, #544]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004fda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fde:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	497f      	ldr	r1, [pc, #508]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	604b      	str	r3, [r1, #4]
 8004ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffe:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005002:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005006:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800500c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	fa93 f2a3 	rbit	r2, r3
 8005016:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800501a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800501e:	601a      	str	r2, [r3, #0]
  return result;
 8005020:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005024:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005028:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800502a:	fab3 f383 	clz	r3, r3
 800502e:	b2db      	uxtb	r3, r3
 8005030:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005034:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	461a      	mov	r2, r3
 800503c:	2301      	movs	r3, #1
 800503e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005040:	f7fb fe5c 	bl	8000cfc <HAL_GetTick>
 8005044:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005048:	e009      	b.n	800505e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504a:	f7fb fe57 	bl	8000cfc <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b02      	cmp	r3, #2
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e144      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
 800505e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005062:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005066:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800506a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005070:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	fa93 f2a3 	rbit	r2, r3
 800507a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005082:	601a      	str	r2, [r3, #0]
  return result;
 8005084:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005088:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800508c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800508e:	fab3 f383 	clz	r3, r3
 8005092:	b2db      	uxtb	r3, r3
 8005094:	095b      	lsrs	r3, r3, #5
 8005096:	b2db      	uxtb	r3, r3
 8005098:	f043 0301 	orr.w	r3, r3, #1
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d102      	bne.n	80050a8 <HAL_RCC_OscConfig+0xe2c>
 80050a2:	4b54      	ldr	r3, [pc, #336]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	e027      	b.n	80050f8 <HAL_RCC_OscConfig+0xe7c>
 80050a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ac:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80050b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	fa93 f2a3 	rbit	r2, r3
 80050c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80050d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050e0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	fa93 f2a3 	rbit	r2, r3
 80050ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	4b3f      	ldr	r3, [pc, #252]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 80050f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050fc:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005100:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005104:	6011      	str	r1, [r2, #0]
 8005106:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800510a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	fa92 f1a2 	rbit	r1, r2
 8005114:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005118:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800511c:	6011      	str	r1, [r2, #0]
  return result;
 800511e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005122:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005126:	6812      	ldr	r2, [r2, #0]
 8005128:	fab2 f282 	clz	r2, r2
 800512c:	b2d2      	uxtb	r2, r2
 800512e:	f042 0220 	orr.w	r2, r2, #32
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	f002 021f 	and.w	r2, r2, #31
 8005138:	2101      	movs	r1, #1
 800513a:	fa01 f202 	lsl.w	r2, r1, r2
 800513e:	4013      	ands	r3, r2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d082      	beq.n	800504a <HAL_RCC_OscConfig+0xdce>
 8005144:	e0cf      	b.n	80052e6 <HAL_RCC_OscConfig+0x106a>
 8005146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800514a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800514e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005152:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005158:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	fa93 f2a3 	rbit	r2, r3
 8005162:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005166:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800516a:	601a      	str	r2, [r3, #0]
  return result;
 800516c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005170:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005174:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005176:	fab3 f383 	clz	r3, r3
 800517a:	b2db      	uxtb	r3, r3
 800517c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005180:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	461a      	mov	r2, r3
 8005188:	2300      	movs	r3, #0
 800518a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800518c:	f7fb fdb6 	bl	8000cfc <HAL_GetTick>
 8005190:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005194:	e009      	b.n	80051aa <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005196:	f7fb fdb1 	bl	8000cfc <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b02      	cmp	r3, #2
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e09e      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
 80051aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051ae:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80051b2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051bc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	fa93 f2a3 	rbit	r2, r3
 80051c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051ca:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80051ce:	601a      	str	r2, [r3, #0]
  return result;
 80051d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80051d8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051da:	fab3 f383 	clz	r3, r3
 80051de:	b2db      	uxtb	r3, r3
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d104      	bne.n	80051f8 <HAL_RCC_OscConfig+0xf7c>
 80051ee:	4b01      	ldr	r3, [pc, #4]	@ (80051f4 <HAL_RCC_OscConfig+0xf78>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	e029      	b.n	8005248 <HAL_RCC_OscConfig+0xfcc>
 80051f4:	40021000 	.word	0x40021000
 80051f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005200:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005204:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800520a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	fa93 f2a3 	rbit	r2, r3
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005222:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005226:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005230:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	fa93 f2a3 	rbit	r2, r3
 800523a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800523e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	4b2b      	ldr	r3, [pc, #172]	@ (80052f4 <HAL_RCC_OscConfig+0x1078>)
 8005246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005248:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800524c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005250:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005254:	6011      	str	r1, [r2, #0]
 8005256:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800525a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fa92 f1a2 	rbit	r1, r2
 8005264:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005268:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800526c:	6011      	str	r1, [r2, #0]
  return result;
 800526e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005272:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005276:	6812      	ldr	r2, [r2, #0]
 8005278:	fab2 f282 	clz	r2, r2
 800527c:	b2d2      	uxtb	r2, r2
 800527e:	f042 0220 	orr.w	r2, r2, #32
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	f002 021f 	and.w	r2, r2, #31
 8005288:	2101      	movs	r1, #1
 800528a:	fa01 f202 	lsl.w	r2, r1, r2
 800528e:	4013      	ands	r3, r2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d180      	bne.n	8005196 <HAL_RCC_OscConfig+0xf1a>
 8005294:	e027      	b.n	80052e6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800529a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d101      	bne.n	80052aa <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e01e      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80052aa:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <HAL_RCC_OscConfig+0x1078>)
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80052b6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6a1b      	ldr	r3, [r3, #32]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d10b      	bne.n	80052e2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80052ca:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80052ce:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40021000 	.word	0x40021000

080052f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b09e      	sub	sp, #120	@ 0x78
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e162      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b90      	ldr	r3, [pc, #576]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d910      	bls.n	8005340 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b8d      	ldr	r3, [pc, #564]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 0207 	bic.w	r2, r3, #7
 8005326:	498b      	ldr	r1, [pc, #556]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b89      	ldr	r3, [pc, #548]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e14a      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0302 	and.w	r3, r3, #2
 8005348:	2b00      	cmp	r3, #0
 800534a:	d008      	beq.n	800535e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800534c:	4b82      	ldr	r3, [pc, #520]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	497f      	ldr	r1, [pc, #508]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 800535a:	4313      	orrs	r3, r2
 800535c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 0301 	and.w	r3, r3, #1
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80dc 	beq.w	8005524 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	2b01      	cmp	r3, #1
 8005372:	d13c      	bne.n	80053ee <HAL_RCC_ClockConfig+0xf6>
 8005374:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005378:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800537a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800537c:	fa93 f3a3 	rbit	r3, r3
 8005380:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005382:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005384:	fab3 f383 	clz	r3, r3
 8005388:	b2db      	uxtb	r3, r3
 800538a:	095b      	lsrs	r3, r3, #5
 800538c:	b2db      	uxtb	r3, r3
 800538e:	f043 0301 	orr.w	r3, r3, #1
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	d102      	bne.n	800539e <HAL_RCC_ClockConfig+0xa6>
 8005398:	4b6f      	ldr	r3, [pc, #444]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	e00f      	b.n	80053be <HAL_RCC_ClockConfig+0xc6>
 800539e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053a2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80053a6:	fa93 f3a3 	rbit	r3, r3
 80053aa:	667b      	str	r3, [r7, #100]	@ 0x64
 80053ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053b4:	fa93 f3a3 	rbit	r3, r3
 80053b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053ba:	4b67      	ldr	r3, [pc, #412]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 80053bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80053c2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053c6:	fa92 f2a2 	rbit	r2, r2
 80053ca:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80053cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053ce:	fab2 f282 	clz	r2, r2
 80053d2:	b2d2      	uxtb	r2, r2
 80053d4:	f042 0220 	orr.w	r2, r2, #32
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	f002 021f 	and.w	r2, r2, #31
 80053de:	2101      	movs	r1, #1
 80053e0:	fa01 f202 	lsl.w	r2, r1, r2
 80053e4:	4013      	ands	r3, r2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d17b      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053ea:	2301      	movs	r3, #1
 80053ec:	e0f3      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d13c      	bne.n	8005470 <HAL_RCC_ClockConfig+0x178>
 80053f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053fa:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053fe:	fa93 f3a3 	rbit	r3, r3
 8005402:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005404:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005406:	fab3 f383 	clz	r3, r3
 800540a:	b2db      	uxtb	r3, r3
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	b2db      	uxtb	r3, r3
 8005410:	f043 0301 	orr.w	r3, r3, #1
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b01      	cmp	r3, #1
 8005418:	d102      	bne.n	8005420 <HAL_RCC_ClockConfig+0x128>
 800541a:	4b4f      	ldr	r3, [pc, #316]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	e00f      	b.n	8005440 <HAL_RCC_ClockConfig+0x148>
 8005420:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005424:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005428:	fa93 f3a3 	rbit	r3, r3
 800542c:	647b      	str	r3, [r7, #68]	@ 0x44
 800542e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005432:	643b      	str	r3, [r7, #64]	@ 0x40
 8005434:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005436:	fa93 f3a3 	rbit	r3, r3
 800543a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800543c:	4b46      	ldr	r3, [pc, #280]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005444:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005446:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005448:	fa92 f2a2 	rbit	r2, r2
 800544c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800544e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005450:	fab2 f282 	clz	r2, r2
 8005454:	b2d2      	uxtb	r2, r2
 8005456:	f042 0220 	orr.w	r2, r2, #32
 800545a:	b2d2      	uxtb	r2, r2
 800545c:	f002 021f 	and.w	r2, r2, #31
 8005460:	2101      	movs	r1, #1
 8005462:	fa01 f202 	lsl.w	r2, r1, r2
 8005466:	4013      	ands	r3, r2
 8005468:	2b00      	cmp	r3, #0
 800546a:	d13a      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e0b2      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
 8005470:	2302      	movs	r3, #2
 8005472:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005476:	fa93 f3a3 	rbit	r3, r3
 800547a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800547c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	b2db      	uxtb	r3, r3
 8005488:	f043 0301 	orr.w	r3, r3, #1
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b01      	cmp	r3, #1
 8005490:	d102      	bne.n	8005498 <HAL_RCC_ClockConfig+0x1a0>
 8005492:	4b31      	ldr	r3, [pc, #196]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	e00d      	b.n	80054b4 <HAL_RCC_ClockConfig+0x1bc>
 8005498:	2302      	movs	r3, #2
 800549a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549e:	fa93 f3a3 	rbit	r3, r3
 80054a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054a4:	2302      	movs	r3, #2
 80054a6:	623b      	str	r3, [r7, #32]
 80054a8:	6a3b      	ldr	r3, [r7, #32]
 80054aa:	fa93 f3a3 	rbit	r3, r3
 80054ae:	61fb      	str	r3, [r7, #28]
 80054b0:	4b29      	ldr	r3, [pc, #164]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	2202      	movs	r2, #2
 80054b6:	61ba      	str	r2, [r7, #24]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	fa92 f2a2 	rbit	r2, r2
 80054be:	617a      	str	r2, [r7, #20]
  return result;
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	fab2 f282 	clz	r2, r2
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	f042 0220 	orr.w	r2, r2, #32
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	f002 021f 	and.w	r2, r2, #31
 80054d2:	2101      	movs	r1, #1
 80054d4:	fa01 f202 	lsl.w	r2, r1, r2
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e079      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054e2:	4b1d      	ldr	r3, [pc, #116]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f023 0203 	bic.w	r2, r3, #3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	491a      	ldr	r1, [pc, #104]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 80054f0:	4313      	orrs	r3, r2
 80054f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054f4:	f7fb fc02 	bl	8000cfc <HAL_GetTick>
 80054f8:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	e00a      	b.n	8005512 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054fc:	f7fb fbfe 	bl	8000cfc <HAL_GetTick>
 8005500:	4602      	mov	r2, r0
 8005502:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	f241 3288 	movw	r2, #5000	@ 0x1388
 800550a:	4293      	cmp	r3, r2
 800550c:	d901      	bls.n	8005512 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	e061      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005512:	4b11      	ldr	r3, [pc, #68]	@ (8005558 <HAL_RCC_ClockConfig+0x260>)
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	f003 020c 	and.w	r2, r3, #12
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	429a      	cmp	r2, r3
 8005522:	d1eb      	bne.n	80054fc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005524:	4b0b      	ldr	r3, [pc, #44]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0307 	and.w	r3, r3, #7
 800552c:	683a      	ldr	r2, [r7, #0]
 800552e:	429a      	cmp	r2, r3
 8005530:	d214      	bcs.n	800555c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005532:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 0207 	bic.w	r2, r3, #7
 800553a:	4906      	ldr	r1, [pc, #24]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	4313      	orrs	r3, r2
 8005540:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005542:	4b04      	ldr	r3, [pc, #16]	@ (8005554 <HAL_RCC_ClockConfig+0x25c>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f003 0307 	and.w	r3, r3, #7
 800554a:	683a      	ldr	r2, [r7, #0]
 800554c:	429a      	cmp	r2, r3
 800554e:	d005      	beq.n	800555c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e040      	b.n	80055d6 <HAL_RCC_ClockConfig+0x2de>
 8005554:	40022000 	.word	0x40022000
 8005558:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005568:	4b1d      	ldr	r3, [pc, #116]	@ (80055e0 <HAL_RCC_ClockConfig+0x2e8>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	491a      	ldr	r1, [pc, #104]	@ (80055e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005576:	4313      	orrs	r3, r2
 8005578:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	d009      	beq.n	800559a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005586:	4b16      	ldr	r3, [pc, #88]	@ (80055e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	691b      	ldr	r3, [r3, #16]
 8005592:	00db      	lsls	r3, r3, #3
 8005594:	4912      	ldr	r1, [pc, #72]	@ (80055e0 <HAL_RCC_ClockConfig+0x2e8>)
 8005596:	4313      	orrs	r3, r2
 8005598:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800559a:	f000 f829 	bl	80055f0 <HAL_RCC_GetSysClockFreq>
 800559e:	4601      	mov	r1, r0
 80055a0:	4b0f      	ldr	r3, [pc, #60]	@ (80055e0 <HAL_RCC_ClockConfig+0x2e8>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055a8:	22f0      	movs	r2, #240	@ 0xf0
 80055aa:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	fa92 f2a2 	rbit	r2, r2
 80055b2:	60fa      	str	r2, [r7, #12]
  return result;
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	fab2 f282 	clz	r2, r2
 80055ba:	b2d2      	uxtb	r2, r2
 80055bc:	40d3      	lsrs	r3, r2
 80055be:	4a09      	ldr	r2, [pc, #36]	@ (80055e4 <HAL_RCC_ClockConfig+0x2ec>)
 80055c0:	5cd3      	ldrb	r3, [r2, r3]
 80055c2:	fa21 f303 	lsr.w	r3, r1, r3
 80055c6:	4a08      	ldr	r2, [pc, #32]	@ (80055e8 <HAL_RCC_ClockConfig+0x2f0>)
 80055c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80055ca:	4b08      	ldr	r3, [pc, #32]	@ (80055ec <HAL_RCC_ClockConfig+0x2f4>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7fb fb50 	bl	8000c74 <HAL_InitTick>
  
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3778      	adds	r7, #120	@ 0x78
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
 80055de:	bf00      	nop
 80055e0:	40021000 	.word	0x40021000
 80055e4:	08009fa0 	.word	0x08009fa0
 80055e8:	20000000 	.word	0x20000000
 80055ec:	20000004 	.word	0x20000004

080055f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	2300      	movs	r3, #0
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
 8005602:	2300      	movs	r3, #0
 8005604:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800560a:	4b1e      	ldr	r3, [pc, #120]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x94>)
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f003 030c 	and.w	r3, r3, #12
 8005616:	2b04      	cmp	r3, #4
 8005618:	d002      	beq.n	8005620 <HAL_RCC_GetSysClockFreq+0x30>
 800561a:	2b08      	cmp	r3, #8
 800561c:	d003      	beq.n	8005626 <HAL_RCC_GetSysClockFreq+0x36>
 800561e:	e026      	b.n	800566e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005620:	4b19      	ldr	r3, [pc, #100]	@ (8005688 <HAL_RCC_GetSysClockFreq+0x98>)
 8005622:	613b      	str	r3, [r7, #16]
      break;
 8005624:	e026      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	0c9b      	lsrs	r3, r3, #18
 800562a:	f003 030f 	and.w	r3, r3, #15
 800562e:	4a17      	ldr	r2, [pc, #92]	@ (800568c <HAL_RCC_GetSysClockFreq+0x9c>)
 8005630:	5cd3      	ldrb	r3, [r2, r3]
 8005632:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005634:	4b13      	ldr	r3, [pc, #76]	@ (8005684 <HAL_RCC_GetSysClockFreq+0x94>)
 8005636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005638:	f003 030f 	and.w	r3, r3, #15
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <HAL_RCC_GetSysClockFreq+0xa0>)
 800563e:	5cd3      	ldrb	r3, [r2, r3]
 8005640:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800564c:	4a0e      	ldr	r2, [pc, #56]	@ (8005688 <HAL_RCC_GetSysClockFreq+0x98>)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	fbb2 f2f3 	udiv	r2, r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	fb02 f303 	mul.w	r3, r2, r3
 800565a:	617b      	str	r3, [r7, #20]
 800565c:	e004      	b.n	8005668 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a0c      	ldr	r2, [pc, #48]	@ (8005694 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005662:	fb02 f303 	mul.w	r3, r2, r3
 8005666:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	613b      	str	r3, [r7, #16]
      break;
 800566c:	e002      	b.n	8005674 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <HAL_RCC_GetSysClockFreq+0x98>)
 8005670:	613b      	str	r3, [r7, #16]
      break;
 8005672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005674:	693b      	ldr	r3, [r7, #16]
}
 8005676:	4618      	mov	r0, r3
 8005678:	371c      	adds	r7, #28
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	007a1200 	.word	0x007a1200
 800568c:	08009fb0 	.word	0x08009fb0
 8005690:	08009fc0 	.word	0x08009fc0
 8005694:	003d0900 	.word	0x003d0900

08005698 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b092      	sub	sp, #72	@ 0x48
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80056a8:	2300      	movs	r3, #0
 80056aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 80d4 	beq.w	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056bc:	4b4e      	ldr	r3, [pc, #312]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10e      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056c8:	4b4b      	ldr	r3, [pc, #300]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	4a4a      	ldr	r2, [pc, #296]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056d2:	61d3      	str	r3, [r2, #28]
 80056d4:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056d6:	69db      	ldr	r3, [r3, #28]
 80056d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056dc:	60bb      	str	r3, [r7, #8]
 80056de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056e6:	4b45      	ldr	r3, [pc, #276]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d118      	bne.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056f2:	4b42      	ldr	r3, [pc, #264]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a41      	ldr	r2, [pc, #260]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056fe:	f7fb fafd 	bl	8000cfc <HAL_GetTick>
 8005702:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005704:	e008      	b.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005706:	f7fb faf9 	bl	8000cfc <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b64      	cmp	r3, #100	@ 0x64
 8005712:	d901      	bls.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e169      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005718:	4b38      	ldr	r3, [pc, #224]	@ (80057fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005720:	2b00      	cmp	r3, #0
 8005722:	d0f0      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005724:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	6a1b      	ldr	r3, [r3, #32]
 8005728:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800572c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800572e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 8084 	beq.w	800583e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800573e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005740:	429a      	cmp	r2, r3
 8005742:	d07c      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005744:	4b2c      	ldr	r3, [pc, #176]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005746:	6a1b      	ldr	r3, [r3, #32]
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800574e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005752:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005756:	fa93 f3a3 	rbit	r3, r3
 800575a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800575c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800575e:	fab3 f383 	clz	r3, r3
 8005762:	b2db      	uxtb	r3, r3
 8005764:	461a      	mov	r2, r3
 8005766:	4b26      	ldr	r3, [pc, #152]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	461a      	mov	r2, r3
 800576e:	2301      	movs	r3, #1
 8005770:	6013      	str	r3, [r2, #0]
 8005772:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005776:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577a:	fa93 f3a3 	rbit	r3, r3
 800577e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005782:	fab3 f383 	clz	r3, r3
 8005786:	b2db      	uxtb	r3, r3
 8005788:	461a      	mov	r2, r3
 800578a:	4b1d      	ldr	r3, [pc, #116]	@ (8005800 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	461a      	mov	r2, r3
 8005792:	2300      	movs	r3, #0
 8005794:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005796:	4a18      	ldr	r2, [pc, #96]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800579c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d04b      	beq.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a6:	f7fb faa9 	bl	8000cfc <HAL_GetTick>
 80057aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057ac:	e00a      	b.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ae:	f7fb faa5 	bl	8000cfc <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e113      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x354>
 80057c4:	2302      	movs	r3, #2
 80057c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ca:	fa93 f3a3 	rbit	r3, r3
 80057ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d0:	2302      	movs	r3, #2
 80057d2:	623b      	str	r3, [r7, #32]
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	61fb      	str	r3, [r7, #28]
  return result;
 80057dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057de:	fab3 f383 	clz	r3, r3
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	095b      	lsrs	r3, r3, #5
 80057e6:	b2db      	uxtb	r3, r3
 80057e8:	f043 0302 	orr.w	r3, r3, #2
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b02      	cmp	r3, #2
 80057f0:	d108      	bne.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057f2:	4b01      	ldr	r3, [pc, #4]	@ (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f4:	6a1b      	ldr	r3, [r3, #32]
 80057f6:	e00d      	b.n	8005814 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057f8:	40021000 	.word	0x40021000
 80057fc:	40007000 	.word	0x40007000
 8005800:	10908100 	.word	0x10908100
 8005804:	2302      	movs	r3, #2
 8005806:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005808:	69bb      	ldr	r3, [r7, #24]
 800580a:	fa93 f3a3 	rbit	r3, r3
 800580e:	617b      	str	r3, [r7, #20]
 8005810:	4b78      	ldr	r3, [pc, #480]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	2202      	movs	r2, #2
 8005816:	613a      	str	r2, [r7, #16]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	fa92 f2a2 	rbit	r2, r2
 800581e:	60fa      	str	r2, [r7, #12]
  return result;
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	fab2 f282 	clz	r2, r2
 8005826:	b2d2      	uxtb	r2, r2
 8005828:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800582c:	b2d2      	uxtb	r2, r2
 800582e:	f002 021f 	and.w	r2, r2, #31
 8005832:	2101      	movs	r1, #1
 8005834:	fa01 f202 	lsl.w	r2, r1, r2
 8005838:	4013      	ands	r3, r2
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0b7      	beq.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800583e:	4b6d      	ldr	r3, [pc, #436]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005840:	6a1b      	ldr	r3, [r3, #32]
 8005842:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	496a      	ldr	r1, [pc, #424]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584c:	4313      	orrs	r3, r2
 800584e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005850:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005854:	2b01      	cmp	r3, #1
 8005856:	d105      	bne.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005858:	4b66      	ldr	r3, [pc, #408]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	4a65      	ldr	r2, [pc, #404]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005862:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d008      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005870:	4b60      	ldr	r3, [pc, #384]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005874:	f023 0203 	bic.w	r2, r3, #3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	495d      	ldr	r1, [pc, #372]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800587e:	4313      	orrs	r3, r2
 8005880:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0302 	and.w	r3, r3, #2
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800588e:	4b59      	ldr	r3, [pc, #356]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005892:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	4956      	ldr	r1, [pc, #344]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800589c:	4313      	orrs	r3, r2
 800589e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f003 0304 	and.w	r3, r3, #4
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d008      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058ac:	4b51      	ldr	r3, [pc, #324]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	494e      	ldr	r1, [pc, #312]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0320 	and.w	r3, r3, #32
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d008      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058ca:	4b4a      	ldr	r3, [pc, #296]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ce:	f023 0210 	bic.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	4947      	ldr	r1, [pc, #284]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d8:	4313      	orrs	r3, r2
 80058da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d008      	beq.n	80058fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058e8:	4b42      	ldr	r3, [pc, #264]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f4:	493f      	ldr	r1, [pc, #252]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d008      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005906:	4b3b      	ldr	r3, [pc, #236]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590a:	f023 0220 	bic.w	r2, r3, #32
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a1b      	ldr	r3, [r3, #32]
 8005912:	4938      	ldr	r1, [pc, #224]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005914:	4313      	orrs	r3, r2
 8005916:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0308 	and.w	r3, r3, #8
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005924:	4b33      	ldr	r3, [pc, #204]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005928:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	4930      	ldr	r1, [pc, #192]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f003 0310 	and.w	r3, r3, #16
 800593e:	2b00      	cmp	r3, #0
 8005940:	d008      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005942:	4b2c      	ldr	r3, [pc, #176]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005946:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	4929      	ldr	r1, [pc, #164]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005950:	4313      	orrs	r3, r2
 8005952:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005960:	4b24      	ldr	r3, [pc, #144]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596c:	4921      	ldr	r1, [pc, #132]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596e:	4313      	orrs	r3, r2
 8005970:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800597a:	2b00      	cmp	r3, #0
 800597c:	d008      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800597e:	4b1d      	ldr	r3, [pc, #116]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005982:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800598a:	491a      	ldr	r1, [pc, #104]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800598c:	4313      	orrs	r3, r2
 800598e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005998:	2b00      	cmp	r3, #0
 800599a:	d008      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800599c:	4b15      	ldr	r3, [pc, #84]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800599e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a0:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a8:	4912      	ldr	r1, [pc, #72]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d008      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059ba:	4b0e      	ldr	r3, [pc, #56]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c6:	490b      	ldr	r1, [pc, #44]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d008      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059dc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059e4:	4903      	ldr	r1, [pc, #12]	@ (80059f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3748      	adds	r7, #72	@ 0x48
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}
 80059f4:	40021000 	.word	0x40021000

080059f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a08:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a0c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	b29a      	uxth	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a18:	2300      	movs	r3, #0
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a26:	b480      	push	{r7}
 8005a28:	b085      	sub	sp, #20
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a2e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a32:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	43db      	mvns	r3, r3
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	4013      	ands	r3, r2
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3714      	adds	r7, #20
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a5c:	b480      	push	{r7}
 8005a5e:	b085      	sub	sp, #20
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	1d3b      	adds	r3, r7, #4
 8005a66:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2201      	movs	r2, #1
 8005a6e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b09d      	sub	sp, #116	@ 0x74
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	4413      	add	r3, r2
 8005ab2:	881b      	ldrh	r3, [r3, #0]
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005aba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005abe:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	78db      	ldrb	r3, [r3, #3]
 8005ac6:	2b03      	cmp	r3, #3
 8005ac8:	d81f      	bhi.n	8005b0a <USB_ActivateEndpoint+0x72>
 8005aca:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad0 <USB_ActivateEndpoint+0x38>)
 8005acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad0:	08005ae1 	.word	0x08005ae1
 8005ad4:	08005afd 	.word	0x08005afd
 8005ad8:	08005b13 	.word	0x08005b13
 8005adc:	08005aef 	.word	0x08005aef
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ae0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ae4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ae8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005aec:	e012      	b.n	8005b14 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005aee:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005af2:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005af6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005afa:	e00b      	b.n	8005b14 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005afc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b00:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b08:	e004      	b.n	8005b14 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005b10:	e000      	b.n	8005b14 <USB_ActivateEndpoint+0x7c>
      break;
 8005b12:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	009b      	lsls	r3, r3, #2
 8005b3e:	4413      	add	r3, r2
 8005b40:	881b      	ldrh	r3, [r3, #0]
 8005b42:	b29b      	uxth	r3, r3
 8005b44:	b21b      	sxth	r3, r3
 8005b46:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b4e:	b21a      	sxth	r2, r3
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b21b      	sxth	r3, r3
 8005b56:	4313      	orrs	r3, r2
 8005b58:	b21b      	sxth	r3, r3
 8005b5a:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005b6c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b70:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b74:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	7b1b      	ldrb	r3, [r3, #12]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f040 8178 	bne.w	8005e7a <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	785b      	ldrb	r3, [r3, #1]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8084 	beq.w	8005c9c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	61bb      	str	r3, [r7, #24]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	011a      	lsls	r2, r3, #4
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bb6:	617b      	str	r3, [r7, #20]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	88db      	ldrh	r3, [r3, #6]
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	005b      	lsls	r3, r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	827b      	strh	r3, [r7, #18]
 8005bd6:	8a7b      	ldrh	r3, [r7, #18]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d01b      	beq.n	8005c18 <USB_ActivateEndpoint+0x180>
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	881b      	ldrh	r3, [r3, #0]
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bf6:	823b      	strh	r3, [r7, #16]
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	441a      	add	r2, r3
 8005c02:	8a3b      	ldrh	r3, [r7, #16]
 8005c04:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c08:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c0c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c10:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	78db      	ldrb	r3, [r3, #3]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d020      	beq.n	8005c62 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	881b      	ldrh	r3, [r3, #0]
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c36:	81bb      	strh	r3, [r7, #12]
 8005c38:	89bb      	ldrh	r3, [r7, #12]
 8005c3a:	f083 0320 	eor.w	r3, r3, #32
 8005c3e:	81bb      	strh	r3, [r7, #12]
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	441a      	add	r2, r3
 8005c4a:	89bb      	ldrh	r3, [r7, #12]
 8005c4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	8013      	strh	r3, [r2, #0]
 8005c60:	e2d5      	b.n	800620e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	881b      	ldrh	r3, [r3, #0]
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c78:	81fb      	strh	r3, [r7, #14]
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	441a      	add	r2, r3
 8005c84:	89fb      	ldrh	r3, [r7, #14]
 8005c86:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c8a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	8013      	strh	r3, [r2, #0]
 8005c9a:	e2b8      	b.n	800620e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	461a      	mov	r2, r3
 8005caa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cac:	4413      	add	r3, r2
 8005cae:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	011a      	lsls	r2, r3, #4
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	88db      	ldrh	r3, [r3, #6]
 8005cc4:	085b      	lsrs	r3, r3, #1
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	b29a      	uxth	r2, r3
 8005ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cce:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	461a      	mov	r2, r3
 8005cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce0:	4413      	add	r3, r2
 8005ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	011a      	lsls	r2, r3, #4
 8005cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cec:	4413      	add	r3, r2
 8005cee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d02:	801a      	strh	r2, [r3, #0]
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d10a      	bne.n	8005d22 <USB_ActivateEndpoint+0x28a>
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0e:	881b      	ldrh	r3, [r3, #0]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1e:	801a      	strh	r2, [r3, #0]
 8005d20:	e039      	b.n	8005d96 <USB_ActivateEndpoint+0x2fe>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d28:	d818      	bhi.n	8005d5c <USB_ActivateEndpoint+0x2c4>
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	085b      	lsrs	r3, r3, #1
 8005d30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d002      	beq.n	8005d44 <USB_ActivateEndpoint+0x2ac>
 8005d3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d40:	3301      	adds	r3, #1
 8005d42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d46:	881b      	ldrh	r3, [r3, #0]
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	029b      	lsls	r3, r3, #10
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	b29a      	uxth	r2, r3
 8005d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e01c      	b.n	8005d96 <USB_ActivateEndpoint+0x2fe>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	095b      	lsrs	r3, r3, #5
 8005d62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 031f 	and.w	r3, r3, #31
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <USB_ActivateEndpoint+0x2de>
 8005d70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d72:	3b01      	subs	r3, #1
 8005d74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	881b      	ldrh	r3, [r3, #0]
 8005d7a:	b29a      	uxth	r2, r3
 8005d7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	029b      	lsls	r3, r3, #10
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d94:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005da4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005da6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d01b      	beq.n	8005de6 <USB_ActivateEndpoint+0x34e>
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dc4:	843b      	strh	r3, [r7, #32]
 8005dc6:	687a      	ldr	r2, [r7, #4]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	441a      	add	r2, r3
 8005dd0:	8c3b      	ldrh	r3, [r7, #32]
 8005dd2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dd6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dda:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d124      	bne.n	8005e38 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29b      	uxth	r3, r3
 8005dfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e04:	83bb      	strh	r3, [r7, #28]
 8005e06:	8bbb      	ldrh	r3, [r7, #28]
 8005e08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e0c:	83bb      	strh	r3, [r7, #28]
 8005e0e:	8bbb      	ldrh	r3, [r7, #28]
 8005e10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e14:	83bb      	strh	r3, [r7, #28]
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	441a      	add	r2, r3
 8005e20:	8bbb      	ldrh	r3, [r7, #28]
 8005e22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	8013      	strh	r3, [r2, #0]
 8005e36:	e1ea      	b.n	800620e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e4e:	83fb      	strh	r3, [r7, #30]
 8005e50:	8bfb      	ldrh	r3, [r7, #30]
 8005e52:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e56:	83fb      	strh	r3, [r7, #30]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	009b      	lsls	r3, r3, #2
 8005e60:	441a      	add	r2, r3
 8005e62:	8bfb      	ldrh	r3, [r7, #30]
 8005e64:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e68:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e74:	b29b      	uxth	r3, r3
 8005e76:	8013      	strh	r3, [r2, #0]
 8005e78:	e1c9      	b.n	800620e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	78db      	ldrb	r3, [r3, #3]
 8005e7e:	2b02      	cmp	r3, #2
 8005e80:	d11e      	bne.n	8005ec0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	009b      	lsls	r3, r3, #2
 8005e8a:	4413      	add	r3, r2
 8005e8c:	881b      	ldrh	r3, [r3, #0]
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e94:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e98:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	441a      	add	r2, r3
 8005ea6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005eaa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eae:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eb2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	8013      	strh	r3, [r2, #0]
 8005ebe:	e01d      	b.n	8005efc <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	881b      	ldrh	r3, [r3, #0]
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ed6:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	781b      	ldrb	r3, [r3, #0]
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	441a      	add	r2, r3
 8005ee4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005ee8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005eec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ef0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f0c:	4413      	add	r3, r2
 8005f0e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	011a      	lsls	r2, r3, #4
 8005f16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f1e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	891b      	ldrh	r3, [r3, #8]
 8005f24:	085b      	lsrs	r3, r3, #1
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	005b      	lsls	r3, r3, #1
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f2e:	801a      	strh	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f40:	4413      	add	r3, r2
 8005f42:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	011a      	lsls	r2, r3, #4
 8005f4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	895b      	ldrh	r3, [r3, #10]
 8005f58:	085b      	lsrs	r3, r3, #1
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f62:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	785b      	ldrb	r3, [r3, #1]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f040 8093 	bne.w	8006094 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4413      	add	r3, r2
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005f7e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01b      	beq.n	8005fc2 <USB_ActivateEndpoint+0x52a>
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4413      	add	r3, r2
 8005f94:	881b      	ldrh	r3, [r3, #0]
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fa0:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	441a      	add	r2, r3
 8005fac:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005fae:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fb2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fb6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005fd0:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01b      	beq.n	8006012 <USB_ActivateEndpoint+0x57a>
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	4413      	add	r3, r2
 8005fe4:	881b      	ldrh	r3, [r3, #0]
 8005fe6:	b29b      	uxth	r3, r3
 8005fe8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ff0:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	441a      	add	r2, r3
 8005ffc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005ffe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006002:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006006:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800600a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800600e:	b29b      	uxth	r3, r3
 8006010:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	4413      	add	r3, r2
 800601c:	881b      	ldrh	r3, [r3, #0]
 800601e:	b29b      	uxth	r3, r3
 8006020:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006024:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006028:	873b      	strh	r3, [r7, #56]	@ 0x38
 800602a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800602c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006030:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006032:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006034:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006038:	873b      	strh	r3, [r7, #56]	@ 0x38
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	781b      	ldrb	r3, [r3, #0]
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	441a      	add	r2, r3
 8006044:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006046:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800604a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800604e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006052:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006056:	b29b      	uxth	r3, r3
 8006058:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006070:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]
 8006092:	e0bc      	b.n	800620e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	4413      	add	r3, r2
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80060a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80060a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d01d      	beq.n	80060ec <USB_ActivateEndpoint+0x654>
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	009b      	lsls	r3, r3, #2
 80060b8:	4413      	add	r3, r2
 80060ba:	881b      	ldrh	r3, [r3, #0]
 80060bc:	b29b      	uxth	r3, r3
 80060be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c6:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	009b      	lsls	r3, r3, #2
 80060d2:	441a      	add	r2, r3
 80060d4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80060d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	009b      	lsls	r3, r3, #2
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80060fc:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006104:	2b00      	cmp	r3, #0
 8006106:	d01d      	beq.n	8006144 <USB_ActivateEndpoint+0x6ac>
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	881b      	ldrh	r3, [r3, #0]
 8006114:	b29b      	uxth	r3, r3
 8006116:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800611e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	441a      	add	r2, r3
 800612c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006130:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006134:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800613c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006140:	b29b      	uxth	r3, r3
 8006142:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	78db      	ldrb	r3, [r3, #3]
 8006148:	2b01      	cmp	r3, #1
 800614a:	d024      	beq.n	8006196 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	781b      	ldrb	r3, [r3, #0]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	4413      	add	r3, r2
 8006156:	881b      	ldrh	r3, [r3, #0]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800615e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006162:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006166:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800616a:	f083 0320 	eor.w	r3, r3, #32
 800616e:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	441a      	add	r2, r3
 800617c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006180:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006184:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006188:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800618c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006190:	b29b      	uxth	r3, r3
 8006192:	8013      	strh	r3, [r2, #0]
 8006194:	e01d      	b.n	80061d2 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	009b      	lsls	r3, r3, #2
 800619e:	4413      	add	r3, r2
 80061a0:	881b      	ldrh	r3, [r3, #0]
 80061a2:	b29b      	uxth	r3, r3
 80061a4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061ac:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	441a      	add	r2, r3
 80061ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	b29b      	uxth	r3, r3
 80061e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061e8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	441a      	add	r2, r3
 80061f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80061fa:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061fe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006202:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006206:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800620a:	b29b      	uxth	r3, r3
 800620c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800620e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006212:	4618      	mov	r0, r3
 8006214:	3774      	adds	r7, #116	@ 0x74
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006220:	b480      	push	{r7}
 8006222:	b08d      	sub	sp, #52	@ 0x34
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	7b1b      	ldrb	r3, [r3, #12]
 800622e:	2b00      	cmp	r3, #0
 8006230:	f040 808e 	bne.w	8006350 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	785b      	ldrb	r3, [r3, #1]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d044      	beq.n	80062c6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	81bb      	strh	r3, [r7, #12]
 800624a:	89bb      	ldrh	r3, [r7, #12]
 800624c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <USB_DeactivateEndpoint+0x6c>
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	4413      	add	r3, r2
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	b29b      	uxth	r3, r3
 8006262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800626a:	817b      	strh	r3, [r7, #10]
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	897b      	ldrh	r3, [r7, #10]
 8006278:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006280:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006284:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006288:	b29b      	uxth	r3, r3
 800628a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	881b      	ldrh	r3, [r3, #0]
 8006298:	b29b      	uxth	r3, r3
 800629a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800629e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062a2:	813b      	strh	r3, [r7, #8]
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	441a      	add	r2, r3
 80062ae:	893b      	ldrh	r3, [r7, #8]
 80062b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	8013      	strh	r3, [r2, #0]
 80062c4:	e192      	b.n	80065ec <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	827b      	strh	r3, [r7, #18]
 80062d4:	8a7b      	ldrh	r3, [r7, #18]
 80062d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d01b      	beq.n	8006316 <USB_DeactivateEndpoint+0xf6>
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	881b      	ldrh	r3, [r3, #0]
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062f4:	823b      	strh	r3, [r7, #16]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	441a      	add	r2, r3
 8006300:	8a3b      	ldrh	r3, [r7, #16]
 8006302:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006306:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800630a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800630e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006312:	b29b      	uxth	r3, r3
 8006314:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	881b      	ldrh	r3, [r3, #0]
 8006322:	b29b      	uxth	r3, r3
 8006324:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800632c:	81fb      	strh	r3, [r7, #14]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	781b      	ldrb	r3, [r3, #0]
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	441a      	add	r2, r3
 8006338:	89fb      	ldrh	r3, [r7, #14]
 800633a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800633e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006342:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006346:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800634a:	b29b      	uxth	r3, r3
 800634c:	8013      	strh	r3, [r2, #0]
 800634e:	e14d      	b.n	80065ec <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	785b      	ldrb	r3, [r3, #1]
 8006354:	2b00      	cmp	r3, #0
 8006356:	f040 80a5 	bne.w	80064a4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	843b      	strh	r3, [r7, #32]
 8006368:	8c3b      	ldrh	r3, [r7, #32]
 800636a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800636e:	2b00      	cmp	r3, #0
 8006370:	d01b      	beq.n	80063aa <USB_DeactivateEndpoint+0x18a>
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006388:	83fb      	strh	r3, [r7, #30]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	8bfb      	ldrh	r3, [r7, #30]
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	83bb      	strh	r3, [r7, #28]
 80063b8:	8bbb      	ldrh	r3, [r7, #28]
 80063ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d01b      	beq.n	80063fa <USB_DeactivateEndpoint+0x1da>
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063d4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063d8:	837b      	strh	r3, [r7, #26]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	441a      	add	r2, r3
 80063e4:	8b7b      	ldrh	r3, [r7, #26]
 80063e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063f2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	4413      	add	r3, r2
 8006404:	881b      	ldrh	r3, [r3, #0]
 8006406:	b29b      	uxth	r3, r3
 8006408:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800640c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006410:	833b      	strh	r3, [r7, #24]
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	441a      	add	r2, r3
 800641c:	8b3b      	ldrh	r3, [r7, #24]
 800641e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006422:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006426:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800642a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800642e:	b29b      	uxth	r3, r3
 8006430:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	881b      	ldrh	r3, [r3, #0]
 800643e:	b29b      	uxth	r3, r3
 8006440:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006444:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006448:	82fb      	strh	r3, [r7, #22]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	441a      	add	r2, r3
 8006454:	8afb      	ldrh	r3, [r7, #22]
 8006456:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800645a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800645e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006462:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006466:	b29b      	uxth	r3, r3
 8006468:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	881b      	ldrh	r3, [r3, #0]
 8006476:	b29b      	uxth	r3, r3
 8006478:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800647c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006480:	82bb      	strh	r3, [r7, #20]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	441a      	add	r2, r3
 800648c:	8abb      	ldrh	r3, [r7, #20]
 800648e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800649e:	b29b      	uxth	r3, r3
 80064a0:	8013      	strh	r3, [r2, #0]
 80064a2:	e0a3      	b.n	80065ec <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80064b2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80064b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d01b      	beq.n	80064f4 <USB_DeactivateEndpoint+0x2d4>
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	881b      	ldrh	r3, [r3, #0]
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064d2:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80064d4:	687a      	ldr	r2, [r7, #4]
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	441a      	add	r2, r3
 80064de:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80064e0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064e4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006502:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d01b      	beq.n	8006544 <USB_DeactivateEndpoint+0x324>
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	881b      	ldrh	r3, [r3, #0]
 8006518:	b29b      	uxth	r3, r3
 800651a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800651e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006522:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	441a      	add	r2, r3
 800652e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006530:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006534:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006538:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800653c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006540:	b29b      	uxth	r3, r3
 8006542:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006556:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800655a:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006570:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006574:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	4413      	add	r3, r2
 8006586:	881b      	ldrh	r3, [r3, #0]
 8006588:	b29b      	uxth	r3, r3
 800658a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800658e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006592:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	441a      	add	r2, r3
 800659e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065a0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065a4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4413      	add	r3, r2
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065ca:	847b      	strh	r3, [r7, #34]	@ 0x22
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	781b      	ldrb	r3, [r3, #0]
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	441a      	add	r2, r3
 80065d6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80065ec:	2300      	movs	r3, #0
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3734      	adds	r7, #52	@ 0x34
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b0c2      	sub	sp, #264	@ 0x108
 80065fe:	af00      	add	r7, sp, #0
 8006600:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006604:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006608:	6018      	str	r0, [r3, #0]
 800660a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800660e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006612:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006614:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006618:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 86b7 	bne.w	8007394 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006626:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	699a      	ldr	r2, [r3, #24]
 8006632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	429a      	cmp	r2, r3
 8006640:	d908      	bls.n	8006654 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8006642:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006646:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006652:	e007      	b.n	8006664 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8006654:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006658:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	699b      	ldr	r3, [r3, #24]
 8006660:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8006664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	7b1b      	ldrb	r3, [r3, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d13a      	bne.n	80066ea <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8006674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006678:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	6959      	ldr	r1, [r3, #20]
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	88da      	ldrh	r2, [r3, #6]
 800668c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006690:	b29b      	uxth	r3, r3
 8006692:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006696:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800669a:	6800      	ldr	r0, [r0, #0]
 800669c:	f001 fc8d 	bl	8007fba <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	461a      	mov	r2, r3
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	4413      	add	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]
 80066c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	011a      	lsls	r2, r3, #4
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	4413      	add	r3, r2
 80066d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066da:	60fb      	str	r3, [r7, #12]
 80066dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	801a      	strh	r2, [r3, #0]
 80066e6:	f000 be1f 	b.w	8007328 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	78db      	ldrb	r3, [r3, #3]
 80066f6:	2b02      	cmp	r3, #2
 80066f8:	f040 8462 	bne.w	8006fc0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	6a1a      	ldr	r2, [r3, #32]
 8006708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	429a      	cmp	r2, r3
 8006716:	f240 83df 	bls.w	8006ed8 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800671a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800671e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006728:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006740:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	441a      	add	r2, r3
 800675e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8006762:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006766:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800676a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800676e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006772:	b29b      	uxth	r3, r3
 8006774:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6a1a      	ldr	r2, [r3, #32]
 8006782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006786:	1ad2      	subs	r2, r2, r3
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006798:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	009b      	lsls	r3, r3, #2
 80067ac:	4413      	add	r3, r2
 80067ae:	881b      	ldrh	r3, [r3, #0]
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	f000 81c7 	beq.w	8006b4a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d177      	bne.n	80068c8 <USB_EPStartXfer+0x2ce>
 80067d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	461a      	mov	r2, r3
 80067f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f8:	4413      	add	r3, r2
 80067fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006800:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	011a      	lsls	r2, r3, #4
 800680a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680c:	4413      	add	r3, r2
 800680e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006812:	627b      	str	r3, [r7, #36]	@ 0x24
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800681e:	b29a      	uxth	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	801a      	strh	r2, [r3, #0]
 8006824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10a      	bne.n	8006842 <USB_EPStartXfer+0x248>
 800682c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006836:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800683a:	b29a      	uxth	r2, r3
 800683c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800683e:	801a      	strh	r2, [r3, #0]
 8006840:	e067      	b.n	8006912 <USB_EPStartXfer+0x318>
 8006842:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006846:	2b3e      	cmp	r3, #62	@ 0x3e
 8006848:	d81c      	bhi.n	8006884 <USB_EPStartXfer+0x28a>
 800684a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684e:	085b      	lsrs	r3, r3, #1
 8006850:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <USB_EPStartXfer+0x270>
 8006860:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006864:	3301      	adds	r3, #1
 8006866:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800686a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800686c:	881b      	ldrh	r3, [r3, #0]
 800686e:	b29a      	uxth	r2, r3
 8006870:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006874:	b29b      	uxth	r3, r3
 8006876:	029b      	lsls	r3, r3, #10
 8006878:	b29b      	uxth	r3, r3
 800687a:	4313      	orrs	r3, r2
 800687c:	b29a      	uxth	r2, r3
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	801a      	strh	r2, [r3, #0]
 8006882:	e046      	b.n	8006912 <USB_EPStartXfer+0x318>
 8006884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006888:	095b      	lsrs	r3, r3, #5
 800688a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800688e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006892:	f003 031f 	and.w	r3, r3, #31
 8006896:	2b00      	cmp	r3, #0
 8006898:	d104      	bne.n	80068a4 <USB_EPStartXfer+0x2aa>
 800689a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800689e:	3b01      	subs	r3, #1
 80068a0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068ae:	b29b      	uxth	r3, r3
 80068b0:	029b      	lsls	r3, r3, #10
 80068b2:	b29b      	uxth	r3, r3
 80068b4:	4313      	orrs	r3, r2
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	e024      	b.n	8006912 <USB_EPStartXfer+0x318>
 80068c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	785b      	ldrb	r3, [r3, #1]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d11c      	bne.n	8006912 <USB_EPStartXfer+0x318>
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068e6:	b29b      	uxth	r3, r3
 80068e8:	461a      	mov	r2, r3
 80068ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ec:	4413      	add	r3, r2
 80068ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80068f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	011a      	lsls	r2, r3, #4
 80068fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006900:	4413      	add	r3, r2
 8006902:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006908:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800690c:	b29a      	uxth	r2, r3
 800690e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006910:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006912:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006916:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	895b      	ldrh	r3, [r3, #10]
 800691e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006922:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006926:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	6959      	ldr	r1, [r3, #20]
 800692e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006932:	b29b      	uxth	r3, r3
 8006934:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006938:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800693c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006940:	6800      	ldr	r0, [r0, #0]
 8006942:	f001 fb3a 	bl	8007fba <USB_WritePMA>
            ep->xfer_buff += len;
 8006946:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	695a      	ldr	r2, [r3, #20]
 8006952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006956:	441a      	add	r2, r3
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006964:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006968:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	691b      	ldr	r3, [r3, #16]
 800697c:	429a      	cmp	r2, r3
 800697e:	d90f      	bls.n	80069a0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006980:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006984:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	6a1a      	ldr	r2, [r3, #32]
 800698c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006990:	1ad2      	subs	r2, r2, r3
 8006992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	621a      	str	r2, [r3, #32]
 800699e:	e00e      	b.n	80069be <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80069a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 80069b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	2200      	movs	r2, #0
 80069bc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	785b      	ldrb	r3, [r3, #1]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d177      	bne.n	8006abe <USB_EPStartXfer+0x4c4>
 80069ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069e8:	b29b      	uxth	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	4413      	add	r3, r2
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	011a      	lsls	r2, r3, #4
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	4413      	add	r3, r2
 8006a04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a08:	617b      	str	r3, [r7, #20]
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	801a      	strh	r2, [r3, #0]
 8006a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <USB_EPStartXfer+0x43e>
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	881b      	ldrh	r3, [r3, #0]
 8006a26:	b29b      	uxth	r3, r3
 8006a28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a30:	b29a      	uxth	r2, r3
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	801a      	strh	r2, [r3, #0]
 8006a36:	e06d      	b.n	8006b14 <USB_EPStartXfer+0x51a>
 8006a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a3c:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a3e:	d81c      	bhi.n	8006a7a <USB_EPStartXfer+0x480>
 8006a40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <USB_EPStartXfer+0x466>
 8006a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	881b      	ldrh	r3, [r3, #0]
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	029b      	lsls	r3, r3, #10
 8006a6e:	b29b      	uxth	r3, r3
 8006a70:	4313      	orrs	r3, r2
 8006a72:	b29a      	uxth	r2, r3
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	801a      	strh	r2, [r3, #0]
 8006a78:	e04c      	b.n	8006b14 <USB_EPStartXfer+0x51a>
 8006a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7e:	095b      	lsrs	r3, r3, #5
 8006a80:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a88:	f003 031f 	and.w	r3, r3, #31
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d104      	bne.n	8006a9a <USB_EPStartXfer+0x4a0>
 8006a90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a94:	3b01      	subs	r3, #1
 8006a96:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	029b      	lsls	r3, r3, #10
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	801a      	strh	r2, [r3, #0]
 8006abc:	e02a      	b.n	8006b14 <USB_EPStartXfer+0x51a>
 8006abe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	785b      	ldrb	r3, [r3, #1]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d122      	bne.n	8006b14 <USB_EPStartXfer+0x51a>
 8006ace:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ad2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	623b      	str	r3, [r7, #32]
 8006ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ade:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	6a3b      	ldr	r3, [r7, #32]
 8006aee:	4413      	add	r3, r2
 8006af0:	623b      	str	r3, [r7, #32]
 8006af2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006af6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	781b      	ldrb	r3, [r3, #0]
 8006afe:	011a      	lsls	r2, r3, #4
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	4413      	add	r3, r2
 8006b04:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b08:	61fb      	str	r3, [r7, #28]
 8006b0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	69fb      	ldr	r3, [r7, #28]
 8006b12:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b18:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	891b      	ldrh	r3, [r3, #8]
 8006b20:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	6959      	ldr	r1, [r3, #20]
 8006b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b34:	b29b      	uxth	r3, r3
 8006b36:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b3a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b3e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b42:	6800      	ldr	r0, [r0, #0]
 8006b44:	f001 fa39 	bl	8007fba <USB_WritePMA>
 8006b48:	e3ee      	b.n	8007328 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	785b      	ldrb	r3, [r3, #1]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d177      	bne.n	8006c4a <USB_EPStartXfer+0x650>
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b7a:	4413      	add	r3, r2
 8006b7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	011a      	lsls	r2, r3, #4
 8006b8c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b8e:	4413      	add	r3, r2
 8006b90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b94:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba4:	801a      	strh	r2, [r3, #0]
 8006ba6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d10a      	bne.n	8006bc4 <USB_EPStartXfer+0x5ca>
 8006bae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bb0:	881b      	ldrh	r3, [r3, #0]
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bc0:	801a      	strh	r2, [r3, #0]
 8006bc2:	e06d      	b.n	8006ca0 <USB_EPStartXfer+0x6a6>
 8006bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bca:	d81c      	bhi.n	8006c06 <USB_EPStartXfer+0x60c>
 8006bcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bd0:	085b      	lsrs	r3, r3, #1
 8006bd2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d004      	beq.n	8006bec <USB_EPStartXfer+0x5f2>
 8006be2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006be6:	3301      	adds	r3, #1
 8006be8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	029b      	lsls	r3, r3, #10
 8006bfa:	b29b      	uxth	r3, r3
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c02:	801a      	strh	r2, [r3, #0]
 8006c04:	e04c      	b.n	8006ca0 <USB_EPStartXfer+0x6a6>
 8006c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c0a:	095b      	lsrs	r3, r3, #5
 8006c0c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c14:	f003 031f 	and.w	r3, r3, #31
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d104      	bne.n	8006c26 <USB_EPStartXfer+0x62c>
 8006c1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c20:	3b01      	subs	r3, #1
 8006c22:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c26:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c28:	881b      	ldrh	r3, [r3, #0]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	029b      	lsls	r3, r3, #10
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	4313      	orrs	r3, r2
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c46:	801a      	strh	r2, [r3, #0]
 8006c48:	e02a      	b.n	8006ca0 <USB_EPStartXfer+0x6a6>
 8006c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c4e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d122      	bne.n	8006ca0 <USB_EPStartXfer+0x6a6>
 8006c5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	461a      	mov	r2, r3
 8006c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c7a:	4413      	add	r3, r2
 8006c7c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	011a      	lsls	r2, r3, #4
 8006c8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c8e:	4413      	add	r3, r2
 8006c90:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c94:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c9a:	b29a      	uxth	r2, r3
 8006c9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c9e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006ca0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ca4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	891b      	ldrh	r3, [r3, #8]
 8006cac:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	6959      	ldr	r1, [r3, #20]
 8006cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cc6:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cca:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cce:	6800      	ldr	r0, [r0, #0]
 8006cd0:	f001 f973 	bl	8007fba <USB_WritePMA>
            ep->xfer_buff += len;
 8006cd4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ce4:	441a      	add	r2, r3
 8006ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006cf2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cf6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	6a1a      	ldr	r2, [r3, #32]
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d90f      	bls.n	8006d2e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006d0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	6a1a      	ldr	r2, [r3, #32]
 8006d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	621a      	str	r2, [r3, #32]
 8006d2c:	e00e      	b.n	8006d4c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d32:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	6a1b      	ldr	r3, [r3, #32]
 8006d3a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006d3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d50:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	785b      	ldrb	r3, [r3, #1]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d177      	bne.n	8006e58 <USB_EPStartXfer+0x85e>
 8006d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d88:	4413      	add	r3, r2
 8006d8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	011a      	lsls	r2, r3, #4
 8006d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d9c:	4413      	add	r3, r2
 8006d9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006da2:	637b      	str	r3, [r7, #52]	@ 0x34
 8006da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dae:	b29a      	uxth	r2, r3
 8006db0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db2:	801a      	strh	r2, [r3, #0]
 8006db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d10a      	bne.n	8006dd2 <USB_EPStartXfer+0x7d8>
 8006dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dbe:	881b      	ldrh	r3, [r3, #0]
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dce:	801a      	strh	r2, [r3, #0]
 8006dd0:	e067      	b.n	8006ea2 <USB_EPStartXfer+0x8a8>
 8006dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd6:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dd8:	d81c      	bhi.n	8006e14 <USB_EPStartXfer+0x81a>
 8006dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006de8:	f003 0301 	and.w	r3, r3, #1
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d004      	beq.n	8006dfa <USB_EPStartXfer+0x800>
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	3301      	adds	r3, #1
 8006df6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	b29a      	uxth	r2, r3
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	029b      	lsls	r3, r3, #10
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	b29a      	uxth	r2, r3
 8006e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e10:	801a      	strh	r2, [r3, #0]
 8006e12:	e046      	b.n	8006ea2 <USB_EPStartXfer+0x8a8>
 8006e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e18:	095b      	lsrs	r3, r3, #5
 8006e1a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e22:	f003 031f 	and.w	r3, r3, #31
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d104      	bne.n	8006e34 <USB_EPStartXfer+0x83a>
 8006e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e36:	881b      	ldrh	r3, [r3, #0]
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	029b      	lsls	r3, r3, #10
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	4313      	orrs	r3, r2
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e54:	801a      	strh	r2, [r3, #0]
 8006e56:	e024      	b.n	8006ea2 <USB_EPStartXfer+0x8a8>
 8006e58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	785b      	ldrb	r3, [r3, #1]
 8006e64:	2b01      	cmp	r3, #1
 8006e66:	d11c      	bne.n	8006ea2 <USB_EPStartXfer+0x8a8>
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	461a      	mov	r2, r3
 8006e7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e7c:	4413      	add	r3, r2
 8006e7e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	011a      	lsls	r2, r3, #4
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e90:	4413      	add	r3, r2
 8006e92:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e9c:	b29a      	uxth	r2, r3
 8006e9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ea0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ea6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	895b      	ldrh	r3, [r3, #10]
 8006eae:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006eb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	6959      	ldr	r1, [r3, #20]
 8006ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006ec8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006ecc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006ed0:	6800      	ldr	r0, [r0, #0]
 8006ed2:	f001 f872 	bl	8007fba <USB_WritePMA>
 8006ed6:	e227      	b.n	8007328 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ef6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	881b      	ldrh	r3, [r3, #0]
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f1a:	681a      	ldr	r2, [r3, #0]
 8006f1c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f20:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	441a      	add	r2, r3
 8006f2c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f30:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f34:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f38:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f64:	4413      	add	r3, r2
 8006f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	011a      	lsls	r2, r3, #4
 8006f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f7e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f88:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	891b      	ldrh	r3, [r3, #8]
 8006f96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	6959      	ldr	r1, [r3, #20]
 8006fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006fb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006fb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fb8:	6800      	ldr	r0, [r0, #0]
 8006fba:	f000 fffe 	bl	8007fba <USB_WritePMA>
 8006fbe:	e1b3      	b.n	8007328 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006fc0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	6a1a      	ldr	r2, [r3, #32]
 8006fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fd0:	1ad2      	subs	r2, r2, r3
 8006fd2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fe2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4413      	add	r3, r2
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 80c6 	beq.w	8007192 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007006:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	673b      	str	r3, [r7, #112]	@ 0x70
 8007012:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007016:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	785b      	ldrb	r3, [r3, #1]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d177      	bne.n	8007112 <USB_EPStartXfer+0xb18>
 8007022:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007026:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800703c:	b29b      	uxth	r3, r3
 800703e:	461a      	mov	r2, r3
 8007040:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007042:	4413      	add	r3, r2
 8007044:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007046:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800704a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	781b      	ldrb	r3, [r3, #0]
 8007052:	011a      	lsls	r2, r3, #4
 8007054:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007056:	4413      	add	r3, r2
 8007058:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800705c:	667b      	str	r3, [r7, #100]	@ 0x64
 800705e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007068:	b29a      	uxth	r2, r3
 800706a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800706c:	801a      	strh	r2, [r3, #0]
 800706e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007072:	2b00      	cmp	r3, #0
 8007074:	d10a      	bne.n	800708c <USB_EPStartXfer+0xa92>
 8007076:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007084:	b29a      	uxth	r2, r3
 8007086:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007088:	801a      	strh	r2, [r3, #0]
 800708a:	e067      	b.n	800715c <USB_EPStartXfer+0xb62>
 800708c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007090:	2b3e      	cmp	r3, #62	@ 0x3e
 8007092:	d81c      	bhi.n	80070ce <USB_EPStartXfer+0xad4>
 8007094:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007098:	085b      	lsrs	r3, r3, #1
 800709a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800709e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <USB_EPStartXfer+0xaba>
 80070aa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070ae:	3301      	adds	r3, #1
 80070b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	b29a      	uxth	r2, r3
 80070ba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070be:	b29b      	uxth	r3, r3
 80070c0:	029b      	lsls	r3, r3, #10
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	4313      	orrs	r3, r2
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	e046      	b.n	800715c <USB_EPStartXfer+0xb62>
 80070ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070d2:	095b      	lsrs	r3, r3, #5
 80070d4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070dc:	f003 031f 	and.w	r3, r3, #31
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <USB_EPStartXfer+0xaf4>
 80070e4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070e8:	3b01      	subs	r3, #1
 80070ea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f0:	881b      	ldrh	r3, [r3, #0]
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	029b      	lsls	r3, r3, #10
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	4313      	orrs	r3, r2
 8007100:	b29b      	uxth	r3, r3
 8007102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800710a:	b29a      	uxth	r2, r3
 800710c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e024      	b.n	800715c <USB_EPStartXfer+0xb62>
 8007112:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d11c      	bne.n	800715c <USB_EPStartXfer+0xb62>
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007136:	4413      	add	r3, r2
 8007138:	673b      	str	r3, [r7, #112]	@ 0x70
 800713a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	011a      	lsls	r2, r3, #4
 8007148:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800714a:	4413      	add	r3, r2
 800714c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007150:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007156:	b29a      	uxth	r2, r3
 8007158:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800715a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800715c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	895b      	ldrh	r3, [r3, #10]
 8007168:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800716c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6959      	ldr	r1, [r3, #20]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800717c:	b29b      	uxth	r3, r3
 800717e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007182:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007186:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	f000 ff15 	bl	8007fba <USB_WritePMA>
 8007190:	e0ca      	b.n	8007328 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d177      	bne.n	8007292 <USB_EPStartXfer+0xc98>
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071c2:	4413      	add	r3, r2
 80071c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	011a      	lsls	r2, r3, #4
 80071d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071e8:	b29a      	uxth	r2, r3
 80071ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ec:	801a      	strh	r2, [r3, #0]
 80071ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d10a      	bne.n	800720c <USB_EPStartXfer+0xc12>
 80071f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071f8:	881b      	ldrh	r3, [r3, #0]
 80071fa:	b29b      	uxth	r3, r3
 80071fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007200:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007204:	b29a      	uxth	r2, r3
 8007206:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007208:	801a      	strh	r2, [r3, #0]
 800720a:	e073      	b.n	80072f4 <USB_EPStartXfer+0xcfa>
 800720c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007210:	2b3e      	cmp	r3, #62	@ 0x3e
 8007212:	d81c      	bhi.n	800724e <USB_EPStartXfer+0xc54>
 8007214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007218:	085b      	lsrs	r3, r3, #1
 800721a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800721e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007222:	f003 0301 	and.w	r3, r3, #1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d004      	beq.n	8007234 <USB_EPStartXfer+0xc3a>
 800722a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800722e:	3301      	adds	r3, #1
 8007230:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007234:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	b29a      	uxth	r2, r3
 800723a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800723e:	b29b      	uxth	r3, r3
 8007240:	029b      	lsls	r3, r3, #10
 8007242:	b29b      	uxth	r3, r3
 8007244:	4313      	orrs	r3, r2
 8007246:	b29a      	uxth	r2, r3
 8007248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e052      	b.n	80072f4 <USB_EPStartXfer+0xcfa>
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800725c:	f003 031f 	and.w	r3, r3, #31
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <USB_EPStartXfer+0xc74>
 8007264:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007268:	3b01      	subs	r3, #1
 800726a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800726e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007270:	881b      	ldrh	r3, [r3, #0]
 8007272:	b29a      	uxth	r2, r3
 8007274:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007278:	b29b      	uxth	r3, r3
 800727a:	029b      	lsls	r3, r3, #10
 800727c:	b29b      	uxth	r3, r3
 800727e:	4313      	orrs	r3, r2
 8007280:	b29b      	uxth	r3, r3
 8007282:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007286:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800728a:	b29a      	uxth	r2, r3
 800728c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800728e:	801a      	strh	r2, [r3, #0]
 8007290:	e030      	b.n	80072f4 <USB_EPStartXfer+0xcfa>
 8007292:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007296:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d128      	bne.n	80072f4 <USB_EPStartXfer+0xcfa>
 80072a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072c6:	4413      	add	r3, r2
 80072c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	011a      	lsls	r2, r3, #4
 80072da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072de:	4413      	add	r3, r2
 80072e0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	891b      	ldrh	r3, [r3, #8]
 8007300:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007304:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007308:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6959      	ldr	r1, [r3, #20]
 8007310:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007314:	b29b      	uxth	r3, r3
 8007316:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800731a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800731e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007322:	6800      	ldr	r0, [r0, #0]
 8007324:	f000 fe49 	bl	8007fba <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	009b      	lsls	r3, r3, #2
 8007340:	4413      	add	r3, r2
 8007342:	881b      	ldrh	r3, [r3, #0]
 8007344:	b29b      	uxth	r3, r3
 8007346:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800734a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800734e:	817b      	strh	r3, [r7, #10]
 8007350:	897b      	ldrh	r3, [r7, #10]
 8007352:	f083 0310 	eor.w	r3, r3, #16
 8007356:	817b      	strh	r3, [r7, #10]
 8007358:	897b      	ldrh	r3, [r7, #10]
 800735a:	f083 0320 	eor.w	r3, r3, #32
 800735e:	817b      	strh	r3, [r7, #10]
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800736e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	441a      	add	r2, r3
 800737a:	897b      	ldrh	r3, [r7, #10]
 800737c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007380:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007388:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800738c:	b29b      	uxth	r3, r3
 800738e:	8013      	strh	r3, [r2, #0]
 8007390:	f000 bcdf 	b.w	8007d52 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007394:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007398:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	7b1b      	ldrb	r3, [r3, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	f040 80bc 	bne.w	800751e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80073a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	699a      	ldr	r2, [r3, #24]
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	691b      	ldr	r3, [r3, #16]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d917      	bls.n	80073f2 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80073c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	691b      	ldr	r3, [r3, #16]
 80073ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80073d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073e2:	1ad2      	subs	r2, r2, r3
 80073e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	619a      	str	r2, [r3, #24]
 80073f0:	e00e      	b.n	8007410 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80073f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	699b      	ldr	r3, [r3, #24]
 80073fe:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2200      	movs	r2, #0
 800740e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007410:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007414:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800742c:	b29b      	uxth	r3, r3
 800742e:	461a      	mov	r2, r3
 8007430:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007434:	4413      	add	r3, r2
 8007436:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800743a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800743e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	011a      	lsls	r2, r3, #4
 8007448:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800744c:	4413      	add	r3, r2
 800744e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007452:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007456:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800745a:	881b      	ldrh	r3, [r3, #0]
 800745c:	b29b      	uxth	r3, r3
 800745e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007462:	b29a      	uxth	r2, r3
 8007464:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007468:	801a      	strh	r2, [r3, #0]
 800746a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10d      	bne.n	800748e <USB_EPStartXfer+0xe94>
 8007472:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b29b      	uxth	r3, r3
 800747a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800747e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007488:	801a      	strh	r2, [r3, #0]
 800748a:	f000 bc28 	b.w	8007cde <USB_EPStartXfer+0x16e4>
 800748e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007492:	2b3e      	cmp	r3, #62	@ 0x3e
 8007494:	d81f      	bhi.n	80074d6 <USB_EPStartXfer+0xedc>
 8007496:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d004      	beq.n	80074b6 <USB_EPStartXfer+0xebc>
 80074ac:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074b0:	3301      	adds	r3, #1
 80074b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ba:	881b      	ldrh	r3, [r3, #0]
 80074bc:	b29a      	uxth	r2, r3
 80074be:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	029b      	lsls	r3, r3, #10
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074d0:	801a      	strh	r2, [r3, #0]
 80074d2:	f000 bc04 	b.w	8007cde <USB_EPStartXfer+0x16e4>
 80074d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074da:	095b      	lsrs	r3, r3, #5
 80074dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074e4:	f003 031f 	and.w	r3, r3, #31
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <USB_EPStartXfer+0xefc>
 80074ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074f0:	3b01      	subs	r3, #1
 80074f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074fa:	881b      	ldrh	r3, [r3, #0]
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007502:	b29b      	uxth	r3, r3
 8007504:	029b      	lsls	r3, r3, #10
 8007506:	b29b      	uxth	r3, r3
 8007508:	4313      	orrs	r3, r2
 800750a:	b29b      	uxth	r3, r3
 800750c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007514:	b29a      	uxth	r2, r3
 8007516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800751a:	801a      	strh	r2, [r3, #0]
 800751c:	e3df      	b.n	8007cde <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800751e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007522:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	78db      	ldrb	r3, [r3, #3]
 800752a:	2b02      	cmp	r3, #2
 800752c:	f040 8218 	bne.w	8007960 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007530:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007534:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	785b      	ldrb	r3, [r3, #1]
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 809d 	bne.w	800767c <USB_EPStartXfer+0x1082>
 8007542:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007546:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007550:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007554:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800755e:	b29b      	uxth	r3, r3
 8007560:	461a      	mov	r2, r3
 8007562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007566:	4413      	add	r3, r2
 8007568:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800756c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007570:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	011a      	lsls	r2, r3, #4
 800757a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800757e:	4413      	add	r3, r2
 8007580:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007584:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007588:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800758c:	881b      	ldrh	r3, [r3, #0]
 800758e:	b29b      	uxth	r3, r3
 8007590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007594:	b29a      	uxth	r2, r3
 8007596:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	691b      	ldr	r3, [r3, #16]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d10c      	bne.n	80075c6 <USB_EPStartXfer+0xfcc>
 80075ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075b0:	881b      	ldrh	r3, [r3, #0]
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075bc:	b29a      	uxth	r2, r3
 80075be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075c2:	801a      	strh	r2, [r3, #0]
 80075c4:	e08f      	b.n	80076e6 <USB_EPStartXfer+0x10ec>
 80075c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b3e      	cmp	r3, #62	@ 0x3e
 80075d4:	d826      	bhi.n	8007624 <USB_EPStartXfer+0x102a>
 80075d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	085b      	lsrs	r3, r3, #1
 80075e4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	691b      	ldr	r3, [r3, #16]
 80075f4:	f003 0301 	and.w	r3, r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d004      	beq.n	8007606 <USB_EPStartXfer+0x100c>
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	3301      	adds	r3, #1
 8007602:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007606:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	b29a      	uxth	r2, r3
 800760e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007612:	b29b      	uxth	r3, r3
 8007614:	029b      	lsls	r3, r3, #10
 8007616:	b29b      	uxth	r3, r3
 8007618:	4313      	orrs	r3, r2
 800761a:	b29a      	uxth	r2, r3
 800761c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007620:	801a      	strh	r2, [r3, #0]
 8007622:	e060      	b.n	80076e6 <USB_EPStartXfer+0x10ec>
 8007624:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007628:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	095b      	lsrs	r3, r3, #5
 8007632:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007636:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800763a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	f003 031f 	and.w	r3, r3, #31
 8007646:	2b00      	cmp	r3, #0
 8007648:	d104      	bne.n	8007654 <USB_EPStartXfer+0x105a>
 800764a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800764e:	3b01      	subs	r3, #1
 8007650:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007654:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007658:	881b      	ldrh	r3, [r3, #0]
 800765a:	b29a      	uxth	r2, r3
 800765c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007660:	b29b      	uxth	r3, r3
 8007662:	029b      	lsls	r3, r3, #10
 8007664:	b29b      	uxth	r3, r3
 8007666:	4313      	orrs	r3, r2
 8007668:	b29b      	uxth	r3, r3
 800766a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800766e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007672:	b29a      	uxth	r2, r3
 8007674:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007678:	801a      	strh	r2, [r3, #0]
 800767a:	e034      	b.n	80076e6 <USB_EPStartXfer+0x10ec>
 800767c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	785b      	ldrb	r3, [r3, #1]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d12c      	bne.n	80076e6 <USB_EPStartXfer+0x10ec>
 800768c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007690:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800769a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800769e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076b0:	4413      	add	r3, r2
 80076b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	011a      	lsls	r2, r3, #4
 80076c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076c8:	4413      	add	r3, r2
 80076ca:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	b29a      	uxth	r2, r3
 80076e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80076e4:	801a      	strh	r2, [r3, #0]
 80076e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	785b      	ldrb	r3, [r3, #1]
 8007700:	2b00      	cmp	r3, #0
 8007702:	f040 809d 	bne.w	8007840 <USB_EPStartXfer+0x1246>
 8007706:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800770a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007714:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007718:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007722:	b29b      	uxth	r3, r3
 8007724:	461a      	mov	r2, r3
 8007726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800772a:	4413      	add	r3, r2
 800772c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007730:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007734:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	011a      	lsls	r2, r3, #4
 800773e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007742:	4413      	add	r3, r2
 8007744:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007748:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800774c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007758:	b29a      	uxth	r2, r3
 800775a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800775e:	801a      	strh	r2, [r3, #0]
 8007760:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d10c      	bne.n	800778a <USB_EPStartXfer+0x1190>
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800777c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007780:	b29a      	uxth	r2, r3
 8007782:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007786:	801a      	strh	r2, [r3, #0]
 8007788:	e088      	b.n	800789c <USB_EPStartXfer+0x12a2>
 800778a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	2b3e      	cmp	r3, #62	@ 0x3e
 8007798:	d826      	bhi.n	80077e8 <USB_EPStartXfer+0x11ee>
 800779a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800779e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	085b      	lsrs	r3, r3, #1
 80077a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	691b      	ldr	r3, [r3, #16]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d004      	beq.n	80077ca <USB_EPStartXfer+0x11d0>
 80077c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077c4:	3301      	adds	r3, #1
 80077c6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	029b      	lsls	r3, r3, #10
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4313      	orrs	r3, r2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077e4:	801a      	strh	r2, [r3, #0]
 80077e6:	e059      	b.n	800789c <USB_EPStartXfer+0x12a2>
 80077e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	095b      	lsrs	r3, r3, #5
 80077f6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	f003 031f 	and.w	r3, r3, #31
 800780a:	2b00      	cmp	r3, #0
 800780c:	d104      	bne.n	8007818 <USB_EPStartXfer+0x121e>
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007812:	3b01      	subs	r3, #1
 8007814:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007818:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007824:	b29b      	uxth	r3, r3
 8007826:	029b      	lsls	r3, r3, #10
 8007828:	b29b      	uxth	r3, r3
 800782a:	4313      	orrs	r3, r2
 800782c:	b29b      	uxth	r3, r3
 800782e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007836:	b29a      	uxth	r2, r3
 8007838:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800783c:	801a      	strh	r2, [r3, #0]
 800783e:	e02d      	b.n	800789c <USB_EPStartXfer+0x12a2>
 8007840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007844:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	785b      	ldrb	r3, [r3, #1]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d125      	bne.n	800789c <USB_EPStartXfer+0x12a2>
 8007850:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007854:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800785e:	b29b      	uxth	r3, r3
 8007860:	461a      	mov	r2, r3
 8007862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007866:	4413      	add	r3, r2
 8007868:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800786c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007870:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	011a      	lsls	r2, r3, #4
 800787a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800787e:	4413      	add	r3, r2
 8007880:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007884:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007888:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800788c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	b29a      	uxth	r2, r3
 8007896:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800789a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	69db      	ldr	r3, [r3, #28]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8218 	beq.w	8007cde <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80078ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078b6:	681a      	ldr	r2, [r3, #0]
 80078b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	009b      	lsls	r3, r3, #2
 80078c6:	4413      	add	r3, r2
 80078c8:	881b      	ldrh	r3, [r3, #0]
 80078ca:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d005      	beq.n	80078e6 <USB_EPStartXfer+0x12ec>
 80078da:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d10d      	bne.n	8007902 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078e6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	f040 81f5 	bne.w	8007cde <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078f4:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	f040 81ee 	bne.w	8007cde <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007902:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007906:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007910:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	781b      	ldrb	r3, [r3, #0]
 8007918:	009b      	lsls	r3, r3, #2
 800791a:	4413      	add	r3, r2
 800791c:	881b      	ldrh	r3, [r3, #0]
 800791e:	b29b      	uxth	r3, r3
 8007920:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007924:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007928:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 800792c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007930:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	009b      	lsls	r3, r3, #2
 8007944:	441a      	add	r2, r3
 8007946:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800794a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800794e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007952:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007956:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800795a:	b29b      	uxth	r3, r3
 800795c:	8013      	strh	r3, [r2, #0]
 800795e:	e1be      	b.n	8007cde <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007960:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007964:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	78db      	ldrb	r3, [r3, #3]
 800796c:	2b01      	cmp	r3, #1
 800796e:	f040 81b4 	bne.w	8007cda <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007972:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007976:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	699a      	ldr	r2, [r3, #24]
 800797e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	429a      	cmp	r2, r3
 800798c:	d917      	bls.n	80079be <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 800798e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007992:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 800799e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699a      	ldr	r2, [r3, #24]
 80079aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079ae:	1ad2      	subs	r2, r2, r3
 80079b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	619a      	str	r2, [r3, #24]
 80079bc:	e00e      	b.n	80079dc <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2200      	movs	r2, #0
 80079da:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80079dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	785b      	ldrb	r3, [r3, #1]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f040 8085 	bne.w	8007af8 <USB_EPStartXfer+0x14fe>
 80079ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a00:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a12:	4413      	add	r3, r2
 8007a14:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	011a      	lsls	r2, r3, #4
 8007a26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a30:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a38:	881b      	ldrh	r3, [r3, #0]
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a46:	801a      	strh	r2, [r3, #0]
 8007a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d10c      	bne.n	8007a6a <USB_EPStartXfer+0x1470>
 8007a50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	b29b      	uxth	r3, r3
 8007a58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a66:	801a      	strh	r2, [r3, #0]
 8007a68:	e077      	b.n	8007b5a <USB_EPStartXfer+0x1560>
 8007a6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a6e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a70:	d81e      	bhi.n	8007ab0 <USB_EPStartXfer+0x14b6>
 8007a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a76:	085b      	lsrs	r3, r3, #1
 8007a78:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d004      	beq.n	8007a92 <USB_EPStartXfer+0x1498>
 8007a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a92:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a9e:	b29b      	uxth	r3, r3
 8007aa0:	029b      	lsls	r3, r3, #10
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	b29a      	uxth	r2, r3
 8007aa8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007aac:	801a      	strh	r2, [r3, #0]
 8007aae:	e054      	b.n	8007b5a <USB_EPStartXfer+0x1560>
 8007ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007abe:	f003 031f 	and.w	r3, r3, #31
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d104      	bne.n	8007ad0 <USB_EPStartXfer+0x14d6>
 8007ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007aca:	3b01      	subs	r3, #1
 8007acc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	029b      	lsls	r3, r3, #10
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	4313      	orrs	r3, r2
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007aea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007af4:	801a      	strh	r2, [r3, #0]
 8007af6:	e030      	b.n	8007b5a <USB_EPStartXfer+0x1560>
 8007af8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007afc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	785b      	ldrb	r3, [r3, #1]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d128      	bne.n	8007b5a <USB_EPStartXfer+0x1560>
 8007b08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	461a      	mov	r2, r3
 8007b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	011a      	lsls	r2, r3, #4
 8007b40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b44:	4413      	add	r3, r2
 8007b46:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b4a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b58:	801a      	strh	r2, [r3, #0]
 8007b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	785b      	ldrb	r3, [r3, #1]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f040 8085 	bne.w	8007c84 <USB_EPStartXfer+0x168a>
 8007b7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	011a      	lsls	r2, r3, #4
 8007bb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007bbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007bc0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bcc:	b29a      	uxth	r2, r3
 8007bce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bd2:	801a      	strh	r2, [r3, #0]
 8007bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10c      	bne.n	8007bf6 <USB_EPStartXfer+0x15fc>
 8007bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007be0:	881b      	ldrh	r3, [r3, #0]
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007be8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bf2:	801a      	strh	r2, [r3, #0]
 8007bf4:	e073      	b.n	8007cde <USB_EPStartXfer+0x16e4>
 8007bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bfa:	2b3e      	cmp	r3, #62	@ 0x3e
 8007bfc:	d81e      	bhi.n	8007c3c <USB_EPStartXfer+0x1642>
 8007bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c02:	085b      	lsrs	r3, r3, #1
 8007c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c0c:	f003 0301 	and.w	r3, r3, #1
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d004      	beq.n	8007c1e <USB_EPStartXfer+0x1624>
 8007c14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c18:	3301      	adds	r3, #1
 8007c1a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29a      	uxth	r2, r3
 8007c26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	029b      	lsls	r3, r3, #10
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	4313      	orrs	r3, r2
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c38:	801a      	strh	r2, [r3, #0]
 8007c3a:	e050      	b.n	8007cde <USB_EPStartXfer+0x16e4>
 8007c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c40:	095b      	lsrs	r3, r3, #5
 8007c42:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c4a:	f003 031f 	and.w	r3, r3, #31
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d104      	bne.n	8007c5c <USB_EPStartXfer+0x1662>
 8007c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c56:	3b01      	subs	r3, #1
 8007c58:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c68:	b29b      	uxth	r3, r3
 8007c6a:	029b      	lsls	r3, r3, #10
 8007c6c:	b29b      	uxth	r3, r3
 8007c6e:	4313      	orrs	r3, r2
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c7a:	b29a      	uxth	r2, r3
 8007c7c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c80:	801a      	strh	r2, [r3, #0]
 8007c82:	e02c      	b.n	8007cde <USB_EPStartXfer+0x16e4>
 8007c84:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c88:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d124      	bne.n	8007cde <USB_EPStartXfer+0x16e4>
 8007c94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c98:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ca2:	b29b      	uxth	r3, r3
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007caa:	4413      	add	r3, r2
 8007cac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007cb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	781b      	ldrb	r3, [r3, #0]
 8007cbc:	011a      	lsls	r2, r3, #4
 8007cbe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007cc2:	4413      	add	r3, r2
 8007cc4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007ccc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cd6:	801a      	strh	r2, [r3, #0]
 8007cd8:	e001      	b.n	8007cde <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	e03a      	b.n	8007d54 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cde:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	781b      	ldrb	r3, [r3, #0]
 8007cf4:	009b      	lsls	r3, r3, #2
 8007cf6:	4413      	add	r3, r2
 8007cf8:	881b      	ldrh	r3, [r3, #0]
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d08:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d0c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d10:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d14:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d18:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d1c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d24:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	009b      	lsls	r3, r3, #2
 8007d38:	441a      	add	r2, r3
 8007d3a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d3e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d42:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d52:	2300      	movs	r3, #0
}
 8007d54:	4618      	mov	r0, r3
 8007d56:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
 8007d66:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	785b      	ldrb	r3, [r3, #1]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d020      	beq.n	8007db2 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	009b      	lsls	r3, r3, #2
 8007d78:	4413      	add	r3, r2
 8007d7a:	881b      	ldrh	r3, [r3, #0]
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d86:	81bb      	strh	r3, [r7, #12]
 8007d88:	89bb      	ldrh	r3, [r7, #12]
 8007d8a:	f083 0310 	eor.w	r3, r3, #16
 8007d8e:	81bb      	strh	r3, [r7, #12]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	009b      	lsls	r3, r3, #2
 8007d98:	441a      	add	r2, r3
 8007d9a:	89bb      	ldrh	r3, [r7, #12]
 8007d9c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007da0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007da4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	8013      	strh	r3, [r2, #0]
 8007db0:	e01f      	b.n	8007df2 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dc4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007dc8:	81fb      	strh	r3, [r7, #14]
 8007dca:	89fb      	ldrh	r3, [r7, #14]
 8007dcc:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007dd0:	81fb      	strh	r3, [r7, #14]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	441a      	add	r2, r3
 8007ddc:	89fb      	ldrh	r3, [r7, #14]
 8007dde:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007de2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007de6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3714      	adds	r7, #20
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b087      	sub	sp, #28
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	7b1b      	ldrb	r3, [r3, #12]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f040 809d 	bne.w	8007f4e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d04c      	beq.n	8007eb6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	823b      	strh	r3, [r7, #16]
 8007e2a:	8a3b      	ldrh	r3, [r7, #16]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01b      	beq.n	8007e6c <USB_EPClearStall+0x6c>
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e4a:	81fb      	strh	r3, [r7, #14]
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	009b      	lsls	r3, r3, #2
 8007e54:	441a      	add	r2, r3
 8007e56:	89fb      	ldrh	r3, [r7, #14]
 8007e58:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e5c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e60:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e64:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	78db      	ldrb	r3, [r3, #3]
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d06c      	beq.n	8007f4e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	009b      	lsls	r3, r3, #2
 8007e7c:	4413      	add	r3, r2
 8007e7e:	881b      	ldrh	r3, [r3, #0]
 8007e80:	b29b      	uxth	r3, r3
 8007e82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e8a:	81bb      	strh	r3, [r7, #12]
 8007e8c:	89bb      	ldrh	r3, [r7, #12]
 8007e8e:	f083 0320 	eor.w	r3, r3, #32
 8007e92:	81bb      	strh	r3, [r7, #12]
 8007e94:	687a      	ldr	r2, [r7, #4]
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	441a      	add	r2, r3
 8007e9e:	89bb      	ldrh	r3, [r7, #12]
 8007ea0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ea4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ea8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007eac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	8013      	strh	r3, [r2, #0]
 8007eb4:	e04b      	b.n	8007f4e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	82fb      	strh	r3, [r7, #22]
 8007ec4:	8afb      	ldrh	r3, [r7, #22]
 8007ec6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d01b      	beq.n	8007f06 <USB_EPClearStall+0x106>
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4413      	add	r3, r2
 8007ed8:	881b      	ldrh	r3, [r3, #0]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ee4:	82bb      	strh	r3, [r7, #20]
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	009b      	lsls	r3, r3, #2
 8007eee:	441a      	add	r2, r3
 8007ef0:	8abb      	ldrh	r3, [r7, #20]
 8007ef2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ef6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007efa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	881b      	ldrh	r3, [r3, #0]
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f1c:	827b      	strh	r3, [r7, #18]
 8007f1e:	8a7b      	ldrh	r3, [r7, #18]
 8007f20:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f24:	827b      	strh	r3, [r7, #18]
 8007f26:	8a7b      	ldrh	r3, [r7, #18]
 8007f28:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f2c:	827b      	strh	r3, [r7, #18]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	441a      	add	r2, r3
 8007f38:	8a7b      	ldrh	r3, [r7, #18]
 8007f3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f4a:	b29b      	uxth	r3, r3
 8007f4c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	371c      	adds	r7, #28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b083      	sub	sp, #12
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	460b      	mov	r3, r1
 8007f66:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f68:	78fb      	ldrb	r3, [r7, #3]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d103      	bne.n	8007f76 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2280      	movs	r2, #128	@ 0x80
 8007f72:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007f76:	2300      	movs	r3, #0
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f8c:	2300      	movs	r3, #0
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	370c      	adds	r7, #12
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr

08007f9a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007f9a:	b480      	push	{r7}
 8007f9c:	b085      	sub	sp, #20
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007fac:	68fb      	ldr	r3, [r7, #12]
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr

08007fba <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fba:	b480      	push	{r7}
 8007fbc:	b08b      	sub	sp, #44	@ 0x2c
 8007fbe:	af00      	add	r7, sp, #0
 8007fc0:	60f8      	str	r0, [r7, #12]
 8007fc2:	60b9      	str	r1, [r7, #8]
 8007fc4:	4611      	mov	r1, r2
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	460b      	mov	r3, r1
 8007fca:	80fb      	strh	r3, [r7, #6]
 8007fcc:	4613      	mov	r3, r2
 8007fce:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fd0:	88bb      	ldrh	r3, [r7, #4]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fe0:	88fb      	ldrh	r3, [r7, #6]
 8007fe2:	005a      	lsls	r2, r3, #1
 8007fe4:	697b      	ldr	r3, [r7, #20]
 8007fe6:	4413      	add	r3, r2
 8007fe8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fec:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007fee:	69bb      	ldr	r3, [r7, #24]
 8007ff0:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ff2:	e01e      	b.n	8008032 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007ff4:	69fb      	ldr	r3, [r7, #28]
 8007ff6:	781b      	ldrb	r3, [r3, #0]
 8007ff8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007ffa:	69fb      	ldr	r3, [r7, #28]
 8007ffc:	3301      	adds	r3, #1
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	021b      	lsls	r3, r3, #8
 8008002:	b21a      	sxth	r2, r3
 8008004:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008008:	4313      	orrs	r3, r2
 800800a:	b21b      	sxth	r3, r3
 800800c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800800e:	6a3b      	ldr	r3, [r7, #32]
 8008010:	8a7a      	ldrh	r2, [r7, #18]
 8008012:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008014:	6a3b      	ldr	r3, [r7, #32]
 8008016:	3302      	adds	r3, #2
 8008018:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800801a:	6a3b      	ldr	r3, [r7, #32]
 800801c:	3302      	adds	r3, #2
 800801e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	3301      	adds	r3, #1
 800802a:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800802c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800802e:	3b01      	subs	r3, #1
 8008030:	627b      	str	r3, [r7, #36]	@ 0x24
 8008032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1dd      	bne.n	8007ff4 <USB_WritePMA+0x3a>
  }
}
 8008038:	bf00      	nop
 800803a:	bf00      	nop
 800803c:	372c      	adds	r7, #44	@ 0x2c
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr

08008046 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008046:	b480      	push	{r7}
 8008048:	b08b      	sub	sp, #44	@ 0x2c
 800804a:	af00      	add	r7, sp, #0
 800804c:	60f8      	str	r0, [r7, #12]
 800804e:	60b9      	str	r1, [r7, #8]
 8008050:	4611      	mov	r1, r2
 8008052:	461a      	mov	r2, r3
 8008054:	460b      	mov	r3, r1
 8008056:	80fb      	strh	r3, [r7, #6]
 8008058:	4613      	mov	r3, r2
 800805a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800805c:	88bb      	ldrh	r3, [r7, #4]
 800805e:	085b      	lsrs	r3, r3, #1
 8008060:	b29b      	uxth	r3, r3
 8008062:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800806c:	88fb      	ldrh	r3, [r7, #6]
 800806e:	005a      	lsls	r2, r3, #1
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008078:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	627b      	str	r3, [r7, #36]	@ 0x24
 800807e:	e01b      	b.n	80080b8 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008080:	6a3b      	ldr	r3, [r7, #32]
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	3302      	adds	r3, #2
 800808c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	b2da      	uxtb	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	3301      	adds	r3, #1
 800809a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	0a1b      	lsrs	r3, r3, #8
 80080a0:	b2da      	uxtb	r2, r3
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	3302      	adds	r3, #2
 80080b0:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	3b01      	subs	r3, #1
 80080b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d1e0      	bne.n	8008080 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80080be:	88bb      	ldrh	r3, [r7, #4]
 80080c0:	f003 0301 	and.w	r3, r3, #1
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d007      	beq.n	80080da <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80080ca:	6a3b      	ldr	r3, [r7, #32]
 80080cc:	881b      	ldrh	r3, [r3, #0]
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	b2da      	uxtb	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	701a      	strb	r2, [r3, #0]
  }
}
 80080da:	bf00      	nop
 80080dc:	372c      	adds	r7, #44	@ 0x2c
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80080e6:	b580      	push	{r7, lr}
 80080e8:	b084      	sub	sp, #16
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
 80080ee:	460b      	mov	r3, r1
 80080f0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080f2:	2300      	movs	r3, #0
 80080f4:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80080f6:	2302      	movs	r3, #2
 80080f8:	2203      	movs	r2, #3
 80080fa:	2181      	movs	r1, #129	@ 0x81
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f001 fd82 	bl	8009c06 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2201      	movs	r2, #1
 8008106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008108:	2302      	movs	r3, #2
 800810a:	2203      	movs	r2, #3
 800810c:	2101      	movs	r1, #1
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f001 fd79 	bl	8009c06 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800811c:	2054      	movs	r0, #84	@ 0x54
 800811e:	f001 fe87 	bl	8009e30 <USBD_static_malloc>
 8008122:	4602      	mov	r2, r0
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008134:	2301      	movs	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]
 8008138:	e012      	b.n	8008160 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008140:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	2200      	movs	r2, #0
 8008146:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008154:	68ba      	ldr	r2, [r7, #8]
 8008156:	2340      	movs	r3, #64	@ 0x40
 8008158:	2101      	movs	r1, #1
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 fe44 	bl	8009de8 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008160:	7bfb      	ldrb	r3, [r7, #15]
}
 8008162:	4618      	mov	r0, r3
 8008164:	3710      	adds	r7, #16
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b082      	sub	sp, #8
 800816e:	af00      	add	r7, sp, #0
 8008170:	6078      	str	r0, [r7, #4]
 8008172:	460b      	mov	r3, r1
 8008174:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 8008176:	2181      	movs	r1, #129	@ 0x81
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 fd6a 	bl	8009c52 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008184:	2101      	movs	r1, #1
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 fd63 	bl	8009c52 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2200      	movs	r2, #0
 8008190:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800819a:	2b00      	cmp	r3, #0
 800819c:	d00e      	beq.n	80081bc <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fe4c 	bl	8009e4c <USBD_static_free>
    pdev->pClassData = NULL;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3708      	adds	r7, #8
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081d8:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80081da:	2300      	movs	r3, #0
 80081dc:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80081de:	2300      	movs	r3, #0
 80081e0:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d051      	beq.n	800829a <USBD_CUSTOM_HID_Setup+0xd2>
 80081f6:	2b20      	cmp	r3, #32
 80081f8:	f040 80d8 	bne.w	80083ac <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	785b      	ldrb	r3, [r3, #1]
 8008200:	3b02      	subs	r3, #2
 8008202:	2b09      	cmp	r3, #9
 8008204:	d841      	bhi.n	800828a <USBD_CUSTOM_HID_Setup+0xc2>
 8008206:	a201      	add	r2, pc, #4	@ (adr r2, 800820c <USBD_CUSTOM_HID_Setup+0x44>)
 8008208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800820c:	08008265 	.word	0x08008265
 8008210:	08008243 	.word	0x08008243
 8008214:	0800828b 	.word	0x0800828b
 8008218:	0800828b 	.word	0x0800828b
 800821c:	0800828b 	.word	0x0800828b
 8008220:	0800828b 	.word	0x0800828b
 8008224:	0800828b 	.word	0x0800828b
 8008228:	08008275 	.word	0x08008275
 800822c:	08008253 	.word	0x08008253
 8008230:	08008235 	.word	0x08008235
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	885b      	ldrh	r3, [r3, #2]
 8008238:	b2db      	uxtb	r3, r3
 800823a:	461a      	mov	r2, r3
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8008240:	e02a      	b.n	8008298 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	3340      	adds	r3, #64	@ 0x40
 8008246:	2201      	movs	r2, #1
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f001 f9a4 	bl	8009598 <USBD_CtlSendData>
          break;
 8008250:	e022      	b.n	8008298 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	885b      	ldrh	r3, [r3, #2]
 8008256:	0a1b      	lsrs	r3, r3, #8
 8008258:	b29b      	uxth	r3, r3
 800825a:	b2db      	uxtb	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 8008262:	e019      	b.n	8008298 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	3344      	adds	r3, #68	@ 0x44
 8008268:	2201      	movs	r2, #1
 800826a:	4619      	mov	r1, r3
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f001 f993 	bl	8009598 <USBD_CtlSendData>
          break;
 8008272:	e011      	b.n	8008298 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	2201      	movs	r2, #1
 8008278:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 800827a:	6939      	ldr	r1, [r7, #16]
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	88db      	ldrh	r3, [r3, #6]
 8008280:	461a      	mov	r2, r3
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f001 f9b6 	bl	80095f4 <USBD_CtlPrepareRx>
          break;
 8008288:	e006      	b.n	8008298 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800828a:	6839      	ldr	r1, [r7, #0]
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 f918 	bl	80094c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	75fb      	strb	r3, [r7, #23]
          break;
 8008296:	bf00      	nop
      }
      break;
 8008298:	e08f      	b.n	80083ba <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d87c      	bhi.n	800839c <USBD_CUSTOM_HID_Setup+0x1d4>
 80082a2:	a201      	add	r2, pc, #4	@ (adr r2, 80082a8 <USBD_CUSTOM_HID_Setup+0xe0>)
 80082a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a8:	080082d9 	.word	0x080082d9
 80082ac:	0800839d 	.word	0x0800839d
 80082b0:	0800839d 	.word	0x0800839d
 80082b4:	0800839d 	.word	0x0800839d
 80082b8:	0800839d 	.word	0x0800839d
 80082bc:	0800839d 	.word	0x0800839d
 80082c0:	08008301 	.word	0x08008301
 80082c4:	0800839d 	.word	0x0800839d
 80082c8:	0800839d 	.word	0x0800839d
 80082cc:	0800839d 	.word	0x0800839d
 80082d0:	0800834f 	.word	0x0800834f
 80082d4:	08008377 	.word	0x08008377
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d107      	bne.n	80082f2 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80082e2:	f107 030e 	add.w	r3, r7, #14
 80082e6:	2202      	movs	r2, #2
 80082e8:	4619      	mov	r1, r3
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f001 f954 	bl	8009598 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082f0:	e05b      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f001 f8e4 	bl	80094c2 <USBD_CtlError>
            ret = USBD_FAIL;
 80082fa:	2302      	movs	r3, #2
 80082fc:	75fb      	strb	r3, [r7, #23]
          break;
 80082fe:	e054      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	885b      	ldrh	r3, [r3, #2]
 8008304:	0a1b      	lsrs	r3, r3, #8
 8008306:	b29b      	uxth	r3, r3
 8008308:	2b22      	cmp	r3, #34	@ 0x22
 800830a:	d10b      	bne.n	8008324 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	88db      	ldrh	r3, [r3, #6]
 8008310:	2b30      	cmp	r3, #48	@ 0x30
 8008312:	bf28      	it	cs
 8008314:	2330      	movcs	r3, #48	@ 0x30
 8008316:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	61bb      	str	r3, [r7, #24]
 8008322:	e00d      	b.n	8008340 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	885b      	ldrh	r3, [r3, #2]
 8008328:	0a1b      	lsrs	r3, r3, #8
 800832a:	b29b      	uxth	r3, r3
 800832c:	2b21      	cmp	r3, #33	@ 0x21
 800832e:	d107      	bne.n	8008340 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008330:	4b24      	ldr	r3, [pc, #144]	@ (80083c4 <USBD_CUSTOM_HID_Setup+0x1fc>)
 8008332:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	88db      	ldrh	r3, [r3, #6]
 8008338:	2b09      	cmp	r3, #9
 800833a:	bf28      	it	cs
 800833c:	2309      	movcs	r3, #9
 800833e:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008340:	8bfb      	ldrh	r3, [r7, #30]
 8008342:	461a      	mov	r2, r3
 8008344:	69b9      	ldr	r1, [r7, #24]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f926 	bl	8009598 <USBD_CtlSendData>
          break;
 800834c:	e02d      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008354:	2b03      	cmp	r3, #3
 8008356:	d107      	bne.n	8008368 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	3348      	adds	r3, #72	@ 0x48
 800835c:	2201      	movs	r2, #1
 800835e:	4619      	mov	r1, r3
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f001 f919 	bl	8009598 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008366:	e020      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f8a9 	bl	80094c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008370:	2302      	movs	r3, #2
 8008372:	75fb      	strb	r3, [r7, #23]
          break;
 8008374:	e019      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800837c:	2b03      	cmp	r3, #3
 800837e:	d106      	bne.n	800838e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	885b      	ldrh	r3, [r3, #2]
 8008384:	b2db      	uxtb	r3, r3
 8008386:	461a      	mov	r2, r3
 8008388:	693b      	ldr	r3, [r7, #16]
 800838a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800838c:	e00d      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f001 f896 	bl	80094c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008396:	2302      	movs	r3, #2
 8008398:	75fb      	strb	r3, [r7, #23]
          break;
 800839a:	e006      	b.n	80083aa <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f001 f88f 	bl	80094c2 <USBD_CtlError>
          ret = USBD_FAIL;
 80083a4:	2302      	movs	r3, #2
 80083a6:	75fb      	strb	r3, [r7, #23]
          break;
 80083a8:	bf00      	nop
      }
      break;
 80083aa:	e006      	b.n	80083ba <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 80083ac:	6839      	ldr	r1, [r7, #0]
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f001 f887 	bl	80094c2 <USBD_CtlError>
      ret = USBD_FAIL;
 80083b4:	2302      	movs	r3, #2
 80083b6:	75fb      	strb	r3, [r7, #23]
      break;
 80083b8:	bf00      	nop
  }
  return ret;
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	200000c8 	.word	0x200000c8

080083c8 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b086      	sub	sp, #24
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	4613      	mov	r3, r2
 80083d4:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083dc:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083e4:	2b03      	cmp	r3, #3
 80083e6:	d111      	bne.n	800840c <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10a      	bne.n	8008408 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80083fa:	88fb      	ldrh	r3, [r7, #6]
 80083fc:	68ba      	ldr	r2, [r7, #8]
 80083fe:	2181      	movs	r1, #129	@ 0x81
 8008400:	68f8      	ldr	r0, [r7, #12]
 8008402:	f001 fcce 	bl	8009da2 <USBD_LL_Transmit>
 8008406:	e001      	b.n	800840c <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008408:	2301      	movs	r3, #1
 800840a:	e000      	b.n	800840e <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	4618      	mov	r0, r3
 8008410:	3718      	adds	r7, #24
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2229      	movs	r2, #41	@ 0x29
 8008424:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008426:	4b03      	ldr	r3, [pc, #12]	@ (8008434 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008428:	4618      	mov	r0, r3
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	20000044 	.word	0x20000044

08008438 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008438:	b480      	push	{r7}
 800843a:	b083      	sub	sp, #12
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2229      	movs	r2, #41	@ 0x29
 8008444:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 8008446:	4b03      	ldr	r3, [pc, #12]	@ (8008454 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	20000070 	.word	0x20000070

08008458 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2229      	movs	r2, #41	@ 0x29
 8008464:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 8008466:	4b03      	ldr	r3, [pc, #12]	@ (8008474 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008468:	4618      	mov	r0, r3
 800846a:	370c      	adds	r7, #12
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr
 8008474:	2000009c 	.word	0x2000009c

08008478 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return USBD_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	370c      	adds	r7, #12
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr

0800849e <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084b0:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084b8:	68db      	ldr	r3, [r3, #12]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	7810      	ldrb	r0, [r2, #0]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	7852      	ldrb	r2, [r2, #1]
 80084c2:	4611      	mov	r1, r2
 80084c4:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	2340      	movs	r3, #64	@ 0x40
 80084ca:	2101      	movs	r1, #1
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 fc8b 	bl	8009de8 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084ea:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d10c      	bne.n	800850e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	68fa      	ldr	r2, [r7, #12]
 80084fe:	7810      	ldrb	r0, [r2, #0]
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	7852      	ldrb	r2, [r2, #1]
 8008504:	4611      	mov	r1, r2
 8008506:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2200      	movs	r2, #0
 800850c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	220a      	movs	r2, #10
 8008524:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008526:	4b03      	ldr	r3, [pc, #12]	@ (8008534 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	200000d4 	.word	0x200000d4

08008538 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8008542:	2302      	movs	r3, #2
 8008544:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d005      	beq.n	8008558 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 8008554:	2300      	movs	r3, #0
 8008556:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008558:	7bfb      	ldrb	r3, [r7, #15]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	60f8      	str	r0, [r7, #12]
 800856e:	60b9      	str	r1, [r7, #8]
 8008570:	4613      	mov	r3, r2
 8008572:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d101      	bne.n	800857e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800857a:	2302      	movs	r3, #2
 800857c:	e01a      	b.n	80085b4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008584:	2b00      	cmp	r3, #0
 8008586:	d003      	beq.n	8008590 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d003      	beq.n	800859e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	68ba      	ldr	r2, [r7, #8]
 800859a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2201      	movs	r2, #1
 80085a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	79fa      	ldrb	r2, [r7, #7]
 80085aa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f001 fabf 	bl	8009b30 <USBD_LL_Init>

  return USBD_OK;
 80085b2:	2300      	movs	r3, #0
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80085c6:	2300      	movs	r3, #0
 80085c8:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d006      	beq.n	80085de <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	683a      	ldr	r2, [r7, #0]
 80085d4:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	73fb      	strb	r3, [r7, #15]
 80085dc:	e001      	b.n	80085e2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80085de:	2302      	movs	r3, #2
 80085e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 fae9 	bl	8009bd0 <USBD_LL_Start>

  return USBD_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008608:	b480      	push	{r7}
 800860a:	b083      	sub	sp, #12
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	370c      	adds	r7, #12
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr

0800861e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
 8008626:	460b      	mov	r3, r1
 8008628:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800862a:	2302      	movs	r3, #2
 800862c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00c      	beq.n	8008652 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	78fa      	ldrb	r2, [r7, #3]
 8008642:	4611      	mov	r1, r2
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	4798      	blx	r3
 8008648:	4603      	mov	r3, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	d101      	bne.n	8008652 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8008652:	7bfb      	ldrb	r3, [r7, #15]
}
 8008654:	4618      	mov	r0, r3
 8008656:	3710      	adds	r7, #16
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	460b      	mov	r3, r1
 8008666:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800866e:	685b      	ldr	r3, [r3, #4]
 8008670:	78fa      	ldrb	r2, [r7, #3]
 8008672:	4611      	mov	r1, r2
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	4798      	blx	r3

  return USBD_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3708      	adds	r7, #8
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b082      	sub	sp, #8
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008692:	6839      	ldr	r1, [r7, #0]
 8008694:	4618      	mov	r0, r3
 8008696:	f000 feda 	bl	800944e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2201      	movs	r2, #1
 800869e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80086a8:	461a      	mov	r2, r3
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d016      	beq.n	80086ec <USBD_LL_SetupStage+0x6a>
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d81c      	bhi.n	80086fc <USBD_LL_SetupStage+0x7a>
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d002      	beq.n	80086cc <USBD_LL_SetupStage+0x4a>
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d008      	beq.n	80086dc <USBD_LL_SetupStage+0x5a>
 80086ca:	e017      	b.n	80086fc <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086d2:	4619      	mov	r1, r3
 80086d4:	6878      	ldr	r0, [r7, #4]
 80086d6:	f000 f9cd 	bl	8008a74 <USBD_StdDevReq>
      break;
 80086da:	e01a      	b.n	8008712 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f000 fa2f 	bl	8008b48 <USBD_StdItfReq>
      break;
 80086ea:	e012      	b.n	8008712 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fa6f 	bl	8008bd8 <USBD_StdEPReq>
      break;
 80086fa:	e00a      	b.n	8008712 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008702:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008706:	b2db      	uxtb	r3, r3
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f001 fac0 	bl	8009c90 <USBD_LL_StallEP>
      break;
 8008710:	bf00      	nop
  }

  return USBD_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3708      	adds	r7, #8
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	460b      	mov	r3, r1
 8008726:	607a      	str	r2, [r7, #4]
 8008728:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800872a:	7afb      	ldrb	r3, [r7, #11]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d14b      	bne.n	80087c8 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008736:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800873e:	2b03      	cmp	r3, #3
 8008740:	d134      	bne.n	80087ac <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	68da      	ldr	r2, [r3, #12]
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	691b      	ldr	r3, [r3, #16]
 800874a:	429a      	cmp	r2, r3
 800874c:	d919      	bls.n	8008782 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	1ad2      	subs	r2, r2, r3
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	68da      	ldr	r2, [r3, #12]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008764:	429a      	cmp	r2, r3
 8008766:	d203      	bcs.n	8008770 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800876c:	b29b      	uxth	r3, r3
 800876e:	e002      	b.n	8008776 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8008774:	b29b      	uxth	r3, r3
 8008776:	461a      	mov	r2, r3
 8008778:	6879      	ldr	r1, [r7, #4]
 800877a:	68f8      	ldr	r0, [r7, #12]
 800877c:	f000 ff58 	bl	8009630 <USBD_CtlContinueRx>
 8008780:	e038      	b.n	80087f4 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d00a      	beq.n	80087a4 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008794:	2b03      	cmp	r3, #3
 8008796:	d105      	bne.n	80087a4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800879e:	691b      	ldr	r3, [r3, #16]
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80087a4:	68f8      	ldr	r0, [r7, #12]
 80087a6:	f000 ff55 	bl	8009654 <USBD_CtlSendStatus>
 80087aa:	e023      	b.n	80087f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087b2:	2b05      	cmp	r3, #5
 80087b4:	d11e      	bne.n	80087f4 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	2200      	movs	r2, #0
 80087ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80087be:	2100      	movs	r1, #0
 80087c0:	68f8      	ldr	r0, [r7, #12]
 80087c2:	f001 fa65 	bl	8009c90 <USBD_LL_StallEP>
 80087c6:	e015      	b.n	80087f4 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087ce:	699b      	ldr	r3, [r3, #24]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00d      	beq.n	80087f0 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80087da:	2b03      	cmp	r3, #3
 80087dc:	d108      	bne.n	80087f0 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e4:	699b      	ldr	r3, [r3, #24]
 80087e6:	7afa      	ldrb	r2, [r7, #11]
 80087e8:	4611      	mov	r1, r2
 80087ea:	68f8      	ldr	r0, [r7, #12]
 80087ec:	4798      	blx	r3
 80087ee:	e001      	b.n	80087f4 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087f0:	2302      	movs	r3, #2
 80087f2:	e000      	b.n	80087f6 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3718      	adds	r7, #24
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b086      	sub	sp, #24
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	460b      	mov	r3, r1
 8008808:	607a      	str	r2, [r7, #4]
 800880a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800880c:	7afb      	ldrb	r3, [r7, #11]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d17f      	bne.n	8008912 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	3314      	adds	r3, #20
 8008816:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800881e:	2b02      	cmp	r3, #2
 8008820:	d15c      	bne.n	80088dc <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	691b      	ldr	r3, [r3, #16]
 800882a:	429a      	cmp	r2, r3
 800882c:	d915      	bls.n	800885a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800882e:	697b      	ldr	r3, [r7, #20]
 8008830:	68da      	ldr	r2, [r3, #12]
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	1ad2      	subs	r2, r2, r3
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	b29b      	uxth	r3, r3
 8008842:	461a      	mov	r2, r3
 8008844:	6879      	ldr	r1, [r7, #4]
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	f000 fec2 	bl	80095d0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800884c:	2300      	movs	r3, #0
 800884e:	2200      	movs	r2, #0
 8008850:	2100      	movs	r1, #0
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f001 fac8 	bl	8009de8 <USBD_LL_PrepareReceive>
 8008858:	e04e      	b.n	80088f8 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800885a:	697b      	ldr	r3, [r7, #20]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	6912      	ldr	r2, [r2, #16]
 8008862:	fbb3 f1f2 	udiv	r1, r3, r2
 8008866:	fb01 f202 	mul.w	r2, r1, r2
 800886a:	1a9b      	subs	r3, r3, r2
 800886c:	2b00      	cmp	r3, #0
 800886e:	d11c      	bne.n	80088aa <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	689a      	ldr	r2, [r3, #8]
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008878:	429a      	cmp	r2, r3
 800887a:	d316      	bcc.n	80088aa <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800887c:	697b      	ldr	r3, [r7, #20]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008886:	429a      	cmp	r2, r3
 8008888:	d20f      	bcs.n	80088aa <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800888a:	2200      	movs	r2, #0
 800888c:	2100      	movs	r1, #0
 800888e:	68f8      	ldr	r0, [r7, #12]
 8008890:	f000 fe9e 	bl	80095d0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800889c:	2300      	movs	r3, #0
 800889e:	2200      	movs	r2, #0
 80088a0:	2100      	movs	r1, #0
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f001 faa0 	bl	8009de8 <USBD_LL_PrepareReceive>
 80088a8:	e026      	b.n	80088f8 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d00a      	beq.n	80088cc <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088bc:	2b03      	cmp	r3, #3
 80088be:	d105      	bne.n	80088cc <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088c6:	68db      	ldr	r3, [r3, #12]
 80088c8:	68f8      	ldr	r0, [r7, #12]
 80088ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80088cc:	2180      	movs	r1, #128	@ 0x80
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f001 f9de 	bl	8009c90 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088d4:	68f8      	ldr	r0, [r7, #12]
 80088d6:	f000 fed0 	bl	800967a <USBD_CtlReceiveStatus>
 80088da:	e00d      	b.n	80088f8 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d004      	beq.n	80088f0 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d103      	bne.n	80088f8 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088f0:	2180      	movs	r1, #128	@ 0x80
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f001 f9cc 	bl	8009c90 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d11d      	bne.n	800893e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff fe80 	bl	8008608 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008910:	e015      	b.n	800893e <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008918:	695b      	ldr	r3, [r3, #20]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00d      	beq.n	800893a <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008924:	2b03      	cmp	r3, #3
 8008926:	d108      	bne.n	800893a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800892e:	695b      	ldr	r3, [r3, #20]
 8008930:	7afa      	ldrb	r2, [r7, #11]
 8008932:	4611      	mov	r1, r2
 8008934:	68f8      	ldr	r0, [r7, #12]
 8008936:	4798      	blx	r3
 8008938:	e001      	b.n	800893e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800893a:	2302      	movs	r3, #2
 800893c:	e000      	b.n	8008940 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008950:	2340      	movs	r3, #64	@ 0x40
 8008952:	2200      	movs	r2, #0
 8008954:	2100      	movs	r1, #0
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 f955 	bl	8009c06 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2240      	movs	r2, #64	@ 0x40
 8008968:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800896c:	2340      	movs	r3, #64	@ 0x40
 800896e:	2200      	movs	r2, #0
 8008970:	2180      	movs	r1, #128	@ 0x80
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f001 f947 	bl	8009c06 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2201      	movs	r2, #1
 800897c:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2240      	movs	r2, #64	@ 0x40
 8008982:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2200      	movs	r2, #0
 8008990:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2200      	movs	r2, #0
 8008998:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d009      	beq.n	80089c0 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089b2:	685b      	ldr	r3, [r3, #4]
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	6852      	ldr	r2, [r2, #4]
 80089b8:	b2d2      	uxtb	r2, r2
 80089ba:	4611      	mov	r1, r2
 80089bc:	6878      	ldr	r0, [r7, #4]
 80089be:	4798      	blx	r3
  }

  return USBD_OK;
 80089c0:	2300      	movs	r3, #0
}
 80089c2:	4618      	mov	r0, r3
 80089c4:	3708      	adds	r7, #8
 80089c6:	46bd      	mov	sp, r7
 80089c8:	bd80      	pop	{r7, pc}

080089ca <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089ca:	b480      	push	{r7}
 80089cc:	b083      	sub	sp, #12
 80089ce:	af00      	add	r7, sp, #0
 80089d0:	6078      	str	r0, [r7, #4]
 80089d2:	460b      	mov	r3, r1
 80089d4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	78fa      	ldrb	r2, [r7, #3]
 80089da:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	370c      	adds	r7, #12
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr

080089ea <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089ea:	b480      	push	{r7}
 80089ec:	b083      	sub	sp, #12
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2204      	movs	r2, #4
 8008a02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a06:	2300      	movs	r3, #0
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a22:	2b04      	cmp	r3, #4
 8008a24:	d105      	bne.n	8008a32 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	370c      	adds	r7, #12
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b082      	sub	sp, #8
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d10b      	bne.n	8008a6a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d005      	beq.n	8008a6a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a64:	69db      	ldr	r3, [r3, #28]
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3708      	adds	r7, #8
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}

08008a74 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b084      	sub	sp, #16
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a8a:	2b40      	cmp	r3, #64	@ 0x40
 8008a8c:	d005      	beq.n	8008a9a <USBD_StdDevReq+0x26>
 8008a8e:	2b40      	cmp	r3, #64	@ 0x40
 8008a90:	d84f      	bhi.n	8008b32 <USBD_StdDevReq+0xbe>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d009      	beq.n	8008aaa <USBD_StdDevReq+0x36>
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	d14b      	bne.n	8008b32 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
      break;
 8008aa8:	e048      	b.n	8008b3c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	2b09      	cmp	r3, #9
 8008ab0:	d839      	bhi.n	8008b26 <USBD_StdDevReq+0xb2>
 8008ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ab8 <USBD_StdDevReq+0x44>)
 8008ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab8:	08008b09 	.word	0x08008b09
 8008abc:	08008b1d 	.word	0x08008b1d
 8008ac0:	08008b27 	.word	0x08008b27
 8008ac4:	08008b13 	.word	0x08008b13
 8008ac8:	08008b27 	.word	0x08008b27
 8008acc:	08008aeb 	.word	0x08008aeb
 8008ad0:	08008ae1 	.word	0x08008ae1
 8008ad4:	08008b27 	.word	0x08008b27
 8008ad8:	08008aff 	.word	0x08008aff
 8008adc:	08008af5 	.word	0x08008af5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ae0:	6839      	ldr	r1, [r7, #0]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9dc 	bl	8008ea0 <USBD_GetDescriptor>
          break;
 8008ae8:	e022      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008aea:	6839      	ldr	r1, [r7, #0]
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 fb3f 	bl	8009170 <USBD_SetAddress>
          break;
 8008af2:	e01d      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 fb7e 	bl	80091f8 <USBD_SetConfig>
          break;
 8008afc:	e018      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f000 fc07 	bl	8009314 <USBD_GetConfig>
          break;
 8008b06:	e013      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b08:	6839      	ldr	r1, [r7, #0]
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 fc37 	bl	800937e <USBD_GetStatus>
          break;
 8008b10:	e00e      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc65 	bl	80093e4 <USBD_SetFeature>
          break;
 8008b1a:	e009      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fc74 	bl	800940c <USBD_ClrFeature>
          break;
 8008b24:	e004      	b.n	8008b30 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fcca 	bl	80094c2 <USBD_CtlError>
          break;
 8008b2e:	bf00      	nop
      }
      break;
 8008b30:	e004      	b.n	8008b3c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b32:	6839      	ldr	r1, [r7, #0]
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 fcc4 	bl	80094c2 <USBD_CtlError>
      break;
 8008b3a:	bf00      	nop
  }

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop

08008b48 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b52:	2300      	movs	r3, #0
 8008b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b5e:	2b40      	cmp	r3, #64	@ 0x40
 8008b60:	d005      	beq.n	8008b6e <USBD_StdItfReq+0x26>
 8008b62:	2b40      	cmp	r3, #64	@ 0x40
 8008b64:	d82e      	bhi.n	8008bc4 <USBD_StdItfReq+0x7c>
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <USBD_StdItfReq+0x26>
 8008b6a:	2b20      	cmp	r3, #32
 8008b6c:	d12a      	bne.n	8008bc4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b74:	3b01      	subs	r3, #1
 8008b76:	2b02      	cmp	r3, #2
 8008b78:	d81d      	bhi.n	8008bb6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	889b      	ldrh	r3, [r3, #4]
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d813      	bhi.n	8008bac <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	6839      	ldr	r1, [r7, #0]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	4798      	blx	r3
 8008b92:	4603      	mov	r3, r0
 8008b94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	88db      	ldrh	r3, [r3, #6]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d110      	bne.n	8008bc0 <USBD_StdItfReq+0x78>
 8008b9e:	7bfb      	ldrb	r3, [r7, #15]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10d      	bne.n	8008bc0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fd55 	bl	8009654 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008baa:	e009      	b.n	8008bc0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fc87 	bl	80094c2 <USBD_CtlError>
          break;
 8008bb4:	e004      	b.n	8008bc0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008bb6:	6839      	ldr	r1, [r7, #0]
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 fc82 	bl	80094c2 <USBD_CtlError>
          break;
 8008bbe:	e000      	b.n	8008bc2 <USBD_StdItfReq+0x7a>
          break;
 8008bc0:	bf00      	nop
      }
      break;
 8008bc2:	e004      	b.n	8008bce <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fc7b 	bl	80094c2 <USBD_CtlError>
      break;
 8008bcc:	bf00      	nop
  }

  return USBD_OK;
 8008bce:	2300      	movs	r3, #0
}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	3710      	adds	r7, #16
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	bd80      	pop	{r7, pc}

08008bd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b084      	sub	sp, #16
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
 8008be0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	889b      	ldrh	r3, [r3, #4]
 8008bea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bf4:	2b40      	cmp	r3, #64	@ 0x40
 8008bf6:	d007      	beq.n	8008c08 <USBD_StdEPReq+0x30>
 8008bf8:	2b40      	cmp	r3, #64	@ 0x40
 8008bfa:	f200 8146 	bhi.w	8008e8a <USBD_StdEPReq+0x2b2>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <USBD_StdEPReq+0x40>
 8008c02:	2b20      	cmp	r3, #32
 8008c04:	f040 8141 	bne.w	8008e8a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	6839      	ldr	r1, [r7, #0]
 8008c12:	6878      	ldr	r0, [r7, #4]
 8008c14:	4798      	blx	r3
      break;
 8008c16:	e13d      	b.n	8008e94 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	781b      	ldrb	r3, [r3, #0]
 8008c1c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c20:	2b20      	cmp	r3, #32
 8008c22:	d10a      	bne.n	8008c3a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	4798      	blx	r3
 8008c32:	4603      	mov	r3, r0
 8008c34:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	e12d      	b.n	8008e96 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	785b      	ldrb	r3, [r3, #1]
 8008c3e:	2b03      	cmp	r3, #3
 8008c40:	d007      	beq.n	8008c52 <USBD_StdEPReq+0x7a>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	f300 811b 	bgt.w	8008e7e <USBD_StdEPReq+0x2a6>
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d072      	beq.n	8008d32 <USBD_StdEPReq+0x15a>
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d03a      	beq.n	8008cc6 <USBD_StdEPReq+0xee>
 8008c50:	e115      	b.n	8008e7e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	d002      	beq.n	8008c62 <USBD_StdEPReq+0x8a>
 8008c5c:	2b03      	cmp	r3, #3
 8008c5e:	d015      	beq.n	8008c8c <USBD_StdEPReq+0xb4>
 8008c60:	e02b      	b.n	8008cba <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c62:	7bbb      	ldrb	r3, [r7, #14]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d00c      	beq.n	8008c82 <USBD_StdEPReq+0xaa>
 8008c68:	7bbb      	ldrb	r3, [r7, #14]
 8008c6a:	2b80      	cmp	r3, #128	@ 0x80
 8008c6c:	d009      	beq.n	8008c82 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	4619      	mov	r1, r3
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f001 f80c 	bl	8009c90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c78:	2180      	movs	r1, #128	@ 0x80
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f808 	bl	8009c90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c80:	e020      	b.n	8008cc4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 fc1c 	bl	80094c2 <USBD_CtlError>
              break;
 8008c8a:	e01b      	b.n	8008cc4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	885b      	ldrh	r3, [r3, #2]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d10e      	bne.n	8008cb2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00b      	beq.n	8008cb2 <USBD_StdEPReq+0xda>
 8008c9a:	7bbb      	ldrb	r3, [r7, #14]
 8008c9c:	2b80      	cmp	r3, #128	@ 0x80
 8008c9e:	d008      	beq.n	8008cb2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	88db      	ldrh	r3, [r3, #6]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d104      	bne.n	8008cb2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	4619      	mov	r1, r3
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 ffef 	bl	8009c90 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fcce 	bl	8009654 <USBD_CtlSendStatus>

              break;
 8008cb8:	e004      	b.n	8008cc4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008cba:	6839      	ldr	r1, [r7, #0]
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f000 fc00 	bl	80094c2 <USBD_CtlError>
              break;
 8008cc2:	bf00      	nop
          }
          break;
 8008cc4:	e0e0      	b.n	8008e88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ccc:	2b02      	cmp	r3, #2
 8008cce:	d002      	beq.n	8008cd6 <USBD_StdEPReq+0xfe>
 8008cd0:	2b03      	cmp	r3, #3
 8008cd2:	d015      	beq.n	8008d00 <USBD_StdEPReq+0x128>
 8008cd4:	e026      	b.n	8008d24 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cd6:	7bbb      	ldrb	r3, [r7, #14]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d00c      	beq.n	8008cf6 <USBD_StdEPReq+0x11e>
 8008cdc:	7bbb      	ldrb	r3, [r7, #14]
 8008cde:	2b80      	cmp	r3, #128	@ 0x80
 8008ce0:	d009      	beq.n	8008cf6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 ffd2 	bl	8009c90 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cec:	2180      	movs	r1, #128	@ 0x80
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 ffce 	bl	8009c90 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cf4:	e01c      	b.n	8008d30 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008cf6:	6839      	ldr	r1, [r7, #0]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fbe2 	bl	80094c2 <USBD_CtlError>
              break;
 8008cfe:	e017      	b.n	8008d30 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	885b      	ldrh	r3, [r3, #2]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d112      	bne.n	8008d2e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d08:	7bbb      	ldrb	r3, [r7, #14]
 8008d0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d004      	beq.n	8008d1c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d12:	7bbb      	ldrb	r3, [r7, #14]
 8008d14:	4619      	mov	r1, r3
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 ffd9 	bl	8009cce <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 fc99 	bl	8009654 <USBD_CtlSendStatus>
              }
              break;
 8008d22:	e004      	b.n	8008d2e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fbcb 	bl	80094c2 <USBD_CtlError>
              break;
 8008d2c:	e000      	b.n	8008d30 <USBD_StdEPReq+0x158>
              break;
 8008d2e:	bf00      	nop
          }
          break;
 8008d30:	e0aa      	b.n	8008e88 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d38:	2b02      	cmp	r3, #2
 8008d3a:	d002      	beq.n	8008d42 <USBD_StdEPReq+0x16a>
 8008d3c:	2b03      	cmp	r3, #3
 8008d3e:	d032      	beq.n	8008da6 <USBD_StdEPReq+0x1ce>
 8008d40:	e097      	b.n	8008e72 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d42:	7bbb      	ldrb	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d007      	beq.n	8008d58 <USBD_StdEPReq+0x180>
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	2b80      	cmp	r3, #128	@ 0x80
 8008d4c:	d004      	beq.n	8008d58 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d4e:	6839      	ldr	r1, [r7, #0]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 fbb6 	bl	80094c2 <USBD_CtlError>
                break;
 8008d56:	e091      	b.n	8008e7c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	da0b      	bge.n	8008d78 <USBD_StdEPReq+0x1a0>
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	3310      	adds	r3, #16
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	4413      	add	r3, r2
 8008d74:	3304      	adds	r3, #4
 8008d76:	e00b      	b.n	8008d90 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d78:	7bbb      	ldrb	r3, [r7, #14]
 8008d7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d7e:	4613      	mov	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d8a:	687a      	ldr	r2, [r7, #4]
 8008d8c:	4413      	add	r3, r2
 8008d8e:	3304      	adds	r3, #4
 8008d90:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	2200      	movs	r2, #0
 8008d96:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f000 fbfa 	bl	8009598 <USBD_CtlSendData>
              break;
 8008da4:	e06a      	b.n	8008e7c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008da6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	da11      	bge.n	8008dd2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	f003 020f 	and.w	r2, r3, #15
 8008db4:	6879      	ldr	r1, [r7, #4]
 8008db6:	4613      	mov	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	4413      	add	r3, r2
 8008dbc:	009b      	lsls	r3, r3, #2
 8008dbe:	440b      	add	r3, r1
 8008dc0:	3318      	adds	r3, #24
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d117      	bne.n	8008df8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fb79 	bl	80094c2 <USBD_CtlError>
                  break;
 8008dd0:	e054      	b.n	8008e7c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dd2:	7bbb      	ldrb	r3, [r7, #14]
 8008dd4:	f003 020f 	and.w	r2, r3, #15
 8008dd8:	6879      	ldr	r1, [r7, #4]
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	440b      	add	r3, r1
 8008de4:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008dee:	6839      	ldr	r1, [r7, #0]
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f000 fb66 	bl	80094c2 <USBD_CtlError>
                  break;
 8008df6:	e041      	b.n	8008e7c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	da0b      	bge.n	8008e18 <USBD_StdEPReq+0x240>
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	3310      	adds	r3, #16
 8008e10:	687a      	ldr	r2, [r7, #4]
 8008e12:	4413      	add	r3, r2
 8008e14:	3304      	adds	r3, #4
 8008e16:	e00b      	b.n	8008e30 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e18:	7bbb      	ldrb	r3, [r7, #14]
 8008e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	3304      	adds	r3, #4
 8008e30:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d002      	beq.n	8008e3e <USBD_StdEPReq+0x266>
 8008e38:	7bbb      	ldrb	r3, [r7, #14]
 8008e3a:	2b80      	cmp	r3, #128	@ 0x80
 8008e3c:	d103      	bne.n	8008e46 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e00e      	b.n	8008e64 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e46:	7bbb      	ldrb	r3, [r7, #14]
 8008e48:	4619      	mov	r1, r3
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 ff5e 	bl	8009d0c <USBD_LL_IsStallEP>
 8008e50:	4603      	mov	r3, r0
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	e002      	b.n	8008e64 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	2200      	movs	r2, #0
 8008e62:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	2202      	movs	r2, #2
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 fb94 	bl	8009598 <USBD_CtlSendData>
              break;
 8008e70:	e004      	b.n	8008e7c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fb24 	bl	80094c2 <USBD_CtlError>
              break;
 8008e7a:	bf00      	nop
          }
          break;
 8008e7c:	e004      	b.n	8008e88 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fb1e 	bl	80094c2 <USBD_CtlError>
          break;
 8008e86:	bf00      	nop
      }
      break;
 8008e88:	e004      	b.n	8008e94 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e8a:	6839      	ldr	r1, [r7, #0]
 8008e8c:	6878      	ldr	r0, [r7, #4]
 8008e8e:	f000 fb18 	bl	80094c2 <USBD_CtlError>
      break;
 8008e92:	bf00      	nop
  }

  return ret;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b084      	sub	sp, #16
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	885b      	ldrh	r3, [r3, #2]
 8008eba:	0a1b      	lsrs	r3, r3, #8
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	2b06      	cmp	r3, #6
 8008ec2:	f200 8128 	bhi.w	8009116 <USBD_GetDescriptor+0x276>
 8008ec6:	a201      	add	r2, pc, #4	@ (adr r2, 8008ecc <USBD_GetDescriptor+0x2c>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008ee9 	.word	0x08008ee9
 8008ed0:	08008f01 	.word	0x08008f01
 8008ed4:	08008f41 	.word	0x08008f41
 8008ed8:	08009117 	.word	0x08009117
 8008edc:	08009117 	.word	0x08009117
 8008ee0:	080090b7 	.word	0x080090b7
 8008ee4:	080090e3 	.word	0x080090e3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7c12      	ldrb	r2, [r2, #16]
 8008ef4:	f107 0108 	add.w	r1, r7, #8
 8008ef8:	4610      	mov	r0, r2
 8008efa:	4798      	blx	r3
 8008efc:	60f8      	str	r0, [r7, #12]
      break;
 8008efe:	e112      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	7c1b      	ldrb	r3, [r3, #16]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d10d      	bne.n	8008f24 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f10:	f107 0208 	add.w	r2, r7, #8
 8008f14:	4610      	mov	r0, r2
 8008f16:	4798      	blx	r3
 8008f18:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	2202      	movs	r2, #2
 8008f20:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f22:	e100      	b.n	8009126 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f2c:	f107 0208 	add.w	r2, r7, #8
 8008f30:	4610      	mov	r0, r2
 8008f32:	4798      	blx	r3
 8008f34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	3301      	adds	r3, #1
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	701a      	strb	r2, [r3, #0]
      break;
 8008f3e:	e0f2      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	885b      	ldrh	r3, [r3, #2]
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	2b05      	cmp	r3, #5
 8008f48:	f200 80ac 	bhi.w	80090a4 <USBD_GetDescriptor+0x204>
 8008f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8008f54 <USBD_GetDescriptor+0xb4>)
 8008f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f52:	bf00      	nop
 8008f54:	08008f6d 	.word	0x08008f6d
 8008f58:	08008fa1 	.word	0x08008fa1
 8008f5c:	08008fd5 	.word	0x08008fd5
 8008f60:	08009009 	.word	0x08009009
 8008f64:	0800903d 	.word	0x0800903d
 8008f68:	08009071 	.word	0x08009071
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d00b      	beq.n	8008f90 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f7e:	685b      	ldr	r3, [r3, #4]
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	7c12      	ldrb	r2, [r2, #16]
 8008f84:	f107 0108 	add.w	r1, r7, #8
 8008f88:	4610      	mov	r0, r2
 8008f8a:	4798      	blx	r3
 8008f8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f8e:	e091      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f90:	6839      	ldr	r1, [r7, #0]
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa95 	bl	80094c2 <USBD_CtlError>
            err++;
 8008f98:	7afb      	ldrb	r3, [r7, #11]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	72fb      	strb	r3, [r7, #11]
          break;
 8008f9e:	e089      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d00b      	beq.n	8008fc4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	7c12      	ldrb	r2, [r2, #16]
 8008fb8:	f107 0108 	add.w	r1, r7, #8
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	4798      	blx	r3
 8008fc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fc2:	e077      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fc4:	6839      	ldr	r1, [r7, #0]
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa7b 	bl	80094c2 <USBD_CtlError>
            err++;
 8008fcc:	7afb      	ldrb	r3, [r7, #11]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	72fb      	strb	r3, [r7, #11]
          break;
 8008fd2:	e06f      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	7c12      	ldrb	r2, [r2, #16]
 8008fec:	f107 0108 	add.w	r1, r7, #8
 8008ff0:	4610      	mov	r0, r2
 8008ff2:	4798      	blx	r3
 8008ff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008ff6:	e05d      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008ff8:	6839      	ldr	r1, [r7, #0]
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f000 fa61 	bl	80094c2 <USBD_CtlError>
            err++;
 8009000:	7afb      	ldrb	r3, [r7, #11]
 8009002:	3301      	adds	r3, #1
 8009004:	72fb      	strb	r3, [r7, #11]
          break;
 8009006:	e055      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00b      	beq.n	800902c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	7c12      	ldrb	r2, [r2, #16]
 8009020:	f107 0108 	add.w	r1, r7, #8
 8009024:	4610      	mov	r0, r2
 8009026:	4798      	blx	r3
 8009028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800902a:	e043      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800902c:	6839      	ldr	r1, [r7, #0]
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f000 fa47 	bl	80094c2 <USBD_CtlError>
            err++;
 8009034:	7afb      	ldrb	r3, [r7, #11]
 8009036:	3301      	adds	r3, #1
 8009038:	72fb      	strb	r3, [r7, #11]
          break;
 800903a:	e03b      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00b      	beq.n	8009060 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800904e:	695b      	ldr	r3, [r3, #20]
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	7c12      	ldrb	r2, [r2, #16]
 8009054:	f107 0108 	add.w	r1, r7, #8
 8009058:	4610      	mov	r0, r2
 800905a:	4798      	blx	r3
 800905c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800905e:	e029      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009060:	6839      	ldr	r1, [r7, #0]
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 fa2d 	bl	80094c2 <USBD_CtlError>
            err++;
 8009068:	7afb      	ldrb	r3, [r7, #11]
 800906a:	3301      	adds	r3, #1
 800906c:	72fb      	strb	r3, [r7, #11]
          break;
 800906e:	e021      	b.n	80090b4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d00b      	beq.n	8009094 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	687a      	ldr	r2, [r7, #4]
 8009086:	7c12      	ldrb	r2, [r2, #16]
 8009088:	f107 0108 	add.w	r1, r7, #8
 800908c:	4610      	mov	r0, r2
 800908e:	4798      	blx	r3
 8009090:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009092:	e00f      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fa13 	bl	80094c2 <USBD_CtlError>
            err++;
 800909c:	7afb      	ldrb	r3, [r7, #11]
 800909e:	3301      	adds	r3, #1
 80090a0:	72fb      	strb	r3, [r7, #11]
          break;
 80090a2:	e007      	b.n	80090b4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80090a4:	6839      	ldr	r1, [r7, #0]
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 fa0b 	bl	80094c2 <USBD_CtlError>
          err++;
 80090ac:	7afb      	ldrb	r3, [r7, #11]
 80090ae:	3301      	adds	r3, #1
 80090b0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80090b2:	e038      	b.n	8009126 <USBD_GetDescriptor+0x286>
 80090b4:	e037      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	7c1b      	ldrb	r3, [r3, #16]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d109      	bne.n	80090d2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090c6:	f107 0208 	add.w	r2, r7, #8
 80090ca:	4610      	mov	r0, r2
 80090cc:	4798      	blx	r3
 80090ce:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090d0:	e029      	b.n	8009126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090d2:	6839      	ldr	r1, [r7, #0]
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f9f4 	bl	80094c2 <USBD_CtlError>
        err++;
 80090da:	7afb      	ldrb	r3, [r7, #11]
 80090dc:	3301      	adds	r3, #1
 80090de:	72fb      	strb	r3, [r7, #11]
      break;
 80090e0:	e021      	b.n	8009126 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	7c1b      	ldrb	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d10d      	bne.n	8009106 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090f2:	f107 0208 	add.w	r2, r7, #8
 80090f6:	4610      	mov	r0, r2
 80090f8:	4798      	blx	r3
 80090fa:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	3301      	adds	r3, #1
 8009100:	2207      	movs	r2, #7
 8009102:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009104:	e00f      	b.n	8009126 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009106:	6839      	ldr	r1, [r7, #0]
 8009108:	6878      	ldr	r0, [r7, #4]
 800910a:	f000 f9da 	bl	80094c2 <USBD_CtlError>
        err++;
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	3301      	adds	r3, #1
 8009112:	72fb      	strb	r3, [r7, #11]
      break;
 8009114:	e007      	b.n	8009126 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009116:	6839      	ldr	r1, [r7, #0]
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f9d2 	bl	80094c2 <USBD_CtlError>
      err++;
 800911e:	7afb      	ldrb	r3, [r7, #11]
 8009120:	3301      	adds	r3, #1
 8009122:	72fb      	strb	r3, [r7, #11]
      break;
 8009124:	bf00      	nop
  }

  if (err != 0U)
 8009126:	7afb      	ldrb	r3, [r7, #11]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d11c      	bne.n	8009166 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800912c:	893b      	ldrh	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d011      	beq.n	8009156 <USBD_GetDescriptor+0x2b6>
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	88db      	ldrh	r3, [r3, #6]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d00d      	beq.n	8009156 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	88da      	ldrh	r2, [r3, #6]
 800913e:	893b      	ldrh	r3, [r7, #8]
 8009140:	4293      	cmp	r3, r2
 8009142:	bf28      	it	cs
 8009144:	4613      	movcs	r3, r2
 8009146:	b29b      	uxth	r3, r3
 8009148:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800914a:	893b      	ldrh	r3, [r7, #8]
 800914c:	461a      	mov	r2, r3
 800914e:	68f9      	ldr	r1, [r7, #12]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fa21 	bl	8009598 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	88db      	ldrh	r3, [r3, #6]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d104      	bne.n	8009168 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa78 	bl	8009654 <USBD_CtlSendStatus>
 8009164:	e000      	b.n	8009168 <USBD_GetDescriptor+0x2c8>
    return;
 8009166:	bf00      	nop
    }
  }
}
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d130      	bne.n	80091e4 <USBD_SetAddress+0x74>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	88db      	ldrh	r3, [r3, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d12c      	bne.n	80091e4 <USBD_SetAddress+0x74>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009190:	d828      	bhi.n	80091e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800919c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d104      	bne.n	80091b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f989 	bl	80094c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b0:	e01d      	b.n	80091ee <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	7bfa      	ldrb	r2, [r7, #15]
 80091b6:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fdd0 	bl	8009d64 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa45 	bl	8009654 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d8:	e009      	b.n	80091ee <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e2:	e004      	b.n	80091ee <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f96b 	bl	80094c2 <USBD_CtlError>
  }
}
 80091ec:	bf00      	nop
 80091ee:	bf00      	nop
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
	...

080091f8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	885b      	ldrh	r3, [r3, #2]
 8009206:	b2da      	uxtb	r2, r3
 8009208:	4b41      	ldr	r3, [pc, #260]	@ (8009310 <USBD_SetConfig+0x118>)
 800920a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800920c:	4b40      	ldr	r3, [pc, #256]	@ (8009310 <USBD_SetConfig+0x118>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d904      	bls.n	800921e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f953 	bl	80094c2 <USBD_CtlError>
 800921c:	e075      	b.n	800930a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009224:	2b02      	cmp	r3, #2
 8009226:	d002      	beq.n	800922e <USBD_SetConfig+0x36>
 8009228:	2b03      	cmp	r3, #3
 800922a:	d023      	beq.n	8009274 <USBD_SetConfig+0x7c>
 800922c:	e062      	b.n	80092f4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800922e:	4b38      	ldr	r3, [pc, #224]	@ (8009310 <USBD_SetConfig+0x118>)
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d01a      	beq.n	800926c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009236:	4b36      	ldr	r3, [pc, #216]	@ (8009310 <USBD_SetConfig+0x118>)
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	461a      	mov	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2203      	movs	r2, #3
 8009244:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009248:	4b31      	ldr	r3, [pc, #196]	@ (8009310 <USBD_SetConfig+0x118>)
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	4619      	mov	r1, r3
 800924e:	6878      	ldr	r0, [r7, #4]
 8009250:	f7ff f9e5 	bl	800861e <USBD_SetClassConfig>
 8009254:	4603      	mov	r3, r0
 8009256:	2b02      	cmp	r3, #2
 8009258:	d104      	bne.n	8009264 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f930 	bl	80094c2 <USBD_CtlError>
            return;
 8009262:	e052      	b.n	800930a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f9f5 	bl	8009654 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800926a:	e04e      	b.n	800930a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f9f1 	bl	8009654 <USBD_CtlSendStatus>
        break;
 8009272:	e04a      	b.n	800930a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8009274:	4b26      	ldr	r3, [pc, #152]	@ (8009310 <USBD_SetConfig+0x118>)
 8009276:	781b      	ldrb	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d112      	bne.n	80092a2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2202      	movs	r2, #2
 8009280:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009284:	4b22      	ldr	r3, [pc, #136]	@ (8009310 <USBD_SetConfig+0x118>)
 8009286:	781b      	ldrb	r3, [r3, #0]
 8009288:	461a      	mov	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800928e:	4b20      	ldr	r3, [pc, #128]	@ (8009310 <USBD_SetConfig+0x118>)
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	4619      	mov	r1, r3
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f7ff f9e1 	bl	800865c <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 f9da 	bl	8009654 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092a0:	e033      	b.n	800930a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80092a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009310 <USBD_SetConfig+0x118>)
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	461a      	mov	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	429a      	cmp	r2, r3
 80092ae:	d01d      	beq.n	80092ec <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	4619      	mov	r1, r3
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f7ff f9cf 	bl	800865c <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80092be:	4b14      	ldr	r3, [pc, #80]	@ (8009310 <USBD_SetConfig+0x118>)
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092c8:	4b11      	ldr	r3, [pc, #68]	@ (8009310 <USBD_SetConfig+0x118>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff f9a5 	bl	800861e <USBD_SetClassConfig>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d104      	bne.n	80092e4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f8f0 	bl	80094c2 <USBD_CtlError>
            return;
 80092e2:	e012      	b.n	800930a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f9b5 	bl	8009654 <USBD_CtlSendStatus>
        break;
 80092ea:	e00e      	b.n	800930a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9b1 	bl	8009654 <USBD_CtlSendStatus>
        break;
 80092f2:	e00a      	b.n	800930a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092f4:	6839      	ldr	r1, [r7, #0]
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f8e3 	bl	80094c2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092fc:	4b04      	ldr	r3, [pc, #16]	@ (8009310 <USBD_SetConfig+0x118>)
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	4619      	mov	r1, r3
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff f9aa 	bl	800865c <USBD_ClrClassConfig>
        break;
 8009308:	bf00      	nop
    }
  }
}
 800930a:	3708      	adds	r7, #8
 800930c:	46bd      	mov	sp, r7
 800930e:	bd80      	pop	{r7, pc}
 8009310:	20000330 	.word	0x20000330

08009314 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	88db      	ldrh	r3, [r3, #6]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d004      	beq.n	8009330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009326:	6839      	ldr	r1, [r7, #0]
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 f8ca 	bl	80094c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800932e:	e022      	b.n	8009376 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009336:	2b02      	cmp	r3, #2
 8009338:	dc02      	bgt.n	8009340 <USBD_GetConfig+0x2c>
 800933a:	2b00      	cmp	r3, #0
 800933c:	dc03      	bgt.n	8009346 <USBD_GetConfig+0x32>
 800933e:	e015      	b.n	800936c <USBD_GetConfig+0x58>
 8009340:	2b03      	cmp	r3, #3
 8009342:	d00b      	beq.n	800935c <USBD_GetConfig+0x48>
 8009344:	e012      	b.n	800936c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2200      	movs	r2, #0
 800934a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3308      	adds	r3, #8
 8009350:	2201      	movs	r2, #1
 8009352:	4619      	mov	r1, r3
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 f91f 	bl	8009598 <USBD_CtlSendData>
        break;
 800935a:	e00c      	b.n	8009376 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	3304      	adds	r3, #4
 8009360:	2201      	movs	r2, #1
 8009362:	4619      	mov	r1, r3
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f917 	bl	8009598 <USBD_CtlSendData>
        break;
 800936a:	e004      	b.n	8009376 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f8a7 	bl	80094c2 <USBD_CtlError>
        break;
 8009374:	bf00      	nop
}
 8009376:	bf00      	nop
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b082      	sub	sp, #8
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
 8009386:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800938e:	3b01      	subs	r3, #1
 8009390:	2b02      	cmp	r3, #2
 8009392:	d81e      	bhi.n	80093d2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	88db      	ldrh	r3, [r3, #6]
 8009398:	2b02      	cmp	r3, #2
 800939a:	d004      	beq.n	80093a6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800939c:	6839      	ldr	r1, [r7, #0]
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 f88f 	bl	80094c2 <USBD_CtlError>
        break;
 80093a4:	e01a      	b.n	80093dc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d005      	beq.n	80093c2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	68db      	ldr	r3, [r3, #12]
 80093ba:	f043 0202 	orr.w	r2, r3, #2
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	330c      	adds	r3, #12
 80093c6:	2202      	movs	r2, #2
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8e4 	bl	8009598 <USBD_CtlSendData>
      break;
 80093d0:	e004      	b.n	80093dc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80093d2:	6839      	ldr	r1, [r7, #0]
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f874 	bl	80094c2 <USBD_CtlError>
      break;
 80093da:	bf00      	nop
  }
}
 80093dc:	bf00      	nop
 80093de:	3708      	adds	r7, #8
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b082      	sub	sp, #8
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	885b      	ldrh	r3, [r3, #2]
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d106      	bne.n	8009404 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f928 	bl	8009654 <USBD_CtlSendStatus>
  }
}
 8009404:	bf00      	nop
 8009406:	3708      	adds	r7, #8
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b082      	sub	sp, #8
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800941c:	3b01      	subs	r3, #1
 800941e:	2b02      	cmp	r3, #2
 8009420:	d80b      	bhi.n	800943a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	885b      	ldrh	r3, [r3, #2]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d10c      	bne.n	8009444 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f90e 	bl	8009654 <USBD_CtlSendStatus>
      }
      break;
 8009438:	e004      	b.n	8009444 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f840 	bl	80094c2 <USBD_CtlError>
      break;
 8009442:	e000      	b.n	8009446 <USBD_ClrFeature+0x3a>
      break;
 8009444:	bf00      	nop
  }
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800944e:	b480      	push	{r7}
 8009450:	b083      	sub	sp, #12
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
 8009456:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	781a      	ldrb	r2, [r3, #0]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	785a      	ldrb	r2, [r3, #1]
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	3302      	adds	r3, #2
 800946c:	781b      	ldrb	r3, [r3, #0]
 800946e:	461a      	mov	r2, r3
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	3303      	adds	r3, #3
 8009474:	781b      	ldrb	r3, [r3, #0]
 8009476:	021b      	lsls	r3, r3, #8
 8009478:	b29b      	uxth	r3, r3
 800947a:	4413      	add	r3, r2
 800947c:	b29a      	uxth	r2, r3
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009482:	683b      	ldr	r3, [r7, #0]
 8009484:	3304      	adds	r3, #4
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	461a      	mov	r2, r3
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	3305      	adds	r3, #5
 800948e:	781b      	ldrb	r3, [r3, #0]
 8009490:	021b      	lsls	r3, r3, #8
 8009492:	b29b      	uxth	r3, r3
 8009494:	4413      	add	r3, r2
 8009496:	b29a      	uxth	r2, r3
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	3306      	adds	r3, #6
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	461a      	mov	r2, r3
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	3307      	adds	r3, #7
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	021b      	lsls	r3, r3, #8
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	4413      	add	r3, r2
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	80da      	strh	r2, [r3, #6]

}
 80094b6:	bf00      	nop
 80094b8:	370c      	adds	r7, #12
 80094ba:	46bd      	mov	sp, r7
 80094bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c0:	4770      	bx	lr

080094c2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80094cc:	2180      	movs	r1, #128	@ 0x80
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 fbde 	bl	8009c90 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80094d4:	2100      	movs	r1, #0
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f000 fbda 	bl	8009c90 <USBD_LL_StallEP>
}
 80094dc:	bf00      	nop
 80094de:	3708      	adds	r7, #8
 80094e0:	46bd      	mov	sp, r7
 80094e2:	bd80      	pop	{r7, pc}

080094e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b086      	sub	sp, #24
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	60f8      	str	r0, [r7, #12]
 80094ec:	60b9      	str	r1, [r7, #8]
 80094ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d032      	beq.n	8009560 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f000 f834 	bl	8009568 <USBD_GetLen>
 8009500:	4603      	mov	r3, r0
 8009502:	3301      	adds	r3, #1
 8009504:	b29b      	uxth	r3, r3
 8009506:	005b      	lsls	r3, r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800950e:	7dfb      	ldrb	r3, [r7, #23]
 8009510:	1c5a      	adds	r2, r3, #1
 8009512:	75fa      	strb	r2, [r7, #23]
 8009514:	461a      	mov	r2, r3
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	4413      	add	r3, r2
 800951a:	687a      	ldr	r2, [r7, #4]
 800951c:	7812      	ldrb	r2, [r2, #0]
 800951e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	1c5a      	adds	r2, r3, #1
 8009524:	75fa      	strb	r2, [r7, #23]
 8009526:	461a      	mov	r2, r3
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	4413      	add	r3, r2
 800952c:	2203      	movs	r2, #3
 800952e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009530:	e012      	b.n	8009558 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	60fa      	str	r2, [r7, #12]
 8009538:	7dfa      	ldrb	r2, [r7, #23]
 800953a:	1c51      	adds	r1, r2, #1
 800953c:	75f9      	strb	r1, [r7, #23]
 800953e:	4611      	mov	r1, r2
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	440a      	add	r2, r1
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009548:	7dfb      	ldrb	r3, [r7, #23]
 800954a:	1c5a      	adds	r2, r3, #1
 800954c:	75fa      	strb	r2, [r7, #23]
 800954e:	461a      	mov	r2, r3
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	4413      	add	r3, r2
 8009554:	2200      	movs	r2, #0
 8009556:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1e8      	bne.n	8009532 <USBD_GetString+0x4e>
    }
  }
}
 8009560:	bf00      	nop
 8009562:	3718      	adds	r7, #24
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009568:	b480      	push	{r7}
 800956a:	b085      	sub	sp, #20
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8009574:	e005      	b.n	8009582 <USBD_GetLen+0x1a>
  {
    len++;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
 8009578:	3301      	adds	r3, #1
 800957a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	3301      	adds	r3, #1
 8009580:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	781b      	ldrb	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d1f5      	bne.n	8009576 <USBD_GetLen+0xe>
  }

  return len;
 800958a:	7bfb      	ldrb	r3, [r7, #15]
}
 800958c:	4618      	mov	r0, r3
 800958e:	3714      	adds	r7, #20
 8009590:	46bd      	mov	sp, r7
 8009592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009596:	4770      	bx	lr

08009598 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	4613      	mov	r3, r2
 80095a4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2202      	movs	r2, #2
 80095aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80095ae:	88fa      	ldrh	r2, [r7, #6]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80095b4:	88fa      	ldrh	r2, [r7, #6]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095ba:	88fb      	ldrh	r3, [r7, #6]
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	2100      	movs	r1, #0
 80095c0:	68f8      	ldr	r0, [r7, #12]
 80095c2:	f000 fbee 	bl	8009da2 <USBD_LL_Transmit>

  return USBD_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095de:	88fb      	ldrh	r3, [r7, #6]
 80095e0:	68ba      	ldr	r2, [r7, #8]
 80095e2:	2100      	movs	r1, #0
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f000 fbdc 	bl	8009da2 <USBD_LL_Transmit>

  return USBD_OK;
 80095ea:	2300      	movs	r3, #0
}
 80095ec:	4618      	mov	r0, r3
 80095ee:	3710      	adds	r7, #16
 80095f0:	46bd      	mov	sp, r7
 80095f2:	bd80      	pop	{r7, pc}

080095f4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2203      	movs	r2, #3
 8009606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009612:	88fa      	ldrh	r2, [r7, #6]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800961a:	88fb      	ldrh	r3, [r7, #6]
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	2100      	movs	r1, #0
 8009620:	68f8      	ldr	r0, [r7, #12]
 8009622:	f000 fbe1 	bl	8009de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3710      	adds	r7, #16
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b084      	sub	sp, #16
 8009634:	af00      	add	r7, sp, #0
 8009636:	60f8      	str	r0, [r7, #12]
 8009638:	60b9      	str	r1, [r7, #8]
 800963a:	4613      	mov	r3, r2
 800963c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800963e:	88fb      	ldrh	r3, [r7, #6]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	2100      	movs	r1, #0
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fbcf 	bl	8009de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2204      	movs	r2, #4
 8009660:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009664:	2300      	movs	r3, #0
 8009666:	2200      	movs	r2, #0
 8009668:	2100      	movs	r1, #0
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	f000 fb99 	bl	8009da2 <USBD_LL_Transmit>

  return USBD_OK;
 8009670:	2300      	movs	r3, #0
}
 8009672:	4618      	mov	r0, r3
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800967a:	b580      	push	{r7, lr}
 800967c:	b082      	sub	sp, #8
 800967e:	af00      	add	r7, sp, #0
 8009680:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2205      	movs	r2, #5
 8009686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800968a:	2300      	movs	r3, #0
 800968c:	2200      	movs	r2, #0
 800968e:	2100      	movs	r1, #0
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fba9 	bl	8009de8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009696:	2300      	movs	r3, #0
}
 8009698:	4618      	mov	r0, r3
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096a4:	2200      	movs	r2, #0
 80096a6:	4912      	ldr	r1, [pc, #72]	@ (80096f0 <MX_USB_DEVICE_Init+0x50>)
 80096a8:	4812      	ldr	r0, [pc, #72]	@ (80096f4 <MX_USB_DEVICE_Init+0x54>)
 80096aa:	f7fe ff5c 	bl	8008566 <USBD_Init>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096b4:	f7f7 f8c4 	bl	8000840 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80096b8:	490f      	ldr	r1, [pc, #60]	@ (80096f8 <MX_USB_DEVICE_Init+0x58>)
 80096ba:	480e      	ldr	r0, [pc, #56]	@ (80096f4 <MX_USB_DEVICE_Init+0x54>)
 80096bc:	f7fe ff7e 	bl	80085bc <USBD_RegisterClass>
 80096c0:	4603      	mov	r3, r0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d001      	beq.n	80096ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096c6:	f7f7 f8bb 	bl	8000840 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80096ca:	490c      	ldr	r1, [pc, #48]	@ (80096fc <MX_USB_DEVICE_Init+0x5c>)
 80096cc:	4809      	ldr	r0, [pc, #36]	@ (80096f4 <MX_USB_DEVICE_Init+0x54>)
 80096ce:	f7fe ff33 	bl	8008538 <USBD_CUSTOM_HID_RegisterInterface>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096d8:	f7f7 f8b2 	bl	8000840 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096dc:	4805      	ldr	r0, [pc, #20]	@ (80096f4 <MX_USB_DEVICE_Init+0x54>)
 80096de:	f7fe ff87 	bl	80085f0 <USBD_Start>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d001      	beq.n	80096ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096e8:	f7f7 f8aa 	bl	8000840 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096ec:	bf00      	nop
 80096ee:	bd80      	pop	{r7, pc}
 80096f0:	20000120 	.word	0x20000120
 80096f4:	20000334 	.word	0x20000334
 80096f8:	2000000c 	.word	0x2000000c
 80096fc:	20000110 	.word	0x20000110

08009700 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009700:	b480      	push	{r7}
 8009702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009704:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009706:	4618      	mov	r0, r3
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009710:	b480      	push	{r7}
 8009712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009714:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009716:	4618      	mov	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	4603      	mov	r3, r0
 8009728:	460a      	mov	r2, r1
 800972a:	71fb      	strb	r3, [r7, #7]
 800972c:	4613      	mov	r3, r2
 800972e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009730:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009732:	4618      	mov	r0, r3
 8009734:	370c      	adds	r7, #12
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
	...

08009740 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009740:	b480      	push	{r7}
 8009742:	b083      	sub	sp, #12
 8009744:	af00      	add	r7, sp, #0
 8009746:	4603      	mov	r3, r0
 8009748:	6039      	str	r1, [r7, #0]
 800974a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2212      	movs	r2, #18
 8009750:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009752:	4b03      	ldr	r3, [pc, #12]	@ (8009760 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009754:	4618      	mov	r0, r3
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr
 8009760:	2000013c 	.word	0x2000013c

08009764 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	2204      	movs	r2, #4
 8009774:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009776:	4b03      	ldr	r3, [pc, #12]	@ (8009784 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009778:	4618      	mov	r0, r3
 800977a:	370c      	adds	r7, #12
 800977c:	46bd      	mov	sp, r7
 800977e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009782:	4770      	bx	lr
 8009784:	20000150 	.word	0x20000150

08009788 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b082      	sub	sp, #8
 800978c:	af00      	add	r7, sp, #0
 800978e:	4603      	mov	r3, r0
 8009790:	6039      	str	r1, [r7, #0]
 8009792:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009794:	79fb      	ldrb	r3, [r7, #7]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d105      	bne.n	80097a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800979a:	683a      	ldr	r2, [r7, #0]
 800979c:	4907      	ldr	r1, [pc, #28]	@ (80097bc <USBD_FS_ProductStrDescriptor+0x34>)
 800979e:	4808      	ldr	r0, [pc, #32]	@ (80097c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80097a0:	f7ff fea0 	bl	80094e4 <USBD_GetString>
 80097a4:	e004      	b.n	80097b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097a6:	683a      	ldr	r2, [r7, #0]
 80097a8:	4904      	ldr	r1, [pc, #16]	@ (80097bc <USBD_FS_ProductStrDescriptor+0x34>)
 80097aa:	4805      	ldr	r0, [pc, #20]	@ (80097c0 <USBD_FS_ProductStrDescriptor+0x38>)
 80097ac:	f7ff fe9a 	bl	80094e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80097b0:	4b02      	ldr	r3, [pc, #8]	@ (80097bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	200005f8 	.word	0x200005f8
 80097c0:	08009f40 	.word	0x08009f40

080097c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b082      	sub	sp, #8
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	6039      	str	r1, [r7, #0]
 80097ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	4904      	ldr	r1, [pc, #16]	@ (80097e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097d4:	4804      	ldr	r0, [pc, #16]	@ (80097e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097d6:	f7ff fe85 	bl	80094e4 <USBD_GetString>
  return USBD_StrDesc;
 80097da:	4b02      	ldr	r3, [pc, #8]	@ (80097e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	200005f8 	.word	0x200005f8
 80097e8:	08009f60 	.word	0x08009f60

080097ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	b082      	sub	sp, #8
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	4603      	mov	r3, r0
 80097f4:	6039      	str	r1, [r7, #0]
 80097f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	221a      	movs	r2, #26
 80097fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097fe:	f000 f843 	bl	8009888 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009802:	4b02      	ldr	r3, [pc, #8]	@ (800980c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009804:	4618      	mov	r0, r3
 8009806:	3708      	adds	r7, #8
 8009808:	46bd      	mov	sp, r7
 800980a:	bd80      	pop	{r7, pc}
 800980c:	20000154 	.word	0x20000154

08009810 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	4603      	mov	r3, r0
 8009818:	6039      	str	r1, [r7, #0]
 800981a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800981c:	79fb      	ldrb	r3, [r7, #7]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d105      	bne.n	800982e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009822:	683a      	ldr	r2, [r7, #0]
 8009824:	4907      	ldr	r1, [pc, #28]	@ (8009844 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009826:	4808      	ldr	r0, [pc, #32]	@ (8009848 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009828:	f7ff fe5c 	bl	80094e4 <USBD_GetString>
 800982c:	e004      	b.n	8009838 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800982e:	683a      	ldr	r2, [r7, #0]
 8009830:	4904      	ldr	r1, [pc, #16]	@ (8009844 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009832:	4805      	ldr	r0, [pc, #20]	@ (8009848 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009834:	f7ff fe56 	bl	80094e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009838:	4b02      	ldr	r3, [pc, #8]	@ (8009844 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	200005f8 	.word	0x200005f8
 8009848:	08009f74 	.word	0x08009f74

0800984c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	4603      	mov	r3, r0
 8009854:	6039      	str	r1, [r7, #0]
 8009856:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009858:	79fb      	ldrb	r3, [r7, #7]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d105      	bne.n	800986a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800985e:	683a      	ldr	r2, [r7, #0]
 8009860:	4907      	ldr	r1, [pc, #28]	@ (8009880 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009862:	4808      	ldr	r0, [pc, #32]	@ (8009884 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009864:	f7ff fe3e 	bl	80094e4 <USBD_GetString>
 8009868:	e004      	b.n	8009874 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800986a:	683a      	ldr	r2, [r7, #0]
 800986c:	4904      	ldr	r1, [pc, #16]	@ (8009880 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800986e:	4805      	ldr	r0, [pc, #20]	@ (8009884 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009870:	f7ff fe38 	bl	80094e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009874:	4b02      	ldr	r3, [pc, #8]	@ (8009880 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}
 800987e:	bf00      	nop
 8009880:	200005f8 	.word	0x200005f8
 8009884:	08009f88 	.word	0x08009f88

08009888 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b084      	sub	sp, #16
 800988c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800988e:	4b0f      	ldr	r3, [pc, #60]	@ (80098cc <Get_SerialNum+0x44>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009894:	4b0e      	ldr	r3, [pc, #56]	@ (80098d0 <Get_SerialNum+0x48>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800989a:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <Get_SerialNum+0x4c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4413      	add	r3, r2
 80098a6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d009      	beq.n	80098c2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098ae:	2208      	movs	r2, #8
 80098b0:	4909      	ldr	r1, [pc, #36]	@ (80098d8 <Get_SerialNum+0x50>)
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f814 	bl	80098e0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098b8:	2204      	movs	r2, #4
 80098ba:	4908      	ldr	r1, [pc, #32]	@ (80098dc <Get_SerialNum+0x54>)
 80098bc:	68b8      	ldr	r0, [r7, #8]
 80098be:	f000 f80f 	bl	80098e0 <IntToUnicode>
  }
}
 80098c2:	bf00      	nop
 80098c4:	3710      	adds	r7, #16
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	1ffff7ac 	.word	0x1ffff7ac
 80098d0:	1ffff7b0 	.word	0x1ffff7b0
 80098d4:	1ffff7b4 	.word	0x1ffff7b4
 80098d8:	20000156 	.word	0x20000156
 80098dc:	20000166 	.word	0x20000166

080098e0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	4613      	mov	r3, r2
 80098ec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098ee:	2300      	movs	r3, #0
 80098f0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098f2:	2300      	movs	r3, #0
 80098f4:	75fb      	strb	r3, [r7, #23]
 80098f6:	e027      	b.n	8009948 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	2b09      	cmp	r3, #9
 80098fe:	d80b      	bhi.n	8009918 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	b2da      	uxtb	r2, r3
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4619      	mov	r1, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	440b      	add	r3, r1
 8009910:	3230      	adds	r2, #48	@ 0x30
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
 8009916:	e00a      	b.n	800992e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	0f1b      	lsrs	r3, r3, #28
 800991c:	b2da      	uxtb	r2, r3
 800991e:	7dfb      	ldrb	r3, [r7, #23]
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	4619      	mov	r1, r3
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	440b      	add	r3, r1
 8009928:	3237      	adds	r2, #55	@ 0x37
 800992a:	b2d2      	uxtb	r2, r2
 800992c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	011b      	lsls	r3, r3, #4
 8009932:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009934:	7dfb      	ldrb	r3, [r7, #23]
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	3301      	adds	r3, #1
 800993a:	68ba      	ldr	r2, [r7, #8]
 800993c:	4413      	add	r3, r2
 800993e:	2200      	movs	r2, #0
 8009940:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009942:	7dfb      	ldrb	r3, [r7, #23]
 8009944:	3301      	adds	r3, #1
 8009946:	75fb      	strb	r3, [r7, #23]
 8009948:	7dfa      	ldrb	r2, [r7, #23]
 800994a:	79fb      	ldrb	r3, [r7, #7]
 800994c:	429a      	cmp	r2, r3
 800994e:	d3d3      	bcc.n	80098f8 <IntToUnicode+0x18>
  }
}
 8009950:	bf00      	nop
 8009952:	bf00      	nop
 8009954:	371c      	adds	r7, #28
 8009956:	46bd      	mov	sp, r7
 8009958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995c:	4770      	bx	lr
	...

08009960 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b08a      	sub	sp, #40	@ 0x28
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009968:	f107 0314 	add.w	r3, r7, #20
 800996c:	2200      	movs	r2, #0
 800996e:	601a      	str	r2, [r3, #0]
 8009970:	605a      	str	r2, [r3, #4]
 8009972:	609a      	str	r2, [r3, #8]
 8009974:	60da      	str	r2, [r3, #12]
 8009976:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a1c      	ldr	r2, [pc, #112]	@ (80099f0 <HAL_PCD_MspInit+0x90>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d131      	bne.n	80099e6 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009982:	4b1c      	ldr	r3, [pc, #112]	@ (80099f4 <HAL_PCD_MspInit+0x94>)
 8009984:	695b      	ldr	r3, [r3, #20]
 8009986:	4a1b      	ldr	r2, [pc, #108]	@ (80099f4 <HAL_PCD_MspInit+0x94>)
 8009988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800998c:	6153      	str	r3, [r2, #20]
 800998e:	4b19      	ldr	r3, [pc, #100]	@ (80099f4 <HAL_PCD_MspInit+0x94>)
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009996:	613b      	str	r3, [r7, #16]
 8009998:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 800999a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800999e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099a0:	2302      	movs	r3, #2
 80099a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80099a4:	2300      	movs	r3, #0
 80099a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80099a8:	2303      	movs	r3, #3
 80099aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 80099ac:	230e      	movs	r3, #14
 80099ae:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	4619      	mov	r1, r3
 80099b6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80099ba:	f7f8 fcb9 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099be:	4b0d      	ldr	r3, [pc, #52]	@ (80099f4 <HAL_PCD_MspInit+0x94>)
 80099c0:	69db      	ldr	r3, [r3, #28]
 80099c2:	4a0c      	ldr	r2, [pc, #48]	@ (80099f4 <HAL_PCD_MspInit+0x94>)
 80099c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099c8:	61d3      	str	r3, [r2, #28]
 80099ca:	4b0a      	ldr	r3, [pc, #40]	@ (80099f4 <HAL_PCD_MspInit+0x94>)
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099d2:	60fb      	str	r3, [r7, #12]
 80099d4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80099d6:	2200      	movs	r2, #0
 80099d8:	2100      	movs	r1, #0
 80099da:	2014      	movs	r0, #20
 80099dc:	f7f8 fabf 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80099e0:	2014      	movs	r0, #20
 80099e2:	f7f8 fad8 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099e6:	bf00      	nop
 80099e8:	3728      	adds	r7, #40	@ 0x28
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	40005c00 	.word	0x40005c00
 80099f4:	40021000 	.word	0x40021000

080099f8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009a0c:	4619      	mov	r1, r3
 8009a0e:	4610      	mov	r0, r2
 8009a10:	f7fe fe37 	bl	8008682 <USBD_LL_SetupStage>
}
 8009a14:	bf00      	nop
 8009a16:	3708      	adds	r7, #8
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	bd80      	pop	{r7, pc}

08009a1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a1c:	b580      	push	{r7, lr}
 8009a1e:	b082      	sub	sp, #8
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	6078      	str	r0, [r7, #4]
 8009a24:	460b      	mov	r3, r1
 8009a26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009a2e:	78fa      	ldrb	r2, [r7, #3]
 8009a30:	6879      	ldr	r1, [r7, #4]
 8009a32:	4613      	mov	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	440b      	add	r3, r1
 8009a3c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a40:	681a      	ldr	r2, [r3, #0]
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	4619      	mov	r1, r3
 8009a46:	f7fe fe69 	bl	800871c <USBD_LL_DataOutStage>
}
 8009a4a:	bf00      	nop
 8009a4c:	3708      	adds	r7, #8
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}

08009a52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a52:	b580      	push	{r7, lr}
 8009a54:	b082      	sub	sp, #8
 8009a56:	af00      	add	r7, sp, #0
 8009a58:	6078      	str	r0, [r7, #4]
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009a64:	78fa      	ldrb	r2, [r7, #3]
 8009a66:	6879      	ldr	r1, [r7, #4]
 8009a68:	4613      	mov	r3, r2
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	4413      	add	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	440b      	add	r3, r1
 8009a72:	3324      	adds	r3, #36	@ 0x24
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	78fb      	ldrb	r3, [r7, #3]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	f7fe fec0 	bl	80087fe <USBD_LL_DataInStage>
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}

08009a86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a86:	b580      	push	{r7, lr}
 8009a88:	b082      	sub	sp, #8
 8009a8a:	af00      	add	r7, sp, #0
 8009a8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009a94:	4618      	mov	r0, r3
 8009a96:	f7fe ffd3 	bl	8008a40 <USBD_LL_SOF>
}
 8009a9a:	bf00      	nop
 8009a9c:	3708      	adds	r7, #8
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd80      	pop	{r7, pc}

08009aa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa2:	b580      	push	{r7, lr}
 8009aa4:	b084      	sub	sp, #16
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aaa:	2301      	movs	r3, #1
 8009aac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	795b      	ldrb	r3, [r3, #5]
 8009ab2:	2b02      	cmp	r3, #2
 8009ab4:	d001      	beq.n	8009aba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009ab6:	f7f6 fec3 	bl	8000840 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ac0:	7bfa      	ldrb	r2, [r7, #15]
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fe ff80 	bl	80089ca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7fe ff39 	bl	8008948 <USBD_LL_Reset>
}
 8009ad6:	bf00      	nop
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
	...

08009ae0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009aee:	4618      	mov	r0, r3
 8009af0:	f7fe ff7b 	bl	80089ea <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	7a5b      	ldrb	r3, [r3, #9]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d005      	beq.n	8009b08 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009afc:	4b04      	ldr	r3, [pc, #16]	@ (8009b10 <HAL_PCD_SuspendCallback+0x30>)
 8009afe:	691b      	ldr	r3, [r3, #16]
 8009b00:	4a03      	ldr	r2, [pc, #12]	@ (8009b10 <HAL_PCD_SuspendCallback+0x30>)
 8009b02:	f043 0306 	orr.w	r3, r3, #6
 8009b06:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b08:	bf00      	nop
 8009b0a:	3708      	adds	r7, #8
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}
 8009b10:	e000ed00 	.word	0xe000ed00

08009b14 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7fe ff76 	bl	8008a14 <USBD_LL_Resume>
}
 8009b28:	bf00      	nop
 8009b2a:	3708      	adds	r7, #8
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}

08009b30 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b38:	4a23      	ldr	r2, [pc, #140]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a21      	ldr	r2, [pc, #132]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b44:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b48:	4b1f      	ldr	r3, [pc, #124]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b4a:	4a20      	ldr	r2, [pc, #128]	@ (8009bcc <USBD_LL_Init+0x9c>)
 8009b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b50:	2208      	movs	r2, #8
 8009b52:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b54:	4b1c      	ldr	r3, [pc, #112]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b56:	2202      	movs	r2, #2
 8009b58:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b60:	4b19      	ldr	r3, [pc, #100]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b66:	4b18      	ldr	r3, [pc, #96]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b6c:	4816      	ldr	r0, [pc, #88]	@ (8009bc8 <USBD_LL_Init+0x98>)
 8009b6e:	f7f8 fed3 	bl	8002918 <HAL_PCD_Init>
 8009b72:	4603      	mov	r3, r0
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d001      	beq.n	8009b7c <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b78:	f7f6 fe62 	bl	8000840 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b82:	2318      	movs	r3, #24
 8009b84:	2200      	movs	r2, #0
 8009b86:	2100      	movs	r1, #0
 8009b88:	f7fa fb34 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b92:	2358      	movs	r3, #88	@ 0x58
 8009b94:	2200      	movs	r2, #0
 8009b96:	2180      	movs	r1, #128	@ 0x80
 8009b98:	f7fa fb2c 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009ba2:	2398      	movs	r3, #152	@ 0x98
 8009ba4:	2200      	movs	r2, #0
 8009ba6:	2181      	movs	r1, #129	@ 0x81
 8009ba8:	f7fa fb24 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bb2:	23d8      	movs	r3, #216	@ 0xd8
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	2101      	movs	r1, #1
 8009bb8:	f7fa fb1c 	bl	80041f4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009bbc:	2300      	movs	r3, #0
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3708      	adds	r7, #8
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	200007f8 	.word	0x200007f8
 8009bcc:	40005c00 	.word	0x40005c00

08009bd0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009be6:	4618      	mov	r0, r3
 8009be8:	f7f8 ff5d 	bl	8002aa6 <HAL_PCD_Start>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bf0:	7bfb      	ldrb	r3, [r7, #15]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f000 f940 	bl	8009e78 <USBD_Get_USB_Status>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009bfc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}

08009c06 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c06:	b580      	push	{r7, lr}
 8009c08:	b084      	sub	sp, #16
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	6078      	str	r0, [r7, #4]
 8009c0e:	4608      	mov	r0, r1
 8009c10:	4611      	mov	r1, r2
 8009c12:	461a      	mov	r2, r3
 8009c14:	4603      	mov	r3, r0
 8009c16:	70fb      	strb	r3, [r7, #3]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	70bb      	strb	r3, [r7, #2]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c20:	2300      	movs	r3, #0
 8009c22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c24:	2300      	movs	r3, #0
 8009c26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c2e:	78bb      	ldrb	r3, [r7, #2]
 8009c30:	883a      	ldrh	r2, [r7, #0]
 8009c32:	78f9      	ldrb	r1, [r7, #3]
 8009c34:	f7f9 f855 	bl	8002ce2 <HAL_PCD_EP_Open>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c3c:	7bfb      	ldrb	r3, [r7, #15]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 f91a 	bl	8009e78 <USBD_Get_USB_Status>
 8009c44:	4603      	mov	r3, r0
 8009c46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b084      	sub	sp, #16
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c6c:	78fa      	ldrb	r2, [r7, #3]
 8009c6e:	4611      	mov	r1, r2
 8009c70:	4618      	mov	r0, r3
 8009c72:	f7f9 f893 	bl	8002d9c <HAL_PCD_EP_Close>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f000 f8fb 	bl	8009e78 <USBD_Get_USB_Status>
 8009c82:	4603      	mov	r3, r0
 8009c84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c86:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	4611      	mov	r1, r2
 8009cae:	4618      	mov	r0, r3
 8009cb0:	f7f9 f924 	bl	8002efc <HAL_PCD_EP_SetStall>
 8009cb4:	4603      	mov	r3, r0
 8009cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cb8:	7bfb      	ldrb	r3, [r7, #15]
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f000 f8dc 	bl	8009e78 <USBD_Get_USB_Status>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	3710      	adds	r7, #16
 8009cca:	46bd      	mov	sp, r7
 8009ccc:	bd80      	pop	{r7, pc}

08009cce <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cce:	b580      	push	{r7, lr}
 8009cd0:	b084      	sub	sp, #16
 8009cd2:	af00      	add	r7, sp, #0
 8009cd4:	6078      	str	r0, [r7, #4]
 8009cd6:	460b      	mov	r3, r1
 8009cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009ce8:	78fa      	ldrb	r2, [r7, #3]
 8009cea:	4611      	mov	r1, r2
 8009cec:	4618      	mov	r0, r3
 8009cee:	f7f9 f957 	bl	8002fa0 <HAL_PCD_EP_ClrStall>
 8009cf2:	4603      	mov	r3, r0
 8009cf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cf6:	7bfb      	ldrb	r3, [r7, #15]
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f000 f8bd 	bl	8009e78 <USBD_Get_USB_Status>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	460b      	mov	r3, r1
 8009d16:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d1e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	da0b      	bge.n	8009d40 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	440b      	add	r3, r1
 8009d3a:	3312      	adds	r3, #18
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	e00b      	b.n	8009d58 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d40:	78fb      	ldrb	r3, [r7, #3]
 8009d42:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d46:	68f9      	ldr	r1, [r7, #12]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	4413      	add	r3, r2
 8009d4e:	00db      	lsls	r3, r3, #3
 8009d50:	440b      	add	r3, r1
 8009d52:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009d56:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr

08009d64 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d64:	b580      	push	{r7, lr}
 8009d66:	b084      	sub	sp, #16
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d70:	2300      	movs	r3, #0
 8009d72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d74:	2300      	movs	r3, #0
 8009d76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d7e:	78fa      	ldrb	r2, [r7, #3]
 8009d80:	4611      	mov	r1, r2
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7f8 ff89 	bl	8002c9a <HAL_PCD_SetAddress>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	f000 f872 	bl	8009e78 <USBD_Get_USB_Status>
 8009d94:	4603      	mov	r3, r0
 8009d96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b086      	sub	sp, #24
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	60f8      	str	r0, [r7, #12]
 8009daa:	607a      	str	r2, [r7, #4]
 8009dac:	461a      	mov	r2, r3
 8009dae:	460b      	mov	r3, r1
 8009db0:	72fb      	strb	r3, [r7, #11]
 8009db2:	4613      	mov	r3, r2
 8009db4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db6:	2300      	movs	r3, #0
 8009db8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009dc4:	893b      	ldrh	r3, [r7, #8]
 8009dc6:	7af9      	ldrb	r1, [r7, #11]
 8009dc8:	687a      	ldr	r2, [r7, #4]
 8009dca:	f7f9 f860 	bl	8002e8e <HAL_PCD_EP_Transmit>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 f84f 	bl	8009e78 <USBD_Get_USB_Status>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dde:	7dbb      	ldrb	r3, [r7, #22]
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3718      	adds	r7, #24
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b086      	sub	sp, #24
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	607a      	str	r2, [r7, #4]
 8009df2:	461a      	mov	r2, r3
 8009df4:	460b      	mov	r3, r1
 8009df6:	72fb      	strb	r3, [r7, #11]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e0a:	893b      	ldrh	r3, [r7, #8]
 8009e0c:	7af9      	ldrb	r1, [r7, #11]
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	f7f9 f80c 	bl	8002e2c <HAL_PCD_EP_Receive>
 8009e14:	4603      	mov	r3, r0
 8009e16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e18:	7dfb      	ldrb	r3, [r7, #23]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 f82c 	bl	8009e78 <USBD_Get_USB_Status>
 8009e20:	4603      	mov	r3, r0
 8009e22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e24:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3718      	adds	r7, #24
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009e38:	4b03      	ldr	r3, [pc, #12]	@ (8009e48 <USBD_static_malloc+0x18>)
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	20000acc 	.word	0x20000acc

08009e4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	b083      	sub	sp, #12
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]

}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	4603      	mov	r3, r0
 8009e80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e82:	2300      	movs	r3, #0
 8009e84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e86:	79fb      	ldrb	r3, [r7, #7]
 8009e88:	2b03      	cmp	r3, #3
 8009e8a:	d817      	bhi.n	8009ebc <USBD_Get_USB_Status+0x44>
 8009e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8009e94 <USBD_Get_USB_Status+0x1c>)
 8009e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e92:	bf00      	nop
 8009e94:	08009ea5 	.word	0x08009ea5
 8009e98:	08009eab 	.word	0x08009eab
 8009e9c:	08009eb1 	.word	0x08009eb1
 8009ea0:	08009eb7 	.word	0x08009eb7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea8:	e00b      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009eaa:	2302      	movs	r3, #2
 8009eac:	73fb      	strb	r3, [r7, #15]
    break;
 8009eae:	e008      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009eb0:	2301      	movs	r3, #1
 8009eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8009eb4:	e005      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	73fb      	strb	r3, [r7, #15]
    break;
 8009eba:	e002      	b.n	8009ec2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ebc:	2302      	movs	r3, #2
 8009ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8009ec0:	bf00      	nop
  }
  return usb_status;
 8009ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	3714      	adds	r7, #20
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <memset>:
 8009ed0:	4402      	add	r2, r0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d100      	bne.n	8009eda <memset+0xa>
 8009ed8:	4770      	bx	lr
 8009eda:	f803 1b01 	strb.w	r1, [r3], #1
 8009ede:	e7f9      	b.n	8009ed4 <memset+0x4>

08009ee0 <__libc_init_array>:
 8009ee0:	b570      	push	{r4, r5, r6, lr}
 8009ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8009f18 <__libc_init_array+0x38>)
 8009ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8009f1c <__libc_init_array+0x3c>)
 8009ee6:	1b64      	subs	r4, r4, r5
 8009ee8:	10a4      	asrs	r4, r4, #2
 8009eea:	2600      	movs	r6, #0
 8009eec:	42a6      	cmp	r6, r4
 8009eee:	d109      	bne.n	8009f04 <__libc_init_array+0x24>
 8009ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8009f20 <__libc_init_array+0x40>)
 8009ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8009f24 <__libc_init_array+0x44>)
 8009ef4:	f000 f818 	bl	8009f28 <_init>
 8009ef8:	1b64      	subs	r4, r4, r5
 8009efa:	10a4      	asrs	r4, r4, #2
 8009efc:	2600      	movs	r6, #0
 8009efe:	42a6      	cmp	r6, r4
 8009f00:	d105      	bne.n	8009f0e <__libc_init_array+0x2e>
 8009f02:	bd70      	pop	{r4, r5, r6, pc}
 8009f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f08:	4798      	blx	r3
 8009f0a:	3601      	adds	r6, #1
 8009f0c:	e7ee      	b.n	8009eec <__libc_init_array+0xc>
 8009f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f12:	4798      	blx	r3
 8009f14:	3601      	adds	r6, #1
 8009f16:	e7f2      	b.n	8009efe <__libc_init_array+0x1e>
 8009f18:	08009fd0 	.word	0x08009fd0
 8009f1c:	08009fd0 	.word	0x08009fd0
 8009f20:	08009fd0 	.word	0x08009fd0
 8009f24:	08009fd4 	.word	0x08009fd4

08009f28 <_init>:
 8009f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f2a:	bf00      	nop
 8009f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f2e:	bc08      	pop	{r3}
 8009f30:	469e      	mov	lr, r3
 8009f32:	4770      	bx	lr

08009f34 <_fini>:
 8009f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f36:	bf00      	nop
 8009f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f3a:	bc08      	pop	{r3}
 8009f3c:	469e      	mov	lr, r3
 8009f3e:	4770      	bx	lr
