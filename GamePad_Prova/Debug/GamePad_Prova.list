
GamePad_Prova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e14  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009f9c  08009f9c  0000af9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a02c  0800a02c  0000c16c  2**0
                  CONTENTS
  4 .ARM          00000000  0800a02c  0800a02c  0000c16c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a02c  0800a02c  0000c16c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a02c  0800a02c  0000b02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a030  0800a030  0000b030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000016c  20000000  0800a034  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c16c  2**0
                  CONTENTS
 10 .bss          000009a4  2000016c  2000016c  0000c16c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b10  20000b10  0000c16c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c16c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000139b1  00000000  00000000  0000c19c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003624  00000000  00000000  0001fb4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00023178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c67  00000000  00000000  000241e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207a8  00000000  00000000  00024e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d47  00000000  00000000  000455f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b72b3  00000000  00000000  0005c33e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001135f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004294  00000000  00000000  00113634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  001178c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000016c 	.word	0x2000016c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009f84 	.word	0x08009f84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000170 	.word	0x20000170
 80001c4:	08009f84 	.word	0x08009f84

080001c8 <HAL_GPIO_EXTI_Callback>:
uint8_t previous_pin_state_d4 = 0;
uint8_t previous_pin_state_d5 = 0;
uint8_t previous_pin_state_d6 = 0;
uint8_t previous_pin_state_d7 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]

	uint8_t current_pin_state; // Sostituisci GPIOx con il tuo GPIO port

	if(GPIO_Pin == GPIO_PIN_0){
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	2b01      	cmp	r3, #1
 80001d6:	d112      	bne.n	80001fe <HAL_GPIO_EXTI_Callback+0x36>

		current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 80001d8:	2101      	movs	r1, #1
 80001da:	482b      	ldr	r0, [pc, #172]	@ (8000288 <HAL_GPIO_EXTI_Callback+0xc0>)
 80001dc:	f002 fa50 	bl	8002680 <HAL_GPIO_ReadPin>
 80001e0:	4603      	mov	r3, r0
 80001e2:	73fb      	strb	r3, [r7, #15]

		// Verifica se c'Ã¨ stato un cambiamento di stato
		if (current_pin_state != previous_pin_state_d0) {
 80001e4:	4b29      	ldr	r3, [pc, #164]	@ (800028c <HAL_GPIO_EXTI_Callback+0xc4>)
 80001e6:	781b      	ldrb	r3, [r3, #0]
 80001e8:	7bfa      	ldrb	r2, [r7, #15]
 80001ea:	429a      	cmp	r2, r3
 80001ec:	d048      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
			// Esegui il toggle del bit
			toggleBit(&gamepad.buttons, 0);
 80001ee:	2100      	movs	r1, #0
 80001f0:	4827      	ldr	r0, [pc, #156]	@ (8000290 <HAL_GPIO_EXTI_Callback+0xc8>)
 80001f2:	f000 fd03 	bl	8000bfc <toggleBit>

			// Aggiorna lo stato precedente
			previous_pin_state_d0 = current_pin_state;
 80001f6:	4a25      	ldr	r2, [pc, #148]	@ (800028c <HAL_GPIO_EXTI_Callback+0xc4>)
 80001f8:	7bfb      	ldrb	r3, [r7, #15]
 80001fa:	7013      	strb	r3, [r2, #0]


	}


}
 80001fc:	e040      	b.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
	}else if(GPIO_Pin == GPIO_PIN_1){
 80001fe:	88fb      	ldrh	r3, [r7, #6]
 8000200:	2b02      	cmp	r3, #2
 8000202:	d112      	bne.n	800022a <HAL_GPIO_EXTI_Callback+0x62>
		current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000204:	2102      	movs	r1, #2
 8000206:	4820      	ldr	r0, [pc, #128]	@ (8000288 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000208:	f002 fa3a 	bl	8002680 <HAL_GPIO_ReadPin>
 800020c:	4603      	mov	r3, r0
 800020e:	73fb      	strb	r3, [r7, #15]
		if (current_pin_state != previous_pin_state_d1) {
 8000210:	4b20      	ldr	r3, [pc, #128]	@ (8000294 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000212:	781b      	ldrb	r3, [r3, #0]
 8000214:	7bfa      	ldrb	r2, [r7, #15]
 8000216:	429a      	cmp	r2, r3
 8000218:	d032      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
			toggleBit(&gamepad.buttons, 1);
 800021a:	2101      	movs	r1, #1
 800021c:	481c      	ldr	r0, [pc, #112]	@ (8000290 <HAL_GPIO_EXTI_Callback+0xc8>)
 800021e:	f000 fced 	bl	8000bfc <toggleBit>
			previous_pin_state_d1 = current_pin_state;
 8000222:	4a1c      	ldr	r2, [pc, #112]	@ (8000294 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000224:	7bfb      	ldrb	r3, [r7, #15]
 8000226:	7013      	strb	r3, [r2, #0]
}
 8000228:	e02a      	b.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
	}else if(GPIO_Pin == GPIO_PIN_2){
 800022a:	88fb      	ldrh	r3, [r7, #6]
 800022c:	2b04      	cmp	r3, #4
 800022e:	d112      	bne.n	8000256 <HAL_GPIO_EXTI_Callback+0x8e>
		current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_2);
 8000230:	2104      	movs	r1, #4
 8000232:	4815      	ldr	r0, [pc, #84]	@ (8000288 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000234:	f002 fa24 	bl	8002680 <HAL_GPIO_ReadPin>
 8000238:	4603      	mov	r3, r0
 800023a:	73fb      	strb	r3, [r7, #15]
		if (current_pin_state != previous_pin_state_d2) {
 800023c:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <HAL_GPIO_EXTI_Callback+0xd0>)
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	7bfa      	ldrb	r2, [r7, #15]
 8000242:	429a      	cmp	r2, r3
 8000244:	d01c      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
			toggleBit(&gamepad.buttons, 2);
 8000246:	2102      	movs	r1, #2
 8000248:	4811      	ldr	r0, [pc, #68]	@ (8000290 <HAL_GPIO_EXTI_Callback+0xc8>)
 800024a:	f000 fcd7 	bl	8000bfc <toggleBit>
			previous_pin_state_d2 = current_pin_state;
 800024e:	4a12      	ldr	r2, [pc, #72]	@ (8000298 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000250:	7bfb      	ldrb	r3, [r7, #15]
 8000252:	7013      	strb	r3, [r2, #0]
}
 8000254:	e014      	b.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
	}else if(GPIO_Pin == GPIO_PIN_3){
 8000256:	88fb      	ldrh	r3, [r7, #6]
 8000258:	2b08      	cmp	r3, #8
 800025a:	d111      	bne.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
		current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 800025c:	2108      	movs	r1, #8
 800025e:	480a      	ldr	r0, [pc, #40]	@ (8000288 <HAL_GPIO_EXTI_Callback+0xc0>)
 8000260:	f002 fa0e 	bl	8002680 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	73fb      	strb	r3, [r7, #15]
		if (current_pin_state != previous_pin_state_d3) {
 8000268:	4b0c      	ldr	r3, [pc, #48]	@ (800029c <HAL_GPIO_EXTI_Callback+0xd4>)
 800026a:	781b      	ldrb	r3, [r3, #0]
 800026c:	7bfa      	ldrb	r2, [r7, #15]
 800026e:	429a      	cmp	r2, r3
 8000270:	d006      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xb8>
			toggleBit(&gamepad.buttons, 3);
 8000272:	2103      	movs	r1, #3
 8000274:	4806      	ldr	r0, [pc, #24]	@ (8000290 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000276:	f000 fcc1 	bl	8000bfc <toggleBit>
			previous_pin_state_d3 = current_pin_state;
 800027a:	4a08      	ldr	r2, [pc, #32]	@ (800029c <HAL_GPIO_EXTI_Callback+0xd4>)
 800027c:	7bfb      	ldrb	r3, [r7, #15]
 800027e:	7013      	strb	r3, [r2, #0]
}
 8000280:	bf00      	nop
 8000282:	3710      	adds	r7, #16
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}
 8000288:	48000c00 	.word	0x48000c00
 800028c:	20000314 	.word	0x20000314
 8000290:	20000307 	.word	0x20000307
 8000294:	20000315 	.word	0x20000315
 8000298:	20000316 	.word	0x20000316
 800029c:	20000317 	.word	0x20000317

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002a4:	f000 fcfe 	bl	8000ca4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a8:	f000 f852 	bl	8000350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ac:	f000 fa26 	bl	80006fc <MX_GPIO_Init>
  MX_DMA_Init();
 80002b0:	f000 f9f2 	bl	8000698 <MX_DMA_Init>
  MX_I2C1_Init();
 80002b4:	f000 f9b0 	bl	8000618 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 80002b8:	f009 fa20 	bl	80096fc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80002bc:	f000 f8b0 	bl	8000420 <MX_ADC1_Init>
  MX_ADC3_Init();
 80002c0:	f000 f92c 	bl	800051c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, VR, 2); // start adc in dma mode for multichannel
 80002c4:	2202      	movs	r2, #2
 80002c6:	491d      	ldr	r1, [pc, #116]	@ (800033c <main+0x9c>)
 80002c8:	481d      	ldr	r0, [pc, #116]	@ (8000340 <main+0xa0>)
 80002ca:	f000 ff73 	bl	80011b4 <HAL_ADC_Start_DMA>

  gamepad.id=1;
 80002ce:	4b1d      	ldr	r3, [pc, #116]	@ (8000344 <main+0xa4>)
 80002d0:	2201      	movs	r2, #1
 80002d2:	701a      	strb	r2, [r3, #0]
  gamepad.ax_x=0;
 80002d4:	4b1b      	ldr	r3, [pc, #108]	@ (8000344 <main+0xa4>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	705a      	strb	r2, [r3, #1]
  gamepad.ax_y=0;
 80002da:	4b1a      	ldr	r3, [pc, #104]	@ (8000344 <main+0xa4>)
 80002dc:	2200      	movs	r2, #0
 80002de:	709a      	strb	r2, [r3, #2]
  gamepad.buttons=0b00000000;
 80002e0:	4b18      	ldr	r3, [pc, #96]	@ (8000344 <main+0xa4>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	70da      	strb	r2, [r3, #3]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  gamepad.ax_x = (VR[0]-2048)/16;
 80002e6:	4b15      	ldr	r3, [pc, #84]	@ (800033c <main+0x9c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002ee:	091b      	lsrs	r3, r3, #4
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	4b14      	ldr	r3, [pc, #80]	@ (8000344 <main+0xa4>)
 80002f4:	705a      	strb	r2, [r3, #1]
	  gamepad.ax_y = (VR[1]-2048)/16;
 80002f6:	4b11      	ldr	r3, [pc, #68]	@ (800033c <main+0x9c>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002fe:	091b      	lsrs	r3, r3, #4
 8000300:	b2da      	uxtb	r2, r3
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <main+0xa4>)
 8000304:	709a      	strb	r2, [r3, #2]

	  mouseBuffer[0] = gamepad.id; // id
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <main+0xa4>)
 8000308:	781a      	ldrb	r2, [r3, #0]
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <main+0xa8>)
 800030c:	701a      	strb	r2, [r3, #0]
	  mouseBuffer[1] = gamepad.ax_x; // left movement (-1,1)
 800030e:	4b0d      	ldr	r3, [pc, #52]	@ (8000344 <main+0xa4>)
 8000310:	785a      	ldrb	r2, [r3, #1]
 8000312:	4b0d      	ldr	r3, [pc, #52]	@ (8000348 <main+0xa8>)
 8000314:	705a      	strb	r2, [r3, #1]
	  mouseBuffer[2] = gamepad.ax_y; // right movement
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <main+0xa4>)
 8000318:	789a      	ldrb	r2, [r3, #2]
 800031a:	4b0b      	ldr	r3, [pc, #44]	@ (8000348 <main+0xa8>)
 800031c:	709a      	strb	r2, [r3, #2]
	  mouseBuffer[3] = gamepad.buttons; // buttons
 800031e:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <main+0xa4>)
 8000320:	78da      	ldrb	r2, [r3, #3]
 8000322:	4b09      	ldr	r3, [pc, #36]	@ (8000348 <main+0xa8>)
 8000324:	70da      	strb	r2, [r3, #3]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS,mouseBuffer, 4);
 8000326:	2204      	movs	r2, #4
 8000328:	4907      	ldr	r1, [pc, #28]	@ (8000348 <main+0xa8>)
 800032a:	4808      	ldr	r0, [pc, #32]	@ (800034c <main+0xac>)
 800032c:	f008 f87a 	bl	8008424 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8000330:	2064      	movs	r0, #100	@ 0x64
 8000332:	f000 fd1d 	bl	8000d70 <HAL_Delay>
	  gamepad.ax_x = (VR[0]-2048)/16;
 8000336:	bf00      	nop
 8000338:	e7d5      	b.n	80002e6 <main+0x46>
 800033a:	bf00      	nop
 800033c:	20000308 	.word	0x20000308
 8000340:	20000188 	.word	0x20000188
 8000344:	20000304 	.word	0x20000304
 8000348:	20000310 	.word	0x20000310
 800034c:	20000320 	.word	0x20000320

08000350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b09e      	sub	sp, #120	@ 0x78
 8000354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000356:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800035a:	2228      	movs	r2, #40	@ 0x28
 800035c:	2100      	movs	r1, #0
 800035e:	4618      	mov	r0, r3
 8000360:	f009 fde4 	bl	8009f2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000364:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000368:	2200      	movs	r2, #0
 800036a:	601a      	str	r2, [r3, #0]
 800036c:	605a      	str	r2, [r3, #4]
 800036e:	609a      	str	r2, [r3, #8]
 8000370:	60da      	str	r2, [r3, #12]
 8000372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000374:	463b      	mov	r3, r7
 8000376:	223c      	movs	r2, #60	@ 0x3c
 8000378:	2100      	movs	r1, #0
 800037a:	4618      	mov	r0, r3
 800037c:	f009 fdd6 	bl	8009f2c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000380:	2303      	movs	r3, #3
 8000382:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000384:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000388:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800038a:	2300      	movs	r3, #0
 800038c:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800039a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800039e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80003a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80003a4:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003a6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80003aa:	4618      	mov	r0, r3
 80003ac:	f003 ff94 	bl	80042d8 <HAL_RCC_OscConfig>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d001      	beq.n	80003ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003b6:	f000 fa6b 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003ba:	230f      	movs	r3, #15
 80003bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003be:	2302      	movs	r3, #2
 80003c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c2:	2300      	movs	r3, #0
 80003c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003cc:	2300      	movs	r3, #0
 80003ce:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003d0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003d4:	2101      	movs	r1, #1
 80003d6:	4618      	mov	r0, r3
 80003d8:	f004 ffbc 	bl	8005354 <HAL_RCC_ClockConfig>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003e2:	f000 fa55 	bl	8000890 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80003e6:	4b0d      	ldr	r3, [pc, #52]	@ (800041c <SystemClock_Config+0xcc>)
 80003e8:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ee:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80003f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003f6:	2300      	movs	r3, #0
 80003f8:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003fa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000400:	463b      	mov	r3, r7
 8000402:	4618      	mov	r0, r3
 8000404:	f005 f976 	bl	80056f4 <HAL_RCCEx_PeriphCLKConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800040e:	f000 fa3f 	bl	8000890 <Error_Handler>
  }
}
 8000412:	bf00      	nop
 8000414:	3778      	adds	r7, #120	@ 0x78
 8000416:	46bd      	mov	sp, r7
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	000201a0 	.word	0x000201a0

08000420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b08a      	sub	sp, #40	@ 0x28
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000426:	f107 031c 	add.w	r3, r7, #28
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
 800042e:	605a      	str	r2, [r3, #4]
 8000430:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000432:	1d3b      	adds	r3, r7, #4
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
 800043e:	611a      	str	r2, [r3, #16]
 8000440:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000442:	4b35      	ldr	r3, [pc, #212]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000444:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000448:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800044a:	4b33      	ldr	r3, [pc, #204]	@ (8000518 <MX_ADC1_Init+0xf8>)
 800044c:	2200      	movs	r2, #0
 800044e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000450:	4b31      	ldr	r3, [pc, #196]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000452:	2200      	movs	r2, #0
 8000454:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000456:	4b30      	ldr	r3, [pc, #192]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000458:	2201      	movs	r2, #1
 800045a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800045c:	4b2e      	ldr	r3, [pc, #184]	@ (8000518 <MX_ADC1_Init+0xf8>)
 800045e:	2201      	movs	r2, #1
 8000460:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000462:	4b2d      	ldr	r3, [pc, #180]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000464:	2200      	movs	r2, #0
 8000466:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800046a:	4b2b      	ldr	r3, [pc, #172]	@ (8000518 <MX_ADC1_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000470:	4b29      	ldr	r3, [pc, #164]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000472:	2201      	movs	r2, #1
 8000474:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000476:	4b28      	ldr	r3, [pc, #160]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800047c:	4b26      	ldr	r3, [pc, #152]	@ (8000518 <MX_ADC1_Init+0xf8>)
 800047e:	2202      	movs	r2, #2
 8000480:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000482:	4b25      	ldr	r3, [pc, #148]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000484:	2201      	movs	r2, #1
 8000486:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800048a:	4b23      	ldr	r3, [pc, #140]	@ (8000518 <MX_ADC1_Init+0xf8>)
 800048c:	2208      	movs	r2, #8
 800048e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000490:	4b21      	ldr	r3, [pc, #132]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000492:	2200      	movs	r2, #0
 8000494:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000496:	4b20      	ldr	r3, [pc, #128]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000498:	2200      	movs	r2, #0
 800049a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800049c:	481e      	ldr	r0, [pc, #120]	@ (8000518 <MX_ADC1_Init+0xf8>)
 800049e:	f000 fca9 	bl	8000df4 <HAL_ADC_Init>
 80004a2:	4603      	mov	r3, r0
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d001      	beq.n	80004ac <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80004a8:	f000 f9f2 	bl	8000890 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004ac:	2300      	movs	r3, #0
 80004ae:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004b0:	f107 031c 	add.w	r3, r7, #28
 80004b4:	4619      	mov	r1, r3
 80004b6:	4818      	ldr	r0, [pc, #96]	@ (8000518 <MX_ADC1_Init+0xf8>)
 80004b8:	f001 fa82 	bl	80019c0 <HAL_ADCEx_MultiModeConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004c2:	f000 f9e5 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004c6:	2301      	movs	r3, #1
 80004c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ca:	2301      	movs	r3, #1
 80004cc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004ce:	2300      	movs	r3, #0
 80004d0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004d2:	2307      	movs	r3, #7
 80004d4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004d6:	2300      	movs	r3, #0
 80004d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	480d      	ldr	r0, [pc, #52]	@ (8000518 <MX_ADC1_Init+0xf8>)
 80004e4:	f000 ff82 	bl	80013ec <HAL_ADC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004ee:	f000 f9cf 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004f2:	2302      	movs	r3, #2
 80004f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004f6:	2302      	movs	r3, #2
 80004f8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	4806      	ldr	r0, [pc, #24]	@ (8000518 <MX_ADC1_Init+0xf8>)
 8000500:	f000 ff74 	bl	80013ec <HAL_ADC_ConfigChannel>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d001      	beq.n	800050e <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 800050a:	f000 f9c1 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800050e:	bf00      	nop
 8000510:	3728      	adds	r7, #40	@ 0x28
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000188 	.word	0x20000188

0800051c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b08a      	sub	sp, #40	@ 0x28
 8000520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000522:	f107 031c 	add.w	r3, r7, #28
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800052e:	1d3b      	adds	r3, r7, #4
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]
 800053c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800053e:	4b34      	ldr	r3, [pc, #208]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000540:	4a34      	ldr	r2, [pc, #208]	@ (8000614 <MX_ADC3_Init+0xf8>)
 8000542:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000544:	4b32      	ldr	r3, [pc, #200]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000546:	2200      	movs	r2, #0
 8000548:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800054a:	4b31      	ldr	r3, [pc, #196]	@ (8000610 <MX_ADC3_Init+0xf4>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000550:	4b2f      	ldr	r3, [pc, #188]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000552:	2201      	movs	r2, #1
 8000554:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8000556:	4b2e      	ldr	r3, [pc, #184]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000558:	2201      	movs	r2, #1
 800055a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800055c:	4b2c      	ldr	r3, [pc, #176]	@ (8000610 <MX_ADC3_Init+0xf4>)
 800055e:	2200      	movs	r2, #0
 8000560:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000564:	4b2a      	ldr	r3, [pc, #168]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000566:	2200      	movs	r2, #0
 8000568:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <MX_ADC3_Init+0xf4>)
 800056c:	2201      	movs	r2, #1
 800056e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000570:	4b27      	ldr	r3, [pc, #156]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000572:	2200      	movs	r2, #0
 8000574:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8000576:	4b26      	ldr	r3, [pc, #152]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000578:	2202      	movs	r2, #2
 800057a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800057c:	4b24      	ldr	r3, [pc, #144]	@ (8000610 <MX_ADC3_Init+0xf4>)
 800057e:	2201      	movs	r2, #1
 8000580:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000586:	2208      	movs	r2, #8
 8000588:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800058a:	4b21      	ldr	r3, [pc, #132]	@ (8000610 <MX_ADC3_Init+0xf4>)
 800058c:	2200      	movs	r2, #0
 800058e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000592:	2200      	movs	r2, #0
 8000594:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000596:	481e      	ldr	r0, [pc, #120]	@ (8000610 <MX_ADC3_Init+0xf4>)
 8000598:	f000 fc2c 	bl	8000df4 <HAL_ADC_Init>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d001      	beq.n	80005a6 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 80005a2:	f000 f975 	bl	8000890 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005a6:	2300      	movs	r3, #0
 80005a8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80005aa:	f107 031c 	add.w	r3, r7, #28
 80005ae:	4619      	mov	r1, r3
 80005b0:	4817      	ldr	r0, [pc, #92]	@ (8000610 <MX_ADC3_Init+0xf4>)
 80005b2:	f001 fa05 	bl	80019c0 <HAL_ADCEx_MultiModeConfigChannel>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f968 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80005c0:	2301      	movs	r3, #1
 80005c2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c4:	2301      	movs	r3, #1
 80005c6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005c8:	2300      	movs	r3, #0
 80005ca:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80005cc:	2307      	movs	r3, #7
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	4619      	mov	r1, r3
 80005dc:	480c      	ldr	r0, [pc, #48]	@ (8000610 <MX_ADC3_Init+0xf4>)
 80005de:	f000 ff05 	bl	80013ec <HAL_ADC_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80005e8:	f000 f952 	bl	8000890 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	@ (8000610 <MX_ADC3_Init+0xf4>)
 80005fa:	f000 fef7 	bl	80013ec <HAL_ADC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_ADC3_Init+0xec>
  {
    Error_Handler();
 8000604:	f000 f944 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	@ 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200001d8 	.word	0x200001d8
 8000614:	50000400 	.word	0x50000400

08000618 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800061c:	4b1b      	ldr	r3, [pc, #108]	@ (800068c <MX_I2C1_Init+0x74>)
 800061e:	4a1c      	ldr	r2, [pc, #112]	@ (8000690 <MX_I2C1_Init+0x78>)
 8000620:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000622:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_I2C1_Init+0x74>)
 8000624:	4a1b      	ldr	r2, [pc, #108]	@ (8000694 <MX_I2C1_Init+0x7c>)
 8000626:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000628:	4b18      	ldr	r3, [pc, #96]	@ (800068c <MX_I2C1_Init+0x74>)
 800062a:	2200      	movs	r2, #0
 800062c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800062e:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_I2C1_Init+0x74>)
 8000630:	2201      	movs	r2, #1
 8000632:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	@ (800068c <MX_I2C1_Init+0x74>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800063a:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_I2C1_Init+0x74>)
 800063c:	2200      	movs	r2, #0
 800063e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000640:	4b12      	ldr	r3, [pc, #72]	@ (800068c <MX_I2C1_Init+0x74>)
 8000642:	2200      	movs	r2, #0
 8000644:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	@ (800068c <MX_I2C1_Init+0x74>)
 8000648:	2200      	movs	r2, #0
 800064a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800064c:	4b0f      	ldr	r3, [pc, #60]	@ (800068c <MX_I2C1_Init+0x74>)
 800064e:	2200      	movs	r2, #0
 8000650:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000652:	480e      	ldr	r0, [pc, #56]	@ (800068c <MX_I2C1_Init+0x74>)
 8000654:	f002 f85c 	bl	8002710 <HAL_I2C_Init>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800065e:	f000 f917 	bl	8000890 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <MX_I2C1_Init+0x74>)
 8000666:	f002 f8ee 	bl	8002846 <HAL_I2CEx_ConfigAnalogFilter>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000670:	f000 f90e 	bl	8000890 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000674:	2100      	movs	r1, #0
 8000676:	4805      	ldr	r0, [pc, #20]	@ (800068c <MX_I2C1_Init+0x74>)
 8000678:	f002 f930 	bl	80028dc <HAL_I2CEx_ConfigDigitalFilter>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000682:	f000 f905 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000686:	bf00      	nop
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200002b0 	.word	0x200002b0
 8000690:	40005400 	.word	0x40005400
 8000694:	2000090e 	.word	0x2000090e

08000698 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800069e:	4b16      	ldr	r3, [pc, #88]	@ (80006f8 <MX_DMA_Init+0x60>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	4a15      	ldr	r2, [pc, #84]	@ (80006f8 <MX_DMA_Init+0x60>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6153      	str	r3, [r2, #20]
 80006aa:	4b13      	ldr	r3, [pc, #76]	@ (80006f8 <MX_DMA_Init+0x60>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006b6:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <MX_DMA_Init+0x60>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	4a0f      	ldr	r2, [pc, #60]	@ (80006f8 <MX_DMA_Init+0x60>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6153      	str	r3, [r2, #20]
 80006c2:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <MX_DMA_Init+0x60>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	200b      	movs	r0, #11
 80006d4:	f001 fc71 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006d8:	200b      	movs	r0, #11
 80006da:	f001 fc8a 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 80006de:	2200      	movs	r2, #0
 80006e0:	2100      	movs	r1, #0
 80006e2:	203c      	movs	r0, #60	@ 0x3c
 80006e4:	f001 fc69 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 80006e8:	203c      	movs	r0, #60	@ 0x3c
 80006ea:	f001 fc82 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40021000 	.word	0x40021000

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b08c      	sub	sp, #48	@ 0x30
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000712:	4b5c      	ldr	r3, [pc, #368]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a5b      	ldr	r2, [pc, #364]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000718:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b59      	ldr	r3, [pc, #356]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000726:	61bb      	str	r3, [r7, #24]
 8000728:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072a:	4b56      	ldr	r3, [pc, #344]	@ (8000884 <MX_GPIO_Init+0x188>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a55      	ldr	r2, [pc, #340]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000730:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b53      	ldr	r3, [pc, #332]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000742:	4b50      	ldr	r3, [pc, #320]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	4a4f      	ldr	r2, [pc, #316]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000748:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800074c:	6153      	str	r3, [r2, #20]
 800074e:	4b4d      	ldr	r3, [pc, #308]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b4a      	ldr	r3, [pc, #296]	@ (8000884 <MX_GPIO_Init+0x188>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	4a49      	ldr	r2, [pc, #292]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000760:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000764:	6153      	str	r3, [r2, #20]
 8000766:	4b47      	ldr	r3, [pc, #284]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000768:	695b      	ldr	r3, [r3, #20]
 800076a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000772:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000774:	695b      	ldr	r3, [r3, #20]
 8000776:	4a43      	ldr	r2, [pc, #268]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000778:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800077c:	6153      	str	r3, [r2, #20]
 800077e:	4b41      	ldr	r3, [pc, #260]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000780:	695b      	ldr	r3, [r3, #20]
 8000782:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	4b3e      	ldr	r3, [pc, #248]	@ (8000884 <MX_GPIO_Init+0x188>)
 800078c:	695b      	ldr	r3, [r3, #20]
 800078e:	4a3d      	ldr	r2, [pc, #244]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000790:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000794:	6153      	str	r3, [r2, #20]
 8000796:	4b3b      	ldr	r3, [pc, #236]	@ (8000884 <MX_GPIO_Init+0x188>)
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 80007a2:	2200      	movs	r2, #0
 80007a4:	f64d 1108 	movw	r1, #55560	@ 0xd908
 80007a8:	4837      	ldr	r0, [pc, #220]	@ (8000888 <MX_GPIO_Init+0x18c>)
 80007aa:	f001 ff81 	bl	80026b0 <HAL_GPIO_WritePin>
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD7_Pin LD9_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 80007ae:	f64d 1308 	movw	r3, #55560	@ 0xd908
 80007b2:	61fb      	str	r3, [r7, #28]
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4830      	ldr	r0, [pc, #192]	@ (8000888 <MX_GPIO_Init+0x18c>)
 80007c8:	f001 fde0 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 80007cc:	2320      	movs	r3, #32
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80007d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	4829      	ldr	r0, [pc, #164]	@ (8000888 <MX_GPIO_Init+0x18c>)
 80007e2:	f001 fdd3 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007e6:	2320      	movs	r3, #32
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ea:	2303      	movs	r3, #3
 80007ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f2:	f107 031c 	add.w	r3, r7, #28
 80007f6:	4619      	mov	r1, r3
 80007f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007fc:	f001 fdc6 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000800:	23c0      	movs	r3, #192	@ 0xc0
 8000802:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000804:	2302      	movs	r3, #2
 8000806:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080c:	2303      	movs	r3, #3
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000810:	2305      	movs	r3, #5
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f001 fdb5 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000822:	230f      	movs	r3, #15
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000826:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800082a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	4815      	ldr	r0, [pc, #84]	@ (800088c <MX_GPIO_Init+0x190>)
 8000838:	f001 fda8 	bl	800238c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800083c:	2200      	movs	r2, #0
 800083e:	2100      	movs	r1, #0
 8000840:	2006      	movs	r0, #6
 8000842:	f001 fbba 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000846:	2006      	movs	r0, #6
 8000848:	f001 fbd3 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2007      	movs	r0, #7
 8000852:	f001 fbb2 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000856:	2007      	movs	r0, #7
 8000858:	f001 fbcb 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 800085c:	2200      	movs	r2, #0
 800085e:	2100      	movs	r1, #0
 8000860:	2008      	movs	r0, #8
 8000862:	f001 fbaa 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 8000866:	2008      	movs	r0, #8
 8000868:	f001 fbc3 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2009      	movs	r0, #9
 8000872:	f001 fba2 	bl	8001fba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000876:	2009      	movs	r0, #9
 8000878:	f001 fbbb 	bl	8001ff2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3730      	adds	r7, #48	@ 0x30
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000
 8000888:	48001000 	.word	0x48001000
 800088c:	48000c00 	.word	0x48000c00

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	bf00      	nop
 800089a:	e7fd      	b.n	8000898 <Error_Handler+0x8>

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	4b0f      	ldr	r3, [pc, #60]	@ (80008e0 <HAL_MspInit+0x44>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a0e      	ldr	r2, [pc, #56]	@ (80008e0 <HAL_MspInit+0x44>)
 80008a8:	f043 0301 	orr.w	r3, r3, #1
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <HAL_MspInit+0x44>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f003 0301 	and.w	r3, r3, #1
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b09      	ldr	r3, [pc, #36]	@ (80008e0 <HAL_MspInit+0x44>)
 80008bc:	69db      	ldr	r3, [r3, #28]
 80008be:	4a08      	ldr	r2, [pc, #32]	@ (80008e0 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	61d3      	str	r3, [r2, #28]
 80008c6:	4b06      	ldr	r3, [pc, #24]	@ (80008e0 <HAL_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ce:	603b      	str	r3, [r7, #0]
 80008d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008d2:	2007      	movs	r0, #7
 80008d4:	f001 fb66 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40021000 	.word	0x40021000

080008e4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	@ 0x30
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000904:	d14d      	bne.n	80009a2 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000906:	4b5e      	ldr	r3, [pc, #376]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 8000908:	695b      	ldr	r3, [r3, #20]
 800090a:	4a5d      	ldr	r2, [pc, #372]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 800090c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000910:	6153      	str	r3, [r2, #20]
 8000912:	4b5b      	ldr	r3, [pc, #364]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 8000914:	695b      	ldr	r3, [r3, #20]
 8000916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800091a:	61bb      	str	r3, [r7, #24]
 800091c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b58      	ldr	r3, [pc, #352]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 8000920:	695b      	ldr	r3, [r3, #20]
 8000922:	4a57      	ldr	r2, [pc, #348]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 8000924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000928:	6153      	str	r3, [r2, #20]
 800092a:	4b55      	ldr	r3, [pc, #340]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 800092c:	695b      	ldr	r3, [r3, #20]
 800092e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000932:	617b      	str	r3, [r7, #20]
 8000934:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000936:	2303      	movs	r3, #3
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800094c:	f001 fd1e 	bl	800238c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000950:	4b4c      	ldr	r3, [pc, #304]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000952:	4a4d      	ldr	r2, [pc, #308]	@ (8000a88 <HAL_ADC_MspInit+0x1a4>)
 8000954:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000956:	4b4b      	ldr	r3, [pc, #300]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800095c:	4b49      	ldr	r3, [pc, #292]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000962:	4b48      	ldr	r3, [pc, #288]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000964:	2280      	movs	r2, #128	@ 0x80
 8000966:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000968:	4b46      	ldr	r3, [pc, #280]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 800096a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800096e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000970:	4b44      	ldr	r3, [pc, #272]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000972:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000976:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000978:	4b42      	ldr	r3, [pc, #264]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 800097a:	2220      	movs	r2, #32
 800097c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800097e:	4b41      	ldr	r3, [pc, #260]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000980:	2200      	movs	r2, #0
 8000982:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000984:	483f      	ldr	r0, [pc, #252]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000986:	f001 fb4e 	bl	8002026 <HAL_DMA_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 8000990:	f7ff ff7e 	bl	8000890 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a3b      	ldr	r2, [pc, #236]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 8000998:	639a      	str	r2, [r3, #56]	@ 0x38
 800099a:	4a3a      	ldr	r2, [pc, #232]	@ (8000a84 <HAL_ADC_MspInit+0x1a0>)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80009a0:	e069      	b.n	8000a76 <HAL_ADC_MspInit+0x192>
  else if(hadc->Instance==ADC3)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a39      	ldr	r2, [pc, #228]	@ (8000a8c <HAL_ADC_MspInit+0x1a8>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d164      	bne.n	8000a76 <HAL_ADC_MspInit+0x192>
    __HAL_RCC_ADC34_CLK_ENABLE();
 80009ac:	4b34      	ldr	r3, [pc, #208]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a33      	ldr	r2, [pc, #204]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80009b6:	6153      	str	r3, [r2, #20]
 80009b8:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009c0:	613b      	str	r3, [r7, #16]
 80009c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c4:	4b2e      	ldr	r3, [pc, #184]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	4a2d      	ldr	r2, [pc, #180]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80009ce:	6153      	str	r3, [r2, #20]
 80009d0:	4b2b      	ldr	r3, [pc, #172]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80009dc:	4b28      	ldr	r3, [pc, #160]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a27      	ldr	r2, [pc, #156]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009e6:	6153      	str	r3, [r2, #20]
 80009e8:	4b25      	ldr	r3, [pc, #148]	@ (8000a80 <HAL_ADC_MspInit+0x19c>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80009f0:	60bb      	str	r3, [r7, #8]
 80009f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f8:	2303      	movs	r3, #3
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4822      	ldr	r0, [pc, #136]	@ (8000a90 <HAL_ADC_MspInit+0x1ac>)
 8000a08:	f001 fcc0 	bl	800238c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a0c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a12:	2303      	movs	r3, #3
 8000a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	481c      	ldr	r0, [pc, #112]	@ (8000a94 <HAL_ADC_MspInit+0x1b0>)
 8000a22:	f001 fcb3 	bl	800238c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8000a26:	4b1c      	ldr	r3, [pc, #112]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a28:	4a1c      	ldr	r2, [pc, #112]	@ (8000a9c <HAL_ADC_MspInit+0x1b8>)
 8000a2a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a32:	4b19      	ldr	r3, [pc, #100]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000a38:	4b17      	ldr	r3, [pc, #92]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a3a:	2280      	movs	r2, #128	@ 0x80
 8000a3c:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a3e:	4b16      	ldr	r3, [pc, #88]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a44:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a46:	4b14      	ldr	r3, [pc, #80]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a4c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000a4e:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a50:	2220      	movs	r2, #32
 8000a52:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000a54:	4b10      	ldr	r3, [pc, #64]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000a5a:	480f      	ldr	r0, [pc, #60]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a5c:	f001 fae3 	bl	8002026 <HAL_DMA_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_ADC_MspInit+0x186>
      Error_Handler();
 8000a66:	f7ff ff13 	bl	8000890 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a6e:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a70:	4a09      	ldr	r2, [pc, #36]	@ (8000a98 <HAL_ADC_MspInit+0x1b4>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000a76:	bf00      	nop
 8000a78:	3730      	adds	r7, #48	@ 0x30
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000
 8000a84:	20000228 	.word	0x20000228
 8000a88:	40020008 	.word	0x40020008
 8000a8c:	50000400 	.word	0x50000400
 8000a90:	48000400 	.word	0x48000400
 8000a94:	48001000 	.word	0x48001000
 8000a98:	2000026c 	.word	0x2000026c
 8000a9c:	40020458 	.word	0x40020458

08000aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b08a      	sub	sp, #40	@ 0x28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa8:	f107 0314 	add.w	r3, r7, #20
 8000aac:	2200      	movs	r2, #0
 8000aae:	601a      	str	r2, [r3, #0]
 8000ab0:	605a      	str	r2, [r3, #4]
 8000ab2:	609a      	str	r2, [r3, #8]
 8000ab4:	60da      	str	r2, [r3, #12]
 8000ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a17      	ldr	r2, [pc, #92]	@ (8000b1c <HAL_I2C_MspInit+0x7c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d127      	bne.n	8000b12 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b17      	ldr	r3, [pc, #92]	@ (8000b20 <HAL_I2C_MspInit+0x80>)
 8000ac4:	695b      	ldr	r3, [r3, #20]
 8000ac6:	4a16      	ldr	r2, [pc, #88]	@ (8000b20 <HAL_I2C_MspInit+0x80>)
 8000ac8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000acc:	6153      	str	r3, [r2, #20]
 8000ace:	4b14      	ldr	r3, [pc, #80]	@ (8000b20 <HAL_I2C_MspInit+0x80>)
 8000ad0:	695b      	ldr	r3, [r3, #20]
 8000ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000ada:	23c0      	movs	r3, #192	@ 0xc0
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ade:	2312      	movs	r3, #18
 8000ae0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aea:	2304      	movs	r3, #4
 8000aec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	480b      	ldr	r0, [pc, #44]	@ (8000b24 <HAL_I2C_MspInit+0x84>)
 8000af6:	f001 fc49 	bl	800238c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000afa:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <HAL_I2C_MspInit+0x80>)
 8000afc:	69db      	ldr	r3, [r3, #28]
 8000afe:	4a08      	ldr	r2, [pc, #32]	@ (8000b20 <HAL_I2C_MspInit+0x80>)
 8000b00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000b04:	61d3      	str	r3, [r2, #28]
 8000b06:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_I2C_MspInit+0x80>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b12:	bf00      	nop
 8000b14:	3728      	adds	r7, #40	@ 0x28
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	40005400 	.word	0x40005400
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000400 	.word	0x48000400

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <NMI_Handler+0x4>

08000b30 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <HardFault_Handler+0x4>

08000b38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3c:	bf00      	nop
 8000b3e:	e7fd      	b.n	8000b3c <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	bf00      	nop
 8000b46:	e7fd      	b.n	8000b44 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	bf00      	nop
 8000b4e:	e7fd      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b62:	bf00      	nop
 8000b64:	46bd      	mov	sp, r7
 8000b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6a:	4770      	bx	lr

08000b6c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b70:	bf00      	nop
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr

08000b7a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7e:	f000 f8d7 	bl	8000d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b8a:	2001      	movs	r0, #1
 8000b8c:	f001 fda8 	bl	80026e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b98:	2002      	movs	r0, #2
 8000b9a:	f001 fda1 	bl	80026e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000ba6:	2004      	movs	r0, #4
 8000ba8:	f001 fd9a 	bl	80026e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000bb4:	2008      	movs	r0, #8
 8000bb6:	f001 fd93 	bl	80026e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
	...

08000bc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bc4:	4802      	ldr	r0, [pc, #8]	@ (8000bd0 <DMA1_Channel1_IRQHandler+0x10>)
 8000bc6:	f001 fad4 	bl	8002172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	20000228 	.word	0x20000228

08000bd4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bd8:	4802      	ldr	r0, [pc, #8]	@ (8000be4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000bda:	f001 ffb8 	bl	8002b4e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	200007e4 	.word	0x200007e4

08000be8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <DMA2_Channel5_IRQHandler+0x10>)
 8000bee:	f001 fac0 	bl	8002172 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000026c 	.word	0x2000026c

08000bfc <toggleBit>:
void clearBit(uint8_t *byte, int bit_position) {
    *byte &= ~(1 << bit_position);
}

// Funzione per invertire un bit specifico
void toggleBit(uint8_t *byte, int bit_position) {
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
    *byte ^= (1 << bit_position);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b25a      	sxtb	r2, r3
 8000c0c:	2101      	movs	r1, #1
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	fa01 f303 	lsl.w	r3, r1, r3
 8000c14:	b25b      	sxtb	r3, r3
 8000c16:	4053      	eors	r3, r2
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	b2da      	uxtb	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	701a      	strb	r2, [r3, #0]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c30:	4b06      	ldr	r3, [pc, #24]	@ (8000c4c <SystemInit+0x20>)
 8000c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c36:	4a05      	ldr	r2, [pc, #20]	@ (8000c4c <SystemInit+0x20>)
 8000c38:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c3c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c88 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c54:	f7ff ffea 	bl	8000c2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c58:	480c      	ldr	r0, [pc, #48]	@ (8000c8c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c5a:	490d      	ldr	r1, [pc, #52]	@ (8000c90 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000c94 <LoopForever+0xe>)
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c60:	e002      	b.n	8000c68 <LoopCopyDataInit>

08000c62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c66:	3304      	adds	r3, #4

08000c68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c6c:	d3f9      	bcc.n	8000c62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000c98 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c70:	4c0a      	ldr	r4, [pc, #40]	@ (8000c9c <LoopForever+0x16>)
  movs r3, #0
 8000c72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c74:	e001      	b.n	8000c7a <LoopFillZerobss>

08000c76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c78:	3204      	adds	r2, #4

08000c7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c7c:	d3fb      	bcc.n	8000c76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c7e:	f009 f95d 	bl	8009f3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c82:	f7ff fb0d 	bl	80002a0 <main>

08000c86 <LoopForever>:

LoopForever:
    b LoopForever
 8000c86:	e7fe      	b.n	8000c86 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c88:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c90:	2000016c 	.word	0x2000016c
  ldr r2, =_sidata
 8000c94:	0800a034 	.word	0x0800a034
  ldr r2, =_sbss
 8000c98:	2000016c 	.word	0x2000016c
  ldr r4, =_ebss
 8000c9c:	20000b10 	.word	0x20000b10

08000ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca0:	e7fe      	b.n	8000ca0 <ADC1_2_IRQHandler>
	...

08000ca4 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca8:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_Init+0x28>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a07      	ldr	r2, [pc, #28]	@ (8000ccc <HAL_Init+0x28>)
 8000cae:	f043 0310 	orr.w	r3, r3, #16
 8000cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb4:	2003      	movs	r0, #3
 8000cb6:	f001 f975 	bl	8001fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cba:	2000      	movs	r0, #0
 8000cbc:	f000 f808 	bl	8000cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cc0:	f7ff fdec 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40022000 	.word	0x40022000

08000cd0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cd8:	4b12      	ldr	r3, [pc, #72]	@ (8000d24 <HAL_InitTick+0x54>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b12      	ldr	r3, [pc, #72]	@ (8000d28 <HAL_InitTick+0x58>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f001 f98d 	bl	800200e <HAL_SYSTICK_Config>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e00e      	b.n	8000d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b0f      	cmp	r3, #15
 8000d02:	d80a      	bhi.n	8000d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d04:	2200      	movs	r2, #0
 8000d06:	6879      	ldr	r1, [r7, #4]
 8000d08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d0c:	f001 f955 	bl	8001fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d10:	4a06      	ldr	r2, [pc, #24]	@ (8000d2c <HAL_InitTick+0x5c>)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d16:	2300      	movs	r3, #0
 8000d18:	e000      	b.n	8000d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	3708      	adds	r7, #8
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000008 	.word	0x20000008
 8000d2c:	20000004 	.word	0x20000004

08000d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_IncTick+0x20>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	461a      	mov	r2, r3
 8000d3a:	4b06      	ldr	r3, [pc, #24]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4413      	add	r3, r2
 8000d40:	4a04      	ldr	r2, [pc, #16]	@ (8000d54 <HAL_IncTick+0x24>)
 8000d42:	6013      	str	r3, [r2, #0]
}
 8000d44:	bf00      	nop
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000318 	.word	0x20000318

08000d58 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <HAL_GetTick+0x14>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000318 	.word	0x20000318

08000d70 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d78:	f7ff ffee 	bl	8000d58 <HAL_GetTick>
 8000d7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d88:	d005      	beq.n	8000d96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000db4 <HAL_Delay+0x44>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	461a      	mov	r2, r3
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	4413      	add	r3, r2
 8000d94:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d96:	bf00      	nop
 8000d98:	f7ff ffde 	bl	8000d58 <HAL_GetTick>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d8f7      	bhi.n	8000d98 <HAL_Delay+0x28>
  {
  }
}
 8000da8:	bf00      	nop
 8000daa:	bf00      	nop
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr

08000dcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b09a      	sub	sp, #104	@ 0x68
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e1c9      	b.n	80011a8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	691b      	ldr	r3, [r3, #16]
 8000e18:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e1e:	f003 0310 	and.w	r3, r3, #16
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d176      	bne.n	8000f14 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d152      	bne.n	8000ed4 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2200      	movs	r2, #0
 8000e38:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2200      	movs	r2, #0
 8000e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff fd4b 	bl	80008e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689b      	ldr	r3, [r3, #8]
 8000e54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d13b      	bne.n	8000ed4 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f000 ff6b 	bl	8001d38 <ADC_Disable>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e6c:	f003 0310 	and.w	r3, r3, #16
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d12f      	bne.n	8000ed4 <HAL_ADC_Init+0xe0>
 8000e74:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d12b      	bne.n	8000ed4 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e80:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e84:	f023 0302 	bic.w	r3, r3, #2
 8000e88:	f043 0202 	orr.w	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	689a      	ldr	r2, [r3, #8]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e9e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	689a      	ldr	r2, [r3, #8]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000eae:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb0:	4b86      	ldr	r3, [pc, #536]	@ (80010cc <HAL_ADC_Init+0x2d8>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a86      	ldr	r2, [pc, #536]	@ (80010d0 <HAL_ADC_Init+0x2dc>)
 8000eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eba:	0c9a      	lsrs	r2, r3, #18
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	009b      	lsls	r3, r3, #2
 8000ec0:	4413      	add	r3, r2
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ec6:	e002      	b.n	8000ece <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f9      	bne.n	8000ec8 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d007      	beq.n	8000ef2 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000eec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ef0:	d110      	bne.n	8000f14 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ef6:	f023 0312 	bic.w	r3, r3, #18
 8000efa:	f043 0210 	orr.w	r2, r3, #16
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f06:	f043 0201 	orr.w	r2, r3, #1
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f18:	f003 0310 	and.w	r3, r3, #16
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	f040 8136 	bne.w	800118e <HAL_ADC_Init+0x39a>
 8000f22:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	f040 8131 	bne.w	800118e <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	689b      	ldr	r3, [r3, #8]
 8000f32:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 8129 	bne.w	800118e <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000f44:	f043 0202 	orr.w	r2, r3, #2
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f54:	d004      	beq.n	8000f60 <HAL_ADC_Init+0x16c>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a5e      	ldr	r2, [pc, #376]	@ (80010d4 <HAL_ADC_Init+0x2e0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d101      	bne.n	8000f64 <HAL_ADC_Init+0x170>
 8000f60:	4b5d      	ldr	r3, [pc, #372]	@ (80010d8 <HAL_ADC_Init+0x2e4>)
 8000f62:	e000      	b.n	8000f66 <HAL_ADC_Init+0x172>
 8000f64:	4b5d      	ldr	r3, [pc, #372]	@ (80010dc <HAL_ADC_Init+0x2e8>)
 8000f66:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f70:	d102      	bne.n	8000f78 <HAL_ADC_Init+0x184>
 8000f72:	4b58      	ldr	r3, [pc, #352]	@ (80010d4 <HAL_ADC_Init+0x2e0>)
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e01a      	b.n	8000fae <HAL_ADC_Init+0x1ba>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a55      	ldr	r2, [pc, #340]	@ (80010d4 <HAL_ADC_Init+0x2e0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d103      	bne.n	8000f8a <HAL_ADC_Init+0x196>
 8000f82:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	e011      	b.n	8000fae <HAL_ADC_Init+0x1ba>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a54      	ldr	r2, [pc, #336]	@ (80010e0 <HAL_ADC_Init+0x2ec>)
 8000f90:	4293      	cmp	r3, r2
 8000f92:	d102      	bne.n	8000f9a <HAL_ADC_Init+0x1a6>
 8000f94:	4b53      	ldr	r3, [pc, #332]	@ (80010e4 <HAL_ADC_Init+0x2f0>)
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	e009      	b.n	8000fae <HAL_ADC_Init+0x1ba>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a51      	ldr	r2, [pc, #324]	@ (80010e4 <HAL_ADC_Init+0x2f0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d102      	bne.n	8000faa <HAL_ADC_Init+0x1b6>
 8000fa4:	4b4e      	ldr	r3, [pc, #312]	@ (80010e0 <HAL_ADC_Init+0x2ec>)
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	e001      	b.n	8000fae <HAL_ADC_Init+0x1ba>
 8000faa:	2300      	movs	r3, #0
 8000fac:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	f003 0303 	and.w	r3, r3, #3
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d108      	bne.n	8000fce <HAL_ADC_Init+0x1da>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d101      	bne.n	8000fce <HAL_ADC_Init+0x1da>
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e000      	b.n	8000fd0 <HAL_ADC_Init+0x1dc>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d11c      	bne.n	800100e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000fd4:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d010      	beq.n	8000ffc <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	f003 0303 	and.w	r3, r3, #3
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d107      	bne.n	8000ff6 <HAL_ADC_Init+0x202>
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	2b01      	cmp	r3, #1
 8000ff0:	d101      	bne.n	8000ff6 <HAL_ADC_Init+0x202>
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e000      	b.n	8000ff8 <HAL_ADC_Init+0x204>
 8000ff6:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d108      	bne.n	800100e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ffc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	431a      	orrs	r2, r3
 800100a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800100c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7e5b      	ldrb	r3, [r3, #25]
 8001012:	035b      	lsls	r3, r3, #13
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001018:	2a01      	cmp	r2, #1
 800101a:	d002      	beq.n	8001022 <HAL_ADC_Init+0x22e>
 800101c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001020:	e000      	b.n	8001024 <HAL_ADC_Init+0x230>
 8001022:	2200      	movs	r2, #0
 8001024:	431a      	orrs	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	4313      	orrs	r3, r2
 8001032:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001034:	4313      	orrs	r3, r2
 8001036:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d11b      	bne.n	800107a <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	7e5b      	ldrb	r3, [r3, #25]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d109      	bne.n	800105e <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800104e:	3b01      	subs	r3, #1
 8001050:	045a      	lsls	r2, r3, #17
 8001052:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001054:	4313      	orrs	r3, r2
 8001056:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105a:	663b      	str	r3, [r7, #96]	@ 0x60
 800105c:	e00d      	b.n	800107a <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001062:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001066:	f043 0220 	orr.w	r2, r3, #32
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001072:	f043 0201 	orr.w	r2, r3, #1
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800107e:	2b01      	cmp	r3, #1
 8001080:	d03a      	beq.n	80010f8 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a16      	ldr	r2, [pc, #88]	@ (80010e0 <HAL_ADC_Init+0x2ec>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d004      	beq.n	8001096 <HAL_ADC_Init+0x2a2>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a14      	ldr	r2, [pc, #80]	@ (80010e4 <HAL_ADC_Init+0x2f0>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d128      	bne.n	80010e8 <HAL_ADC_Init+0x2f4>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800109a:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800109e:	d012      	beq.n	80010c6 <HAL_ADC_Init+0x2d2>
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010a8:	d00a      	beq.n	80010c0 <HAL_ADC_Init+0x2cc>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ae:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80010b2:	d002      	beq.n	80010ba <HAL_ADC_Init+0x2c6>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010b8:	e018      	b.n	80010ec <HAL_ADC_Init+0x2f8>
 80010ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010be:	e015      	b.n	80010ec <HAL_ADC_Init+0x2f8>
 80010c0:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80010c4:	e012      	b.n	80010ec <HAL_ADC_Init+0x2f8>
 80010c6:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80010ca:	e00f      	b.n	80010ec <HAL_ADC_Init+0x2f8>
 80010cc:	20000000 	.word	0x20000000
 80010d0:	431bde83 	.word	0x431bde83
 80010d4:	50000100 	.word	0x50000100
 80010d8:	50000300 	.word	0x50000300
 80010dc:	50000700 	.word	0x50000700
 80010e0:	50000400 	.word	0x50000400
 80010e4:	50000500 	.word	0x50000500
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80010f0:	4313      	orrs	r3, r2
 80010f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010f4:	4313      	orrs	r3, r2
 80010f6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	f003 030c 	and.w	r3, r3, #12
 8001102:	2b00      	cmp	r3, #0
 8001104:	d114      	bne.n	8001130 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	6812      	ldr	r2, [r2, #0]
 8001110:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001114:	f023 0302 	bic.w	r3, r3, #2
 8001118:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7e1b      	ldrb	r3, [r3, #24]
 800111e:	039a      	lsls	r2, r3, #14
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4313      	orrs	r3, r2
 800112a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800112c:	4313      	orrs	r3, r2
 800112e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	68da      	ldr	r2, [r3, #12]
 8001136:	4b1e      	ldr	r3, [pc, #120]	@ (80011b0 <HAL_ADC_Init+0x3bc>)
 8001138:	4013      	ands	r3, r2
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	6812      	ldr	r2, [r2, #0]
 800113e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001140:	430b      	orrs	r3, r1
 8001142:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	691b      	ldr	r3, [r3, #16]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d10c      	bne.n	8001166 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001152:	f023 010f 	bic.w	r1, r3, #15
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	1e5a      	subs	r2, r3, #1
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	631a      	str	r2, [r3, #48]	@ 0x30
 8001164:	e007      	b.n	8001176 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f022 020f 	bic.w	r2, r2, #15
 8001174:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001180:	f023 0303 	bic.w	r3, r3, #3
 8001184:	f043 0201 	orr.w	r2, r3, #1
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40
 800118c:	e00a      	b.n	80011a4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f023 0312 	bic.w	r3, r3, #18
 8001196:	f043 0210 	orr.w	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800119e:	2301      	movs	r3, #1
 80011a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3768      	adds	r7, #104	@ 0x68
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	fff0c007 	.word	0xfff0c007

080011b4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0304 	and.w	r3, r3, #4
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 80f7 	bne.w	80013c2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d101      	bne.n	80011e2 <HAL_ADC_Start_DMA+0x2e>
 80011de:	2302      	movs	r3, #2
 80011e0:	e0f2      	b.n	80013c8 <HAL_ADC_Start_DMA+0x214>
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2201      	movs	r2, #1
 80011e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011f2:	d004      	beq.n	80011fe <HAL_ADC_Start_DMA+0x4a>
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a75      	ldr	r2, [pc, #468]	@ (80013d0 <HAL_ADC_Start_DMA+0x21c>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d109      	bne.n	8001212 <HAL_ADC_Start_DMA+0x5e>
 80011fe:	4b75      	ldr	r3, [pc, #468]	@ (80013d4 <HAL_ADC_Start_DMA+0x220>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2b00      	cmp	r3, #0
 8001208:	bf0c      	ite	eq
 800120a:	2301      	moveq	r3, #1
 800120c:	2300      	movne	r3, #0
 800120e:	b2db      	uxtb	r3, r3
 8001210:	e008      	b.n	8001224 <HAL_ADC_Start_DMA+0x70>
 8001212:	4b71      	ldr	r3, [pc, #452]	@ (80013d8 <HAL_ADC_Start_DMA+0x224>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 031f 	and.w	r3, r3, #31
 800121a:	2b00      	cmp	r3, #0
 800121c:	bf0c      	ite	eq
 800121e:	2301      	moveq	r3, #1
 8001220:	2300      	movne	r3, #0
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	f000 80c5 	beq.w	80013b4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f000 fd20 	bl	8001c70 <ADC_Enable>
 8001230:	4603      	mov	r3, r0
 8001232:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001234:	7dfb      	ldrb	r3, [r7, #23]
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 80b7 	bne.w	80013aa <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001240:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001244:	f023 0301 	bic.w	r3, r3, #1
 8001248:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001258:	d004      	beq.n	8001264 <HAL_ADC_Start_DMA+0xb0>
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a5c      	ldr	r2, [pc, #368]	@ (80013d0 <HAL_ADC_Start_DMA+0x21c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d106      	bne.n	8001272 <HAL_ADC_Start_DMA+0xbe>
 8001264:	4b5b      	ldr	r3, [pc, #364]	@ (80013d4 <HAL_ADC_Start_DMA+0x220>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f003 031f 	and.w	r3, r3, #31
 800126c:	2b00      	cmp	r3, #0
 800126e:	d010      	beq.n	8001292 <HAL_ADC_Start_DMA+0xde>
 8001270:	e005      	b.n	800127e <HAL_ADC_Start_DMA+0xca>
 8001272:	4b59      	ldr	r3, [pc, #356]	@ (80013d8 <HAL_ADC_Start_DMA+0x224>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 031f 	and.w	r3, r3, #31
 800127a:	2b00      	cmp	r3, #0
 800127c:	d009      	beq.n	8001292 <HAL_ADC_Start_DMA+0xde>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001286:	d004      	beq.n	8001292 <HAL_ADC_Start_DMA+0xde>
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a53      	ldr	r2, [pc, #332]	@ (80013dc <HAL_ADC_Start_DMA+0x228>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d115      	bne.n	80012be <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001296:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d036      	beq.n	800131a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012b4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012bc:	e02d      	b.n	800131a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012d2:	d004      	beq.n	80012de <HAL_ADC_Start_DMA+0x12a>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a3d      	ldr	r2, [pc, #244]	@ (80013d0 <HAL_ADC_Start_DMA+0x21c>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d10a      	bne.n	80012f4 <HAL_ADC_Start_DMA+0x140>
 80012de:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	bf14      	ite	ne
 80012ec:	2301      	movne	r3, #1
 80012ee:	2300      	moveq	r3, #0
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	e008      	b.n	8001306 <HAL_ADC_Start_DMA+0x152>
 80012f4:	4b39      	ldr	r3, [pc, #228]	@ (80013dc <HAL_ADC_Start_DMA+0x228>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	bf14      	ite	ne
 8001300:	2301      	movne	r3, #1
 8001302:	2300      	moveq	r3, #0
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d007      	beq.n	800131a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001312:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001322:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001326:	d106      	bne.n	8001336 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	f023 0206 	bic.w	r2, r3, #6
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	645a      	str	r2, [r3, #68]	@ 0x44
 8001334:	e002      	b.n	800133c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2200      	movs	r2, #0
 8001340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001348:	4a25      	ldr	r2, [pc, #148]	@ (80013e0 <HAL_ADC_Start_DMA+0x22c>)
 800134a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001350:	4a24      	ldr	r2, [pc, #144]	@ (80013e4 <HAL_ADC_Start_DMA+0x230>)
 8001352:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001358:	4a23      	ldr	r2, [pc, #140]	@ (80013e8 <HAL_ADC_Start_DMA+0x234>)
 800135a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	221c      	movs	r2, #28
 8001362:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	685a      	ldr	r2, [r3, #4]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f042 0210 	orr.w	r2, r2, #16
 8001372:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	68da      	ldr	r2, [r3, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f042 0201 	orr.w	r2, r2, #1
 8001382:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3340      	adds	r3, #64	@ 0x40
 800138e:	4619      	mov	r1, r3
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	f000 fe8e 	bl	80020b4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	689a      	ldr	r2, [r3, #8]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0204 	orr.w	r2, r2, #4
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	e00d      	b.n	80013c6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2200      	movs	r2, #0
 80013ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80013b2:	e008      	b.n	80013c6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80013c0:	e001      	b.n	80013c6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013c2:	2302      	movs	r3, #2
 80013c4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3718      	adds	r7, #24
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	50000100 	.word	0x50000100
 80013d4:	50000300 	.word	0x50000300
 80013d8:	50000700 	.word	0x50000700
 80013dc:	50000400 	.word	0x50000400
 80013e0:	08001ba5 	.word	0x08001ba5
 80013e4:	08001c1f 	.word	0x08001c1f
 80013e8:	08001c3b 	.word	0x08001c3b

080013ec <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b09b      	sub	sp, #108	@ 0x6c
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
 80013f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013fc:	2300      	movs	r3, #0
 80013fe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001406:	2b01      	cmp	r3, #1
 8001408:	d101      	bne.n	800140e <HAL_ADC_ConfigChannel+0x22>
 800140a:	2302      	movs	r3, #2
 800140c:	e2c8      	b.n	80019a0 <HAL_ADC_ConfigChannel+0x5b4>
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2201      	movs	r2, #1
 8001412:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	f040 82ac 	bne.w	800197e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b04      	cmp	r3, #4
 800142c:	d81c      	bhi.n	8001468 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	4613      	mov	r3, r2
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	4413      	add	r3, r2
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	461a      	mov	r2, r3
 8001442:	231f      	movs	r3, #31
 8001444:	4093      	lsls	r3, r2
 8001446:	43db      	mvns	r3, r3
 8001448:	4019      	ands	r1, r3
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	6818      	ldr	r0, [r3, #0]
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4413      	add	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	fa00 f203 	lsl.w	r2, r0, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	631a      	str	r2, [r3, #48]	@ 0x30
 8001466:	e063      	b.n	8001530 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d81e      	bhi.n	80014ae <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	3b1e      	subs	r3, #30
 8001484:	221f      	movs	r2, #31
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	4019      	ands	r1, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6818      	ldr	r0, [r3, #0]
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685a      	ldr	r2, [r3, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	3b1e      	subs	r3, #30
 80014a0:	fa00 f203 	lsl.w	r2, r0, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	430a      	orrs	r2, r1
 80014aa:	635a      	str	r2, [r3, #52]	@ 0x34
 80014ac:	e040      	b.n	8001530 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	2b0e      	cmp	r3, #14
 80014b4:	d81e      	bhi.n	80014f4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	005b      	lsls	r3, r3, #1
 80014c8:	3b3c      	subs	r3, #60	@ 0x3c
 80014ca:	221f      	movs	r2, #31
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	4019      	ands	r1, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	6818      	ldr	r0, [r3, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	3b3c      	subs	r3, #60	@ 0x3c
 80014e6:	fa00 f203 	lsl.w	r2, r0, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	430a      	orrs	r2, r1
 80014f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80014f2:	e01d      	b.n	8001530 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685a      	ldr	r2, [r3, #4]
 80014fe:	4613      	mov	r3, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	4413      	add	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	3b5a      	subs	r3, #90	@ 0x5a
 8001508:	221f      	movs	r2, #31
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	4019      	ands	r1, r3
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	4613      	mov	r3, r2
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	4413      	add	r3, r2
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	3b5a      	subs	r3, #90	@ 0x5a
 8001524:	fa00 f203 	lsl.w	r2, r0, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	430a      	orrs	r2, r1
 800152e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b00      	cmp	r3, #0
 800153c:	f040 80e5 	bne.w	800170a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b09      	cmp	r3, #9
 8001546:	d91c      	bls.n	8001582 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6999      	ldr	r1, [r3, #24]
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	3b1e      	subs	r3, #30
 800155a:	2207      	movs	r2, #7
 800155c:	fa02 f303 	lsl.w	r3, r2, r3
 8001560:	43db      	mvns	r3, r3
 8001562:	4019      	ands	r1, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	6898      	ldr	r0, [r3, #8]
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4613      	mov	r3, r2
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	4413      	add	r3, r2
 8001572:	3b1e      	subs	r3, #30
 8001574:	fa00 f203 	lsl.w	r2, r0, r3
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	430a      	orrs	r2, r1
 800157e:	619a      	str	r2, [r3, #24]
 8001580:	e019      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	6959      	ldr	r1, [r3, #20]
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	2207      	movs	r2, #7
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	4019      	ands	r1, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	6898      	ldr	r0, [r3, #8]
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	08db      	lsrs	r3, r3, #3
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d84f      	bhi.n	8001678 <HAL_ADC_ConfigChannel+0x28c>
 80015d8:	a201      	add	r2, pc, #4	@ (adr r2, 80015e0 <HAL_ADC_ConfigChannel+0x1f4>)
 80015da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015de:	bf00      	nop
 80015e0:	080015f1 	.word	0x080015f1
 80015e4:	08001613 	.word	0x08001613
 80015e8:	08001635 	.word	0x08001635
 80015ec:	08001657 	.word	0x08001657
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80015f6:	4b99      	ldr	r3, [pc, #612]	@ (800185c <HAL_ADC_ConfigChannel+0x470>)
 80015f8:	4013      	ands	r3, r2
 80015fa:	683a      	ldr	r2, [r7, #0]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	0691      	lsls	r1, r2, #26
 8001600:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001602:	430a      	orrs	r2, r1
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800160e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001610:	e07b      	b.n	800170a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001618:	4b90      	ldr	r3, [pc, #576]	@ (800185c <HAL_ADC_ConfigChannel+0x470>)
 800161a:	4013      	ands	r3, r2
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	0691      	lsls	r1, r2, #26
 8001622:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001624:	430a      	orrs	r2, r1
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001630:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001632:	e06a      	b.n	800170a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800163a:	4b88      	ldr	r3, [pc, #544]	@ (800185c <HAL_ADC_ConfigChannel+0x470>)
 800163c:	4013      	ands	r3, r2
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	0691      	lsls	r1, r2, #26
 8001644:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001646:	430a      	orrs	r2, r1
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001652:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001654:	e059      	b.n	800170a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800165c:	4b7f      	ldr	r3, [pc, #508]	@ (800185c <HAL_ADC_ConfigChannel+0x470>)
 800165e:	4013      	ands	r3, r2
 8001660:	683a      	ldr	r2, [r7, #0]
 8001662:	6812      	ldr	r2, [r2, #0]
 8001664:	0691      	lsls	r1, r2, #26
 8001666:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001668:	430a      	orrs	r2, r1
 800166a:	431a      	orrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001674:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001676:	e048      	b.n	800170a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800167e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	069b      	lsls	r3, r3, #26
 8001688:	429a      	cmp	r2, r3
 800168a:	d107      	bne.n	800169c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800169a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	069b      	lsls	r3, r3, #26
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016be:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	069b      	lsls	r3, r3, #26
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016e2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80016ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	069b      	lsls	r3, r3, #26
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d107      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001706:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001708:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_ADC_ConfigChannel+0x33e>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d101      	bne.n	800172a <HAL_ADC_ConfigChannel+0x33e>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_ADC_ConfigChannel+0x340>
 800172a:	2300      	movs	r3, #0
 800172c:	2b00      	cmp	r3, #0
 800172e:	f040 8131 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d00f      	beq.n	800175a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43da      	mvns	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	400a      	ands	r2, r1
 8001754:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001758:	e049      	b.n	80017ee <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2201      	movs	r2, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	430a      	orrs	r2, r1
 8001770:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2b09      	cmp	r3, #9
 800177a:	d91c      	bls.n	80017b6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6999      	ldr	r1, [r3, #24]
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	4613      	mov	r3, r2
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	4413      	add	r3, r2
 800178c:	3b1b      	subs	r3, #27
 800178e:	2207      	movs	r2, #7
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	4019      	ands	r1, r3
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	6898      	ldr	r0, [r3, #8]
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	3b1b      	subs	r3, #27
 80017a8:	fa00 f203 	lsl.w	r2, r0, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	619a      	str	r2, [r3, #24]
 80017b4:	e01b      	b.n	80017ee <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6959      	ldr	r1, [r3, #20]
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	1c5a      	adds	r2, r3, #1
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	2207      	movs	r2, #7
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	4019      	ands	r1, r3
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	6898      	ldr	r0, [r3, #8]
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	4613      	mov	r3, r2
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	4413      	add	r3, r2
 80017e2:	fa00 f203 	lsl.w	r2, r0, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	430a      	orrs	r2, r1
 80017ec:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f6:	d004      	beq.n	8001802 <HAL_ADC_ConfigChannel+0x416>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a18      	ldr	r2, [pc, #96]	@ (8001860 <HAL_ADC_ConfigChannel+0x474>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d101      	bne.n	8001806 <HAL_ADC_ConfigChannel+0x41a>
 8001802:	4b18      	ldr	r3, [pc, #96]	@ (8001864 <HAL_ADC_ConfigChannel+0x478>)
 8001804:	e000      	b.n	8001808 <HAL_ADC_ConfigChannel+0x41c>
 8001806:	4b18      	ldr	r3, [pc, #96]	@ (8001868 <HAL_ADC_ConfigChannel+0x47c>)
 8001808:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d105      	bne.n	800181e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001812:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d015      	beq.n	800184a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001822:	2b11      	cmp	r3, #17
 8001824:	d105      	bne.n	8001832 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001826:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00b      	beq.n	800184a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001836:	2b12      	cmp	r3, #18
 8001838:	f040 80ac 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800183c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001844:	2b00      	cmp	r3, #0
 8001846:	f040 80a5 	bne.w	8001994 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001852:	d10b      	bne.n	800186c <HAL_ADC_ConfigChannel+0x480>
 8001854:	4b02      	ldr	r3, [pc, #8]	@ (8001860 <HAL_ADC_ConfigChannel+0x474>)
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e023      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x4b6>
 800185a:	bf00      	nop
 800185c:	83fff000 	.word	0x83fff000
 8001860:	50000100 	.word	0x50000100
 8001864:	50000300 	.word	0x50000300
 8001868:	50000700 	.word	0x50000700
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a4e      	ldr	r2, [pc, #312]	@ (80019ac <HAL_ADC_ConfigChannel+0x5c0>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d103      	bne.n	800187e <HAL_ADC_ConfigChannel+0x492>
 8001876:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e011      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x4b6>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a4b      	ldr	r2, [pc, #300]	@ (80019b0 <HAL_ADC_ConfigChannel+0x5c4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d102      	bne.n	800188e <HAL_ADC_ConfigChannel+0x4a2>
 8001888:	4b4a      	ldr	r3, [pc, #296]	@ (80019b4 <HAL_ADC_ConfigChannel+0x5c8>)
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	e009      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x4b6>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a48      	ldr	r2, [pc, #288]	@ (80019b4 <HAL_ADC_ConfigChannel+0x5c8>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d102      	bne.n	800189e <HAL_ADC_ConfigChannel+0x4b2>
 8001898:	4b45      	ldr	r3, [pc, #276]	@ (80019b0 <HAL_ADC_ConfigChannel+0x5c4>)
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e001      	b.n	80018a2 <HAL_ADC_ConfigChannel+0x4b6>
 800189e:	2300      	movs	r3, #0
 80018a0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d108      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x4d6>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d101      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x4d6>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x4d8>
 80018c2:	2300      	movs	r3, #0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d150      	bne.n	800196a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018c8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d010      	beq.n	80018f0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 0303 	and.w	r3, r3, #3
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d107      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x4fe>
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_ADC_ConfigChannel+0x4fe>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_ADC_ConfigChannel+0x500>
 80018ea:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d13c      	bne.n	800196a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b10      	cmp	r3, #16
 80018f6:	d11d      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x548>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001900:	d118      	bne.n	8001934 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001902:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800190a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800190c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800190e:	4b2a      	ldr	r3, [pc, #168]	@ (80019b8 <HAL_ADC_ConfigChannel+0x5cc>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a2a      	ldr	r2, [pc, #168]	@ (80019bc <HAL_ADC_ConfigChannel+0x5d0>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	0c9a      	lsrs	r2, r3, #18
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001924:	e002      	b.n	800192c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3b01      	subs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001932:	e02e      	b.n	8001992 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b11      	cmp	r3, #17
 800193a:	d10b      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x568>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001944:	d106      	bne.n	8001954 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001946:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800194e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001950:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001952:	e01e      	b.n	8001992 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b12      	cmp	r3, #18
 800195a:	d11a      	bne.n	8001992 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800195c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001964:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001966:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001968:	e013      	b.n	8001992 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f043 0220 	orr.w	r2, r3, #32
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800197c:	e00a      	b.n	8001994 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f043 0220 	orr.w	r2, r3, #32
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001990:	e000      	b.n	8001994 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001992:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800199c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	376c      	adds	r7, #108	@ 0x6c
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr
 80019ac:	50000100 	.word	0x50000100
 80019b0:	50000400 	.word	0x50000400
 80019b4:	50000500 	.word	0x50000500
 80019b8:	20000000 	.word	0x20000000
 80019bc:	431bde83 	.word	0x431bde83

080019c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b099      	sub	sp, #100	@ 0x64
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ca:	2300      	movs	r3, #0
 80019cc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019d8:	d102      	bne.n	80019e0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80019da:	4b6d      	ldr	r3, [pc, #436]	@ (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	e01a      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d103      	bne.n	80019f2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80019ea:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	e011      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a67      	ldr	r2, [pc, #412]	@ (8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d102      	bne.n	8001a02 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80019fc:	4b66      	ldr	r3, [pc, #408]	@ (8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	e009      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a64      	ldr	r2, [pc, #400]	@ (8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d102      	bne.n	8001a12 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001a0c:	4b61      	ldr	r3, [pc, #388]	@ (8001b94 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a0e:	60bb      	str	r3, [r7, #8]
 8001a10:	e001      	b.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a12:	2300      	movs	r3, #0
 8001a14:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d101      	bne.n	8001a20 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e0b0      	b.n	8001b82 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e0a9      	b.n	8001b82 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	f040 808d 	bne.w	8001b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f040 8086 	bne.w	8001b60 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a5c:	d004      	beq.n	8001a68 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a4b      	ldr	r2, [pc, #300]	@ (8001b90 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d101      	bne.n	8001a6c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001a68:	4b4c      	ldr	r3, [pc, #304]	@ (8001b9c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001a6a:	e000      	b.n	8001a6e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001a6c:	4b4c      	ldr	r3, [pc, #304]	@ (8001ba0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001a6e:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d040      	beq.n	8001afa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a78:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	6859      	ldr	r1, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a8a:	035b      	lsls	r3, r3, #13
 8001a8c:	430b      	orrs	r3, r1
 8001a8e:	431a      	orrs	r2, r3
 8001a90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a92:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d108      	bne.n	8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0301 	and.w	r3, r3, #1
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d101      	bne.n	8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d15c      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d107      	bne.n	8001ad6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0301 	and.w	r3, r3, #1
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ad6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d14b      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001adc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ae4:	f023 030f 	bic.w	r3, r3, #15
 8001ae8:	683a      	ldr	r2, [r7, #0]
 8001aea:	6811      	ldr	r1, [r2, #0]
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	6892      	ldr	r2, [r2, #8]
 8001af0:	430a      	orrs	r2, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001af6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001af8:	e03c      	b.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001afa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b04:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d108      	bne.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f003 0301 	and.w	r3, r3, #1
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e000      	b.n	8001b28 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001b26:	2300      	movs	r3, #0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d123      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d107      	bne.n	8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	d101      	bne.n	8001b48 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001b48:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d112      	bne.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001b4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b56:	f023 030f 	bic.w	r3, r3, #15
 8001b5a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b5c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b5e:	e009      	b.n	8001b74 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f043 0220 	orr.w	r2, r3, #32
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001b72:	e000      	b.n	8001b76 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b74:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b7e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001b82:	4618      	mov	r0, r3
 8001b84:	3764      	adds	r7, #100	@ 0x64
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	50000100 	.word	0x50000100
 8001b94:	50000400 	.word	0x50000400
 8001b98:	50000500 	.word	0x50000500
 8001b9c:	50000300 	.word	0x50000300
 8001ba0:	50000700 	.word	0x50000700

08001ba4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb0:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bb6:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d126      	bne.n	8001c0c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d115      	bne.n	8001c04 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d111      	bne.n	8001c04 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d105      	bne.n	8001c04 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfc:	f043 0201 	orr.w	r2, r3, #1
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff f8d7 	bl	8000db8 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c0a:	e004      	b.n	8001c16 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	4798      	blx	r3
}
 8001c16:	bf00      	nop
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b084      	sub	sp, #16
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c2a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f7ff f8cd 	bl	8000dcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001c32:	bf00      	nop
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b084      	sub	sp, #16
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c46:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c58:	f043 0204 	orr.w	r2, r3, #4
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f7ff f8bd 	bl	8000de0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c66:	bf00      	nop
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f003 0303 	and.w	r3, r3, #3
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d108      	bne.n	8001c9c <ADC_Enable+0x2c>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d101      	bne.n	8001c9c <ADC_Enable+0x2c>
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e000      	b.n	8001c9e <ADC_Enable+0x2e>
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d143      	bne.n	8001d2a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	4b22      	ldr	r3, [pc, #136]	@ (8001d34 <ADC_Enable+0xc4>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00d      	beq.n	8001ccc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	f043 0210 	orr.w	r2, r3, #16
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc0:	f043 0201 	orr.w	r2, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e02f      	b.n	8001d2c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001cdc:	f7ff f83c 	bl	8000d58 <HAL_GetTick>
 8001ce0:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ce2:	e01b      	b.n	8001d1c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ce4:	f7ff f838 	bl	8000d58 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d914      	bls.n	8001d1c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0301 	and.w	r3, r3, #1
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d00d      	beq.n	8001d1c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d04:	f043 0210 	orr.w	r2, r3, #16
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d10:	f043 0201 	orr.w	r2, r3, #1
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e007      	b.n	8001d2c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0301 	and.w	r3, r3, #1
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d1dc      	bne.n	8001ce4 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	8000003f 	.word	0x8000003f

08001d38 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <ADC_Disable+0x2c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <ADC_Disable+0x2c>
 8001d60:	2301      	movs	r3, #1
 8001d62:	e000      	b.n	8001d66 <ADC_Disable+0x2e>
 8001d64:	2300      	movs	r3, #0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d047      	beq.n	8001dfa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030d 	and.w	r3, r3, #13
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d10f      	bne.n	8001d98 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f042 0202 	orr.w	r2, r2, #2
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	2203      	movs	r2, #3
 8001d8e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d90:	f7fe ffe2 	bl	8000d58 <HAL_GetTick>
 8001d94:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d96:	e029      	b.n	8001dec <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d9c:	f043 0210 	orr.w	r2, r3, #16
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da8:	f043 0201 	orr.w	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e023      	b.n	8001dfc <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001db4:	f7fe ffd0 	bl	8000d58 <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d914      	bls.n	8001dec <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d10d      	bne.n	8001dec <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f043 0210 	orr.w	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de0:	f043 0201 	orr.w	r2, r3, #1
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e007      	b.n	8001dfc <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d0dc      	beq.n	8001db4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3710      	adds	r7, #16
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	f003 0307 	and.w	r3, r3, #7
 8001e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e14:	4b0c      	ldr	r3, [pc, #48]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e16:	68db      	ldr	r3, [r3, #12]
 8001e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e1a:	68ba      	ldr	r2, [r7, #8]
 8001e1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e20:	4013      	ands	r3, r2
 8001e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e36:	4a04      	ldr	r2, [pc, #16]	@ (8001e48 <__NVIC_SetPriorityGrouping+0x44>)
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	60d3      	str	r3, [r2, #12]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e50:	4b04      	ldr	r3, [pc, #16]	@ (8001e64 <__NVIC_GetPriorityGrouping+0x18>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	f003 0307 	and.w	r3, r3, #7
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00

08001e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	db0b      	blt.n	8001e92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	f003 021f 	and.w	r2, r3, #31
 8001e80:	4907      	ldr	r1, [pc, #28]	@ (8001ea0 <__NVIC_EnableIRQ+0x38>)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	095b      	lsrs	r3, r3, #5
 8001e88:	2001      	movs	r0, #1
 8001e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	e000e100 	.word	0xe000e100

08001ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6039      	str	r1, [r7, #0]
 8001eae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	db0a      	blt.n	8001ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	490c      	ldr	r1, [pc, #48]	@ (8001ef0 <__NVIC_SetPriority+0x4c>)
 8001ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec2:	0112      	lsls	r2, r2, #4
 8001ec4:	b2d2      	uxtb	r2, r2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ecc:	e00a      	b.n	8001ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	b2da      	uxtb	r2, r3
 8001ed2:	4908      	ldr	r1, [pc, #32]	@ (8001ef4 <__NVIC_SetPriority+0x50>)
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	3b04      	subs	r3, #4
 8001edc:	0112      	lsls	r2, r2, #4
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	440b      	add	r3, r1
 8001ee2:	761a      	strb	r2, [r3, #24]
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	e000e100 	.word	0xe000e100
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b089      	sub	sp, #36	@ 0x24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	60f8      	str	r0, [r7, #12]
 8001f00:	60b9      	str	r1, [r7, #8]
 8001f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 0307 	and.w	r3, r3, #7
 8001f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f1c3 0307 	rsb	r3, r3, #7
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	bf28      	it	cs
 8001f16:	2304      	movcs	r3, #4
 8001f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2b06      	cmp	r3, #6
 8001f20:	d902      	bls.n	8001f28 <NVIC_EncodePriority+0x30>
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	3b03      	subs	r3, #3
 8001f26:	e000      	b.n	8001f2a <NVIC_EncodePriority+0x32>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f30:	69bb      	ldr	r3, [r7, #24]
 8001f32:	fa02 f303 	lsl.w	r3, r2, r3
 8001f36:	43da      	mvns	r2, r3
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	401a      	ands	r2, r3
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	43d9      	mvns	r1, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	4313      	orrs	r3, r2
         );
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	@ 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
	...

08001f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	3b01      	subs	r3, #1
 8001f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f70:	d301      	bcc.n	8001f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00f      	b.n	8001f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f76:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f7e:	210f      	movs	r1, #15
 8001f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f84:	f7ff ff8e 	bl	8001ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f88:	4b05      	ldr	r3, [pc, #20]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <SysTick_Config+0x40>)
 8001f90:	2207      	movs	r2, #7
 8001f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	e000e010 	.word	0xe000e010

08001fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	f7ff ff29 	bl	8001e04 <__NVIC_SetPriorityGrouping>
}
 8001fb2:	bf00      	nop
 8001fb4:	3708      	adds	r7, #8
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b086      	sub	sp, #24
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	60b9      	str	r1, [r7, #8]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fcc:	f7ff ff3e 	bl	8001e4c <__NVIC_GetPriorityGrouping>
 8001fd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68b9      	ldr	r1, [r7, #8]
 8001fd6:	6978      	ldr	r0, [r7, #20]
 8001fd8:	f7ff ff8e 	bl	8001ef8 <NVIC_EncodePriority>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe2:	4611      	mov	r1, r2
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff5d 	bl	8001ea4 <__NVIC_SetPriority>
}
 8001fea:	bf00      	nop
 8001fec:	3718      	adds	r7, #24
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff ff31 	bl	8001e68 <__NVIC_EnableIRQ>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	b082      	sub	sp, #8
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7ff ffa2 	bl	8001f60 <SysTick_Config>
 800201c:	4603      	mov	r3, r0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b084      	sub	sp, #16
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d101      	bne.n	800203c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e037      	b.n	80020ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2202      	movs	r2, #2
 8002040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002052:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002056:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002080:	68fa      	ldr	r2, [r7, #12]
 8002082:	4313      	orrs	r3, r2
 8002084:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f940 	bl	8002314 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2200      	movs	r2, #0
 8002098:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d101      	bne.n	80020d4 <HAL_DMA_Start_IT+0x20>
 80020d0:	2302      	movs	r3, #2
 80020d2:	e04a      	b.n	800216a <HAL_DMA_Start_IT+0xb6>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2201      	movs	r2, #1
 80020d8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d13a      	bne.n	800215c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f022 0201 	bic.w	r2, r2, #1
 8002102:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	68b9      	ldr	r1, [r7, #8]
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 f8d4 	bl	80022b8 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f042 020e 	orr.w	r2, r2, #14
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	e00f      	b.n	800214a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f042 020a 	orr.w	r2, r2, #10
 8002138:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0204 	bic.w	r2, r2, #4
 8002148:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f042 0201 	orr.w	r2, r2, #1
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	e005      	b.n	8002168 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002164:	2302      	movs	r3, #2
 8002166:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002168:	7dfb      	ldrb	r3, [r7, #23]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	2204      	movs	r2, #4
 8002190:	409a      	lsls	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d024      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x72>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d01f      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0320 	and.w	r3, r3, #32
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d107      	bne.n	80021c2 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0204 	bic.w	r2, r2, #4
 80021c0:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ca:	2104      	movs	r1, #4
 80021cc:	fa01 f202 	lsl.w	r2, r1, r2
 80021d0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d06a      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80021e2:	e065      	b.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e8:	2202      	movs	r2, #2
 80021ea:	409a      	lsls	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d02c      	beq.n	800224e <HAL_DMA_IRQHandler+0xdc>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	f003 0302 	and.w	r3, r3, #2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d027      	beq.n	800224e <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0320 	and.w	r3, r3, #32
 8002208:	2b00      	cmp	r3, #0
 800220a:	d10b      	bne.n	8002224 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 020a 	bic.w	r2, r2, #10
 800221a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	2102      	movs	r1, #2
 800222e:	fa01 f202 	lsl.w	r2, r1, r2
 8002232:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002240:	2b00      	cmp	r3, #0
 8002242:	d035      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800224c:	e030      	b.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002252:	2208      	movs	r2, #8
 8002254:	409a      	lsls	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4013      	ands	r3, r2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d028      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	f003 0308 	and.w	r3, r3, #8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f022 020e 	bic.w	r2, r2, #14
 8002276:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002280:	2101      	movs	r1, #1
 8002282:	fa01 f202 	lsl.w	r2, r1, r2
 8002286:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2201      	movs	r2, #1
 8002292:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
    }
  }
}
 80022ae:	e7ff      	b.n	80022b0 <HAL_DMA_IRQHandler+0x13e>
 80022b0:	bf00      	nop
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ce:	2101      	movs	r1, #1
 80022d0:	fa01 f202 	lsl.w	r2, r1, r2
 80022d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	683a      	ldr	r2, [r7, #0]
 80022dc:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b10      	cmp	r3, #16
 80022e4:	d108      	bne.n	80022f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	687a      	ldr	r2, [r7, #4]
 80022ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68ba      	ldr	r2, [r7, #8]
 80022f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80022f6:	e007      	b.n	8002308 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	60da      	str	r2, [r3, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	4b14      	ldr	r3, [pc, #80]	@ (8002374 <DMA_CalcBaseAndBitshift+0x60>)
 8002324:	429a      	cmp	r2, r3
 8002326:	d80f      	bhi.n	8002348 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	4b12      	ldr	r3, [pc, #72]	@ (8002378 <DMA_CalcBaseAndBitshift+0x64>)
 8002330:	4413      	add	r3, r2
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <DMA_CalcBaseAndBitshift+0x68>)
 8002334:	fba2 2303 	umull	r2, r3, r2, r3
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	009a      	lsls	r2, r3, #2
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a0f      	ldr	r2, [pc, #60]	@ (8002380 <DMA_CalcBaseAndBitshift+0x6c>)
 8002344:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002346:	e00e      	b.n	8002366 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <DMA_CalcBaseAndBitshift+0x70>)
 8002350:	4413      	add	r3, r2
 8002352:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <DMA_CalcBaseAndBitshift+0x68>)
 8002354:	fba2 2303 	umull	r2, r3, r2, r3
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	009a      	lsls	r2, r3, #2
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	4a09      	ldr	r2, [pc, #36]	@ (8002388 <DMA_CalcBaseAndBitshift+0x74>)
 8002364:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40020407 	.word	0x40020407
 8002378:	bffdfff8 	.word	0xbffdfff8
 800237c:	cccccccd 	.word	0xcccccccd
 8002380:	40020000 	.word	0x40020000
 8002384:	bffdfbf8 	.word	0xbffdfbf8
 8002388:	40020400 	.word	0x40020400

0800238c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	e154      	b.n	8002646 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8146 	beq.w	8002640 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d005      	beq.n	80023cc <HAL_GPIO_Init+0x40>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d130      	bne.n	800242e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002402:	2201      	movs	r2, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 0201 	and.w	r2, r3, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d017      	beq.n	800246a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	693a      	ldr	r2, [r7, #16]
 8002468:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d123      	bne.n	80024be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	08da      	lsrs	r2, r3, #3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	3208      	adds	r2, #8
 800247e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002482:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	220f      	movs	r2, #15
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43db      	mvns	r3, r3
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	4013      	ands	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	691a      	ldr	r2, [r3, #16]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	f003 0307 	and.w	r3, r3, #7
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	08da      	lsrs	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3208      	adds	r2, #8
 80024b8:	6939      	ldr	r1, [r7, #16]
 80024ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	2203      	movs	r2, #3
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43db      	mvns	r3, r3
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	4013      	ands	r3, r2
 80024d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0203 	and.w	r2, r3, #3
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80a0 	beq.w	8002640 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002500:	4b58      	ldr	r3, [pc, #352]	@ (8002664 <HAL_GPIO_Init+0x2d8>)
 8002502:	699b      	ldr	r3, [r3, #24]
 8002504:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <HAL_GPIO_Init+0x2d8>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	6193      	str	r3, [r2, #24]
 800250c:	4b55      	ldr	r3, [pc, #340]	@ (8002664 <HAL_GPIO_Init+0x2d8>)
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	60bb      	str	r3, [r7, #8]
 8002516:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002518:	4a53      	ldr	r2, [pc, #332]	@ (8002668 <HAL_GPIO_Init+0x2dc>)
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	089b      	lsrs	r3, r3, #2
 800251e:	3302      	adds	r3, #2
 8002520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	4013      	ands	r3, r2
 800253a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002542:	d019      	beq.n	8002578 <HAL_GPIO_Init+0x1ec>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a49      	ldr	r2, [pc, #292]	@ (800266c <HAL_GPIO_Init+0x2e0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d013      	beq.n	8002574 <HAL_GPIO_Init+0x1e8>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a48      	ldr	r2, [pc, #288]	@ (8002670 <HAL_GPIO_Init+0x2e4>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d00d      	beq.n	8002570 <HAL_GPIO_Init+0x1e4>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a47      	ldr	r2, [pc, #284]	@ (8002674 <HAL_GPIO_Init+0x2e8>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d007      	beq.n	800256c <HAL_GPIO_Init+0x1e0>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	4a46      	ldr	r2, [pc, #280]	@ (8002678 <HAL_GPIO_Init+0x2ec>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d101      	bne.n	8002568 <HAL_GPIO_Init+0x1dc>
 8002564:	2304      	movs	r3, #4
 8002566:	e008      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002568:	2305      	movs	r3, #5
 800256a:	e006      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 800256c:	2303      	movs	r3, #3
 800256e:	e004      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002570:	2302      	movs	r3, #2
 8002572:	e002      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002574:	2301      	movs	r3, #1
 8002576:	e000      	b.n	800257a <HAL_GPIO_Init+0x1ee>
 8002578:	2300      	movs	r3, #0
 800257a:	697a      	ldr	r2, [r7, #20]
 800257c:	f002 0203 	and.w	r2, r2, #3
 8002580:	0092      	lsls	r2, r2, #2
 8002582:	4093      	lsls	r3, r2
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	4313      	orrs	r3, r2
 8002588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800258a:	4937      	ldr	r1, [pc, #220]	@ (8002668 <HAL_GPIO_Init+0x2dc>)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	089b      	lsrs	r3, r3, #2
 8002590:	3302      	adds	r3, #2
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002598:	4b38      	ldr	r3, [pc, #224]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	43db      	mvns	r3, r3
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4013      	ands	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d003      	beq.n	80025bc <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025bc:	4a2f      	ldr	r2, [pc, #188]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c2:	4b2e      	ldr	r3, [pc, #184]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	43db      	mvns	r3, r3
 80025cc:	693a      	ldr	r2, [r7, #16]
 80025ce:	4013      	ands	r3, r2
 80025d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80025de:	693a      	ldr	r2, [r7, #16]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80025e6:	4a25      	ldr	r2, [pc, #148]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	693a      	ldr	r2, [r7, #16]
 80025f8:	4013      	ands	r3, r2
 80025fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4313      	orrs	r3, r2
 800260e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002610:	4a1a      	ldr	r2, [pc, #104]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	43db      	mvns	r3, r3
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	4013      	ands	r3, r2
 8002624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002632:	693a      	ldr	r2, [r7, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800263a:	4a10      	ldr	r2, [pc, #64]	@ (800267c <HAL_GPIO_Init+0x2f0>)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3301      	adds	r3, #1
 8002644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	fa22 f303 	lsr.w	r3, r2, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f aea3 	bne.w	800239c <HAL_GPIO_Init+0x10>
  }
}
 8002656:	bf00      	nop
 8002658:	bf00      	nop
 800265a:	371c      	adds	r7, #28
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	40021000 	.word	0x40021000
 8002668:	40010000 	.word	0x40010000
 800266c:	48000400 	.word	0x48000400
 8002670:	48000800 	.word	0x48000800
 8002674:	48000c00 	.word	0x48000c00
 8002678:	48001000 	.word	0x48001000
 800267c:	40010400 	.word	0x40010400

08002680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	460b      	mov	r3, r1
 800268a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691a      	ldr	r2, [r3, #16]
 8002690:	887b      	ldrh	r3, [r7, #2]
 8002692:	4013      	ands	r3, r2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d002      	beq.n	800269e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002698:	2301      	movs	r3, #1
 800269a:	73fb      	strb	r3, [r7, #15]
 800269c:	e001      	b.n	80026a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800269e:	2300      	movs	r3, #0
 80026a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026cc:	e002      	b.n	80026d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026ce:	887a      	ldrh	r2, [r7, #2]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026ea:	4b08      	ldr	r3, [pc, #32]	@ (800270c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026ec:	695a      	ldr	r2, [r3, #20]
 80026ee:	88fb      	ldrh	r3, [r7, #6]
 80026f0:	4013      	ands	r3, r2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d006      	beq.n	8002704 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026f6:	4a05      	ldr	r2, [pc, #20]	@ (800270c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026fc:	88fb      	ldrh	r3, [r7, #6]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd fd62 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	40010400 	.word	0x40010400

08002710 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e08d      	b.n	800283e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe f9b2 	bl	8000aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	@ 0x24
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f022 0201 	bic.w	r2, r2, #1
 8002752:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685a      	ldr	r2, [r3, #4]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002760:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002770:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d107      	bne.n	800278a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689a      	ldr	r2, [r3, #8]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	e006      	b.n	8002798 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002796:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	2b02      	cmp	r3, #2
 800279e:	d108      	bne.n	80027b2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ae:	605a      	str	r2, [r3, #4]
 80027b0:	e007      	b.n	80027c2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027d4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80027e4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695b      	ldr	r3, [r3, #20]
 80027ee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	699b      	ldr	r3, [r3, #24]
 80027f6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	430a      	orrs	r2, r1
 80027fe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	69d9      	ldr	r1, [r3, #28]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a1a      	ldr	r2, [r3, #32]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	430a      	orrs	r2, r1
 800280e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f042 0201 	orr.w	r2, r2, #1
 800281e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2220      	movs	r2, #32
 800282a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b20      	cmp	r3, #32
 800285a:	d138      	bne.n	80028ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002866:	2302      	movs	r3, #2
 8002868:	e032      	b.n	80028d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2201      	movs	r2, #1
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2224      	movs	r2, #36	@ 0x24
 8002876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f022 0201 	bic.w	r2, r2, #1
 8002888:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002898:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6819      	ldr	r1, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f042 0201 	orr.w	r2, r2, #1
 80028b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ca:	2300      	movs	r3, #0
 80028cc:	e000      	b.n	80028d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028ce:	2302      	movs	r3, #2
  }
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d139      	bne.n	8002966 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d101      	bne.n	8002900 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80028fc:	2302      	movs	r3, #2
 80028fe:	e033      	b.n	8002968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681a      	ldr	r2, [r3, #0]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f022 0201 	bic.w	r2, r2, #1
 800291e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800292e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	021b      	lsls	r3, r3, #8
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68fa      	ldr	r2, [r7, #12]
 8002940:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f042 0201 	orr.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2220      	movs	r2, #32
 8002956:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	e000      	b.n	8002968 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002966:	2302      	movs	r3, #2
  }
}
 8002968:	4618      	mov	r0, r3
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d101      	bne.n	8002986 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e0b9      	b.n	8002afa <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 800298c:	b2db      	uxtb	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f007 f80e 	bl	80099bc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2203      	movs	r2, #3
 80029a4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f003 f868 	bl	8005a82 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	73fb      	strb	r3, [r7, #15]
 80029b6:	e03e      	b.n	8002a36 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029b8:	7bfa      	ldrb	r2, [r7, #15]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	4413      	add	r3, r2
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	440b      	add	r3, r1
 80029c6:	3311      	adds	r3, #17
 80029c8:	2201      	movs	r2, #1
 80029ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029cc:	7bfa      	ldrb	r2, [r7, #15]
 80029ce:	6879      	ldr	r1, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	00db      	lsls	r3, r3, #3
 80029d8:	440b      	add	r3, r1
 80029da:	3310      	adds	r3, #16
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029e0:	7bfa      	ldrb	r2, [r7, #15]
 80029e2:	6879      	ldr	r1, [r7, #4]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	3313      	adds	r3, #19
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80029f4:	7bfa      	ldrb	r2, [r7, #15]
 80029f6:	6879      	ldr	r1, [r7, #4]
 80029f8:	4613      	mov	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	00db      	lsls	r3, r3, #3
 8002a00:	440b      	add	r3, r1
 8002a02:	3320      	adds	r3, #32
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a08:	7bfa      	ldrb	r2, [r7, #15]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	440b      	add	r3, r1
 8002a16:	3324      	adds	r3, #36	@ 0x24
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	440b      	add	r3, r1
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
 8002a32:	3301      	adds	r3, #1
 8002a34:	73fb      	strb	r3, [r7, #15]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	791b      	ldrb	r3, [r3, #4]
 8002a3a:	7bfa      	ldrb	r2, [r7, #15]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d3bb      	bcc.n	80029b8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a40:	2300      	movs	r3, #0
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	e044      	b.n	8002ad0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a46:	7bfa      	ldrb	r2, [r7, #15]
 8002a48:	6879      	ldr	r1, [r7, #4]
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	440b      	add	r3, r1
 8002a54:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a5c:	7bfa      	ldrb	r2, [r7, #15]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a6e:	7bfa      	ldrb	r2, [r7, #15]
 8002a70:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a72:	7bfa      	ldrb	r2, [r7, #15]
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	440b      	add	r3, r1
 8002a80:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a88:	7bfa      	ldrb	r2, [r7, #15]
 8002a8a:	6879      	ldr	r1, [r7, #4]
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	00db      	lsls	r3, r3, #3
 8002a94:	440b      	add	r3, r1
 8002a96:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a9e:	7bfa      	ldrb	r2, [r7, #15]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	440b      	add	r3, r1
 8002aac:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ab4:	7bfa      	ldrb	r2, [r7, #15]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	440b      	add	r3, r1
 8002ac2:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aca:	7bfb      	ldrb	r3, [r7, #15]
 8002acc:	3301      	adds	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	791b      	ldrb	r3, [r3, #4]
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d3b5      	bcc.n	8002a46 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6818      	ldr	r0, [r3, #0]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3304      	adds	r3, #4
 8002ae2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002ae6:	f002 ffe7 	bl	8005ab8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b082      	sub	sp, #8
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b10:	2b01      	cmp	r3, #1
 8002b12:	d101      	bne.n	8002b18 <HAL_PCD_Start+0x16>
 8002b14:	2302      	movs	r3, #2
 8002b16:	e016      	b.n	8002b46 <HAL_PCD_Start+0x44>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f002 ff95 	bl	8005a54 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f007 f9c5 	bl	8009ebc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f005 fa52 	bl	8007fe0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b084      	sub	sp, #16
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 fa4b 	bl	8007ff6 <USB_ReadInterrupts>
 8002b60:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f000 fa99 	bl	80030a4 <PCD_EP_ISR_Handler>

    return;
 8002b72:	e0bd      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d013      	beq.n	8002ba6 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b90:	b292      	uxth	r2, r2
 8002b92:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f006 ffb1 	bl	8009afe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 f8a9 	bl	8002cf6 <HAL_PCD_SetAddress>

    return;
 8002ba4:	e0a4      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00c      	beq.n	8002bca <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bc8:	e092      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002be6:	b292      	uxth	r2, r2
 8002be8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bec:	e080      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d027      	beq.n	8002c48 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0204 	bic.w	r2, r2, #4
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 0208 	bic.w	r2, r2, #8
 8002c22:	b292      	uxth	r2, r2
 8002c24:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f006 ffa1 	bl	8009b70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c40:	b292      	uxth	r2, r2
 8002c42:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c46:	e053      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d027      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0208 	orr.w	r2, r2, #8
 8002c64:	b292      	uxth	r2, r2
 8002c66:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c72:	b29a      	uxth	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c7c:	b292      	uxth	r2, r2
 8002c7e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f042 0204 	orr.w	r2, r2, #4
 8002c94:	b292      	uxth	r2, r2
 8002c96:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f006 ff4e 	bl	8009b3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002ca0:	e026      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00f      	beq.n	8002ccc <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002cbe:	b292      	uxth	r2, r2
 8002cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f006 ff0c 	bl	8009ae2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cca:	e011      	b.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00c      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ce8:	b292      	uxth	r2, r2
 8002cea:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002cee:	bf00      	nop
  }
}
 8002cf0:	3710      	adds	r7, #16
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_PCD_SetAddress+0x1a>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e012      	b.n	8002d36 <HAL_PCD_SetAddress+0x40>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	78fa      	ldrb	r2, [r7, #3]
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f005 f946 	bl	8007fb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	4608      	mov	r0, r1
 8002d48:	4611      	mov	r1, r2
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	70fb      	strb	r3, [r7, #3]
 8002d50:	460b      	mov	r3, r1
 8002d52:	803b      	strh	r3, [r7, #0]
 8002d54:	4613      	mov	r3, r2
 8002d56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	da0e      	bge.n	8002d82 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 0207 	and.w	r2, r3, #7
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	3310      	adds	r3, #16
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	4413      	add	r3, r2
 8002d78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	705a      	strb	r2, [r3, #1]
 8002d80:	e00e      	b.n	8002da0 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d82:	78fb      	ldrb	r3, [r7, #3]
 8002d84:	f003 0207 	and.w	r2, r3, #7
 8002d88:	4613      	mov	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	4413      	add	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	4413      	add	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dac:	883a      	ldrh	r2, [r7, #0]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	78ba      	ldrb	r2, [r7, #2]
 8002db6:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002db8:	78bb      	ldrb	r3, [r7, #2]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d102      	bne.n	8002dc4 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d101      	bne.n	8002dd2 <HAL_PCD_EP_Open+0x94>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e00e      	b.n	8002df0 <HAL_PCD_EP_Open+0xb2>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68f9      	ldr	r1, [r7, #12]
 8002de0:	4618      	mov	r0, r3
 8002de2:	f002 fe87 	bl	8005af4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002dee:	7afb      	ldrb	r3, [r7, #11]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	da0e      	bge.n	8002e2a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	f003 0207 	and.w	r2, r3, #7
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	3310      	adds	r3, #16
 8002e1c:	687a      	ldr	r2, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	705a      	strb	r2, [r3, #1]
 8002e28:	e00e      	b.n	8002e48 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e2a:	78fb      	ldrb	r3, [r7, #3]
 8002e2c:	f003 0207 	and.w	r2, r3, #7
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	00db      	lsls	r3, r3, #3
 8002e38:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	4413      	add	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_PCD_EP_Close+0x6a>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e00e      	b.n	8002e80 <HAL_PCD_EP_Close+0x88>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	68f9      	ldr	r1, [r7, #12]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f003 fa03 	bl	800627c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b086      	sub	sp, #24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	603b      	str	r3, [r7, #0]
 8002e94:	460b      	mov	r3, r1
 8002e96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e98:	7afb      	ldrb	r3, [r7, #11]
 8002e9a:	f003 0207 	and.w	r2, r3, #7
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec8:	7afb      	ldrb	r3, [r7, #11]
 8002eca:	f003 0307 	and.w	r3, r3, #7
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 fbbb 	bl	8006656 <USB_EPStartXfer>

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	60f8      	str	r0, [r7, #12]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 0207 	and.w	r2, r3, #7
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	3310      	adds	r3, #16
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002f1c:	697b      	ldr	r3, [r7, #20]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	2201      	movs	r2, #1
 8002f34:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f36:	7afb      	ldrb	r3, [r7, #11]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6979      	ldr	r1, [r7, #20]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f003 fb84 	bl	8006656 <USB_EPStartXfer>

  return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	460b      	mov	r3, r1
 8002f62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f64:	78fb      	ldrb	r3, [r7, #3]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	7912      	ldrb	r2, [r2, #4]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d901      	bls.n	8002f76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e03e      	b.n	8002ff4 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	da0e      	bge.n	8002f9c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7e:	78fb      	ldrb	r3, [r7, #3]
 8002f80:	f003 0207 	and.w	r2, r3, #7
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	00db      	lsls	r3, r3, #3
 8002f8c:	3310      	adds	r3, #16
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	4413      	add	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	705a      	strb	r2, [r3, #1]
 8002f9a:	e00c      	b.n	8002fb6 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9c:	78fa      	ldrb	r2, [r7, #3]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 0307 	and.w	r3, r3, #7
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_EP_SetStall+0x7e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e00e      	b.n	8002ff4 <HAL_PCD_EP_SetStall+0x9c>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f004 fee8 	bl	8007dba <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	460b      	mov	r3, r1
 8003006:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	f003 030f 	and.w	r3, r3, #15
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	7912      	ldrb	r2, [r2, #4]
 8003012:	4293      	cmp	r3, r2
 8003014:	d901      	bls.n	800301a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e040      	b.n	800309c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800301a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800301e:	2b00      	cmp	r3, #0
 8003020:	da0e      	bge.n	8003040 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 0207 	and.w	r2, r3, #7
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	3310      	adds	r3, #16
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4413      	add	r3, r2
 8003036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	705a      	strb	r2, [r3, #1]
 800303e:	e00e      	b.n	800305e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	f003 0207 	and.w	r2, r3, #7
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2200      	movs	r2, #0
 800305c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0307 	and.w	r3, r3, #7
 800306a:	b2da      	uxtb	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003076:	2b01      	cmp	r3, #1
 8003078:	d101      	bne.n	800307e <HAL_PCD_EP_ClrStall+0x82>
 800307a:	2302      	movs	r3, #2
 800307c:	e00e      	b.n	800309c <HAL_PCD_EP_ClrStall+0xa0>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2201      	movs	r2, #1
 8003082:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68f9      	ldr	r1, [r7, #12]
 800308c:	4618      	mov	r0, r3
 800308e:	f004 fee5 	bl	8007e5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 800309a:	2300      	movs	r3, #0
}
 800309c:	4618      	mov	r0, r3
 800309e:	3710      	adds	r7, #16
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b096      	sub	sp, #88	@ 0x58
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030ac:	e3bb      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030b6:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030ba:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 030f 	and.w	r3, r3, #15
 80030c4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80030c8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8175 	bne.w	80033bc <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80030d6:	f003 0310 	and.w	r3, r3, #16
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d14e      	bne.n	800317c <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	881b      	ldrh	r3, [r3, #0]
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80030ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030ee:	81fb      	strh	r3, [r7, #14]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	89fb      	ldrh	r3, [r7, #14]
 80030f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80030fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80030fe:	b29b      	uxth	r3, r3
 8003100:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3310      	adds	r3, #16
 8003106:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003110:	b29b      	uxth	r3, r3
 8003112:	461a      	mov	r2, r3
 8003114:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	3302      	adds	r3, #2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6812      	ldr	r2, [r2, #0]
 8003124:	4413      	add	r3, r2
 8003126:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800312a:	881b      	ldrh	r3, [r3, #0]
 800312c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003132:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003134:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003136:	695a      	ldr	r2, [r3, #20]
 8003138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	441a      	add	r2, r3
 800313e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003140:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003142:	2100      	movs	r1, #0
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f006 fcb2 	bl	8009aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	7b1b      	ldrb	r3, [r3, #12]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b00      	cmp	r3, #0
 8003152:	f000 8368 	beq.w	8003826 <PCD_EP_ISR_Handler+0x782>
 8003156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b00      	cmp	r3, #0
 800315c:	f040 8363 	bne.w	8003826 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7b1b      	ldrb	r3, [r3, #12]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800316a:	b2da      	uxtb	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	731a      	strb	r2, [r3, #12]
 800317a:	e354      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003182:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800318e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003196:	2b00      	cmp	r3, #0
 8003198:	d034      	beq.n	8003204 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	4413      	add	r3, r2
 80031ae:	3306      	adds	r3, #6
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	6812      	ldr	r2, [r2, #0]
 80031b6:	4413      	add	r3, r2
 80031b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80031d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f004 ff62 	bl	80080a2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031ea:	4013      	ands	r3, r2
 80031ec:	823b      	strh	r3, [r7, #16]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	8a3a      	ldrh	r2, [r7, #16]
 80031f4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031f8:	b292      	uxth	r2, r2
 80031fa:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f006 fc29 	bl	8009a54 <HAL_PCD_SetupStageCallback>
 8003202:	e310      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003204:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003208:	2b00      	cmp	r3, #0
 800320a:	f280 830c 	bge.w	8003826 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	b29a      	uxth	r2, r3
 8003216:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800321a:	4013      	ands	r3, r2
 800321c:	83fb      	strh	r3, [r7, #30]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	8bfa      	ldrh	r2, [r7, #30]
 8003224:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003228:	b292      	uxth	r2, r2
 800322a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003234:	b29b      	uxth	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	3306      	adds	r3, #6
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800324e:	881b      	ldrh	r3, [r3, #0]
 8003250:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003254:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003256:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325a:	69db      	ldr	r3, [r3, #28]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d019      	beq.n	8003294 <PCD_EP_ISR_Handler+0x1f0>
 8003260:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d015      	beq.n	8003294 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6818      	ldr	r0, [r3, #0]
 800326c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800326e:	6959      	ldr	r1, [r3, #20]
 8003270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003272:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003276:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003278:	b29b      	uxth	r3, r3
 800327a:	f004 ff12 	bl	80080a2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800327e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	441a      	add	r2, r3
 8003288:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800328a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800328c:	2100      	movs	r1, #0
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f006 fbf2 	bl	8009a78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800329e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	f040 82bd 	bne.w	8003826 <PCD_EP_ISR_Handler+0x782>
 80032ac:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032b0:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032b8:	f000 82b5 	beq.w	8003826 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	4413      	add	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032da:	617b      	str	r3, [r7, #20]
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	881b      	ldrh	r3, [r3, #0]
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032e6:	b29a      	uxth	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	801a      	strh	r2, [r3, #0]
 80032ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ee:	691b      	ldr	r3, [r3, #16]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10a      	bne.n	800330a <PCD_EP_ISR_Handler+0x266>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	881b      	ldrh	r3, [r3, #0]
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80032fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003302:	b29a      	uxth	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	801a      	strh	r2, [r3, #0]
 8003308:	e039      	b.n	800337e <PCD_EP_ISR_Handler+0x2da>
 800330a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	2b3e      	cmp	r3, #62	@ 0x3e
 8003310:	d818      	bhi.n	8003344 <PCD_EP_ISR_Handler+0x2a0>
 8003312:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	085b      	lsrs	r3, r3, #1
 8003318:	647b      	str	r3, [r7, #68]	@ 0x44
 800331a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <PCD_EP_ISR_Handler+0x288>
 8003326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003328:	3301      	adds	r3, #1
 800332a:	647b      	str	r3, [r7, #68]	@ 0x44
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	881b      	ldrh	r3, [r3, #0]
 8003330:	b29a      	uxth	r2, r3
 8003332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003334:	b29b      	uxth	r3, r3
 8003336:	029b      	lsls	r3, r3, #10
 8003338:	b29b      	uxth	r3, r3
 800333a:	4313      	orrs	r3, r2
 800333c:	b29a      	uxth	r2, r3
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	801a      	strh	r2, [r3, #0]
 8003342:	e01c      	b.n	800337e <PCD_EP_ISR_Handler+0x2da>
 8003344:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	095b      	lsrs	r3, r3, #5
 800334a:	647b      	str	r3, [r7, #68]	@ 0x44
 800334c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2b00      	cmp	r3, #0
 8003356:	d102      	bne.n	800335e <PCD_EP_ISR_Handler+0x2ba>
 8003358:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800335a:	3b01      	subs	r3, #1
 800335c:	647b      	str	r3, [r7, #68]	@ 0x44
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29a      	uxth	r2, r3
 8003364:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003366:	b29b      	uxth	r3, r3
 8003368:	029b      	lsls	r3, r3, #10
 800336a:	b29b      	uxth	r3, r3
 800336c:	4313      	orrs	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003378:	b29a      	uxth	r2, r3
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	881b      	ldrh	r3, [r3, #0]
 8003384:	b29b      	uxth	r3, r3
 8003386:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800338a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800338e:	827b      	strh	r3, [r7, #18]
 8003390:	8a7b      	ldrh	r3, [r7, #18]
 8003392:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003396:	827b      	strh	r3, [r7, #18]
 8003398:	8a7b      	ldrh	r3, [r7, #18]
 800339a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800339e:	827b      	strh	r3, [r7, #18]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	8a7b      	ldrh	r3, [r7, #18]
 80033a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	8013      	strh	r3, [r2, #0]
 80033ba:	e234      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033d0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f280 80fc 	bge.w	80035d2 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	881b      	ldrh	r3, [r3, #0]
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80033f0:	4013      	ands	r3, r2
 80033f2:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	461a      	mov	r2, r3
 80033fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003408:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800340c:	b292      	uxth	r2, r2
 800340e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003410:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	4413      	add	r3, r2
 8003424:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003426:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003428:	7b1b      	ldrb	r3, [r3, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d125      	bne.n	800347a <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003436:	b29b      	uxth	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	4413      	add	r3, r2
 8003442:	3306      	adds	r3, #6
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	6812      	ldr	r2, [r2, #0]
 800344a:	4413      	add	r3, r2
 800344c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003450:	881b      	ldrh	r3, [r3, #0]
 8003452:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003456:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800345a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800345e:	2b00      	cmp	r3, #0
 8003460:	f000 8092 	beq.w	8003588 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6818      	ldr	r0, [r3, #0]
 8003468:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346a:	6959      	ldr	r1, [r3, #20]
 800346c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346e:	88da      	ldrh	r2, [r3, #6]
 8003470:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003474:	f004 fe15 	bl	80080a2 <USB_ReadPMA>
 8003478:	e086      	b.n	8003588 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800347a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800347c:	78db      	ldrb	r3, [r3, #3]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d10a      	bne.n	8003498 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003482:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003486:	461a      	mov	r2, r3
 8003488:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9d9 	bl	8003842 <HAL_PCD_EP_DB_Receive>
 8003490:	4603      	mov	r3, r0
 8003492:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003496:	e077      	b.n	8003588 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	461a      	mov	r2, r3
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	4413      	add	r3, r2
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034b2:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	441a      	add	r2, r3
 80034c4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80034c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034d8:	b29b      	uxth	r3, r3
 80034da:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	881b      	ldrh	r3, [r3, #0]
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d024      	beq.n	8003540 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034fe:	b29b      	uxth	r3, r3
 8003500:	461a      	mov	r2, r3
 8003502:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	00db      	lsls	r3, r3, #3
 8003508:	4413      	add	r3, r2
 800350a:	3302      	adds	r3, #2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	6812      	ldr	r2, [r2, #0]
 8003512:	4413      	add	r3, r2
 8003514:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800351e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003522:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003526:	2b00      	cmp	r3, #0
 8003528:	d02e      	beq.n	8003588 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	6959      	ldr	r1, [r3, #20]
 8003532:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003534:	891a      	ldrh	r2, [r3, #8]
 8003536:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800353a:	f004 fdb2 	bl	80080a2 <USB_ReadPMA>
 800353e:	e023      	b.n	8003588 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	3306      	adds	r3, #6
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003562:	881b      	ldrh	r3, [r3, #0]
 8003564:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003568:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800356c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003570:	2b00      	cmp	r3, #0
 8003572:	d009      	beq.n	8003588 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357a:	6959      	ldr	r1, [r3, #20]
 800357c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357e:	895a      	ldrh	r2, [r3, #10]
 8003580:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003584:	f004 fd8d 	bl	80080a2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003588:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003590:	441a      	add	r2, r3
 8003592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003594:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003596:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003598:	695a      	ldr	r2, [r3, #20]
 800359a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800359e:	441a      	add	r2, r3
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <PCD_EP_ISR_Handler+0x514>
 80035ac:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80035b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d206      	bcs.n	80035c6 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f006 fa5a 	bl	8009a78 <HAL_PCD_DataOutStageCallback>
 80035c4:	e005      	b.n	80035d2 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035cc:	4618      	mov	r0, r3
 80035ce:	f003 f842 	bl	8006656 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035d2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8123 	beq.w	8003826 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80035e0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80035e4:	4613      	mov	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	4413      	add	r3, r2
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	3310      	adds	r3, #16
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	4413      	add	r3, r2
 80035f2:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	461a      	mov	r2, r3
 80035fa:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	881b      	ldrh	r3, [r3, #0]
 8003604:	b29b      	uxth	r3, r3
 8003606:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800360a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800360e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	461a      	mov	r2, r3
 8003618:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	441a      	add	r2, r3
 8003620:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003624:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003628:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800362c:	b29b      	uxth	r3, r3
 800362e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003630:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003632:	78db      	ldrb	r3, [r3, #3]
 8003634:	2b01      	cmp	r3, #1
 8003636:	f040 80a2 	bne.w	800377e <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800363a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363c:	2200      	movs	r2, #0
 800363e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003642:	7b1b      	ldrb	r3, [r3, #12]
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 8093 	beq.w	8003770 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800364a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b00      	cmp	r3, #0
 8003654:	d046      	beq.n	80036e4 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	785b      	ldrb	r3, [r3, #1]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d126      	bne.n	80036ac <PCD_EP_ISR_Handler+0x608>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	627b      	str	r3, [r7, #36]	@ 0x24
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800366c:	b29b      	uxth	r3, r3
 800366e:	461a      	mov	r2, r3
 8003670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003672:	4413      	add	r3, r2
 8003674:	627b      	str	r3, [r7, #36]	@ 0x24
 8003676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	011a      	lsls	r2, r3, #4
 800367c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367e:	4413      	add	r3, r2
 8003680:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003684:	623b      	str	r3, [r7, #32]
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29b      	uxth	r3, r3
 800368c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003690:	b29a      	uxth	r2, r3
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	801a      	strh	r2, [r3, #0]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	881b      	ldrh	r3, [r3, #0]
 800369a:	b29b      	uxth	r3, r3
 800369c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a4:	b29a      	uxth	r2, r3
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	801a      	strh	r2, [r3, #0]
 80036aa:	e061      	b.n	8003770 <PCD_EP_ISR_Handler+0x6cc>
 80036ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ae:	785b      	ldrb	r3, [r3, #1]
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d15d      	bne.n	8003770 <PCD_EP_ISR_Handler+0x6cc>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	461a      	mov	r2, r3
 80036c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036c8:	4413      	add	r3, r2
 80036ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	011a      	lsls	r2, r3, #4
 80036d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036d4:	4413      	add	r3, r2
 80036d6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036de:	2200      	movs	r2, #0
 80036e0:	801a      	strh	r2, [r3, #0]
 80036e2:	e045      	b.n	8003770 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ec:	785b      	ldrb	r3, [r3, #1]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d126      	bne.n	8003740 <PCD_EP_ISR_Handler+0x69c>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003700:	b29b      	uxth	r3, r3
 8003702:	461a      	mov	r2, r3
 8003704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003706:	4413      	add	r3, r2
 8003708:	637b      	str	r3, [r7, #52]	@ 0x34
 800370a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	011a      	lsls	r2, r3, #4
 8003710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003712:	4413      	add	r3, r2
 8003714:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003718:	633b      	str	r3, [r7, #48]	@ 0x30
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	881b      	ldrh	r3, [r3, #0]
 800371e:	b29b      	uxth	r3, r3
 8003720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003724:	b29a      	uxth	r2, r3
 8003726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	b29b      	uxth	r3, r3
 8003730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003738:	b29a      	uxth	r2, r3
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	801a      	strh	r2, [r3, #0]
 800373e:	e017      	b.n	8003770 <PCD_EP_ISR_Handler+0x6cc>
 8003740:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003742:	785b      	ldrb	r3, [r3, #1]
 8003744:	2b01      	cmp	r3, #1
 8003746:	d113      	bne.n	8003770 <PCD_EP_ISR_Handler+0x6cc>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003750:	b29b      	uxth	r3, r3
 8003752:	461a      	mov	r2, r3
 8003754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003756:	4413      	add	r3, r2
 8003758:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800375a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	011a      	lsls	r2, r3, #4
 8003760:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003762:	4413      	add	r3, r2
 8003764:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800376a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800376c:	2200      	movs	r2, #0
 800376e:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003770:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f006 f999 	bl	8009aae <HAL_PCD_DataInStageCallback>
 800377c:	e053      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800377e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003786:	2b00      	cmp	r3, #0
 8003788:	d146      	bne.n	8003818 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003792:	b29b      	uxth	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	4413      	add	r3, r2
 800379e:	3302      	adds	r3, #2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	6812      	ldr	r2, [r2, #0]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037ac:	881b      	ldrh	r3, [r3, #0]
 80037ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80037b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037b8:	699a      	ldr	r2, [r3, #24]
 80037ba:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037be:	429a      	cmp	r2, r3
 80037c0:	d907      	bls.n	80037d2 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80037c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c4:	699a      	ldr	r2, [r3, #24]
 80037c6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037ca:	1ad2      	subs	r2, r2, r3
 80037cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037ce:	619a      	str	r2, [r3, #24]
 80037d0:	e002      	b.n	80037d8 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80037d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d106      	bne.n	80037ee <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80037e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f006 f961 	bl	8009aae <HAL_PCD_DataInStageCallback>
 80037ec:	e01b      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80037ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f0:	695a      	ldr	r2, [r3, #20]
 80037f2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037f6:	441a      	add	r2, r3
 80037f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fa:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	69da      	ldr	r2, [r3, #28]
 8003800:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003804:	441a      	add	r2, r3
 8003806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003808:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003810:	4618      	mov	r0, r3
 8003812:	f002 ff20 	bl	8006656 <USB_EPStartXfer>
 8003816:	e006      	b.n	8003826 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003818:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800381c:	461a      	mov	r2, r3
 800381e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 f91b 	bl	8003a5c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800382e:	b29b      	uxth	r3, r3
 8003830:	b21b      	sxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	f6ff ac3b 	blt.w	80030ae <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3758      	adds	r7, #88	@ 0x58
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}

08003842 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003842:	b580      	push	{r7, lr}
 8003844:	b088      	sub	sp, #32
 8003846:	af00      	add	r7, sp, #0
 8003848:	60f8      	str	r0, [r7, #12]
 800384a:	60b9      	str	r1, [r7, #8]
 800384c:	4613      	mov	r3, r2
 800384e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003850:	88fb      	ldrh	r3, [r7, #6]
 8003852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d07e      	beq.n	8003958 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003862:	b29b      	uxth	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	4413      	add	r3, r2
 800386e:	3302      	adds	r3, #2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	4413      	add	r3, r2
 8003878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800387c:	881b      	ldrh	r3, [r3, #0]
 800387e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003882:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	699a      	ldr	r2, [r3, #24]
 8003888:	8b7b      	ldrh	r3, [r7, #26]
 800388a:	429a      	cmp	r2, r3
 800388c:	d306      	bcc.n	800389c <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	699a      	ldr	r2, [r3, #24]
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	619a      	str	r2, [r3, #24]
 800389a:	e002      	b.n	80038a2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2200      	movs	r2, #0
 80038a0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d123      	bne.n	80038f2 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c4:	833b      	strh	r3, [r7, #24]
 80038c6:	8b3b      	ldrh	r3, [r7, #24]
 80038c8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038cc:	833b      	strh	r3, [r7, #24]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	441a      	add	r2, r3
 80038dc:	8b3b      	ldrh	r3, [r7, #24]
 80038de:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038e2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d01f      	beq.n	800393c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	461a      	mov	r2, r3
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	881b      	ldrh	r3, [r3, #0]
 800390c:	b29b      	uxth	r3, r3
 800390e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003916:	82fb      	strh	r3, [r7, #22]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	8afb      	ldrh	r3, [r7, #22]
 8003928:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800392c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003930:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003934:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003938:	b29b      	uxth	r3, r3
 800393a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800393c:	8b7b      	ldrh	r3, [r7, #26]
 800393e:	2b00      	cmp	r3, #0
 8003940:	f000 8087 	beq.w	8003a52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6818      	ldr	r0, [r3, #0]
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	6959      	ldr	r1, [r3, #20]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	891a      	ldrh	r2, [r3, #8]
 8003950:	8b7b      	ldrh	r3, [r7, #26]
 8003952:	f004 fba6 	bl	80080a2 <USB_ReadPMA>
 8003956:	e07c      	b.n	8003a52 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003960:	b29b      	uxth	r3, r3
 8003962:	461a      	mov	r2, r3
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	4413      	add	r3, r2
 800396c:	3306      	adds	r3, #6
 800396e:	005b      	lsls	r3, r3, #1
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	4413      	add	r3, r2
 8003976:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800397a:	881b      	ldrh	r3, [r3, #0]
 800397c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003980:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	699a      	ldr	r2, [r3, #24]
 8003986:	8b7b      	ldrh	r3, [r7, #26]
 8003988:	429a      	cmp	r2, r3
 800398a:	d306      	bcc.n	800399a <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	699a      	ldr	r2, [r3, #24]
 8003990:	8b7b      	ldrh	r3, [r7, #26]
 8003992:	1ad2      	subs	r2, r2, r3
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	619a      	str	r2, [r3, #24]
 8003998:	e002      	b.n	80039a0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d123      	bne.n	80039f0 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	461a      	mov	r2, r3
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	781b      	ldrb	r3, [r3, #0]
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	881b      	ldrh	r3, [r3, #0]
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039c2:	83fb      	strh	r3, [r7, #30]
 80039c4:	8bfb      	ldrh	r3, [r7, #30]
 80039c6:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039ca:	83fb      	strh	r3, [r7, #30]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	441a      	add	r2, r3
 80039da:	8bfb      	ldrh	r3, [r7, #30]
 80039dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80039f0:	88fb      	ldrh	r3, [r7, #6]
 80039f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d11f      	bne.n	8003a3a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a14:	83bb      	strh	r3, [r7, #28]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	441a      	add	r2, r3
 8003a24:	8bbb      	ldrh	r3, [r7, #28]
 8003a26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a32:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a3a:	8b7b      	ldrh	r3, [r7, #26]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d008      	beq.n	8003a52 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6818      	ldr	r0, [r3, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	6959      	ldr	r1, [r3, #20]
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	895a      	ldrh	r2, [r3, #10]
 8003a4c:	8b7b      	ldrh	r3, [r7, #26]
 8003a4e:	f004 fb28 	bl	80080a2 <USB_ReadPMA>
    }
  }

  return count;
 8003a52:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3720      	adds	r7, #32
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0a4      	sub	sp, #144	@ 0x90
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	4613      	mov	r3, r2
 8003a68:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a6a:	88fb      	ldrh	r3, [r7, #6]
 8003a6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 81dd 	beq.w	8003e30 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3302      	adds	r3, #2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	6812      	ldr	r2, [r2, #0]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a9e:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	699a      	ldr	r2, [r3, #24]
 8003aa6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d907      	bls.n	8003abe <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	699a      	ldr	r2, [r3, #24]
 8003ab2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ab6:	1ad2      	subs	r2, r2, r3
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	619a      	str	r2, [r3, #24]
 8003abc:	e002      	b.n	8003ac4 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f040 80b9 	bne.w	8003c40 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	785b      	ldrb	r3, [r3, #1]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d126      	bne.n	8003b24 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aea:	4413      	add	r3, r2
 8003aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	011a      	lsls	r2, r3, #4
 8003af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003af6:	4413      	add	r3, r2
 8003af8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b0c:	801a      	strh	r2, [r3, #0]
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b20:	801a      	strh	r2, [r3, #0]
 8003b22:	e01a      	b.n	8003b5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	785b      	ldrb	r3, [r3, #1]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d116      	bne.n	8003b5a <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b40:	4413      	add	r3, r2
 8003b42:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	011a      	lsls	r2, r3, #4
 8003b4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b52:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	2200      	movs	r2, #0
 8003b58:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	785b      	ldrb	r3, [r3, #1]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d126      	bne.n	8003bb6 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	461a      	mov	r2, r3
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	4413      	add	r3, r2
 8003b7e:	61fb      	str	r3, [r7, #28]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	781b      	ldrb	r3, [r3, #0]
 8003b84:	011a      	lsls	r2, r3, #4
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b8e:	61bb      	str	r3, [r7, #24]
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	69bb      	ldr	r3, [r7, #24]
 8003b9e:	801a      	strh	r2, [r3, #0]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	881b      	ldrh	r3, [r3, #0]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	e017      	b.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	785b      	ldrb	r3, [r3, #1]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d113      	bne.n	8003be6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bcc:	4413      	add	r3, r2
 8003bce:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	781b      	ldrb	r3, [r3, #0]
 8003bd4:	011a      	lsls	r2, r3, #4
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd8:	4413      	add	r3, r2
 8003bda:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	6a3b      	ldr	r3, [r7, #32]
 8003be2:	2200      	movs	r2, #0
 8003be4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	4619      	mov	r1, r3
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f005 ff5e 	bl	8009aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bf2:	88fb      	ldrh	r3, [r7, #6]
 8003bf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	f000 82fc 	beq.w	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	4413      	add	r3, r2
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c18:	82fb      	strh	r3, [r7, #22]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	441a      	add	r2, r3
 8003c28:	8afb      	ldrh	r3, [r7, #22]
 8003c2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c32:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	8013      	strh	r3, [r2, #0]
 8003c3e:	e2da      	b.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c40:	88fb      	ldrh	r3, [r7, #6]
 8003c42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d021      	beq.n	8003c8e <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	461a      	mov	r2, r3
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	4413      	add	r3, r2
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c64:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	441a      	add	r2, r3
 8003c76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c7a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c7e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c82:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	f040 82ae 	bne.w	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	695a      	ldr	r2, [r3, #20]
 8003c9e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ca2:	441a      	add	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003cb0:	441a      	add	r2, r3
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d30b      	bcc.n	8003cda <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	691b      	ldr	r3, [r3, #16]
 8003cc6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6a1a      	ldr	r2, [r3, #32]
 8003cce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cd2:	1ad2      	subs	r2, r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	621a      	str	r2, [r3, #32]
 8003cd8:	e017      	b.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d108      	bne.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003ce2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ce6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003cf2:	e00a      	b.n	8003d0a <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	2200      	movs	r2, #0
 8003d08:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	785b      	ldrb	r3, [r3, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d165      	bne.n	8003dde <HAL_PCD_EP_DB_Transmit+0x382>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d26:	4413      	add	r3, r2
 8003d28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	011a      	lsls	r2, r3, #4
 8003d30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d32:	4413      	add	r3, r2
 8003d34:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10a      	bne.n	8003d68 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d64:	801a      	strh	r2, [r3, #0]
 8003d66:	e057      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d6c:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d6e:	d818      	bhi.n	8003da2 <HAL_PCD_EP_DB_Transmit+0x346>
 8003d70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d7c:	f003 0301 	and.w	r3, r3, #1
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_PCD_EP_DB_Transmit+0x32e>
 8003d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d86:	3301      	adds	r3, #1
 8003d88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d8c:	881b      	ldrh	r3, [r3, #0]
 8003d8e:	b29a      	uxth	r2, r3
 8003d90:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	029b      	lsls	r3, r3, #10
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d9e:	801a      	strh	r2, [r3, #0]
 8003da0:	e03a      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003da2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003daa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dae:	f003 031f 	and.w	r3, r3, #31
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d102      	bne.n	8003dbc <HAL_PCD_EP_DB_Transmit+0x360>
 8003db6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db8:	3b01      	subs	r3, #1
 8003dba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dbe:	881b      	ldrh	r3, [r3, #0]
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	029b      	lsls	r3, r3, #10
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dd6:	b29a      	uxth	r2, r3
 8003dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dda:	801a      	strh	r2, [r3, #0]
 8003ddc:	e01c      	b.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	785b      	ldrb	r3, [r3, #1]
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d118      	bne.n	8003e18 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dfa:	4413      	add	r3, r2
 8003dfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	011a      	lsls	r2, r3, #4
 8003e04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e06:	4413      	add	r3, r2
 8003e08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e16:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6959      	ldr	r1, [r3, #20]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	891a      	ldrh	r2, [r3, #8]
 8003e24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	f004 f8f4 	bl	8008016 <USB_WritePMA>
 8003e2e:	e1e2      	b.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	4413      	add	r3, r2
 8003e44:	3306      	adds	r3, #6
 8003e46:	005b      	lsls	r3, r3, #1
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e52:	881b      	ldrh	r3, [r3, #0]
 8003e54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e58:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	699a      	ldr	r2, [r3, #24]
 8003e60:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d307      	bcc.n	8003e78 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e70:	1ad2      	subs	r2, r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	619a      	str	r2, [r3, #24]
 8003e76:	e002      	b.n	8003e7e <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	f040 80c0 	bne.w	8004008 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	785b      	ldrb	r3, [r3, #1]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d126      	bne.n	8003ede <HAL_PCD_EP_DB_Transmit+0x482>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ea4:	4413      	add	r3, r2
 8003ea6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	011a      	lsls	r2, r3, #4
 8003eae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003eb6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003eb8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eba:	881b      	ldrh	r3, [r3, #0]
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec2:	b29a      	uxth	r2, r3
 8003ec4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ec6:	801a      	strh	r2, [r3, #0]
 8003ec8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ed2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ed6:	b29a      	uxth	r2, r3
 8003ed8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eda:	801a      	strh	r2, [r3, #0]
 8003edc:	e01a      	b.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d116      	bne.n	8003f14 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	667b      	str	r3, [r7, #100]	@ 0x64
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003efa:	4413      	add	r3, r2
 8003efc:	667b      	str	r3, [r7, #100]	@ 0x64
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	011a      	lsls	r2, r3, #4
 8003f04:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f06:	4413      	add	r3, r2
 8003f08:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f0c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f10:	2200      	movs	r2, #0
 8003f12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	785b      	ldrb	r3, [r3, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d12b      	bne.n	8003f7a <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	461a      	mov	r2, r3
 8003f34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f36:	4413      	add	r3, r2
 8003f38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	011a      	lsls	r2, r3, #4
 8003f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f42:	4413      	add	r3, r2
 8003f44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f50:	881b      	ldrh	r3, [r3, #0]
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f76:	801a      	strh	r2, [r3, #0]
 8003f78:	e017      	b.n	8003faa <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	785b      	ldrb	r3, [r3, #1]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d113      	bne.n	8003faa <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f90:	4413      	add	r3, r2
 8003f92:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	011a      	lsls	r2, r3, #4
 8003f9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fa2:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fa4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003faa:	68bb      	ldr	r3, [r7, #8]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f005 fd7c 	bl	8009aae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fb6:	88fb      	ldrh	r3, [r7, #6]
 8003fb8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	f040 811a 	bne.w	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	4413      	add	r3, r2
 8003fd0:	881b      	ldrh	r3, [r3, #0]
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fdc:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003ff2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ff6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ffa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004002:	b29b      	uxth	r3, r3
 8004004:	8013      	strh	r3, [r2, #0]
 8004006:	e0f6      	b.n	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004008:	88fb      	ldrh	r3, [r7, #6]
 800400a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d121      	bne.n	8004056 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	4413      	add	r3, r2
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	b29b      	uxth	r3, r3
 8004024:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004028:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	461a      	mov	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	441a      	add	r2, r3
 800403e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004042:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004046:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800404a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800404e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004052:	b29b      	uxth	r3, r3
 8004054:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 80ca 	bne.w	80041f6 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	695a      	ldr	r2, [r3, #20]
 8004066:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800406a:	441a      	add	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	69da      	ldr	r2, [r3, #28]
 8004074:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004078:	441a      	add	r2, r3
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	6a1a      	ldr	r2, [r3, #32]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	429a      	cmp	r2, r3
 8004088:	d30b      	bcc.n	80040a2 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6a1a      	ldr	r2, [r3, #32]
 8004096:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	621a      	str	r2, [r3, #32]
 80040a0:	e017      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d108      	bne.n	80040bc <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040aa:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80040ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040ba:	e00a      	b.n	80040d2 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2200      	movs	r2, #0
 80040c8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	785b      	ldrb	r3, [r3, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d165      	bne.n	80041ac <HAL_PCD_EP_DB_Transmit+0x750>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80040f4:	4413      	add	r3, r2
 80040f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	781b      	ldrb	r3, [r3, #0]
 80040fc:	011a      	lsls	r2, r3, #4
 80040fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004100:	4413      	add	r3, r2
 8004102:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004106:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004108:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800410a:	881b      	ldrh	r3, [r3, #0]
 800410c:	b29b      	uxth	r3, r3
 800410e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004112:	b29a      	uxth	r2, r3
 8004114:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004116:	801a      	strh	r2, [r3, #0]
 8004118:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <HAL_PCD_EP_DB_Transmit+0x6da>
 8004120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004122:	881b      	ldrh	r3, [r3, #0]
 8004124:	b29b      	uxth	r3, r3
 8004126:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800412e:	b29a      	uxth	r2, r3
 8004130:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004132:	801a      	strh	r2, [r3, #0]
 8004134:	e054      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x784>
 8004136:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800413a:	2b3e      	cmp	r3, #62	@ 0x3e
 800413c:	d818      	bhi.n	8004170 <HAL_PCD_EP_DB_Transmit+0x714>
 800413e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004142:	085b      	lsrs	r3, r3, #1
 8004144:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004146:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004152:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004154:	3301      	adds	r3, #1
 8004156:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004158:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29a      	uxth	r2, r3
 800415e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004160:	b29b      	uxth	r3, r3
 8004162:	029b      	lsls	r3, r3, #10
 8004164:	b29b      	uxth	r3, r3
 8004166:	4313      	orrs	r3, r2
 8004168:	b29a      	uxth	r2, r3
 800416a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800416c:	801a      	strh	r2, [r3, #0]
 800416e:	e037      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x784>
 8004170:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <HAL_PCD_EP_DB_Transmit+0x72e>
 8004184:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004186:	3b01      	subs	r3, #1
 8004188:	66bb      	str	r3, [r7, #104]	@ 0x68
 800418a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29a      	uxth	r2, r3
 8004190:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004192:	b29b      	uxth	r3, r3
 8004194:	029b      	lsls	r3, r3, #10
 8004196:	b29b      	uxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	e019      	b.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x784>
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	785b      	ldrb	r3, [r3, #1]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d115      	bne.n	80041e0 <HAL_PCD_EP_DB_Transmit+0x784>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041bc:	b29b      	uxth	r3, r3
 80041be:	461a      	mov	r2, r3
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	4413      	add	r3, r2
 80041c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	011a      	lsls	r2, r3, #4
 80041cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ce:	4413      	add	r3, r2
 80041d0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80041d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041da:	b29a      	uxth	r2, r3
 80041dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041de:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6818      	ldr	r0, [r3, #0]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	6959      	ldr	r1, [r3, #20]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	895a      	ldrh	r2, [r3, #10]
 80041ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	f003 ff10 	bl	8008016 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	4413      	add	r3, r2
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800420c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004210:	82bb      	strh	r3, [r7, #20]
 8004212:	8abb      	ldrh	r3, [r7, #20]
 8004214:	f083 0310 	eor.w	r3, r3, #16
 8004218:	82bb      	strh	r3, [r7, #20]
 800421a:	8abb      	ldrh	r3, [r7, #20]
 800421c:	f083 0320 	eor.w	r3, r3, #32
 8004220:	82bb      	strh	r3, [r7, #20]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	461a      	mov	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	441a      	add	r2, r3
 8004230:	8abb      	ldrh	r3, [r7, #20]
 8004232:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004236:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800423a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800423e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004242:	b29b      	uxth	r3, r3
 8004244:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3790      	adds	r7, #144	@ 0x90
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004250:	b480      	push	{r7}
 8004252:	b087      	sub	sp, #28
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	817b      	strh	r3, [r7, #10]
 800425e:	4613      	mov	r3, r2
 8004260:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004262:	897b      	ldrh	r3, [r7, #10]
 8004264:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00b      	beq.n	8004286 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800426e:	897b      	ldrh	r3, [r7, #10]
 8004270:	f003 0207 	and.w	r2, r3, #7
 8004274:	4613      	mov	r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	00db      	lsls	r3, r3, #3
 800427c:	3310      	adds	r3, #16
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	e009      	b.n	800429a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004286:	897a      	ldrh	r2, [r7, #10]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4413      	add	r3, r2
 8004298:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800429a:	893b      	ldrh	r3, [r7, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d107      	bne.n	80042b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	2200      	movs	r2, #0
 80042a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	80da      	strh	r2, [r3, #6]
 80042ae:	e00b      	b.n	80042c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2201      	movs	r2, #1
 80042b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0c1b      	lsrs	r3, r3, #16
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042c8:	2300      	movs	r3, #0
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
	...

080042d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80042de:	af00      	add	r7, sp, #0
 80042e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042e4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042e8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80042ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f001 b823 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042fe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004302:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	f000 817d 	beq.w	800460e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004314:	4bbc      	ldr	r3, [pc, #752]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	f003 030c 	and.w	r3, r3, #12
 800431c:	2b04      	cmp	r3, #4
 800431e:	d00c      	beq.n	800433a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004320:	4bb9      	ldr	r3, [pc, #740]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f003 030c 	and.w	r3, r3, #12
 8004328:	2b08      	cmp	r3, #8
 800432a:	d15c      	bne.n	80043e6 <HAL_RCC_OscConfig+0x10e>
 800432c:	4bb6      	ldr	r3, [pc, #728]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004338:	d155      	bne.n	80043e6 <HAL_RCC_OscConfig+0x10e>
 800433a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800433e:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800434e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004352:	fab3 f383 	clz	r3, r3
 8004356:	b2db      	uxtb	r3, r3
 8004358:	095b      	lsrs	r3, r3, #5
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f043 0301 	orr.w	r3, r3, #1
 8004360:	b2db      	uxtb	r3, r3
 8004362:	2b01      	cmp	r3, #1
 8004364:	d102      	bne.n	800436c <HAL_RCC_OscConfig+0x94>
 8004366:	4ba8      	ldr	r3, [pc, #672]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e015      	b.n	8004398 <HAL_RCC_OscConfig+0xc0>
 800436c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004370:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004374:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8004380:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004384:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004388:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800438c:	fa93 f3a3 	rbit	r3, r3
 8004390:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004394:	4b9c      	ldr	r3, [pc, #624]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004398:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800439c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80043a0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80043a4:	fa92 f2a2 	rbit	r2, r2
 80043a8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80043ac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80043b0:	fab2 f282 	clz	r2, r2
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	f042 0220 	orr.w	r2, r2, #32
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	f002 021f 	and.w	r2, r2, #31
 80043c0:	2101      	movs	r1, #1
 80043c2:	fa01 f202 	lsl.w	r2, r1, r2
 80043c6:	4013      	ands	r3, r2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 811f 	beq.w	800460c <HAL_RCC_OscConfig+0x334>
 80043ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043d2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f040 8116 	bne.w	800460c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	f000 bfaf 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043ea:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043f6:	d106      	bne.n	8004406 <HAL_RCC_OscConfig+0x12e>
 80043f8:	4b83      	ldr	r3, [pc, #524]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a82      	ldr	r2, [pc, #520]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004402:	6013      	str	r3, [r2, #0]
 8004404:	e036      	b.n	8004474 <HAL_RCC_OscConfig+0x19c>
 8004406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x158>
 8004416:	4b7c      	ldr	r3, [pc, #496]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a7b      	ldr	r2, [pc, #492]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800441c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b79      	ldr	r3, [pc, #484]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a78      	ldr	r2, [pc, #480]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004428:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e021      	b.n	8004474 <HAL_RCC_OscConfig+0x19c>
 8004430:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004434:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004440:	d10c      	bne.n	800445c <HAL_RCC_OscConfig+0x184>
 8004442:	4b71      	ldr	r3, [pc, #452]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a70      	ldr	r2, [pc, #448]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800444c:	6013      	str	r3, [r2, #0]
 800444e:	4b6e      	ldr	r3, [pc, #440]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a6d      	ldr	r2, [pc, #436]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	e00b      	b.n	8004474 <HAL_RCC_OscConfig+0x19c>
 800445c:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4a69      	ldr	r2, [pc, #420]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004462:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004466:	6013      	str	r3, [r2, #0]
 8004468:	4b67      	ldr	r3, [pc, #412]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a66      	ldr	r2, [pc, #408]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800446e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004472:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004474:	4b64      	ldr	r3, [pc, #400]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 8004476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004478:	f023 020f 	bic.w	r2, r3, #15
 800447c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004480:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	495f      	ldr	r1, [pc, #380]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800448a:	4313      	orrs	r3, r2
 800448c:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800448e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004492:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d059      	beq.n	8004552 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449e:	f7fc fc5b 	bl	8000d58 <HAL_GetTick>
 80044a2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044a6:	e00a      	b.n	80044be <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044a8:	f7fc fc56 	bl	8000d58 <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b64      	cmp	r3, #100	@ 0x64
 80044b6:	d902      	bls.n	80044be <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	f000 bf43 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 80044be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044c2:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80044ca:	fa93 f3a3 	rbit	r3, r3
 80044ce:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80044d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	fab3 f383 	clz	r3, r3
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	095b      	lsrs	r3, r3, #5
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	f043 0301 	orr.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <HAL_RCC_OscConfig+0x218>
 80044ea:	4b47      	ldr	r3, [pc, #284]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	e015      	b.n	800451c <HAL_RCC_OscConfig+0x244>
 80044f0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044f4:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80044fc:	fa93 f3a3 	rbit	r3, r3
 8004500:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004504:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004508:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800450c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004510:	fa93 f3a3 	rbit	r3, r3
 8004514:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8004518:	4b3b      	ldr	r3, [pc, #236]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 800451a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800451c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004520:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004524:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8004528:	fa92 f2a2 	rbit	r2, r2
 800452c:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004530:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004534:	fab2 f282 	clz	r2, r2
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	f042 0220 	orr.w	r2, r2, #32
 800453e:	b2d2      	uxtb	r2, r2
 8004540:	f002 021f 	and.w	r2, r2, #31
 8004544:	2101      	movs	r1, #1
 8004546:	fa01 f202 	lsl.w	r2, r1, r2
 800454a:	4013      	ands	r3, r2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ab      	beq.n	80044a8 <HAL_RCC_OscConfig+0x1d0>
 8004550:	e05d      	b.n	800460e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004552:	f7fc fc01 	bl	8000d58 <HAL_GetTick>
 8004556:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800455a:	e00a      	b.n	8004572 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800455c:	f7fc fbfc 	bl	8000d58 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b64      	cmp	r3, #100	@ 0x64
 800456a:	d902      	bls.n	8004572 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	f000 bee9 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004572:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004576:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800457e:	fa93 f3a3 	rbit	r3, r3
 8004582:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004586:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	b2db      	uxtb	r3, r3
 8004590:	095b      	lsrs	r3, r3, #5
 8004592:	b2db      	uxtb	r3, r3
 8004594:	f043 0301 	orr.w	r3, r3, #1
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b01      	cmp	r3, #1
 800459c:	d102      	bne.n	80045a4 <HAL_RCC_OscConfig+0x2cc>
 800459e:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	e015      	b.n	80045d0 <HAL_RCC_OscConfig+0x2f8>
 80045a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045a8:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80045b0:	fa93 f3a3 	rbit	r3, r3
 80045b4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80045b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045bc:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80045c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80045c4:	fa93 f3a3 	rbit	r3, r3
 80045c8:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80045cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004608 <HAL_RCC_OscConfig+0x330>)
 80045ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045d4:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80045d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80045dc:	fa92 f2a2 	rbit	r2, r2
 80045e0:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80045e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80045e8:	fab2 f282 	clz	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	f042 0220 	orr.w	r2, r2, #32
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	f002 021f 	and.w	r2, r2, #31
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f202 	lsl.w	r2, r1, r2
 80045fe:	4013      	ands	r3, r2
 8004600:	2b00      	cmp	r3, #0
 8004602:	d1ab      	bne.n	800455c <HAL_RCC_OscConfig+0x284>
 8004604:	e003      	b.n	800460e <HAL_RCC_OscConfig+0x336>
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	f000 817d 	beq.w	800491e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004624:	4ba6      	ldr	r3, [pc, #664]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	f003 030c 	and.w	r3, r3, #12
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00b      	beq.n	8004648 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004630:	4ba3      	ldr	r3, [pc, #652]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b08      	cmp	r3, #8
 800463a:	d172      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 800463c:	4ba0      	ldr	r3, [pc, #640]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d16c      	bne.n	8004722 <HAL_RCC_OscConfig+0x44a>
 8004648:	2302      	movs	r3, #2
 800464a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800464e:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004652:	fa93 f3a3 	rbit	r3, r3
 8004656:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800465a:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	fab3 f383 	clz	r3, r3
 8004662:	b2db      	uxtb	r3, r3
 8004664:	095b      	lsrs	r3, r3, #5
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b01      	cmp	r3, #1
 8004670:	d102      	bne.n	8004678 <HAL_RCC_OscConfig+0x3a0>
 8004672:	4b93      	ldr	r3, [pc, #588]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	e013      	b.n	80046a0 <HAL_RCC_OscConfig+0x3c8>
 8004678:	2302      	movs	r3, #2
 800467a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800467e:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8004682:	fa93 f3a3 	rbit	r3, r3
 8004686:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800468a:	2302      	movs	r3, #2
 800468c:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8004690:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004694:	fa93 f3a3 	rbit	r3, r3
 8004698:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800469c:	4b88      	ldr	r3, [pc, #544]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2202      	movs	r2, #2
 80046a2:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80046a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80046aa:	fa92 f2a2 	rbit	r2, r2
 80046ae:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80046b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046b6:	fab2 f282 	clz	r2, r2
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	f042 0220 	orr.w	r2, r2, #32
 80046c0:	b2d2      	uxtb	r2, r2
 80046c2:	f002 021f 	and.w	r2, r2, #31
 80046c6:	2101      	movs	r1, #1
 80046c8:	fa01 f202 	lsl.w	r2, r1, r2
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00a      	beq.n	80046e8 <HAL_RCC_OscConfig+0x410>
 80046d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d002      	beq.n	80046e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	f000 be2e 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	4b75      	ldr	r3, [pc, #468]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046f4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	21f8      	movs	r1, #248	@ 0xf8
 80046fe:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004706:	fa91 f1a1 	rbit	r1, r1
 800470a:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800470e:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004712:	fab1 f181 	clz	r1, r1
 8004716:	b2c9      	uxtb	r1, r1
 8004718:	408b      	lsls	r3, r1
 800471a:	4969      	ldr	r1, [pc, #420]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800471c:	4313      	orrs	r3, r2
 800471e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004720:	e0fd      	b.n	800491e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004722:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004726:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8088 	beq.w	8004844 <HAL_RCC_OscConfig+0x56c>
 8004734:	2301      	movs	r3, #1
 8004736:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800473e:	fa93 f3a3 	rbit	r3, r3
 8004742:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8004746:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800474a:	fab3 f383 	clz	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004754:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	461a      	mov	r2, r3
 800475c:	2301      	movs	r3, #1
 800475e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fc fafa 	bl	8000d58 <HAL_GetTick>
 8004764:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476a:	f7fc faf5 	bl	8000d58 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d902      	bls.n	8004780 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	f000 bde2 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004780:	2302      	movs	r3, #2
 8004782:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800478a:	fa93 f3a3 	rbit	r3, r3
 800478e:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8004792:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004796:	fab3 f383 	clz	r3, r3
 800479a:	b2db      	uxtb	r3, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	f043 0301 	orr.w	r3, r3, #1
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d102      	bne.n	80047b0 <HAL_RCC_OscConfig+0x4d8>
 80047aa:	4b45      	ldr	r3, [pc, #276]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	e013      	b.n	80047d8 <HAL_RCC_OscConfig+0x500>
 80047b0:	2302      	movs	r3, #2
 80047b2:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80047ba:	fa93 f3a3 	rbit	r3, r3
 80047be:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80047c2:	2302      	movs	r3, #2
 80047c4:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80047c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80047cc:	fa93 f3a3 	rbit	r3, r3
 80047d0:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80047d4:	4b3a      	ldr	r3, [pc, #232]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80047d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d8:	2202      	movs	r2, #2
 80047da:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80047de:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80047e2:	fa92 f2a2 	rbit	r2, r2
 80047e6:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80047ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80047ee:	fab2 f282 	clz	r2, r2
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	f042 0220 	orr.w	r2, r2, #32
 80047f8:	b2d2      	uxtb	r2, r2
 80047fa:	f002 021f 	and.w	r2, r2, #31
 80047fe:	2101      	movs	r1, #1
 8004800:	fa01 f202 	lsl.w	r2, r1, r2
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0af      	beq.n	800476a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800480a:	4b2d      	ldr	r3, [pc, #180]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004812:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004816:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695b      	ldr	r3, [r3, #20]
 800481e:	21f8      	movs	r1, #248	@ 0xf8
 8004820:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004824:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8004828:	fa91 f1a1 	rbit	r1, r1
 800482c:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004830:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004834:	fab1 f181 	clz	r1, r1
 8004838:	b2c9      	uxtb	r1, r1
 800483a:	408b      	lsls	r3, r1
 800483c:	4920      	ldr	r1, [pc, #128]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 800483e:	4313      	orrs	r3, r2
 8004840:	600b      	str	r3, [r1, #0]
 8004842:	e06c      	b.n	800491e <HAL_RCC_OscConfig+0x646>
 8004844:	2301      	movs	r3, #1
 8004846:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484a:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8004856:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004864:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	461a      	mov	r2, r3
 800486c:	2300      	movs	r3, #0
 800486e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fc fa72 	bl	8000d58 <HAL_GetTick>
 8004874:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004878:	e00a      	b.n	8004890 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800487a:	f7fc fa6d 	bl	8000d58 <HAL_GetTick>
 800487e:	4602      	mov	r2, r0
 8004880:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	2b02      	cmp	r3, #2
 8004888:	d902      	bls.n	8004890 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	f000 bd5a 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004890:	2302      	movs	r3, #2
 8004892:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004896:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800489a:	fa93 f3a3 	rbit	r3, r3
 800489e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80048a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	095b      	lsrs	r3, r3, #5
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d104      	bne.n	80048c4 <HAL_RCC_OscConfig+0x5ec>
 80048ba:	4b01      	ldr	r3, [pc, #4]	@ (80048c0 <HAL_RCC_OscConfig+0x5e8>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	e015      	b.n	80048ec <HAL_RCC_OscConfig+0x614>
 80048c0:	40021000 	.word	0x40021000
 80048c4:	2302      	movs	r3, #2
 80048c6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048ce:	fa93 f3a3 	rbit	r3, r3
 80048d2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80048d6:	2302      	movs	r3, #2
 80048d8:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80048dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 80048e8:	4bc8      	ldr	r3, [pc, #800]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	2202      	movs	r2, #2
 80048ee:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80048f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80048f6:	fa92 f2a2 	rbit	r2, r2
 80048fa:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80048fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004902:	fab2 f282 	clz	r2, r2
 8004906:	b2d2      	uxtb	r2, r2
 8004908:	f042 0220 	orr.w	r2, r2, #32
 800490c:	b2d2      	uxtb	r2, r2
 800490e:	f002 021f 	and.w	r2, r2, #31
 8004912:	2101      	movs	r1, #1
 8004914:	fa01 f202 	lsl.w	r2, r1, r2
 8004918:	4013      	ands	r3, r2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1ad      	bne.n	800487a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800491e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004922:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8110 	beq.w	8004b54 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004934:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004938:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d079      	beq.n	8004a38 <HAL_RCC_OscConfig+0x760>
 8004944:	2301      	movs	r3, #1
 8004946:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800494a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800494e:	fa93 f3a3 	rbit	r3, r3
 8004952:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8004956:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800495a:	fab3 f383 	clz	r3, r3
 800495e:	b2db      	uxtb	r3, r3
 8004960:	461a      	mov	r2, r3
 8004962:	4bab      	ldr	r3, [pc, #684]	@ (8004c10 <HAL_RCC_OscConfig+0x938>)
 8004964:	4413      	add	r3, r2
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	461a      	mov	r2, r3
 800496a:	2301      	movs	r3, #1
 800496c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800496e:	f7fc f9f3 	bl	8000d58 <HAL_GetTick>
 8004972:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004976:	e00a      	b.n	800498e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004978:	f7fc f9ee 	bl	8000d58 <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d902      	bls.n	800498e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	f000 bcdb 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 800498e:	2302      	movs	r3, #2
 8004990:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004994:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004998:	fa93 f3a3 	rbit	r3, r3
 800499c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049a8:	2202      	movs	r2, #2
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049b0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	fa93 f2a3 	rbit	r2, r3
 80049ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049cc:	2202      	movs	r2, #2
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	fa93 f2a3 	rbit	r2, r3
 80049de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80049e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049e8:	4b88      	ldr	r3, [pc, #544]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 80049ea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80049f4:	2102      	movs	r1, #2
 80049f6:	6019      	str	r1, [r3, #0]
 80049f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049fc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	fa93 f1a3 	rbit	r1, r3
 8004a06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a0a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a0e:	6019      	str	r1, [r3, #0]
  return result;
 8004a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a14:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	fab3 f383 	clz	r3, r3
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f003 031f 	and.w	r3, r3, #31
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d0a0      	beq.n	8004978 <HAL_RCC_OscConfig+0x6a0>
 8004a36:	e08d      	b.n	8004b54 <HAL_RCC_OscConfig+0x87c>
 8004a38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a3c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a40:	2201      	movs	r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a48:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	fa93 f2a3 	rbit	r2, r3
 8004a52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a56:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a5a:	601a      	str	r2, [r3, #0]
  return result;
 8004a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a60:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a64:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a66:	fab3 f383 	clz	r3, r3
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b68      	ldr	r3, [pc, #416]	@ (8004c10 <HAL_RCC_OscConfig+0x938>)
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	461a      	mov	r2, r3
 8004a76:	2300      	movs	r3, #0
 8004a78:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a7a:	f7fc f96d 	bl	8000d58 <HAL_GetTick>
 8004a7e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a84:	f7fc f968 	bl	8000d58 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	2b02      	cmp	r3, #2
 8004a92:	d902      	bls.n	8004a9a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	f000 bc55 	b.w	8005344 <HAL_RCC_OscConfig+0x106c>
 8004a9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aaa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	fa93 f2a3 	rbit	r2, r3
 8004ab4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004abc:	601a      	str	r2, [r3, #0]
 8004abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	601a      	str	r2, [r3, #0]
 8004aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ace:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	fa93 f2a3 	rbit	r2, r3
 8004ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004adc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004aea:	2202      	movs	r2, #2
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	fa93 f2a3 	rbit	r2, r3
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004b04:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b06:	4b41      	ldr	r3, [pc, #260]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b12:	2102      	movs	r1, #2
 8004b14:	6019      	str	r1, [r3, #0]
 8004b16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b1a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	fa93 f1a3 	rbit	r1, r3
 8004b24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b28:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b2c:	6019      	str	r1, [r3, #0]
  return result;
 8004b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b32:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	fab3 f383 	clz	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	f003 031f 	and.w	r3, r3, #31
 8004b48:	2101      	movs	r1, #1
 8004b4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d197      	bne.n	8004a84 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b58:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 81a1 	beq.w	8004eac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b70:	4b26      	ldr	r3, [pc, #152]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d116      	bne.n	8004baa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7c:	4b23      	ldr	r3, [pc, #140]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	4a22      	ldr	r2, [pc, #136]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b86:	61d3      	str	r3, [r2, #28]
 8004b88:	4b20      	ldr	r3, [pc, #128]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004b8a:	69db      	ldr	r3, [r3, #28]
 8004b8c:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004b90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b94:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004b98:	601a      	str	r2, [r3, #0]
 8004b9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b9e:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004ba2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004baa:	4b1a      	ldr	r3, [pc, #104]	@ (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d11a      	bne.n	8004bec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bb6:	4b17      	ldr	r3, [pc, #92]	@ (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a16      	ldr	r2, [pc, #88]	@ (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004bbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bc0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bc2:	f7fc f8c9 	bl	8000d58 <HAL_GetTick>
 8004bc6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	e009      	b.n	8004be0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bcc:	f7fc f8c4 	bl	8000d58 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b64      	cmp	r3, #100	@ 0x64
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e3b1      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be0:	4b0c      	ldr	r3, [pc, #48]	@ (8004c14 <HAL_RCC_OscConfig+0x93c>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d0ef      	beq.n	8004bcc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bf0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d10d      	bne.n	8004c18 <HAL_RCC_OscConfig+0x940>
 8004bfc:	4b03      	ldr	r3, [pc, #12]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004bfe:	6a1b      	ldr	r3, [r3, #32]
 8004c00:	4a02      	ldr	r2, [pc, #8]	@ (8004c0c <HAL_RCC_OscConfig+0x934>)
 8004c02:	f043 0301 	orr.w	r3, r3, #1
 8004c06:	6213      	str	r3, [r2, #32]
 8004c08:	e03c      	b.n	8004c84 <HAL_RCC_OscConfig+0x9ac>
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	10908120 	.word	0x10908120
 8004c14:	40007000 	.word	0x40007000
 8004c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c1c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d10c      	bne.n	8004c42 <HAL_RCC_OscConfig+0x96a>
 8004c28:	4bc1      	ldr	r3, [pc, #772]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	4ac0      	ldr	r2, [pc, #768]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	6213      	str	r3, [r2, #32]
 8004c34:	4bbe      	ldr	r3, [pc, #760]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	4abd      	ldr	r2, [pc, #756]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c3a:	f023 0304 	bic.w	r3, r3, #4
 8004c3e:	6213      	str	r3, [r2, #32]
 8004c40:	e020      	b.n	8004c84 <HAL_RCC_OscConfig+0x9ac>
 8004c42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b05      	cmp	r3, #5
 8004c50:	d10c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x994>
 8004c52:	4bb7      	ldr	r3, [pc, #732]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	4ab6      	ldr	r2, [pc, #728]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	6213      	str	r3, [r2, #32]
 8004c5e:	4bb4      	ldr	r3, [pc, #720]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	4ab3      	ldr	r2, [pc, #716]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c64:	f043 0301 	orr.w	r3, r3, #1
 8004c68:	6213      	str	r3, [r2, #32]
 8004c6a:	e00b      	b.n	8004c84 <HAL_RCC_OscConfig+0x9ac>
 8004c6c:	4bb0      	ldr	r3, [pc, #704]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	4aaf      	ldr	r2, [pc, #700]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c72:	f023 0301 	bic.w	r3, r3, #1
 8004c76:	6213      	str	r3, [r2, #32]
 8004c78:	4bad      	ldr	r3, [pc, #692]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	4aac      	ldr	r2, [pc, #688]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004c7e:	f023 0304 	bic.w	r3, r3, #4
 8004c82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c88:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 8081 	beq.w	8004d98 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c96:	f7fc f85f 	bl	8000d58 <HAL_GetTick>
 8004c9a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c9e:	e00b      	b.n	8004cb8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca0:	f7fc f85a 	bl	8000d58 <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e345      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8004cb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cbc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004cc0:	2202      	movs	r2, #2
 8004cc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	fa93 f2a3 	rbit	r2, r3
 8004cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cd6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004cda:	601a      	str	r2, [r3, #0]
 8004cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	601a      	str	r2, [r3, #0]
 8004ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cec:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004cfe:	601a      	str	r2, [r3, #0]
  return result;
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0a:	fab3 f383 	clz	r3, r3
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	095b      	lsrs	r3, r3, #5
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	f043 0302 	orr.w	r3, r3, #2
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d102      	bne.n	8004d24 <HAL_RCC_OscConfig+0xa4c>
 8004d1e:	4b84      	ldr	r3, [pc, #528]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	e013      	b.n	8004d4c <HAL_RCC_OscConfig+0xa74>
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d2c:	2202      	movs	r2, #2
 8004d2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d34:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	fa93 f2a3 	rbit	r2, r3
 8004d3e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d42:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	4b79      	ldr	r3, [pc, #484]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d50:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d54:	2102      	movs	r1, #2
 8004d56:	6011      	str	r1, [r2, #0]
 8004d58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d5c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d60:	6812      	ldr	r2, [r2, #0]
 8004d62:	fa92 f1a2 	rbit	r1, r2
 8004d66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d6a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d6e:	6011      	str	r1, [r2, #0]
  return result;
 8004d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d74:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	fab2 f282 	clz	r2, r2
 8004d7e:	b2d2      	uxtb	r2, r2
 8004d80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d84:	b2d2      	uxtb	r2, r2
 8004d86:	f002 021f 	and.w	r2, r2, #31
 8004d8a:	2101      	movs	r1, #1
 8004d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d084      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x9c8>
 8004d96:	e07f      	b.n	8004e98 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d98:	f7fb ffde 	bl	8000d58 <HAL_GetTick>
 8004d9c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004da0:	e00b      	b.n	8004dba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004da2:	f7fb ffd9 	bl	8000d58 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e2c4      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8004dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dbe:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dca:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	fa93 f2a3 	rbit	r2, r3
 8004dd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004ddc:	601a      	str	r2, [r3, #0]
 8004dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004de6:	2202      	movs	r2, #2
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dee:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e00:	601a      	str	r2, [r3, #0]
  return result;
 8004e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e06:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e0a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e0c:	fab3 f383 	clz	r3, r3
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	095b      	lsrs	r3, r3, #5
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f043 0302 	orr.w	r3, r3, #2
 8004e1a:	b2db      	uxtb	r3, r3
 8004e1c:	2b02      	cmp	r3, #2
 8004e1e:	d102      	bne.n	8004e26 <HAL_RCC_OscConfig+0xb4e>
 8004e20:	4b43      	ldr	r3, [pc, #268]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	e013      	b.n	8004e4e <HAL_RCC_OscConfig+0xb76>
 8004e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e2e:	2202      	movs	r2, #2
 8004e30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e36:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	fa93 f2a3 	rbit	r2, r3
 8004e40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e44:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004e48:	601a      	str	r2, [r3, #0]
 8004e4a:	4b39      	ldr	r3, [pc, #228]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e52:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e56:	2102      	movs	r1, #2
 8004e58:	6011      	str	r1, [r2, #0]
 8004e5a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e5e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	fa92 f1a2 	rbit	r1, r2
 8004e68:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e6c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e70:	6011      	str	r1, [r2, #0]
  return result;
 8004e72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e76:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	fab2 f282 	clz	r2, r2
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e86:	b2d2      	uxtb	r2, r2
 8004e88:	f002 021f 	and.w	r2, r2, #31
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e92:	4013      	ands	r3, r2
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d184      	bne.n	8004da2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e98:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004e9c:	2b01      	cmp	r3, #1
 8004e9e:	d105      	bne.n	8004eac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ea0:	4b23      	ldr	r3, [pc, #140]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004ea2:	69db      	ldr	r3, [r3, #28]
 8004ea4:	4a22      	ldr	r2, [pc, #136]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004eb0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f000 8242 	beq.w	8005342 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8004f30 <HAL_RCC_OscConfig+0xc58>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 030c 	and.w	r3, r3, #12
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	f000 8213 	beq.w	80052f2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	69db      	ldr	r3, [r3, #28]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f040 8162 	bne.w	80051a2 <HAL_RCC_OscConfig+0xeca>
 8004ede:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee2:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004ee6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef0:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	fa93 f2a3 	rbit	r2, r3
 8004efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f02:	601a      	str	r2, [r3, #0]
  return result;
 8004f04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f08:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0e:	fab3 f383 	clz	r3, r3
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f18:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	461a      	mov	r2, r3
 8004f20:	2300      	movs	r3, #0
 8004f22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f24:	f7fb ff18 	bl	8000d58 <HAL_GetTick>
 8004f28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f2c:	e00c      	b.n	8004f48 <HAL_RCC_OscConfig+0xc70>
 8004f2e:	bf00      	nop
 8004f30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f34:	f7fb ff10 	bl	8000d58 <HAL_GetTick>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	2b02      	cmp	r3, #2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e1fd      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8004f48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f4c:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f5a:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	fa93 f2a3 	rbit	r2, r3
 8004f64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f68:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f6c:	601a      	str	r2, [r3, #0]
  return result;
 8004f6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f72:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f78:	fab3 f383 	clz	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	095b      	lsrs	r3, r3, #5
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_OscConfig+0xcba>
 8004f8c:	4bb0      	ldr	r3, [pc, #704]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	e027      	b.n	8004fe2 <HAL_RCC_OscConfig+0xd0a>
 8004f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f96:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f9a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fa0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fa4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	fa93 f2a3 	rbit	r2, r3
 8004fae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fb2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fbc:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fc0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fc4:	601a      	str	r2, [r3, #0]
 8004fc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fca:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	fa93 f2a3 	rbit	r2, r3
 8004fd4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	4b9c      	ldr	r3, [pc, #624]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004fe6:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004fea:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004fee:	6011      	str	r1, [r2, #0]
 8004ff0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ff4:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	fa92 f1a2 	rbit	r1, r2
 8004ffe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005002:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005006:	6011      	str	r1, [r2, #0]
  return result;
 8005008:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800500c:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	fab2 f282 	clz	r2, r2
 8005016:	b2d2      	uxtb	r2, r2
 8005018:	f042 0220 	orr.w	r2, r2, #32
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	f002 021f 	and.w	r2, r2, #31
 8005022:	2101      	movs	r1, #1
 8005024:	fa01 f202 	lsl.w	r2, r1, r2
 8005028:	4013      	ands	r3, r2
 800502a:	2b00      	cmp	r3, #0
 800502c:	d182      	bne.n	8004f34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800502e:	4b88      	ldr	r3, [pc, #544]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005036:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800503a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005042:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005046:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	430b      	orrs	r3, r1
 8005050:	497f      	ldr	r1, [pc, #508]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
 8005056:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505a:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800505e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005062:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005064:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005068:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	fa93 f2a3 	rbit	r2, r3
 8005072:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005076:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800507a:	601a      	str	r2, [r3, #0]
  return result;
 800507c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005080:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005084:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005086:	fab3 f383 	clz	r3, r3
 800508a:	b2db      	uxtb	r3, r3
 800508c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005090:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	461a      	mov	r2, r3
 8005098:	2301      	movs	r3, #1
 800509a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800509c:	f7fb fe5c 	bl	8000d58 <HAL_GetTick>
 80050a0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050a4:	e009      	b.n	80050ba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050a6:	f7fb fe57 	bl	8000d58 <HAL_GetTick>
 80050aa:	4602      	mov	r2, r0
 80050ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e144      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 80050ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050be:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050cc:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	fa93 f2a3 	rbit	r2, r3
 80050d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050da:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80050de:	601a      	str	r2, [r3, #0]
  return result;
 80050e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050e4:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80050e8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	095b      	lsrs	r3, r3, #5
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f043 0301 	orr.w	r3, r3, #1
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d102      	bne.n	8005104 <HAL_RCC_OscConfig+0xe2c>
 80050fe:	4b54      	ldr	r3, [pc, #336]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	e027      	b.n	8005154 <HAL_RCC_OscConfig+0xe7c>
 8005104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005108:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800510c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005112:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005116:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	fa93 f2a3 	rbit	r2, r3
 8005120:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005124:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8005128:	601a      	str	r2, [r3, #0]
 800512a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512e:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005132:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800513c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	fa93 f2a3 	rbit	r2, r3
 8005146:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800514a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	4b3f      	ldr	r3, [pc, #252]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 8005152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005154:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005158:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800515c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005160:	6011      	str	r1, [r2, #0]
 8005162:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005166:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	fa92 f1a2 	rbit	r1, r2
 8005170:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005174:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005178:	6011      	str	r1, [r2, #0]
  return result;
 800517a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800517e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005182:	6812      	ldr	r2, [r2, #0]
 8005184:	fab2 f282 	clz	r2, r2
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	f042 0220 	orr.w	r2, r2, #32
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	f002 021f 	and.w	r2, r2, #31
 8005194:	2101      	movs	r1, #1
 8005196:	fa01 f202 	lsl.w	r2, r1, r2
 800519a:	4013      	ands	r3, r2
 800519c:	2b00      	cmp	r3, #0
 800519e:	d082      	beq.n	80050a6 <HAL_RCC_OscConfig+0xdce>
 80051a0:	e0cf      	b.n	8005342 <HAL_RCC_OscConfig+0x106a>
 80051a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051aa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	fa93 f2a3 	rbit	r2, r3
 80051be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051c2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051c6:	601a      	str	r2, [r3, #0]
  return result;
 80051c8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051cc:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051d0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051d2:	fab3 f383 	clz	r3, r3
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80051dc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	461a      	mov	r2, r3
 80051e4:	2300      	movs	r3, #0
 80051e6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fb fdb6 	bl	8000d58 <HAL_GetTick>
 80051ec:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051f0:	e009      	b.n	8005206 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051f2:	f7fb fdb1 	bl	8000d58 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80051fc:	1ad3      	subs	r3, r2, r3
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d901      	bls.n	8005206 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e09e      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
 8005206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800520a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800520e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005212:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	fa93 f2a3 	rbit	r2, r3
 8005222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005226:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800522a:	601a      	str	r2, [r3, #0]
  return result;
 800522c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005230:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005234:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005236:	fab3 f383 	clz	r3, r3
 800523a:	b2db      	uxtb	r3, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	b2db      	uxtb	r3, r3
 8005240:	f043 0301 	orr.w	r3, r3, #1
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b01      	cmp	r3, #1
 8005248:	d104      	bne.n	8005254 <HAL_RCC_OscConfig+0xf7c>
 800524a:	4b01      	ldr	r3, [pc, #4]	@ (8005250 <HAL_RCC_OscConfig+0xf78>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	e029      	b.n	80052a4 <HAL_RCC_OscConfig+0xfcc>
 8005250:	40021000 	.word	0x40021000
 8005254:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005258:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800525c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005260:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005262:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005266:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	fa93 f2a3 	rbit	r2, r3
 8005270:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005274:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005278:	601a      	str	r2, [r3, #0]
 800527a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527e:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005282:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	fa93 f2a3 	rbit	r2, r3
 8005296:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800529a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	4b2b      	ldr	r3, [pc, #172]	@ (8005350 <HAL_RCC_OscConfig+0x1078>)
 80052a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052a8:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80052ac:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80052b0:	6011      	str	r1, [r2, #0]
 80052b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052b6:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80052ba:	6812      	ldr	r2, [r2, #0]
 80052bc:	fa92 f1a2 	rbit	r1, r2
 80052c0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052c4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052c8:	6011      	str	r1, [r2, #0]
  return result;
 80052ca:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052ce:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052d2:	6812      	ldr	r2, [r2, #0]
 80052d4:	fab2 f282 	clz	r2, r2
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	f042 0220 	orr.w	r2, r2, #32
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	f002 021f 	and.w	r2, r2, #31
 80052e4:	2101      	movs	r1, #1
 80052e6:	fa01 f202 	lsl.w	r2, r1, r2
 80052ea:	4013      	ands	r3, r2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d180      	bne.n	80051f2 <HAL_RCC_OscConfig+0xf1a>
 80052f0:	e027      	b.n	8005342 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	2b01      	cmp	r3, #1
 8005300:	d101      	bne.n	8005306 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e01e      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005306:	4b12      	ldr	r3, [pc, #72]	@ (8005350 <HAL_RCC_OscConfig+0x1078>)
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800530e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005312:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800531a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6a1b      	ldr	r3, [r3, #32]
 8005322:	429a      	cmp	r2, r3
 8005324:	d10b      	bne.n	800533e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8005326:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800532a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800532e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005332:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800533a:	429a      	cmp	r2, r3
 800533c:	d001      	beq.n	8005342 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e000      	b.n	8005344 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005342:	2300      	movs	r3, #0
}
 8005344:	4618      	mov	r0, r3
 8005346:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	40021000 	.word	0x40021000

08005354 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b09e      	sub	sp, #120	@ 0x78
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e162      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800536c:	4b90      	ldr	r3, [pc, #576]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	683a      	ldr	r2, [r7, #0]
 8005376:	429a      	cmp	r2, r3
 8005378:	d910      	bls.n	800539c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800537a:	4b8d      	ldr	r3, [pc, #564]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f023 0207 	bic.w	r2, r3, #7
 8005382:	498b      	ldr	r1, [pc, #556]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	4313      	orrs	r3, r2
 8005388:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800538a:	4b89      	ldr	r3, [pc, #548]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	429a      	cmp	r2, r3
 8005396:	d001      	beq.n	800539c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e14a      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0302 	and.w	r3, r3, #2
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d008      	beq.n	80053ba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053a8:	4b82      	ldr	r3, [pc, #520]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	497f      	ldr	r1, [pc, #508]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f000 80dc 	beq.w	8005580 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d13c      	bne.n	800544a <HAL_RCC_ClockConfig+0xf6>
 80053d0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053d4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053d8:	fa93 f3a3 	rbit	r3, r3
 80053dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80053de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053e0:	fab3 f383 	clz	r3, r3
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	095b      	lsrs	r3, r3, #5
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d102      	bne.n	80053fa <HAL_RCC_ClockConfig+0xa6>
 80053f4:	4b6f      	ldr	r3, [pc, #444]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	e00f      	b.n	800541a <HAL_RCC_ClockConfig+0xc6>
 80053fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005400:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005402:	fa93 f3a3 	rbit	r3, r3
 8005406:	667b      	str	r3, [r7, #100]	@ 0x64
 8005408:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800540c:	663b      	str	r3, [r7, #96]	@ 0x60
 800540e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005410:	fa93 f3a3 	rbit	r3, r3
 8005414:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005416:	4b67      	ldr	r3, [pc, #412]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800541a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800541e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005420:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005422:	fa92 f2a2 	rbit	r2, r2
 8005426:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8005428:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800542a:	fab2 f282 	clz	r2, r2
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	f042 0220 	orr.w	r2, r2, #32
 8005434:	b2d2      	uxtb	r2, r2
 8005436:	f002 021f 	and.w	r2, r2, #31
 800543a:	2101      	movs	r1, #1
 800543c:	fa01 f202 	lsl.w	r2, r1, r2
 8005440:	4013      	ands	r3, r2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d17b      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e0f3      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b02      	cmp	r3, #2
 8005450:	d13c      	bne.n	80054cc <HAL_RCC_ClockConfig+0x178>
 8005452:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005456:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005458:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800545a:	fa93 f3a3 	rbit	r3, r3
 800545e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005460:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005462:	fab3 f383 	clz	r3, r3
 8005466:	b2db      	uxtb	r3, r3
 8005468:	095b      	lsrs	r3, r3, #5
 800546a:	b2db      	uxtb	r3, r3
 800546c:	f043 0301 	orr.w	r3, r3, #1
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d102      	bne.n	800547c <HAL_RCC_ClockConfig+0x128>
 8005476:	4b4f      	ldr	r3, [pc, #316]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	e00f      	b.n	800549c <HAL_RCC_ClockConfig+0x148>
 800547c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005480:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005484:	fa93 f3a3 	rbit	r3, r3
 8005488:	647b      	str	r3, [r7, #68]	@ 0x44
 800548a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800548e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005490:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005498:	4b46      	ldr	r3, [pc, #280]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054a0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80054a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054a4:	fa92 f2a2 	rbit	r2, r2
 80054a8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80054aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054ac:	fab2 f282 	clz	r2, r2
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	f042 0220 	orr.w	r2, r2, #32
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	f002 021f 	and.w	r2, r2, #31
 80054bc:	2101      	movs	r1, #1
 80054be:	fa01 f202 	lsl.w	r2, r1, r2
 80054c2:	4013      	ands	r3, r2
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d13a      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e0b2      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
 80054cc:	2302      	movs	r3, #2
 80054ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d2:	fa93 f3a3 	rbit	r3, r3
 80054d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80054d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054da:	fab3 f383 	clz	r3, r3
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	095b      	lsrs	r3, r3, #5
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	f043 0301 	orr.w	r3, r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d102      	bne.n	80054f4 <HAL_RCC_ClockConfig+0x1a0>
 80054ee:	4b31      	ldr	r3, [pc, #196]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	e00d      	b.n	8005510 <HAL_RCC_ClockConfig+0x1bc>
 80054f4:	2302      	movs	r3, #2
 80054f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	fa93 f3a3 	rbit	r3, r3
 80054fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005500:	2302      	movs	r3, #2
 8005502:	623b      	str	r3, [r7, #32]
 8005504:	6a3b      	ldr	r3, [r7, #32]
 8005506:	fa93 f3a3 	rbit	r3, r3
 800550a:	61fb      	str	r3, [r7, #28]
 800550c:	4b29      	ldr	r3, [pc, #164]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800550e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005510:	2202      	movs	r2, #2
 8005512:	61ba      	str	r2, [r7, #24]
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	fa92 f2a2 	rbit	r2, r2
 800551a:	617a      	str	r2, [r7, #20]
  return result;
 800551c:	697a      	ldr	r2, [r7, #20]
 800551e:	fab2 f282 	clz	r2, r2
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	f042 0220 	orr.w	r2, r2, #32
 8005528:	b2d2      	uxtb	r2, r2
 800552a:	f002 021f 	and.w	r2, r2, #31
 800552e:	2101      	movs	r1, #1
 8005530:	fa01 f202 	lsl.w	r2, r1, r2
 8005534:	4013      	ands	r3, r2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d101      	bne.n	800553e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	e079      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800553e:	4b1d      	ldr	r3, [pc, #116]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	f023 0203 	bic.w	r2, r3, #3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	491a      	ldr	r1, [pc, #104]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 800554c:	4313      	orrs	r3, r2
 800554e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005550:	f7fb fc02 	bl	8000d58 <HAL_GetTick>
 8005554:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005556:	e00a      	b.n	800556e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005558:	f7fb fbfe 	bl	8000d58 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e061      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800556e:	4b11      	ldr	r3, [pc, #68]	@ (80055b4 <HAL_RCC_ClockConfig+0x260>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f003 020c 	and.w	r2, r3, #12
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	009b      	lsls	r3, r3, #2
 800557c:	429a      	cmp	r2, r3
 800557e:	d1eb      	bne.n	8005558 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d214      	bcs.n	80055b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b08      	ldr	r3, [pc, #32]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0207 	bic.w	r2, r3, #7
 8005596:	4906      	ldr	r1, [pc, #24]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	4313      	orrs	r3, r2
 800559c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800559e:	4b04      	ldr	r3, [pc, #16]	@ (80055b0 <HAL_RCC_ClockConfig+0x25c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	683a      	ldr	r2, [r7, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
 80055ae:	e040      	b.n	8005632 <HAL_RCC_ClockConfig+0x2de>
 80055b0:	40022000 	.word	0x40022000
 80055b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d008      	beq.n	80055d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055c4:	4b1d      	ldr	r3, [pc, #116]	@ (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	68db      	ldr	r3, [r3, #12]
 80055d0:	491a      	ldr	r1, [pc, #104]	@ (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0308 	and.w	r3, r3, #8
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055e2:	4b16      	ldr	r3, [pc, #88]	@ (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4912      	ldr	r1, [pc, #72]	@ (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80055f6:	f000 f829 	bl	800564c <HAL_RCC_GetSysClockFreq>
 80055fa:	4601      	mov	r1, r0
 80055fc:	4b0f      	ldr	r3, [pc, #60]	@ (800563c <HAL_RCC_ClockConfig+0x2e8>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005604:	22f0      	movs	r2, #240	@ 0xf0
 8005606:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	fa92 f2a2 	rbit	r2, r2
 800560e:	60fa      	str	r2, [r7, #12]
  return result;
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	fab2 f282 	clz	r2, r2
 8005616:	b2d2      	uxtb	r2, r2
 8005618:	40d3      	lsrs	r3, r2
 800561a:	4a09      	ldr	r2, [pc, #36]	@ (8005640 <HAL_RCC_ClockConfig+0x2ec>)
 800561c:	5cd3      	ldrb	r3, [r2, r3]
 800561e:	fa21 f303 	lsr.w	r3, r1, r3
 8005622:	4a08      	ldr	r2, [pc, #32]	@ (8005644 <HAL_RCC_ClockConfig+0x2f0>)
 8005624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8005626:	4b08      	ldr	r3, [pc, #32]	@ (8005648 <HAL_RCC_ClockConfig+0x2f4>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4618      	mov	r0, r3
 800562c:	f7fb fb50 	bl	8000cd0 <HAL_InitTick>
  
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3778      	adds	r7, #120	@ 0x78
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000
 8005640:	08009ffc 	.word	0x08009ffc
 8005644:	20000000 	.word	0x20000000
 8005648:	20000004 	.word	0x20000004

0800564c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005652:	2300      	movs	r3, #0
 8005654:	60fb      	str	r3, [r7, #12]
 8005656:	2300      	movs	r3, #0
 8005658:	60bb      	str	r3, [r7, #8]
 800565a:	2300      	movs	r3, #0
 800565c:	617b      	str	r3, [r7, #20]
 800565e:	2300      	movs	r3, #0
 8005660:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005662:	2300      	movs	r3, #0
 8005664:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8005666:	4b1e      	ldr	r3, [pc, #120]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 030c 	and.w	r3, r3, #12
 8005672:	2b04      	cmp	r3, #4
 8005674:	d002      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x30>
 8005676:	2b08      	cmp	r3, #8
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x36>
 800567a:	e026      	b.n	80056ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800567c:	4b19      	ldr	r3, [pc, #100]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x98>)
 800567e:	613b      	str	r3, [r7, #16]
      break;
 8005680:	e026      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0c9b      	lsrs	r3, r3, #18
 8005686:	f003 030f 	and.w	r3, r3, #15
 800568a:	4a17      	ldr	r2, [pc, #92]	@ (80056e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800568c:	5cd3      	ldrb	r3, [r2, r3]
 800568e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8005690:	4b13      	ldr	r3, [pc, #76]	@ (80056e0 <HAL_RCC_GetSysClockFreq+0x94>)
 8005692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	4a14      	ldr	r2, [pc, #80]	@ (80056ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800569a:	5cd3      	ldrb	r3, [r2, r3]
 800569c:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d008      	beq.n	80056ba <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056a8:	4a0e      	ldr	r2, [pc, #56]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	fb02 f303 	mul.w	r3, r2, r3
 80056b6:	617b      	str	r3, [r7, #20]
 80056b8:	e004      	b.n	80056c4 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a0c      	ldr	r2, [pc, #48]	@ (80056f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	613b      	str	r3, [r7, #16]
      break;
 80056c8:	e002      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <HAL_RCC_GetSysClockFreq+0x98>)
 80056cc:	613b      	str	r3, [r7, #16]
      break;
 80056ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d0:	693b      	ldr	r3, [r7, #16]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	40021000 	.word	0x40021000
 80056e4:	007a1200 	.word	0x007a1200
 80056e8:	0800a00c 	.word	0x0800a00c
 80056ec:	0800a01c 	.word	0x0800a01c
 80056f0:	003d0900 	.word	0x003d0900

080056f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b092      	sub	sp, #72	@ 0x48
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005704:	2300      	movs	r3, #0
 8005706:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80d4 	beq.w	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005718:	4b4e      	ldr	r3, [pc, #312]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10e      	bne.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	4b4b      	ldr	r3, [pc, #300]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	4a4a      	ldr	r2, [pc, #296]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800572e:	61d3      	str	r3, [r2, #28]
 8005730:	4b48      	ldr	r3, [pc, #288]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005732:	69db      	ldr	r3, [r3, #28]
 8005734:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573c:	2301      	movs	r3, #1
 800573e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	4b45      	ldr	r3, [pc, #276]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d118      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574e:	4b42      	ldr	r3, [pc, #264]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a41      	ldr	r2, [pc, #260]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005758:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575a:	f7fb fafd 	bl	8000d58 <HAL_GetTick>
 800575e:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005760:	e008      	b.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005762:	f7fb faf9 	bl	8000d58 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b64      	cmp	r3, #100	@ 0x64
 800576e:	d901      	bls.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e169      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	4b38      	ldr	r3, [pc, #224]	@ (8005858 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005780:	4b34      	ldr	r3, [pc, #208]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005782:	6a1b      	ldr	r3, [r3, #32]
 8005784:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005788:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800578a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8084 	beq.w	800589a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800579c:	429a      	cmp	r2, r3
 800579e:	d07c      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057a0:	4b2c      	ldr	r3, [pc, #176]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057aa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80057b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057ba:	fab3 f383 	clz	r3, r3
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	461a      	mov	r2, r3
 80057c2:	4b26      	ldr	r3, [pc, #152]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	461a      	mov	r2, r3
 80057ca:	2301      	movs	r3, #1
 80057cc:	6013      	str	r3, [r2, #0]
 80057ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80057d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80057dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057de:	fab3 f383 	clz	r3, r3
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	4b1d      	ldr	r3, [pc, #116]	@ (800585c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	461a      	mov	r2, r3
 80057ee:	2300      	movs	r3, #0
 80057f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80057f2:	4a18      	ldr	r2, [pc, #96]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80057f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057fa:	f003 0301 	and.w	r3, r3, #1
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d04b      	beq.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005802:	f7fb faa9 	bl	8000d58 <HAL_GetTick>
 8005806:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005808:	e00a      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800580a:	f7fb faa5 	bl	8000d58 <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005818:	4293      	cmp	r3, r2
 800581a:	d901      	bls.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	e113      	b.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005820:	2302      	movs	r3, #2
 8005822:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005824:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005826:	fa93 f3a3 	rbit	r3, r3
 800582a:	627b      	str	r3, [r7, #36]	@ 0x24
 800582c:	2302      	movs	r3, #2
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	fa93 f3a3 	rbit	r3, r3
 8005836:	61fb      	str	r3, [r7, #28]
  return result;
 8005838:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800583a:	fab3 f383 	clz	r3, r3
 800583e:	b2db      	uxtb	r3, r3
 8005840:	095b      	lsrs	r3, r3, #5
 8005842:	b2db      	uxtb	r3, r3
 8005844:	f043 0302 	orr.w	r3, r3, #2
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d108      	bne.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800584e:	4b01      	ldr	r3, [pc, #4]	@ (8005854 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	e00d      	b.n	8005870 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005854:	40021000 	.word	0x40021000
 8005858:	40007000 	.word	0x40007000
 800585c:	10908100 	.word	0x10908100
 8005860:	2302      	movs	r3, #2
 8005862:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	fa93 f3a3 	rbit	r3, r3
 800586a:	617b      	str	r3, [r7, #20]
 800586c:	4b78      	ldr	r3, [pc, #480]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800586e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005870:	2202      	movs	r2, #2
 8005872:	613a      	str	r2, [r7, #16]
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	fa92 f2a2 	rbit	r2, r2
 800587a:	60fa      	str	r2, [r7, #12]
  return result;
 800587c:	68fa      	ldr	r2, [r7, #12]
 800587e:	fab2 f282 	clz	r2, r2
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	f002 021f 	and.w	r2, r2, #31
 800588e:	2101      	movs	r1, #1
 8005890:	fa01 f202 	lsl.w	r2, r1, r2
 8005894:	4013      	ands	r3, r2
 8005896:	2b00      	cmp	r3, #0
 8005898:	d0b7      	beq.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800589a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	496a      	ldr	r1, [pc, #424]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058ac:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d105      	bne.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058b4:	4b66      	ldr	r3, [pc, #408]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b6:	69db      	ldr	r3, [r3, #28]
 80058b8:	4a65      	ldr	r2, [pc, #404]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d008      	beq.n	80058de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058cc:	4b60      	ldr	r3, [pc, #384]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058d0:	f023 0203 	bic.w	r2, r3, #3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	495d      	ldr	r1, [pc, #372]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0302 	and.w	r3, r3, #2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d008      	beq.n	80058fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058ea:	4b59      	ldr	r3, [pc, #356]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058ee:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	4956      	ldr	r1, [pc, #344]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d008      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005908:	4b51      	ldr	r3, [pc, #324]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800590c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	494e      	ldr	r1, [pc, #312]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005916:	4313      	orrs	r3, r2
 8005918:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f003 0320 	and.w	r3, r3, #32
 8005922:	2b00      	cmp	r3, #0
 8005924:	d008      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005926:	4b4a      	ldr	r3, [pc, #296]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	f023 0210 	bic.w	r2, r3, #16
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	69db      	ldr	r3, [r3, #28]
 8005932:	4947      	ldr	r1, [pc, #284]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005934:	4313      	orrs	r3, r2
 8005936:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d008      	beq.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005944:	4b42      	ldr	r3, [pc, #264]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005950:	493f      	ldr	r1, [pc, #252]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005952:	4313      	orrs	r3, r2
 8005954:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800595e:	2b00      	cmp	r3, #0
 8005960:	d008      	beq.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005962:	4b3b      	ldr	r3, [pc, #236]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005966:	f023 0220 	bic.w	r2, r3, #32
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	4938      	ldr	r1, [pc, #224]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005970:	4313      	orrs	r3, r2
 8005972:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0308 	and.w	r3, r3, #8
 800597c:	2b00      	cmp	r3, #0
 800597e:	d008      	beq.n	8005992 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005980:	4b33      	ldr	r3, [pc, #204]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005984:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	4930      	ldr	r1, [pc, #192]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800598e:	4313      	orrs	r3, r2
 8005990:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	d008      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800599e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	4929      	ldr	r1, [pc, #164]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d008      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059bc:	4b24      	ldr	r3, [pc, #144]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4921      	ldr	r1, [pc, #132]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d008      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059da:	4b1d      	ldr	r3, [pc, #116]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059de:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e6:	491a      	ldr	r1, [pc, #104]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d008      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80059f8:	4b15      	ldr	r3, [pc, #84]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059fc:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a04:	4912      	ldr	r1, [pc, #72]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a06:	4313      	orrs	r3, r2
 8005a08:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d008      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a16:	4b0e      	ldr	r3, [pc, #56]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a1a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a22:	490b      	ldr	r1, [pc, #44]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a34:	4b06      	ldr	r3, [pc, #24]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a38:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a40:	4903      	ldr	r1, [pc, #12]	@ (8005a50 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3748      	adds	r7, #72	@ 0x48
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	40021000 	.word	0x40021000

08005a54 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a64:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a68:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	b29a      	uxth	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b085      	sub	sp, #20
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a8a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a8e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	43db      	mvns	r3, r3
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr

08005ab8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	1d3b      	adds	r3, r7, #4
 8005ac2:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005ae6:	2300      	movs	r3, #0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3714      	adds	r7, #20
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b09d      	sub	sp, #116	@ 0x74
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b04:	687a      	ldr	r2, [r7, #4]
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4413      	add	r3, r2
 8005b0e:	881b      	ldrh	r3, [r3, #0]
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	78db      	ldrb	r3, [r3, #3]
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d81f      	bhi.n	8005b66 <USB_ActivateEndpoint+0x72>
 8005b26:	a201      	add	r2, pc, #4	@ (adr r2, 8005b2c <USB_ActivateEndpoint+0x38>)
 8005b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2c:	08005b3d 	.word	0x08005b3d
 8005b30:	08005b59 	.word	0x08005b59
 8005b34:	08005b6f 	.word	0x08005b6f
 8005b38:	08005b4b 	.word	0x08005b4b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b40:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b44:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b48:	e012      	b.n	8005b70 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b4a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b4e:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005b52:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b56:	e00b      	b.n	8005b70 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b58:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b5c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b64:	e004      	b.n	8005b70 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005b6c:	e000      	b.n	8005b70 <USB_ActivateEndpoint+0x7c>
      break;
 8005b6e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	009b      	lsls	r3, r3, #2
 8005b78:	441a      	add	r2, r3
 8005b7a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	009b      	lsls	r3, r3, #2
 8005b9a:	4413      	add	r3, r2
 8005b9c:	881b      	ldrh	r3, [r3, #0]
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	b21b      	sxth	r3, r3
 8005ba2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005baa:	b21a      	sxth	r2, r3
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	781b      	ldrb	r3, [r3, #0]
 8005bb0:	b21b      	sxth	r3, r3
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	b21b      	sxth	r3, r3
 8005bb6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005bba:	687a      	ldr	r2, [r7, #4]
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bd4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	7b1b      	ldrb	r3, [r3, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 8178 	bne.w	8005ed6 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	f000 8084 	beq.w	8005cf8 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	69bb      	ldr	r3, [r7, #24]
 8005c00:	4413      	add	r3, r2
 8005c02:	61bb      	str	r3, [r7, #24]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	011a      	lsls	r2, r3, #4
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	4413      	add	r3, r2
 8005c0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	88db      	ldrh	r3, [r3, #6]
 8005c18:	085b      	lsrs	r3, r3, #1
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	005b      	lsls	r3, r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	697b      	ldr	r3, [r7, #20]
 8005c22:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c24:	687a      	ldr	r2, [r7, #4]
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	4413      	add	r3, r2
 8005c2e:	881b      	ldrh	r3, [r3, #0]
 8005c30:	827b      	strh	r3, [r7, #18]
 8005c32:	8a7b      	ldrh	r3, [r7, #18]
 8005c34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d01b      	beq.n	8005c74 <USB_ActivateEndpoint+0x180>
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	881b      	ldrh	r3, [r3, #0]
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c52:	823b      	strh	r3, [r7, #16]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	8a3b      	ldrh	r3, [r7, #16]
 8005c60:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c64:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c68:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c6c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	78db      	ldrb	r3, [r3, #3]
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d020      	beq.n	8005cbe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	009b      	lsls	r3, r3, #2
 8005c84:	4413      	add	r3, r2
 8005c86:	881b      	ldrh	r3, [r3, #0]
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c92:	81bb      	strh	r3, [r7, #12]
 8005c94:	89bb      	ldrh	r3, [r7, #12]
 8005c96:	f083 0320 	eor.w	r3, r3, #32
 8005c9a:	81bb      	strh	r3, [r7, #12]
 8005c9c:	687a      	ldr	r2, [r7, #4]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	441a      	add	r2, r3
 8005ca6:	89bb      	ldrh	r3, [r7, #12]
 8005ca8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cac:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cb0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	8013      	strh	r3, [r2, #0]
 8005cbc:	e2d5      	b.n	800626a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cd4:	81fb      	strh	r3, [r7, #14]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	441a      	add	r2, r3
 8005ce0:	89fb      	ldrh	r3, [r7, #14]
 8005ce2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ce6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	8013      	strh	r3, [r2, #0]
 8005cf6:	e2b8      	b.n	800626a <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	461a      	mov	r2, r3
 8005d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d08:	4413      	add	r3, r2
 8005d0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	011a      	lsls	r2, r3, #4
 8005d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	88db      	ldrh	r3, [r3, #6]
 8005d20:	085b      	lsrs	r3, r3, #1
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3c:	4413      	add	r3, r2
 8005d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	011a      	lsls	r2, r3, #4
 8005d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d48:	4413      	add	r3, r2
 8005d4a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d52:	881b      	ldrh	r3, [r3, #0]
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5e:	801a      	strh	r2, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d10a      	bne.n	8005d7e <USB_ActivateEndpoint+0x28a>
 8005d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6a:	881b      	ldrh	r3, [r3, #0]
 8005d6c:	b29b      	uxth	r3, r3
 8005d6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	801a      	strh	r2, [r3, #0]
 8005d7c:	e039      	b.n	8005df2 <USB_ActivateEndpoint+0x2fe>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d84:	d818      	bhi.n	8005db8 <USB_ActivateEndpoint+0x2c4>
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	085b      	lsrs	r3, r3, #1
 8005d8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d002      	beq.n	8005da0 <USB_ActivateEndpoint+0x2ac>
 8005d9a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	881b      	ldrh	r3, [r3, #0]
 8005da4:	b29a      	uxth	r2, r3
 8005da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	029b      	lsls	r3, r3, #10
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	4313      	orrs	r3, r2
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	801a      	strh	r2, [r3, #0]
 8005db6:	e01c      	b.n	8005df2 <USB_ActivateEndpoint+0x2fe>
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	095b      	lsrs	r3, r3, #5
 8005dbe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	f003 031f 	and.w	r3, r3, #31
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d102      	bne.n	8005dd2 <USB_ActivateEndpoint+0x2de>
 8005dcc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd4:	881b      	ldrh	r3, [r3, #0]
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	029b      	lsls	r3, r3, #10
 8005dde:	b29b      	uxth	r3, r3
 8005de0:	4313      	orrs	r3, r2
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dec:	b29a      	uxth	r2, r3
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005df2:	687a      	ldr	r2, [r7, #4]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	4413      	add	r3, r2
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e00:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d01b      	beq.n	8005e42 <USB_ActivateEndpoint+0x34e>
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	009b      	lsls	r3, r3, #2
 8005e12:	4413      	add	r3, r2
 8005e14:	881b      	ldrh	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e20:	843b      	strh	r3, [r7, #32]
 8005e22:	687a      	ldr	r2, [r7, #4]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	441a      	add	r2, r3
 8005e2c:	8c3b      	ldrh	r3, [r7, #32]
 8005e2e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e32:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e36:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d124      	bne.n	8005e94 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	009b      	lsls	r3, r3, #2
 8005e52:	4413      	add	r3, r2
 8005e54:	881b      	ldrh	r3, [r3, #0]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e60:	83bb      	strh	r3, [r7, #28]
 8005e62:	8bbb      	ldrh	r3, [r7, #28]
 8005e64:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e68:	83bb      	strh	r3, [r7, #28]
 8005e6a:	8bbb      	ldrh	r3, [r7, #28]
 8005e6c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e70:	83bb      	strh	r3, [r7, #28]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	441a      	add	r2, r3
 8005e7c:	8bbb      	ldrh	r3, [r7, #28]
 8005e7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e86:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e8e:	b29b      	uxth	r3, r3
 8005e90:	8013      	strh	r3, [r2, #0]
 8005e92:	e1ea      	b.n	800626a <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	881b      	ldrh	r3, [r3, #0]
 8005ea0:	b29b      	uxth	r3, r3
 8005ea2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eaa:	83fb      	strh	r3, [r7, #30]
 8005eac:	8bfb      	ldrh	r3, [r7, #30]
 8005eae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005eb2:	83fb      	strh	r3, [r7, #30]
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	441a      	add	r2, r3
 8005ebe:	8bfb      	ldrh	r3, [r7, #30]
 8005ec0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ec4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ec8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	8013      	strh	r3, [r2, #0]
 8005ed4:	e1c9      	b.n	800626a <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	78db      	ldrb	r3, [r3, #3]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d11e      	bne.n	8005f1c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ef4:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	441a      	add	r2, r3
 8005f02:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005f06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f0e:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	8013      	strh	r3, [r2, #0]
 8005f1a:	e01d      	b.n	8005f58 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	881b      	ldrh	r3, [r3, #0]
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f32:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005f36:	687a      	ldr	r2, [r7, #4]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	441a      	add	r2, r3
 8005f40:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005f44:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f48:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f4c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	461a      	mov	r2, r3
 8005f66:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f68:	4413      	add	r3, r2
 8005f6a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	781b      	ldrb	r3, [r3, #0]
 8005f70:	011a      	lsls	r2, r3, #4
 8005f72:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	891b      	ldrh	r3, [r3, #8]
 8005f80:	085b      	lsrs	r3, r3, #1
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	005b      	lsls	r3, r3, #1
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f8a:	801a      	strh	r2, [r3, #0]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	461a      	mov	r2, r3
 8005f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f9c:	4413      	add	r3, r2
 8005f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	011a      	lsls	r2, r3, #4
 8005fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fa8:	4413      	add	r3, r2
 8005faa:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	895b      	ldrh	r3, [r3, #10]
 8005fb4:	085b      	lsrs	r3, r3, #1
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fbe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	785b      	ldrb	r3, [r3, #1]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f040 8093 	bne.w	80060f0 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	4413      	add	r3, r2
 8005fd4:	881b      	ldrh	r3, [r3, #0]
 8005fd6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005fda:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d01b      	beq.n	800601e <USB_ActivateEndpoint+0x52a>
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	009b      	lsls	r3, r3, #2
 8005fee:	4413      	add	r3, r2
 8005ff0:	881b      	ldrh	r3, [r3, #0]
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	441a      	add	r2, r3
 8006008:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800600a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800600e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006012:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006016:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800601a:	b29b      	uxth	r3, r3
 800601c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	009b      	lsls	r3, r3, #2
 8006026:	4413      	add	r3, r2
 8006028:	881b      	ldrh	r3, [r3, #0]
 800602a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800602c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	2b00      	cmp	r3, #0
 8006034:	d01b      	beq.n	800606e <USB_ActivateEndpoint+0x57a>
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4413      	add	r3, r2
 8006040:	881b      	ldrh	r3, [r3, #0]
 8006042:	b29b      	uxth	r3, r3
 8006044:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800604c:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006066:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	b29b      	uxth	r3, r3
 800607c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006084:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006086:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006088:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800608c:	873b      	strh	r3, [r7, #56]	@ 0x38
 800608e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006090:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006094:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	441a      	add	r2, r3
 80060a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060b6:	687a      	ldr	r2, [r7, #4]
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060cc:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	441a      	add	r2, r3
 80060d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e0bc      	b.n	800626a <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006100:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d01d      	beq.n	8006148 <USB_ActivateEndpoint+0x654>
 800610c:	687a      	ldr	r2, [r7, #4]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	881b      	ldrh	r3, [r3, #0]
 8006118:	b29b      	uxth	r3, r3
 800611a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800611e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006122:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	441a      	add	r2, r3
 8006130:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006134:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006138:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800613c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006140:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006144:	b29b      	uxth	r3, r3
 8006146:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4413      	add	r3, r2
 8006152:	881b      	ldrh	r3, [r3, #0]
 8006154:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8006158:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800615c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01d      	beq.n	80061a0 <USB_ActivateEndpoint+0x6ac>
 8006164:	687a      	ldr	r2, [r7, #4]
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	781b      	ldrb	r3, [r3, #0]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	881b      	ldrh	r3, [r3, #0]
 8006170:	b29b      	uxth	r3, r3
 8006172:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800617a:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	441a      	add	r2, r3
 8006188:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800618c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006190:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006198:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800619c:	b29b      	uxth	r3, r3
 800619e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	78db      	ldrb	r3, [r3, #3]
 80061a4:	2b01      	cmp	r3, #1
 80061a6:	d024      	beq.n	80061f2 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	881b      	ldrh	r3, [r3, #0]
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061be:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80061c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80061c6:	f083 0320 	eor.w	r3, r3, #32
 80061ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	441a      	add	r2, r3
 80061d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80061dc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061e4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	8013      	strh	r3, [r2, #0]
 80061f0:	e01d      	b.n	800622e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	881b      	ldrh	r3, [r3, #0]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006204:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006208:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	781b      	ldrb	r3, [r3, #0]
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	441a      	add	r2, r3
 8006216:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800621a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800621e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006222:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006226:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800622a:	b29b      	uxth	r3, r3
 800622c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	009b      	lsls	r3, r3, #2
 8006236:	4413      	add	r3, r2
 8006238:	881b      	ldrh	r3, [r3, #0]
 800623a:	b29b      	uxth	r3, r3
 800623c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006244:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	441a      	add	r2, r3
 8006252:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800625a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800625e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006266:	b29b      	uxth	r3, r3
 8006268:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800626a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 800626e:	4618      	mov	r0, r3
 8006270:	3774      	adds	r7, #116	@ 0x74
 8006272:	46bd      	mov	sp, r7
 8006274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006278:	4770      	bx	lr
 800627a:	bf00      	nop

0800627c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800627c:	b480      	push	{r7}
 800627e:	b08d      	sub	sp, #52	@ 0x34
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	7b1b      	ldrb	r3, [r3, #12]
 800628a:	2b00      	cmp	r3, #0
 800628c:	f040 808e 	bne.w	80063ac <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	785b      	ldrb	r3, [r3, #1]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d044      	beq.n	8006322 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	4413      	add	r3, r2
 80062a2:	881b      	ldrh	r3, [r3, #0]
 80062a4:	81bb      	strh	r3, [r7, #12]
 80062a6:	89bb      	ldrh	r3, [r7, #12]
 80062a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d01b      	beq.n	80062e8 <USB_DeactivateEndpoint+0x6c>
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	4413      	add	r3, r2
 80062ba:	881b      	ldrh	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062c6:	817b      	strh	r3, [r7, #10]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	781b      	ldrb	r3, [r3, #0]
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	897b      	ldrh	r3, [r7, #10]
 80062d4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062d8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062e0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80062e4:	b29b      	uxth	r3, r3
 80062e6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062e8:	687a      	ldr	r2, [r7, #4]
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	781b      	ldrb	r3, [r3, #0]
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	4413      	add	r3, r2
 80062f2:	881b      	ldrh	r3, [r3, #0]
 80062f4:	b29b      	uxth	r3, r3
 80062f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062fe:	813b      	strh	r3, [r7, #8]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	009b      	lsls	r3, r3, #2
 8006308:	441a      	add	r2, r3
 800630a:	893b      	ldrh	r3, [r7, #8]
 800630c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006310:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006314:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006318:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800631c:	b29b      	uxth	r3, r3
 800631e:	8013      	strh	r3, [r2, #0]
 8006320:	e192      	b.n	8006648 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	781b      	ldrb	r3, [r3, #0]
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	881b      	ldrh	r3, [r3, #0]
 800632e:	827b      	strh	r3, [r7, #18]
 8006330:	8a7b      	ldrh	r3, [r7, #18]
 8006332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006336:	2b00      	cmp	r3, #0
 8006338:	d01b      	beq.n	8006372 <USB_DeactivateEndpoint+0xf6>
 800633a:	687a      	ldr	r2, [r7, #4]
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	881b      	ldrh	r3, [r3, #0]
 8006346:	b29b      	uxth	r3, r3
 8006348:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800634c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006350:	823b      	strh	r3, [r7, #16]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	441a      	add	r2, r3
 800635c:	8a3b      	ldrh	r3, [r7, #16]
 800635e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006362:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006366:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800636a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800636e:	b29b      	uxth	r3, r3
 8006370:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	4413      	add	r3, r2
 800637c:	881b      	ldrh	r3, [r3, #0]
 800637e:	b29b      	uxth	r3, r3
 8006380:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006384:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006388:	81fb      	strh	r3, [r7, #14]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	441a      	add	r2, r3
 8006394:	89fb      	ldrh	r3, [r7, #14]
 8006396:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800639a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800639e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	8013      	strh	r3, [r2, #0]
 80063aa:	e14d      	b.n	8006648 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	785b      	ldrb	r3, [r3, #1]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f040 80a5 	bne.w	8006500 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	009b      	lsls	r3, r3, #2
 80063be:	4413      	add	r3, r2
 80063c0:	881b      	ldrh	r3, [r3, #0]
 80063c2:	843b      	strh	r3, [r7, #32]
 80063c4:	8c3b      	ldrh	r3, [r7, #32]
 80063c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d01b      	beq.n	8006406 <USB_DeactivateEndpoint+0x18a>
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	4413      	add	r3, r2
 80063d8:	881b      	ldrh	r3, [r3, #0]
 80063da:	b29b      	uxth	r3, r3
 80063dc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063e4:	83fb      	strh	r3, [r7, #30]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	441a      	add	r2, r3
 80063f0:	8bfb      	ldrh	r3, [r7, #30]
 80063f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063f6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80063fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006402:	b29b      	uxth	r3, r3
 8006404:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4413      	add	r3, r2
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	83bb      	strh	r3, [r7, #28]
 8006414:	8bbb      	ldrh	r3, [r7, #28]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d01b      	beq.n	8006456 <USB_DeactivateEndpoint+0x1da>
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	009b      	lsls	r3, r3, #2
 8006426:	4413      	add	r3, r2
 8006428:	881b      	ldrh	r3, [r3, #0]
 800642a:	b29b      	uxth	r3, r3
 800642c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006430:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006434:	837b      	strh	r3, [r7, #26]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	441a      	add	r2, r3
 8006440:	8b7b      	ldrh	r3, [r7, #26]
 8006442:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006446:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800644e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006452:	b29b      	uxth	r3, r3
 8006454:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	4413      	add	r3, r2
 8006460:	881b      	ldrh	r3, [r3, #0]
 8006462:	b29b      	uxth	r3, r3
 8006464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800646c:	833b      	strh	r3, [r7, #24]
 800646e:	687a      	ldr	r2, [r7, #4]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	009b      	lsls	r3, r3, #2
 8006476:	441a      	add	r2, r3
 8006478:	8b3b      	ldrh	r3, [r7, #24]
 800647a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006482:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006486:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800648a:	b29b      	uxth	r3, r3
 800648c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800648e:	687a      	ldr	r2, [r7, #4]
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4413      	add	r3, r2
 8006498:	881b      	ldrh	r3, [r3, #0]
 800649a:	b29b      	uxth	r3, r3
 800649c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064a4:	82fb      	strh	r3, [r7, #22]
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	781b      	ldrb	r3, [r3, #0]
 80064ac:	009b      	lsls	r3, r3, #2
 80064ae:	441a      	add	r2, r3
 80064b0:	8afb      	ldrh	r3, [r7, #22]
 80064b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	009b      	lsls	r3, r3, #2
 80064ce:	4413      	add	r3, r2
 80064d0:	881b      	ldrh	r3, [r3, #0]
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064dc:	82bb      	strh	r3, [r7, #20]
 80064de:	687a      	ldr	r2, [r7, #4]
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	781b      	ldrb	r3, [r3, #0]
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	441a      	add	r2, r3
 80064e8:	8abb      	ldrh	r3, [r7, #20]
 80064ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	8013      	strh	r3, [r2, #0]
 80064fe:	e0a3      	b.n	8006648 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	4413      	add	r3, r2
 800650a:	881b      	ldrh	r3, [r3, #0]
 800650c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800650e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006510:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01b      	beq.n	8006550 <USB_DeactivateEndpoint+0x2d4>
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	4413      	add	r3, r2
 8006522:	881b      	ldrh	r3, [r3, #0]
 8006524:	b29b      	uxth	r3, r3
 8006526:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800652a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800652e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006530:	687a      	ldr	r2, [r7, #4]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	441a      	add	r2, r3
 800653a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800653c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006540:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006544:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006548:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800654c:	b29b      	uxth	r3, r3
 800654e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	009b      	lsls	r3, r3, #2
 8006558:	4413      	add	r3, r2
 800655a:	881b      	ldrh	r3, [r3, #0]
 800655c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800655e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006560:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006564:	2b00      	cmp	r3, #0
 8006566:	d01b      	beq.n	80065a0 <USB_DeactivateEndpoint+0x324>
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	4413      	add	r3, r2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800657a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800657e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	441a      	add	r2, r3
 800658a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800658c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006590:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006594:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006598:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800659c:	b29b      	uxth	r3, r3
 800659e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065a0:	687a      	ldr	r2, [r7, #4]
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	4413      	add	r3, r2
 80065aa:	881b      	ldrh	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	441a      	add	r2, r3
 80065c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065cc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	881b      	ldrh	r3, [r3, #0]
 80065e4:	b29b      	uxth	r3, r3
 80065e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065ee:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	441a      	add	r2, r3
 80065fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80065fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800660c:	b29b      	uxth	r3, r3
 800660e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	881b      	ldrh	r3, [r3, #0]
 800661c:	b29b      	uxth	r3, r3
 800661e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006622:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006626:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	441a      	add	r2, r3
 8006632:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006634:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006638:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800663c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006640:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006644:	b29b      	uxth	r3, r3
 8006646:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3734      	adds	r7, #52	@ 0x34
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b0c2      	sub	sp, #264	@ 0x108
 800665a:	af00      	add	r7, sp, #0
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006664:	6018      	str	r0, [r3, #0]
 8006666:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800666e:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006670:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006674:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	785b      	ldrb	r3, [r3, #1]
 800667c:	2b01      	cmp	r3, #1
 800667e:	f040 86b7 	bne.w	80073f0 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8006682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006686:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699a      	ldr	r2, [r3, #24]
 800668e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006692:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	429a      	cmp	r2, r3
 800669c:	d908      	bls.n	80066b0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800669e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80066ae:	e007      	b.n	80066c0 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	7b1b      	ldrb	r3, [r3, #12]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d13a      	bne.n	8006746 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	6959      	ldr	r1, [r3, #20]
 80066dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	88da      	ldrh	r2, [r3, #6]
 80066e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80066f2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80066f6:	6800      	ldr	r0, [r0, #0]
 80066f8:	f001 fc8d 	bl	8008016 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80066fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	613b      	str	r3, [r7, #16]
 8006708:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800670c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006716:	b29b      	uxth	r3, r3
 8006718:	461a      	mov	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4413      	add	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	011a      	lsls	r2, r3, #4
 800672e:	693b      	ldr	r3, [r7, #16]
 8006730:	4413      	add	r3, r2
 8006732:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006736:	60fb      	str	r3, [r7, #12]
 8006738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800673c:	b29a      	uxth	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	801a      	strh	r2, [r3, #0]
 8006742:	f000 be1f 	b.w	8007384 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8006746:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800674a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	78db      	ldrb	r3, [r3, #3]
 8006752:	2b02      	cmp	r3, #2
 8006754:	f040 8462 	bne.w	800701c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006758:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800675c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6a1a      	ldr	r2, [r3, #32]
 8006764:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006768:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	691b      	ldr	r3, [r3, #16]
 8006770:	429a      	cmp	r2, r3
 8006772:	f240 83df 	bls.w	8006f34 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006776:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800677a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800677e:	681a      	ldr	r2, [r3, #0]
 8006780:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006784:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006798:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800679c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80067a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	009b      	lsls	r3, r3, #2
 80067b8:	441a      	add	r2, r3
 80067ba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80067be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067c6:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80067ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80067d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6a1a      	ldr	r2, [r3, #32]
 80067de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e2:	1ad2      	subs	r2, r2, r3
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067f4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	781b      	ldrb	r3, [r3, #0]
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	b29b      	uxth	r3, r3
 800680e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006812:	2b00      	cmp	r3, #0
 8006814:	f000 81c7 	beq.w	8006ba6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006818:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800681c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	633b      	str	r3, [r7, #48]	@ 0x30
 8006824:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006828:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	785b      	ldrb	r3, [r3, #1]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d177      	bne.n	8006924 <USB_EPStartXfer+0x2ce>
 8006834:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006838:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006840:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006844:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800684e:	b29b      	uxth	r3, r3
 8006850:	461a      	mov	r2, r3
 8006852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006854:	4413      	add	r3, r2
 8006856:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	011a      	lsls	r2, r3, #4
 8006866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006868:	4413      	add	r3, r2
 800686a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	b29b      	uxth	r3, r3
 8006876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800687a:	b29a      	uxth	r2, r3
 800687c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687e:	801a      	strh	r2, [r3, #0]
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006884:	2b00      	cmp	r3, #0
 8006886:	d10a      	bne.n	800689e <USB_EPStartXfer+0x248>
 8006888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006892:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006896:	b29a      	uxth	r2, r3
 8006898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689a:	801a      	strh	r2, [r3, #0]
 800689c:	e067      	b.n	800696e <USB_EPStartXfer+0x318>
 800689e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a2:	2b3e      	cmp	r3, #62	@ 0x3e
 80068a4:	d81c      	bhi.n	80068e0 <USB_EPStartXfer+0x28a>
 80068a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068aa:	085b      	lsrs	r3, r3, #1
 80068ac:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d004      	beq.n	80068c6 <USB_EPStartXfer+0x270>
 80068bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068c0:	3301      	adds	r3, #1
 80068c2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	029b      	lsls	r3, r3, #10
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	4313      	orrs	r3, r2
 80068d8:	b29a      	uxth	r2, r3
 80068da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068dc:	801a      	strh	r2, [r3, #0]
 80068de:	e046      	b.n	800696e <USB_EPStartXfer+0x318>
 80068e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068e4:	095b      	lsrs	r3, r3, #5
 80068e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ee:	f003 031f 	and.w	r3, r3, #31
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d104      	bne.n	8006900 <USB_EPStartXfer+0x2aa>
 80068f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068fa:	3b01      	subs	r3, #1
 80068fc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006902:	881b      	ldrh	r3, [r3, #0]
 8006904:	b29a      	uxth	r2, r3
 8006906:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800690a:	b29b      	uxth	r3, r3
 800690c:	029b      	lsls	r3, r3, #10
 800690e:	b29b      	uxth	r3, r3
 8006910:	4313      	orrs	r3, r2
 8006912:	b29b      	uxth	r3, r3
 8006914:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006918:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800691c:	b29a      	uxth	r2, r3
 800691e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006920:	801a      	strh	r2, [r3, #0]
 8006922:	e024      	b.n	800696e <USB_EPStartXfer+0x318>
 8006924:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006928:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	785b      	ldrb	r3, [r3, #1]
 8006930:	2b01      	cmp	r3, #1
 8006932:	d11c      	bne.n	800696e <USB_EPStartXfer+0x318>
 8006934:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006938:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006942:	b29b      	uxth	r3, r3
 8006944:	461a      	mov	r2, r3
 8006946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006948:	4413      	add	r3, r2
 800694a:	633b      	str	r3, [r7, #48]	@ 0x30
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	011a      	lsls	r2, r3, #4
 800695a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800695c:	4413      	add	r3, r2
 800695e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006962:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006964:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006968:	b29a      	uxth	r2, r3
 800696a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800696c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800696e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006972:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	895b      	ldrh	r3, [r3, #10]
 800697a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800697e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006982:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	6959      	ldr	r1, [r3, #20]
 800698a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698e:	b29b      	uxth	r3, r3
 8006990:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006994:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006998:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800699c:	6800      	ldr	r0, [r0, #0]
 800699e:	f001 fb3a 	bl	8008016 <USB_WritePMA>
            ep->xfer_buff += len;
 80069a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	441a      	add	r2, r3
 80069b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	6a1a      	ldr	r2, [r3, #32]
 80069cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d90f      	bls.n	80069fc <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80069dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	6a1a      	ldr	r2, [r3, #32]
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ec:	1ad2      	subs	r2, r2, r3
 80069ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	621a      	str	r2, [r3, #32]
 80069fa:	e00e      	b.n	8006a1a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80069fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2200      	movs	r2, #0
 8006a18:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	785b      	ldrb	r3, [r3, #1]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d177      	bne.n	8006b1a <USB_EPStartXfer+0x4c4>
 8006a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	461a      	mov	r2, r3
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	4413      	add	r3, r2
 8006a4c:	61bb      	str	r3, [r7, #24]
 8006a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	011a      	lsls	r2, r3, #4
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	4413      	add	r3, r2
 8006a60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	801a      	strh	r2, [r3, #0]
 8006a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <USB_EPStartXfer+0x43e>
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	881b      	ldrh	r3, [r3, #0]
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a8c:	b29a      	uxth	r2, r3
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	801a      	strh	r2, [r3, #0]
 8006a92:	e06d      	b.n	8006b70 <USB_EPStartXfer+0x51a>
 8006a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a98:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a9a:	d81c      	bhi.n	8006ad6 <USB_EPStartXfer+0x480>
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006aaa:	f003 0301 	and.w	r3, r3, #1
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d004      	beq.n	8006abc <USB_EPStartXfer+0x466>
 8006ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	881b      	ldrh	r3, [r3, #0]
 8006ac0:	b29a      	uxth	r2, r3
 8006ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	029b      	lsls	r3, r3, #10
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	4313      	orrs	r3, r2
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	801a      	strh	r2, [r3, #0]
 8006ad4:	e04c      	b.n	8006b70 <USB_EPStartXfer+0x51a>
 8006ad6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ada:	095b      	lsrs	r3, r3, #5
 8006adc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ae4:	f003 031f 	and.w	r3, r3, #31
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d104      	bne.n	8006af6 <USB_EPStartXfer+0x4a0>
 8006aec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006af0:	3b01      	subs	r3, #1
 8006af2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	881b      	ldrh	r3, [r3, #0]
 8006afa:	b29a      	uxth	r2, r3
 8006afc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	029b      	lsls	r3, r3, #10
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	4313      	orrs	r3, r2
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b12:	b29a      	uxth	r2, r3
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	801a      	strh	r2, [r3, #0]
 8006b18:	e02a      	b.n	8006b70 <USB_EPStartXfer+0x51a>
 8006b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	785b      	ldrb	r3, [r3, #1]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d122      	bne.n	8006b70 <USB_EPStartXfer+0x51a>
 8006b2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b2e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	623b      	str	r3, [r7, #32]
 8006b36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	461a      	mov	r2, r3
 8006b48:	6a3b      	ldr	r3, [r7, #32]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	623b      	str	r3, [r7, #32]
 8006b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	011a      	lsls	r2, r3, #4
 8006b5c:	6a3b      	ldr	r3, [r7, #32]
 8006b5e:	4413      	add	r3, r2
 8006b60:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b64:	61fb      	str	r3, [r7, #28]
 8006b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	69fb      	ldr	r3, [r7, #28]
 8006b6e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b74:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	891b      	ldrh	r3, [r3, #8]
 8006b7c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b80:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b84:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	6959      	ldr	r1, [r3, #20]
 8006b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b96:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b9a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b9e:	6800      	ldr	r0, [r0, #0]
 8006ba0:	f001 fa39 	bl	8008016 <USB_WritePMA>
 8006ba4:	e3ee      	b.n	8007384 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006ba6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006baa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	785b      	ldrb	r3, [r3, #1]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d177      	bne.n	8006ca6 <USB_EPStartXfer+0x650>
 8006bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bd6:	4413      	add	r3, r2
 8006bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	011a      	lsls	r2, r3, #4
 8006be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bea:	4413      	add	r3, r2
 8006bec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006bf0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c00:	801a      	strh	r2, [r3, #0]
 8006c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10a      	bne.n	8006c20 <USB_EPStartXfer+0x5ca>
 8006c0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c0c:	881b      	ldrh	r3, [r3, #0]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c18:	b29a      	uxth	r2, r3
 8006c1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c1c:	801a      	strh	r2, [r3, #0]
 8006c1e:	e06d      	b.n	8006cfc <USB_EPStartXfer+0x6a6>
 8006c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c26:	d81c      	bhi.n	8006c62 <USB_EPStartXfer+0x60c>
 8006c28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2c:	085b      	lsrs	r3, r3, #1
 8006c2e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c36:	f003 0301 	and.w	r3, r3, #1
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d004      	beq.n	8006c48 <USB_EPStartXfer+0x5f2>
 8006c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c42:	3301      	adds	r3, #1
 8006c44:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c4a:	881b      	ldrh	r3, [r3, #0]
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c52:	b29b      	uxth	r3, r3
 8006c54:	029b      	lsls	r3, r3, #10
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c5e:	801a      	strh	r2, [r3, #0]
 8006c60:	e04c      	b.n	8006cfc <USB_EPStartXfer+0x6a6>
 8006c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c70:	f003 031f 	and.w	r3, r3, #31
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d104      	bne.n	8006c82 <USB_EPStartXfer+0x62c>
 8006c78:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	029b      	lsls	r3, r3, #10
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	4313      	orrs	r3, r2
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca2:	801a      	strh	r2, [r3, #0]
 8006ca4:	e02a      	b.n	8006cfc <USB_EPStartXfer+0x6a6>
 8006ca6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	785b      	ldrb	r3, [r3, #1]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d122      	bne.n	8006cfc <USB_EPStartXfer+0x6a6>
 8006cb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cc2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cd6:	4413      	add	r3, r2
 8006cd8:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	011a      	lsls	r2, r3, #4
 8006ce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cea:	4413      	add	r3, r2
 8006cec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cfa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cfc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	891b      	ldrh	r3, [r3, #8]
 8006d08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6959      	ldr	r1, [r3, #20]
 8006d18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d2a:	6800      	ldr	r0, [r0, #0]
 8006d2c:	f001 f973 	bl	8008016 <USB_WritePMA>
            ep->xfer_buff += len;
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	695a      	ldr	r2, [r3, #20]
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	441a      	add	r2, r3
 8006d42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d46:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6a1a      	ldr	r2, [r3, #32]
 8006d5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d5e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	429a      	cmp	r2, r3
 8006d68:	d90f      	bls.n	8006d8a <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006d6a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6a1a      	ldr	r2, [r3, #32]
 8006d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d7a:	1ad2      	subs	r2, r2, r3
 8006d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d80:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	621a      	str	r2, [r3, #32]
 8006d88:	e00e      	b.n	8006da8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6a1b      	ldr	r3, [r3, #32]
 8006d96:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006d9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2200      	movs	r2, #0
 8006da6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006da8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	643b      	str	r3, [r7, #64]	@ 0x40
 8006db4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	785b      	ldrb	r3, [r3, #1]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d177      	bne.n	8006eb4 <USB_EPStartXfer+0x85e>
 8006dc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006dd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	461a      	mov	r2, r3
 8006de2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006de4:	4413      	add	r3, r2
 8006de6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	011a      	lsls	r2, r3, #4
 8006df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df8:	4413      	add	r3, r2
 8006dfa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006dfe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e0e:	801a      	strh	r2, [r3, #0]
 8006e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10a      	bne.n	8006e2e <USB_EPStartXfer+0x7d8>
 8006e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1a:	881b      	ldrh	r3, [r3, #0]
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e26:	b29a      	uxth	r2, r3
 8006e28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e2a:	801a      	strh	r2, [r3, #0]
 8006e2c:	e067      	b.n	8006efe <USB_EPStartXfer+0x8a8>
 8006e2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e32:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e34:	d81c      	bhi.n	8006e70 <USB_EPStartXfer+0x81a>
 8006e36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e3a:	085b      	lsrs	r3, r3, #1
 8006e3c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e44:	f003 0301 	and.w	r3, r3, #1
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <USB_EPStartXfer+0x800>
 8006e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e50:	3301      	adds	r3, #1
 8006e52:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e58:	881b      	ldrh	r3, [r3, #0]
 8006e5a:	b29a      	uxth	r2, r3
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	4313      	orrs	r3, r2
 8006e68:	b29a      	uxth	r2, r3
 8006e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e6c:	801a      	strh	r2, [r3, #0]
 8006e6e:	e046      	b.n	8006efe <USB_EPStartXfer+0x8a8>
 8006e70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e74:	095b      	lsrs	r3, r3, #5
 8006e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e7e:	f003 031f 	and.w	r3, r3, #31
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d104      	bne.n	8006e90 <USB_EPStartXfer+0x83a>
 8006e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e8a:	3b01      	subs	r3, #1
 8006e8c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e92:	881b      	ldrh	r3, [r3, #0]
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e9a:	b29b      	uxth	r3, r3
 8006e9c:	029b      	lsls	r3, r3, #10
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	b29b      	uxth	r3, r3
 8006ea4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ea8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006eac:	b29a      	uxth	r2, r3
 8006eae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb0:	801a      	strh	r2, [r3, #0]
 8006eb2:	e024      	b.n	8006efe <USB_EPStartXfer+0x8a8>
 8006eb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	785b      	ldrb	r3, [r3, #1]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d11c      	bne.n	8006efe <USB_EPStartXfer+0x8a8>
 8006ec4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006ed8:	4413      	add	r3, r2
 8006eda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006edc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ee0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	011a      	lsls	r2, r3, #4
 8006eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ef8:	b29a      	uxth	r2, r3
 8006efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006efc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006efe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	895b      	ldrh	r3, [r3, #10]
 8006f0a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6959      	ldr	r1, [r3, #20]
 8006f1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f24:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f28:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f2c:	6800      	ldr	r0, [r0, #0]
 8006f2e:	f001 f872 	bl	8008016 <USB_WritePMA>
 8006f32:	e227      	b.n	8007384 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	4413      	add	r3, r2
 8006f5e:	881b      	ldrh	r3, [r3, #0]
 8006f60:	b29b      	uxth	r3, r3
 8006f62:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	781b      	ldrb	r3, [r3, #0]
 8006f84:	009b      	lsls	r3, r3, #2
 8006f86:	441a      	add	r2, r3
 8006f88:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f8c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f90:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f94:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fa0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fb0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fc0:	4413      	add	r3, r2
 8006fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	011a      	lsls	r2, r3, #4
 8006fd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006fda:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006fdc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006fe4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006fe6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	891b      	ldrh	r3, [r3, #8]
 8006ff2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ff6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	6959      	ldr	r1, [r3, #20]
 8007002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007006:	b29b      	uxth	r3, r3
 8007008:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800700c:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007010:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007014:	6800      	ldr	r0, [r0, #0]
 8007016:	f000 fffe 	bl	8008016 <USB_WritePMA>
 800701a:	e1b3      	b.n	8007384 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800701c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007020:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	6a1a      	ldr	r2, [r3, #32]
 8007028:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702c:	1ad2      	subs	r2, r2, r3
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800703a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800703e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007048:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	009b      	lsls	r3, r3, #2
 8007052:	4413      	add	r3, r2
 8007054:	881b      	ldrh	r3, [r3, #0]
 8007056:	b29b      	uxth	r3, r3
 8007058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 80c6 	beq.w	80071ee <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007062:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007066:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	673b      	str	r3, [r7, #112]	@ 0x70
 800706e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007072:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	785b      	ldrb	r3, [r3, #1]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d177      	bne.n	800716e <USB_EPStartXfer+0xb18>
 800707e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007082:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	66bb      	str	r3, [r7, #104]	@ 0x68
 800708a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007098:	b29b      	uxth	r3, r3
 800709a:	461a      	mov	r2, r3
 800709c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800709e:	4413      	add	r3, r2
 80070a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	011a      	lsls	r2, r3, #4
 80070b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070b2:	4413      	add	r3, r2
 80070b4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80070ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	b29b      	uxth	r3, r3
 80070c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070c8:	801a      	strh	r2, [r3, #0]
 80070ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10a      	bne.n	80070e8 <USB_EPStartXfer+0xa92>
 80070d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d4:	881b      	ldrh	r3, [r3, #0]
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070e4:	801a      	strh	r2, [r3, #0]
 80070e6:	e067      	b.n	80071b8 <USB_EPStartXfer+0xb62>
 80070e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ec:	2b3e      	cmp	r3, #62	@ 0x3e
 80070ee:	d81c      	bhi.n	800712a <USB_EPStartXfer+0xad4>
 80070f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f4:	085b      	lsrs	r3, r3, #1
 80070f6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <USB_EPStartXfer+0xaba>
 8007106:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800710a:	3301      	adds	r3, #1
 800710c:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007110:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007112:	881b      	ldrh	r3, [r3, #0]
 8007114:	b29a      	uxth	r2, r3
 8007116:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800711a:	b29b      	uxth	r3, r3
 800711c:	029b      	lsls	r3, r3, #10
 800711e:	b29b      	uxth	r3, r3
 8007120:	4313      	orrs	r3, r2
 8007122:	b29a      	uxth	r2, r3
 8007124:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	e046      	b.n	80071b8 <USB_EPStartXfer+0xb62>
 800712a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800712e:	095b      	lsrs	r3, r3, #5
 8007130:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007134:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007138:	f003 031f 	and.w	r3, r3, #31
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <USB_EPStartXfer+0xaf4>
 8007140:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007144:	3b01      	subs	r3, #1
 8007146:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800714a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	b29a      	uxth	r2, r3
 8007150:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007154:	b29b      	uxth	r3, r3
 8007156:	029b      	lsls	r3, r3, #10
 8007158:	b29b      	uxth	r3, r3
 800715a:	4313      	orrs	r3, r2
 800715c:	b29b      	uxth	r3, r3
 800715e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007162:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007166:	b29a      	uxth	r2, r3
 8007168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800716a:	801a      	strh	r2, [r3, #0]
 800716c:	e024      	b.n	80071b8 <USB_EPStartXfer+0xb62>
 800716e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007172:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	785b      	ldrb	r3, [r3, #1]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d11c      	bne.n	80071b8 <USB_EPStartXfer+0xb62>
 800717e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007182:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800718c:	b29b      	uxth	r3, r3
 800718e:	461a      	mov	r2, r3
 8007190:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007192:	4413      	add	r3, r2
 8007194:	673b      	str	r3, [r7, #112]	@ 0x70
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	011a      	lsls	r2, r3, #4
 80071a4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071a6:	4413      	add	r3, r2
 80071a8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071b2:	b29a      	uxth	r2, r3
 80071b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071b6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80071b8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071bc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	895b      	ldrh	r3, [r3, #10]
 80071c4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6959      	ldr	r1, [r3, #20]
 80071d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d8:	b29b      	uxth	r3, r3
 80071da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80071de:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80071e2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80071e6:	6800      	ldr	r0, [r0, #0]
 80071e8:	f000 ff15 	bl	8008016 <USB_WritePMA>
 80071ec:	e0ca      	b.n	8007384 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80071ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	785b      	ldrb	r3, [r3, #1]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d177      	bne.n	80072ee <USB_EPStartXfer+0xc98>
 80071fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007202:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800720a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800720e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800721e:	4413      	add	r3, r2
 8007220:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	011a      	lsls	r2, r3, #4
 8007230:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007232:	4413      	add	r3, r2
 8007234:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800723a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800723c:	881b      	ldrh	r3, [r3, #0]
 800723e:	b29b      	uxth	r3, r3
 8007240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007244:	b29a      	uxth	r2, r3
 8007246:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007248:	801a      	strh	r2, [r3, #0]
 800724a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10a      	bne.n	8007268 <USB_EPStartXfer+0xc12>
 8007252:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800725c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007260:	b29a      	uxth	r2, r3
 8007262:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007264:	801a      	strh	r2, [r3, #0]
 8007266:	e073      	b.n	8007350 <USB_EPStartXfer+0xcfa>
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800726c:	2b3e      	cmp	r3, #62	@ 0x3e
 800726e:	d81c      	bhi.n	80072aa <USB_EPStartXfer+0xc54>
 8007270:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007274:	085b      	lsrs	r3, r3, #1
 8007276:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800727a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <USB_EPStartXfer+0xc3a>
 8007286:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800728a:	3301      	adds	r3, #1
 800728c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007290:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007292:	881b      	ldrh	r3, [r3, #0]
 8007294:	b29a      	uxth	r2, r3
 8007296:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800729a:	b29b      	uxth	r3, r3
 800729c:	029b      	lsls	r3, r3, #10
 800729e:	b29b      	uxth	r3, r3
 80072a0:	4313      	orrs	r3, r2
 80072a2:	b29a      	uxth	r2, r3
 80072a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072a6:	801a      	strh	r2, [r3, #0]
 80072a8:	e052      	b.n	8007350 <USB_EPStartXfer+0xcfa>
 80072aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072ae:	095b      	lsrs	r3, r3, #5
 80072b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072b8:	f003 031f 	and.w	r3, r3, #31
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d104      	bne.n	80072ca <USB_EPStartXfer+0xc74>
 80072c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072c4:	3b01      	subs	r3, #1
 80072c6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29a      	uxth	r2, r3
 80072d0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	029b      	lsls	r3, r3, #10
 80072d8:	b29b      	uxth	r3, r3
 80072da:	4313      	orrs	r3, r2
 80072dc:	b29b      	uxth	r3, r3
 80072de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ea:	801a      	strh	r2, [r3, #0]
 80072ec:	e030      	b.n	8007350 <USB_EPStartXfer+0xcfa>
 80072ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	785b      	ldrb	r3, [r3, #1]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d128      	bne.n	8007350 <USB_EPStartXfer+0xcfa>
 80072fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007302:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800730c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007310:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800731a:	b29b      	uxth	r3, r3
 800731c:	461a      	mov	r2, r3
 800731e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007322:	4413      	add	r3, r2
 8007324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800732c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	011a      	lsls	r2, r3, #4
 8007336:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800733a:	4413      	add	r3, r2
 800733c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007340:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007348:	b29a      	uxth	r2, r3
 800734a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800734e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007354:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	891b      	ldrh	r3, [r3, #8]
 800735c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007360:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007364:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6959      	ldr	r1, [r3, #20]
 800736c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007370:	b29b      	uxth	r3, r3
 8007372:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007376:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800737a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800737e:	6800      	ldr	r0, [r0, #0]
 8007380:	f000 fe49 	bl	8008016 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	4413      	add	r3, r2
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073aa:	817b      	strh	r3, [r7, #10]
 80073ac:	897b      	ldrh	r3, [r7, #10]
 80073ae:	f083 0310 	eor.w	r3, r3, #16
 80073b2:	817b      	strh	r3, [r7, #10]
 80073b4:	897b      	ldrh	r3, [r7, #10]
 80073b6:	f083 0320 	eor.w	r3, r3, #32
 80073ba:	817b      	strh	r3, [r7, #10]
 80073bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073c0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	441a      	add	r2, r3
 80073d6:	897b      	ldrh	r3, [r7, #10]
 80073d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073e0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	8013      	strh	r3, [r2, #0]
 80073ec:	f000 bcdf 	b.w	8007dae <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80073f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	7b1b      	ldrb	r3, [r3, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	f040 80bc 	bne.w	800757a <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007402:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007406:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	699a      	ldr	r2, [r3, #24]
 800740e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007412:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	429a      	cmp	r2, r3
 800741c:	d917      	bls.n	800744e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800741e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007422:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800742e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007432:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800743e:	1ad2      	subs	r2, r2, r3
 8007440:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007444:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	619a      	str	r2, [r3, #24]
 800744c:	e00e      	b.n	800746c <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800744e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007452:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800745e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007462:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2200      	movs	r2, #0
 800746a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800746c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800747a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800747e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007488:	b29b      	uxth	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007490:	4413      	add	r3, r2
 8007492:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007496:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800749a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	011a      	lsls	r2, r3, #4
 80074a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074a8:	4413      	add	r3, r2
 80074aa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	b29b      	uxth	r3, r3
 80074ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074be:	b29a      	uxth	r2, r3
 80074c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074c4:	801a      	strh	r2, [r3, #0]
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10d      	bne.n	80074ea <USB_EPStartXfer+0xe94>
 80074ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074de:	b29a      	uxth	r2, r3
 80074e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074e4:	801a      	strh	r2, [r3, #0]
 80074e6:	f000 bc28 	b.w	8007d3a <USB_EPStartXfer+0x16e4>
 80074ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ee:	2b3e      	cmp	r3, #62	@ 0x3e
 80074f0:	d81f      	bhi.n	8007532 <USB_EPStartXfer+0xedc>
 80074f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074f6:	085b      	lsrs	r3, r3, #1
 80074f8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d004      	beq.n	8007512 <USB_EPStartXfer+0xebc>
 8007508:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800750c:	3301      	adds	r3, #1
 800750e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007512:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	b29a      	uxth	r2, r3
 800751a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800751e:	b29b      	uxth	r3, r3
 8007520:	029b      	lsls	r3, r3, #10
 8007522:	b29b      	uxth	r3, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	b29a      	uxth	r2, r3
 8007528:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	f000 bc04 	b.w	8007d3a <USB_EPStartXfer+0x16e4>
 8007532:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007536:	095b      	lsrs	r3, r3, #5
 8007538:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800753c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007540:	f003 031f 	and.w	r3, r3, #31
 8007544:	2b00      	cmp	r3, #0
 8007546:	d104      	bne.n	8007552 <USB_EPStartXfer+0xefc>
 8007548:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800754c:	3b01      	subs	r3, #1
 800754e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007552:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007556:	881b      	ldrh	r3, [r3, #0]
 8007558:	b29a      	uxth	r2, r3
 800755a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800755e:	b29b      	uxth	r3, r3
 8007560:	029b      	lsls	r3, r3, #10
 8007562:	b29b      	uxth	r3, r3
 8007564:	4313      	orrs	r3, r2
 8007566:	b29b      	uxth	r3, r3
 8007568:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800756c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007570:	b29a      	uxth	r2, r3
 8007572:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007576:	801a      	strh	r2, [r3, #0]
 8007578:	e3df      	b.n	8007d3a <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800757a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	78db      	ldrb	r3, [r3, #3]
 8007586:	2b02      	cmp	r3, #2
 8007588:	f040 8218 	bne.w	80079bc <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800758c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007590:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	2b00      	cmp	r3, #0
 800759a:	f040 809d 	bne.w	80076d8 <USB_EPStartXfer+0x1082>
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	461a      	mov	r2, r3
 80075be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075c2:	4413      	add	r3, r2
 80075c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	781b      	ldrb	r3, [r3, #0]
 80075d4:	011a      	lsls	r2, r3, #4
 80075d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075da:	4413      	add	r3, r2
 80075dc:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80075e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80075e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	b29b      	uxth	r3, r3
 80075ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075f6:	801a      	strh	r2, [r3, #0]
 80075f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d10c      	bne.n	8007622 <USB_EPStartXfer+0xfcc>
 8007608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007618:	b29a      	uxth	r2, r3
 800761a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800761e:	801a      	strh	r2, [r3, #0]
 8007620:	e08f      	b.n	8007742 <USB_EPStartXfer+0x10ec>
 8007622:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007626:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007630:	d826      	bhi.n	8007680 <USB_EPStartXfer+0x102a>
 8007632:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007636:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007644:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007648:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	691b      	ldr	r3, [r3, #16]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d004      	beq.n	8007662 <USB_EPStartXfer+0x100c>
 8007658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800765c:	3301      	adds	r3, #1
 800765e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007662:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007666:	881b      	ldrh	r3, [r3, #0]
 8007668:	b29a      	uxth	r2, r3
 800766a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800766e:	b29b      	uxth	r3, r3
 8007670:	029b      	lsls	r3, r3, #10
 8007672:	b29b      	uxth	r3, r3
 8007674:	4313      	orrs	r3, r2
 8007676:	b29a      	uxth	r2, r3
 8007678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800767c:	801a      	strh	r2, [r3, #0]
 800767e:	e060      	b.n	8007742 <USB_EPStartXfer+0x10ec>
 8007680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	691b      	ldr	r3, [r3, #16]
 800768c:	095b      	lsrs	r3, r3, #5
 800768e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007692:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007696:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	f003 031f 	and.w	r3, r3, #31
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <USB_EPStartXfer+0x105a>
 80076a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076aa:	3b01      	subs	r3, #1
 80076ac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076b4:	881b      	ldrh	r3, [r3, #0]
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076bc:	b29b      	uxth	r3, r3
 80076be:	029b      	lsls	r3, r3, #10
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	4313      	orrs	r3, r2
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076d4:	801a      	strh	r2, [r3, #0]
 80076d6:	e034      	b.n	8007742 <USB_EPStartXfer+0x10ec>
 80076d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	785b      	ldrb	r3, [r3, #1]
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d12c      	bne.n	8007742 <USB_EPStartXfer+0x10ec>
 80076e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80076f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007704:	b29b      	uxth	r3, r3
 8007706:	461a      	mov	r2, r3
 8007708:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800770c:	4413      	add	r3, r2
 800770e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007712:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007716:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	781b      	ldrb	r3, [r3, #0]
 800771e:	011a      	lsls	r2, r3, #4
 8007720:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007724:	4413      	add	r3, r2
 8007726:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800772a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800772e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	691b      	ldr	r3, [r3, #16]
 800773a:	b29a      	uxth	r2, r3
 800773c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007740:	801a      	strh	r2, [r3, #0]
 8007742:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007746:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007750:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007754:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	785b      	ldrb	r3, [r3, #1]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f040 809d 	bne.w	800789c <USB_EPStartXfer+0x1246>
 8007762:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007766:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007774:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800777e:	b29b      	uxth	r3, r3
 8007780:	461a      	mov	r2, r3
 8007782:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007786:	4413      	add	r3, r2
 8007788:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800778c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007790:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	011a      	lsls	r2, r3, #4
 800779a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800779e:	4413      	add	r3, r2
 80077a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077b4:	b29a      	uxth	r2, r3
 80077b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077ba:	801a      	strh	r2, [r3, #0]
 80077bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10c      	bne.n	80077e6 <USB_EPStartXfer+0x1190>
 80077cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077dc:	b29a      	uxth	r2, r3
 80077de:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077e2:	801a      	strh	r2, [r3, #0]
 80077e4:	e088      	b.n	80078f8 <USB_EPStartXfer+0x12a2>
 80077e6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077ea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80077f4:	d826      	bhi.n	8007844 <USB_EPStartXfer+0x11ee>
 80077f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	691b      	ldr	r3, [r3, #16]
 8007802:	085b      	lsrs	r3, r3, #1
 8007804:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	691b      	ldr	r3, [r3, #16]
 8007814:	f003 0301 	and.w	r3, r3, #1
 8007818:	2b00      	cmp	r3, #0
 800781a:	d004      	beq.n	8007826 <USB_EPStartXfer+0x11d0>
 800781c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007820:	3301      	adds	r3, #1
 8007822:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007826:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800782a:	881b      	ldrh	r3, [r3, #0]
 800782c:	b29a      	uxth	r2, r3
 800782e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007832:	b29b      	uxth	r3, r3
 8007834:	029b      	lsls	r3, r3, #10
 8007836:	b29b      	uxth	r3, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	b29a      	uxth	r2, r3
 800783c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007840:	801a      	strh	r2, [r3, #0]
 8007842:	e059      	b.n	80078f8 <USB_EPStartXfer+0x12a2>
 8007844:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007848:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	095b      	lsrs	r3, r3, #5
 8007852:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007856:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800785a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 031f 	and.w	r3, r3, #31
 8007866:	2b00      	cmp	r3, #0
 8007868:	d104      	bne.n	8007874 <USB_EPStartXfer+0x121e>
 800786a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800786e:	3b01      	subs	r3, #1
 8007870:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007874:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007878:	881b      	ldrh	r3, [r3, #0]
 800787a:	b29a      	uxth	r2, r3
 800787c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007880:	b29b      	uxth	r3, r3
 8007882:	029b      	lsls	r3, r3, #10
 8007884:	b29b      	uxth	r3, r3
 8007886:	4313      	orrs	r3, r2
 8007888:	b29b      	uxth	r3, r3
 800788a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800788e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007892:	b29a      	uxth	r2, r3
 8007894:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	e02d      	b.n	80078f8 <USB_EPStartXfer+0x12a2>
 800789c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	785b      	ldrb	r3, [r3, #1]
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d125      	bne.n	80078f8 <USB_EPStartXfer+0x12a2>
 80078ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078c2:	4413      	add	r3, r2
 80078c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	011a      	lsls	r2, r3, #4
 80078d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078da:	4413      	add	r3, r2
 80078dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80078e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80078e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	b29a      	uxth	r2, r3
 80078f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078f6:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80078f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078fc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	69db      	ldr	r3, [r3, #28]
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 8218 	beq.w	8007d3a <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800790a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	781b      	ldrb	r3, [r3, #0]
 8007920:	009b      	lsls	r3, r3, #2
 8007922:	4413      	add	r3, r2
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800792a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800792e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007932:	2b00      	cmp	r3, #0
 8007934:	d005      	beq.n	8007942 <USB_EPStartXfer+0x12ec>
 8007936:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800793a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10d      	bne.n	800795e <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007942:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007946:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800794a:	2b00      	cmp	r3, #0
 800794c:	f040 81f5 	bne.w	8007d3a <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007950:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007958:	2b00      	cmp	r3, #0
 800795a:	f040 81ee 	bne.w	8007d3a <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800795e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007962:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	4413      	add	r3, r2
 8007978:	881b      	ldrh	r3, [r3, #0]
 800797a:	b29b      	uxth	r3, r3
 800797c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007980:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007984:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	441a      	add	r2, r3
 80079a2:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80079a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079b2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8013      	strh	r3, [r2, #0]
 80079ba:	e1be      	b.n	8007d3a <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079bc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	78db      	ldrb	r3, [r3, #3]
 80079c8:	2b01      	cmp	r3, #1
 80079ca:	f040 81b4 	bne.w	8007d36 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80079ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	699a      	ldr	r2, [r3, #24]
 80079da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d917      	bls.n	8007a1a <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 80079fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	699a      	ldr	r2, [r3, #24]
 8007a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a0a:	1ad2      	subs	r2, r2, r3
 8007a0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	619a      	str	r2, [r3, #24]
 8007a18:	e00e      	b.n	8007a38 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007a2a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2200      	movs	r2, #0
 8007a36:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a3c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	785b      	ldrb	r3, [r3, #1]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f040 8085 	bne.w	8007b54 <USB_EPStartXfer+0x14fe>
 8007a4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a5c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a6e:	4413      	add	r3, r2
 8007a70:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	011a      	lsls	r2, r3, #4
 8007a82:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a86:	4413      	add	r3, r2
 8007a88:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a8c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a94:	881b      	ldrh	r3, [r3, #0]
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a9c:	b29a      	uxth	r2, r3
 8007a9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007aa2:	801a      	strh	r2, [r3, #0]
 8007aa4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d10c      	bne.n	8007ac6 <USB_EPStartXfer+0x1470>
 8007aac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ab0:	881b      	ldrh	r3, [r3, #0]
 8007ab2:	b29b      	uxth	r3, r3
 8007ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ac2:	801a      	strh	r2, [r3, #0]
 8007ac4:	e077      	b.n	8007bb6 <USB_EPStartXfer+0x1560>
 8007ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aca:	2b3e      	cmp	r3, #62	@ 0x3e
 8007acc:	d81e      	bhi.n	8007b0c <USB_EPStartXfer+0x14b6>
 8007ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad2:	085b      	lsrs	r3, r3, #1
 8007ad4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d004      	beq.n	8007aee <USB_EPStartXfer+0x1498>
 8007ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ae8:	3301      	adds	r3, #1
 8007aea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007aee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	029b      	lsls	r3, r3, #10
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	4313      	orrs	r3, r2
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b08:	801a      	strh	r2, [r3, #0]
 8007b0a:	e054      	b.n	8007bb6 <USB_EPStartXfer+0x1560>
 8007b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b10:	095b      	lsrs	r3, r3, #5
 8007b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <USB_EPStartXfer+0x14d6>
 8007b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b26:	3b01      	subs	r3, #1
 8007b28:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b30:	881b      	ldrh	r3, [r3, #0]
 8007b32:	b29a      	uxth	r2, r3
 8007b34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	029b      	lsls	r3, r3, #10
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b50:	801a      	strh	r2, [r3, #0]
 8007b52:	e030      	b.n	8007bb6 <USB_EPStartXfer+0x1560>
 8007b54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	785b      	ldrb	r3, [r3, #1]
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d128      	bne.n	8007bb6 <USB_EPStartXfer+0x1560>
 8007b64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b76:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	461a      	mov	r2, r3
 8007b84:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b88:	4413      	add	r3, r2
 8007b8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	011a      	lsls	r2, r3, #4
 8007b9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007ba0:	4413      	add	r3, r2
 8007ba2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ba6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007bb4:	801a      	strh	r2, [r3, #0]
 8007bb6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007bc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bc8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f040 8085 	bne.w	8007ce0 <USB_EPStartXfer+0x168a>
 8007bd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bda:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007be8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	011a      	lsls	r2, r3, #4
 8007c0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c12:	4413      	add	r3, r2
 8007c14:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c2e:	801a      	strh	r2, [r3, #0]
 8007c30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10c      	bne.n	8007c52 <USB_EPStartXfer+0x15fc>
 8007c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c3c:	881b      	ldrh	r3, [r3, #0]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c4e:	801a      	strh	r2, [r3, #0]
 8007c50:	e073      	b.n	8007d3a <USB_EPStartXfer+0x16e4>
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c58:	d81e      	bhi.n	8007c98 <USB_EPStartXfer+0x1642>
 8007c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c5e:	085b      	lsrs	r3, r3, #1
 8007c60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d004      	beq.n	8007c7a <USB_EPStartXfer+0x1624>
 8007c70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c74:	3301      	adds	r3, #1
 8007c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c7e:	881b      	ldrh	r3, [r3, #0]
 8007c80:	b29a      	uxth	r2, r3
 8007c82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c86:	b29b      	uxth	r3, r3
 8007c88:	029b      	lsls	r3, r3, #10
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	b29a      	uxth	r2, r3
 8007c90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c94:	801a      	strh	r2, [r3, #0]
 8007c96:	e050      	b.n	8007d3a <USB_EPStartXfer+0x16e4>
 8007c98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c9c:	095b      	lsrs	r3, r3, #5
 8007c9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007ca2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca6:	f003 031f 	and.w	r3, r3, #31
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d104      	bne.n	8007cb8 <USB_EPStartXfer+0x1662>
 8007cae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cb2:	3b01      	subs	r3, #1
 8007cb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cb8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	029b      	lsls	r3, r3, #10
 8007cc8:	b29b      	uxth	r3, r3
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	b29b      	uxth	r3, r3
 8007cce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cdc:	801a      	strh	r2, [r3, #0]
 8007cde:	e02c      	b.n	8007d3a <USB_EPStartXfer+0x16e4>
 8007ce0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	785b      	ldrb	r3, [r3, #1]
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d124      	bne.n	8007d3a <USB_EPStartXfer+0x16e4>
 8007cf0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cf4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	461a      	mov	r2, r3
 8007d02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d06:	4413      	add	r3, r2
 8007d08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	011a      	lsls	r2, r3, #4
 8007d1a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d1e:	4413      	add	r3, r2
 8007d20:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d24:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d2c:	b29a      	uxth	r2, r3
 8007d2e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d32:	801a      	strh	r2, [r3, #0]
 8007d34:	e001      	b.n	8007d3a <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e03a      	b.n	8007db0 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d3e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d48:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	4413      	add	r3, r2
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d60:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d64:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d68:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d6c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d74:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d78:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d84:	681a      	ldr	r2, [r3, #0]
 8007d86:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d8a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	441a      	add	r2, r3
 8007d96:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007da2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007da6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dae:	2300      	movs	r3, #0
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dba:	b480      	push	{r7}
 8007dbc:	b085      	sub	sp, #20
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
 8007dc2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	785b      	ldrb	r3, [r3, #1]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d020      	beq.n	8007e0e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	683b      	ldr	r3, [r7, #0]
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	009b      	lsls	r3, r3, #2
 8007dd4:	4413      	add	r3, r2
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007dde:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007de2:	81bb      	strh	r3, [r7, #12]
 8007de4:	89bb      	ldrh	r3, [r7, #12]
 8007de6:	f083 0310 	eor.w	r3, r3, #16
 8007dea:	81bb      	strh	r3, [r7, #12]
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	441a      	add	r2, r3
 8007df6:	89bb      	ldrh	r3, [r7, #12]
 8007df8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dfc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	8013      	strh	r3, [r2, #0]
 8007e0c:	e01f      	b.n	8007e4e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	4413      	add	r3, r2
 8007e18:	881b      	ldrh	r3, [r3, #0]
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e24:	81fb      	strh	r3, [r7, #14]
 8007e26:	89fb      	ldrh	r3, [r7, #14]
 8007e28:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e2c:	81fb      	strh	r3, [r7, #14]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	009b      	lsls	r3, r3, #2
 8007e36:	441a      	add	r2, r3
 8007e38:	89fb      	ldrh	r3, [r7, #14]
 8007e3a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e3e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e42:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b087      	sub	sp, #28
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	7b1b      	ldrb	r3, [r3, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f040 809d 	bne.w	8007faa <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	785b      	ldrb	r3, [r3, #1]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d04c      	beq.n	8007f12 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	881b      	ldrh	r3, [r3, #0]
 8007e84:	823b      	strh	r3, [r7, #16]
 8007e86:	8a3b      	ldrh	r3, [r7, #16]
 8007e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d01b      	beq.n	8007ec8 <USB_EPClearStall+0x6c>
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	781b      	ldrb	r3, [r3, #0]
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	881b      	ldrh	r3, [r3, #0]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ea2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ea6:	81fb      	strh	r3, [r7, #14]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	781b      	ldrb	r3, [r3, #0]
 8007eae:	009b      	lsls	r3, r3, #2
 8007eb0:	441a      	add	r2, r3
 8007eb2:	89fb      	ldrh	r3, [r7, #14]
 8007eb4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007eb8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ebc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ec0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	78db      	ldrb	r3, [r3, #3]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d06c      	beq.n	8007faa <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ed0:	687a      	ldr	r2, [r7, #4]
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	781b      	ldrb	r3, [r3, #0]
 8007ed6:	009b      	lsls	r3, r3, #2
 8007ed8:	4413      	add	r3, r2
 8007eda:	881b      	ldrh	r3, [r3, #0]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ee2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ee6:	81bb      	strh	r3, [r7, #12]
 8007ee8:	89bb      	ldrh	r3, [r7, #12]
 8007eea:	f083 0320 	eor.w	r3, r3, #32
 8007eee:	81bb      	strh	r3, [r7, #12]
 8007ef0:	687a      	ldr	r2, [r7, #4]
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	781b      	ldrb	r3, [r3, #0]
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	441a      	add	r2, r3
 8007efa:	89bb      	ldrh	r3, [r7, #12]
 8007efc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f00:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f04:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	8013      	strh	r3, [r2, #0]
 8007f10:	e04b      	b.n	8007faa <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f12:	687a      	ldr	r2, [r7, #4]
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	009b      	lsls	r3, r3, #2
 8007f1a:	4413      	add	r3, r2
 8007f1c:	881b      	ldrh	r3, [r3, #0]
 8007f1e:	82fb      	strh	r3, [r7, #22]
 8007f20:	8afb      	ldrh	r3, [r7, #22]
 8007f22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01b      	beq.n	8007f62 <USB_EPClearStall+0x106>
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f40:	82bb      	strh	r3, [r7, #20]
 8007f42:	687a      	ldr	r2, [r7, #4]
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	009b      	lsls	r3, r3, #2
 8007f4a:	441a      	add	r2, r3
 8007f4c:	8abb      	ldrh	r3, [r7, #20]
 8007f4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	4413      	add	r3, r2
 8007f6c:	881b      	ldrh	r3, [r3, #0]
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f78:	827b      	strh	r3, [r7, #18]
 8007f7a:	8a7b      	ldrh	r3, [r7, #18]
 8007f7c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f80:	827b      	strh	r3, [r7, #18]
 8007f82:	8a7b      	ldrh	r3, [r7, #18]
 8007f84:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f88:	827b      	strh	r3, [r7, #18]
 8007f8a:	687a      	ldr	r2, [r7, #4]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	441a      	add	r2, r3
 8007f94:	8a7b      	ldrh	r3, [r7, #18]
 8007f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	4618      	mov	r0, r3
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d103      	bne.n	8007fd2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2280      	movs	r2, #128	@ 0x80
 8007fce:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007fe8:	2300      	movs	r3, #0
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	370c      	adds	r7, #12
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff4:	4770      	bx	lr

08007ff6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007ff6:	b480      	push	{r7}
 8007ff8:	b085      	sub	sp, #20
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008004:	b29b      	uxth	r3, r3
 8008006:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8008008:	68fb      	ldr	r3, [r7, #12]
}
 800800a:	4618      	mov	r0, r3
 800800c:	3714      	adds	r7, #20
 800800e:	46bd      	mov	sp, r7
 8008010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008014:	4770      	bx	lr

08008016 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8008016:	b480      	push	{r7}
 8008018:	b08b      	sub	sp, #44	@ 0x2c
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	60b9      	str	r1, [r7, #8]
 8008020:	4611      	mov	r1, r2
 8008022:	461a      	mov	r2, r3
 8008024:	460b      	mov	r3, r1
 8008026:	80fb      	strh	r3, [r7, #6]
 8008028:	4613      	mov	r3, r2
 800802a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800802c:	88bb      	ldrh	r3, [r7, #4]
 800802e:	3301      	adds	r3, #1
 8008030:	085b      	lsrs	r3, r3, #1
 8008032:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	005a      	lsls	r2, r3, #1
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008048:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800804a:	69bb      	ldr	r3, [r7, #24]
 800804c:	627b      	str	r3, [r7, #36]	@ 0x24
 800804e:	e01e      	b.n	800808e <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008050:	69fb      	ldr	r3, [r7, #28]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8008056:	69fb      	ldr	r3, [r7, #28]
 8008058:	3301      	adds	r3, #1
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	021b      	lsls	r3, r3, #8
 800805e:	b21a      	sxth	r2, r3
 8008060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008064:	4313      	orrs	r3, r2
 8008066:	b21b      	sxth	r3, r3
 8008068:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	8a7a      	ldrh	r2, [r7, #18]
 800806e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	3302      	adds	r3, #2
 8008074:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008076:	6a3b      	ldr	r3, [r7, #32]
 8008078:	3302      	adds	r3, #2
 800807a:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3301      	adds	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808a:	3b01      	subs	r3, #1
 800808c:	627b      	str	r3, [r7, #36]	@ 0x24
 800808e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d1dd      	bne.n	8008050 <USB_WritePMA+0x3a>
  }
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop
 8008098:	372c      	adds	r7, #44	@ 0x2c
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b08b      	sub	sp, #44	@ 0x2c
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	4611      	mov	r1, r2
 80080ae:	461a      	mov	r2, r3
 80080b0:	460b      	mov	r3, r1
 80080b2:	80fb      	strh	r3, [r7, #6]
 80080b4:	4613      	mov	r3, r2
 80080b6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080b8:	88bb      	ldrh	r3, [r7, #4]
 80080ba:	085b      	lsrs	r3, r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080c8:	88fb      	ldrh	r3, [r7, #6]
 80080ca:	005a      	lsls	r2, r3, #1
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	4413      	add	r3, r2
 80080d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080da:	e01b      	b.n	8008114 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80080dc:	6a3b      	ldr	r3, [r7, #32]
 80080de:	881b      	ldrh	r3, [r3, #0]
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80080e4:	6a3b      	ldr	r3, [r7, #32]
 80080e6:	3302      	adds	r3, #2
 80080e8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	3301      	adds	r3, #1
 80080f6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	0a1b      	lsrs	r3, r3, #8
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	3301      	adds	r3, #1
 8008106:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	3302      	adds	r3, #2
 800810c:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800810e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008110:	3b01      	subs	r3, #1
 8008112:	627b      	str	r3, [r7, #36]	@ 0x24
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1e0      	bne.n	80080dc <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800811a:	88bb      	ldrh	r3, [r7, #4]
 800811c:	f003 0301 	and.w	r3, r3, #1
 8008120:	b29b      	uxth	r3, r3
 8008122:	2b00      	cmp	r3, #0
 8008124:	d007      	beq.n	8008136 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8008126:	6a3b      	ldr	r3, [r7, #32]
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29b      	uxth	r3, r3
 800812c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	b2da      	uxtb	r2, r3
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	701a      	strb	r2, [r3, #0]
  }
}
 8008136:	bf00      	nop
 8008138:	372c      	adds	r7, #44	@ 0x2c
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008142:	b580      	push	{r7, lr}
 8008144:	b084      	sub	sp, #16
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	460b      	mov	r3, r1
 800814c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008152:	2302      	movs	r3, #2
 8008154:	2203      	movs	r2, #3
 8008156:	2181      	movs	r1, #129	@ 0x81
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f001 fd82 	bl	8009c62 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008164:	2302      	movs	r3, #2
 8008166:	2203      	movs	r2, #3
 8008168:	2101      	movs	r1, #1
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f001 fd79 	bl	8009c62 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008178:	2054      	movs	r0, #84	@ 0x54
 800817a:	f001 fe87 	bl	8009e8c <USBD_static_malloc>
 800817e:	4602      	mov	r2, r0
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800818c:	2b00      	cmp	r3, #0
 800818e:	d102      	bne.n	8008196 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 8008190:	2301      	movs	r3, #1
 8008192:	73fb      	strb	r3, [r7, #15]
 8008194:	e012      	b.n	80081bc <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800819c:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	2340      	movs	r3, #64	@ 0x40
 80081b4:	2101      	movs	r1, #1
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f001 fe44 	bl	8009e44 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b082      	sub	sp, #8
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
 80081ce:	460b      	mov	r3, r1
 80081d0:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80081d2:	2181      	movs	r1, #129	@ 0x81
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 fd6a 	bl	8009cae <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2200      	movs	r2, #0
 80081de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 80081e0:	2101      	movs	r1, #1
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 fd63 	bl	8009cae <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00e      	beq.n	8008218 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008200:	689b      	ldr	r3, [r3, #8]
 8008202:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fe4c 	bl	8009ea8 <USBD_static_free>
    pdev->pClassData = NULL;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}
	...

08008224 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b088      	sub	sp, #32
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008234:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800823a:	2300      	movs	r3, #0
 800823c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800823e:	2300      	movs	r3, #0
 8008240:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008242:	2300      	movs	r3, #0
 8008244:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800824e:	2b00      	cmp	r3, #0
 8008250:	d051      	beq.n	80082f6 <USBD_CUSTOM_HID_Setup+0xd2>
 8008252:	2b20      	cmp	r3, #32
 8008254:	f040 80d8 	bne.w	8008408 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	785b      	ldrb	r3, [r3, #1]
 800825c:	3b02      	subs	r3, #2
 800825e:	2b09      	cmp	r3, #9
 8008260:	d841      	bhi.n	80082e6 <USBD_CUSTOM_HID_Setup+0xc2>
 8008262:	a201      	add	r2, pc, #4	@ (adr r2, 8008268 <USBD_CUSTOM_HID_Setup+0x44>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	080082c1 	.word	0x080082c1
 800826c:	0800829f 	.word	0x0800829f
 8008270:	080082e7 	.word	0x080082e7
 8008274:	080082e7 	.word	0x080082e7
 8008278:	080082e7 	.word	0x080082e7
 800827c:	080082e7 	.word	0x080082e7
 8008280:	080082e7 	.word	0x080082e7
 8008284:	080082d1 	.word	0x080082d1
 8008288:	080082af 	.word	0x080082af
 800828c:	08008291 	.word	0x08008291
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	885b      	ldrh	r3, [r3, #2]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	461a      	mov	r2, r3
 8008298:	693b      	ldr	r3, [r7, #16]
 800829a:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 800829c:	e02a      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	3340      	adds	r3, #64	@ 0x40
 80082a2:	2201      	movs	r2, #1
 80082a4:	4619      	mov	r1, r3
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 f9a4 	bl	80095f4 <USBD_CtlSendData>
          break;
 80082ac:	e022      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	885b      	ldrh	r3, [r3, #2]
 80082b2:	0a1b      	lsrs	r3, r3, #8
 80082b4:	b29b      	uxth	r3, r3
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	461a      	mov	r2, r3
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 80082be:	e019      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3344      	adds	r3, #68	@ 0x44
 80082c4:	2201      	movs	r2, #1
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f993 	bl	80095f4 <USBD_CtlSendData>
          break;
 80082ce:	e011      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2201      	movs	r2, #1
 80082d4:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80082d6:	6939      	ldr	r1, [r7, #16]
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	88db      	ldrh	r3, [r3, #6]
 80082dc:	461a      	mov	r2, r3
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 f9b6 	bl	8009650 <USBD_CtlPrepareRx>
          break;
 80082e4:	e006      	b.n	80082f4 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 80082e6:	6839      	ldr	r1, [r7, #0]
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 f918 	bl	800951e <USBD_CtlError>
          ret = USBD_FAIL;
 80082ee:	2302      	movs	r3, #2
 80082f0:	75fb      	strb	r3, [r7, #23]
          break;
 80082f2:	bf00      	nop
      }
      break;
 80082f4:	e08f      	b.n	8008416 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b0b      	cmp	r3, #11
 80082fc:	d87c      	bhi.n	80083f8 <USBD_CUSTOM_HID_Setup+0x1d4>
 80082fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008304 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008304:	08008335 	.word	0x08008335
 8008308:	080083f9 	.word	0x080083f9
 800830c:	080083f9 	.word	0x080083f9
 8008310:	080083f9 	.word	0x080083f9
 8008314:	080083f9 	.word	0x080083f9
 8008318:	080083f9 	.word	0x080083f9
 800831c:	0800835d 	.word	0x0800835d
 8008320:	080083f9 	.word	0x080083f9
 8008324:	080083f9 	.word	0x080083f9
 8008328:	080083f9 	.word	0x080083f9
 800832c:	080083ab 	.word	0x080083ab
 8008330:	080083d3 	.word	0x080083d3
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800833a:	2b03      	cmp	r3, #3
 800833c:	d107      	bne.n	800834e <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800833e:	f107 030e 	add.w	r3, r7, #14
 8008342:	2202      	movs	r2, #2
 8008344:	4619      	mov	r1, r3
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f954 	bl	80095f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800834c:	e05b      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f001 f8e4 	bl	800951e <USBD_CtlError>
            ret = USBD_FAIL;
 8008356:	2302      	movs	r3, #2
 8008358:	75fb      	strb	r3, [r7, #23]
          break;
 800835a:	e054      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	885b      	ldrh	r3, [r3, #2]
 8008360:	0a1b      	lsrs	r3, r3, #8
 8008362:	b29b      	uxth	r3, r3
 8008364:	2b22      	cmp	r3, #34	@ 0x22
 8008366:	d10b      	bne.n	8008380 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	88db      	ldrh	r3, [r3, #6]
 800836c:	2b2c      	cmp	r3, #44	@ 0x2c
 800836e:	bf28      	it	cs
 8008370:	232c      	movcs	r3, #44	@ 0x2c
 8008372:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	61bb      	str	r3, [r7, #24]
 800837e:	e00d      	b.n	800839c <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	885b      	ldrh	r3, [r3, #2]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b21      	cmp	r3, #33	@ 0x21
 800838a:	d107      	bne.n	800839c <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 800838c:	4b24      	ldr	r3, [pc, #144]	@ (8008420 <USBD_CUSTOM_HID_Setup+0x1fc>)
 800838e:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	88db      	ldrh	r3, [r3, #6]
 8008394:	2b09      	cmp	r3, #9
 8008396:	bf28      	it	cs
 8008398:	2309      	movcs	r3, #9
 800839a:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 800839c:	8bfb      	ldrh	r3, [r7, #30]
 800839e:	461a      	mov	r2, r3
 80083a0:	69b9      	ldr	r1, [r7, #24]
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f001 f926 	bl	80095f4 <USBD_CtlSendData>
          break;
 80083a8:	e02d      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083b0:	2b03      	cmp	r3, #3
 80083b2:	d107      	bne.n	80083c4 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80083b4:	693b      	ldr	r3, [r7, #16]
 80083b6:	3348      	adds	r3, #72	@ 0x48
 80083b8:	2201      	movs	r2, #1
 80083ba:	4619      	mov	r1, r3
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 f919 	bl	80095f4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083c2:	e020      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80083c4:	6839      	ldr	r1, [r7, #0]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 f8a9 	bl	800951e <USBD_CtlError>
            ret = USBD_FAIL;
 80083cc:	2302      	movs	r3, #2
 80083ce:	75fb      	strb	r3, [r7, #23]
          break;
 80083d0:	e019      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d106      	bne.n	80083ea <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	885b      	ldrh	r3, [r3, #2]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	461a      	mov	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083e8:	e00d      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80083ea:	6839      	ldr	r1, [r7, #0]
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 f896 	bl	800951e <USBD_CtlError>
            ret = USBD_FAIL;
 80083f2:	2302      	movs	r3, #2
 80083f4:	75fb      	strb	r3, [r7, #23]
          break;
 80083f6:	e006      	b.n	8008406 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 80083f8:	6839      	ldr	r1, [r7, #0]
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 f88f 	bl	800951e <USBD_CtlError>
          ret = USBD_FAIL;
 8008400:	2302      	movs	r3, #2
 8008402:	75fb      	strb	r3, [r7, #23]
          break;
 8008404:	bf00      	nop
      }
      break;
 8008406:	e006      	b.n	8008416 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f001 f887 	bl	800951e <USBD_CtlError>
      ret = USBD_FAIL;
 8008410:	2302      	movs	r3, #2
 8008412:	75fb      	strb	r3, [r7, #23]
      break;
 8008414:	bf00      	nop
  }
  return ret;
 8008416:	7dfb      	ldrb	r3, [r7, #23]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3720      	adds	r7, #32
 800841c:	46bd      	mov	sp, r7
 800841e:	bd80      	pop	{r7, pc}
 8008420:	200000c8 	.word	0x200000c8

08008424 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b086      	sub	sp, #24
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	4613      	mov	r3, r2
 8008430:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008438:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008440:	2b03      	cmp	r3, #3
 8008442:	d111      	bne.n	8008468 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800844a:	2b00      	cmp	r3, #0
 800844c:	d10a      	bne.n	8008464 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 8008456:	88fb      	ldrh	r3, [r7, #6]
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	2181      	movs	r1, #129	@ 0x81
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f001 fcce 	bl	8009dfe <USBD_LL_Transmit>
 8008462:	e001      	b.n	8008468 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008464:	2301      	movs	r3, #1
 8008466:	e000      	b.n	800846a <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3718      	adds	r7, #24
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
	...

08008474 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008474:	b480      	push	{r7}
 8008476:	b083      	sub	sp, #12
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2229      	movs	r2, #41	@ 0x29
 8008480:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 8008482:	4b03      	ldr	r3, [pc, #12]	@ (8008490 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008484:	4618      	mov	r0, r3
 8008486:	370c      	adds	r7, #12
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr
 8008490:	20000044 	.word	0x20000044

08008494 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2229      	movs	r2, #41	@ 0x29
 80084a0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80084a2:	4b03      	ldr	r3, [pc, #12]	@ (80084b0 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	370c      	adds	r7, #12
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr
 80084b0:	20000070 	.word	0x20000070

080084b4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b083      	sub	sp, #12
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2229      	movs	r2, #41	@ 0x29
 80084c0:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80084c2:	4b03      	ldr	r3, [pc, #12]	@ (80084d0 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	370c      	adds	r7, #12
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	2000009c 	.word	0x2000009c

080084d4 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	460b      	mov	r3, r1
 80084de:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return USBD_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr

080084fa <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 80084fa:	b580      	push	{r7, lr}
 80084fc:	b084      	sub	sp, #16
 80084fe:	af00      	add	r7, sp, #0
 8008500:	6078      	str	r0, [r7, #4]
 8008502:	460b      	mov	r3, r1
 8008504:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850c:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	7810      	ldrb	r0, [r2, #0]
 800851a:	68fa      	ldr	r2, [r7, #12]
 800851c:	7852      	ldrb	r2, [r2, #1]
 800851e:	4611      	mov	r1, r2
 8008520:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	2340      	movs	r3, #64	@ 0x40
 8008526:	2101      	movs	r1, #1
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 fc8b 	bl	8009e44 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008546:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800854c:	2b01      	cmp	r3, #1
 800854e:	d10c      	bne.n	800856a <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	7810      	ldrb	r0, [r2, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	7852      	ldrb	r2, [r2, #1]
 8008560:	4611      	mov	r1, r2
 8008562:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2200      	movs	r2, #0
 8008568:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008574:	b480      	push	{r7}
 8008576:	b083      	sub	sp, #12
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	220a      	movs	r2, #10
 8008580:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8008582:	4b03      	ldr	r3, [pc, #12]	@ (8008590 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008584:	4618      	mov	r0, r3
 8008586:	370c      	adds	r7, #12
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr
 8008590:	200000d4 	.word	0x200000d4

08008594 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800859e:	2302      	movs	r3, #2
 80085a0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d005      	beq.n	80085b4 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	683a      	ldr	r2, [r7, #0]
 80085ac:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80085b0:	2300      	movs	r3, #0
 80085b2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b084      	sub	sp, #16
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	60b9      	str	r1, [r7, #8]
 80085cc:	4613      	mov	r3, r2
 80085ce:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085d6:	2302      	movs	r3, #2
 80085d8:	e01a      	b.n	8008610 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	68ba      	ldr	r2, [r7, #8]
 80085f6:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	79fa      	ldrb	r2, [r7, #7]
 8008606:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008608:	68f8      	ldr	r0, [r7, #12]
 800860a:	f001 fabf 	bl	8009b8c <USBD_LL_Init>

  return USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008618:	b480      	push	{r7}
 800861a:	b085      	sub	sp, #20
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008622:	2300      	movs	r3, #0
 8008624:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d006      	beq.n	800863a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008634:	2300      	movs	r3, #0
 8008636:	73fb      	strb	r3, [r7, #15]
 8008638:	e001      	b.n	800863e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800863a:	2302      	movs	r3, #2
 800863c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800863e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3714      	adds	r7, #20
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b082      	sub	sp, #8
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f001 fae9 	bl	8009c2c <USBD_LL_Start>

  return USBD_OK;
 800865a:	2300      	movs	r3, #0
}
 800865c:	4618      	mov	r0, r3
 800865e:	3708      	adds	r7, #8
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800866c:	2300      	movs	r3, #0
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800867a:	b580      	push	{r7, lr}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	460b      	mov	r3, r1
 8008684:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008686:	2302      	movs	r3, #2
 8008688:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008690:	2b00      	cmp	r3, #0
 8008692:	d00c      	beq.n	80086ae <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	78fa      	ldrb	r2, [r7, #3]
 800869e:	4611      	mov	r1, r2
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
 80086a4:	4603      	mov	r3, r0
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d101      	bne.n	80086ae <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	460b      	mov	r3, r1
 80086c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	78fa      	ldrb	r2, [r7, #3]
 80086ce:	4611      	mov	r1, r2
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	4798      	blx	r3

  return USBD_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80086de:	b580      	push	{r7, lr}
 80086e0:	b082      	sub	sp, #8
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
 80086e6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086ee:	6839      	ldr	r1, [r7, #0]
 80086f0:	4618      	mov	r0, r3
 80086f2:	f000 feda 	bl	80094aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008704:	461a      	mov	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008712:	f003 031f 	and.w	r3, r3, #31
 8008716:	2b02      	cmp	r3, #2
 8008718:	d016      	beq.n	8008748 <USBD_LL_SetupStage+0x6a>
 800871a:	2b02      	cmp	r3, #2
 800871c:	d81c      	bhi.n	8008758 <USBD_LL_SetupStage+0x7a>
 800871e:	2b00      	cmp	r3, #0
 8008720:	d002      	beq.n	8008728 <USBD_LL_SetupStage+0x4a>
 8008722:	2b01      	cmp	r3, #1
 8008724:	d008      	beq.n	8008738 <USBD_LL_SetupStage+0x5a>
 8008726:	e017      	b.n	8008758 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800872e:	4619      	mov	r1, r3
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 f9cd 	bl	8008ad0 <USBD_StdDevReq>
      break;
 8008736:	e01a      	b.n	800876e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fa2f 	bl	8008ba4 <USBD_StdItfReq>
      break;
 8008746:	e012      	b.n	800876e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800874e:	4619      	mov	r1, r3
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 fa6f 	bl	8008c34 <USBD_StdEPReq>
      break;
 8008756:	e00a      	b.n	800876e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800875e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008762:	b2db      	uxtb	r3, r3
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 fac0 	bl	8009cec <USBD_LL_StallEP>
      break;
 800876c:	bf00      	nop
  }

  return USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	3708      	adds	r7, #8
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	60f8      	str	r0, [r7, #12]
 8008780:	460b      	mov	r3, r1
 8008782:	607a      	str	r2, [r7, #4]
 8008784:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008786:	7afb      	ldrb	r3, [r7, #11]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d14b      	bne.n	8008824 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008792:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800879a:	2b03      	cmp	r3, #3
 800879c:	d134      	bne.n	8008808 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d919      	bls.n	80087de <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	68da      	ldr	r2, [r3, #12]
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	1ad2      	subs	r2, r2, r3
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	68da      	ldr	r2, [r3, #12]
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087c0:	429a      	cmp	r2, r3
 80087c2:	d203      	bcs.n	80087cc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087c8:	b29b      	uxth	r3, r3
 80087ca:	e002      	b.n	80087d2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	461a      	mov	r2, r3
 80087d4:	6879      	ldr	r1, [r7, #4]
 80087d6:	68f8      	ldr	r0, [r7, #12]
 80087d8:	f000 ff58 	bl	800968c <USBD_CtlContinueRx>
 80087dc:	e038      	b.n	8008850 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d105      	bne.n	8008800 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087fa:	691b      	ldr	r3, [r3, #16]
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f000 ff55 	bl	80096b0 <USBD_CtlSendStatus>
 8008806:	e023      	b.n	8008850 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800880e:	2b05      	cmp	r3, #5
 8008810:	d11e      	bne.n	8008850 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800881a:	2100      	movs	r1, #0
 800881c:	68f8      	ldr	r0, [r7, #12]
 800881e:	f001 fa65 	bl	8009cec <USBD_LL_StallEP>
 8008822:	e015      	b.n	8008850 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800882a:	699b      	ldr	r3, [r3, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00d      	beq.n	800884c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008836:	2b03      	cmp	r3, #3
 8008838:	d108      	bne.n	800884c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	7afa      	ldrb	r2, [r7, #11]
 8008844:	4611      	mov	r1, r2
 8008846:	68f8      	ldr	r0, [r7, #12]
 8008848:	4798      	blx	r3
 800884a:	e001      	b.n	8008850 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800884c:	2302      	movs	r3, #2
 800884e:	e000      	b.n	8008852 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b086      	sub	sp, #24
 800885e:	af00      	add	r7, sp, #0
 8008860:	60f8      	str	r0, [r7, #12]
 8008862:	460b      	mov	r3, r1
 8008864:	607a      	str	r2, [r7, #4]
 8008866:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008868:	7afb      	ldrb	r3, [r7, #11]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d17f      	bne.n	800896e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	3314      	adds	r3, #20
 8008872:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800887a:	2b02      	cmp	r3, #2
 800887c:	d15c      	bne.n	8008938 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	68da      	ldr	r2, [r3, #12]
 8008882:	697b      	ldr	r3, [r7, #20]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	429a      	cmp	r2, r3
 8008888:	d915      	bls.n	80088b6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	68da      	ldr	r2, [r3, #12]
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	1ad2      	subs	r2, r2, r3
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	b29b      	uxth	r3, r3
 800889e:	461a      	mov	r2, r3
 80088a0:	6879      	ldr	r1, [r7, #4]
 80088a2:	68f8      	ldr	r0, [r7, #12]
 80088a4:	f000 fec2 	bl	800962c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088a8:	2300      	movs	r3, #0
 80088aa:	2200      	movs	r2, #0
 80088ac:	2100      	movs	r1, #0
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f001 fac8 	bl	8009e44 <USBD_LL_PrepareReceive>
 80088b4:	e04e      	b.n	8008954 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	6912      	ldr	r2, [r2, #16]
 80088be:	fbb3 f1f2 	udiv	r1, r3, r2
 80088c2:	fb01 f202 	mul.w	r2, r1, r2
 80088c6:	1a9b      	subs	r3, r3, r2
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d11c      	bne.n	8008906 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d316      	bcc.n	8008906 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088d8:	697b      	ldr	r3, [r7, #20]
 80088da:	689a      	ldr	r2, [r3, #8]
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d20f      	bcs.n	8008906 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80088e6:	2200      	movs	r2, #0
 80088e8:	2100      	movs	r1, #0
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f000 fe9e 	bl	800962c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088f8:	2300      	movs	r3, #0
 80088fa:	2200      	movs	r2, #0
 80088fc:	2100      	movs	r1, #0
 80088fe:	68f8      	ldr	r0, [r7, #12]
 8008900:	f001 faa0 	bl	8009e44 <USBD_LL_PrepareReceive>
 8008904:	e026      	b.n	8008954 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00a      	beq.n	8008928 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008918:	2b03      	cmp	r3, #3
 800891a:	d105      	bne.n	8008928 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8008928:	2180      	movs	r1, #128	@ 0x80
 800892a:	68f8      	ldr	r0, [r7, #12]
 800892c:	f001 f9de 	bl	8009cec <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008930:	68f8      	ldr	r0, [r7, #12]
 8008932:	f000 fed0 	bl	80096d6 <USBD_CtlReceiveStatus>
 8008936:	e00d      	b.n	8008954 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800893e:	2b04      	cmp	r3, #4
 8008940:	d004      	beq.n	800894c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8008948:	2b00      	cmp	r3, #0
 800894a:	d103      	bne.n	8008954 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800894c:	2180      	movs	r1, #128	@ 0x80
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f001 f9cc 	bl	8009cec <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800895a:	2b01      	cmp	r3, #1
 800895c:	d11d      	bne.n	800899a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800895e:	68f8      	ldr	r0, [r7, #12]
 8008960:	f7ff fe80 	bl	8008664 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800896c:	e015      	b.n	800899a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008974:	695b      	ldr	r3, [r3, #20]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d00d      	beq.n	8008996 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008980:	2b03      	cmp	r3, #3
 8008982:	d108      	bne.n	8008996 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	7afa      	ldrb	r2, [r7, #11]
 800898e:	4611      	mov	r1, r2
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	4798      	blx	r3
 8008994:	e001      	b.n	800899a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008996:	2302      	movs	r3, #2
 8008998:	e000      	b.n	800899c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3718      	adds	r7, #24
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b082      	sub	sp, #8
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ac:	2340      	movs	r3, #64	@ 0x40
 80089ae:	2200      	movs	r2, #0
 80089b0:	2100      	movs	r1, #0
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f001 f955 	bl	8009c62 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2240      	movs	r2, #64	@ 0x40
 80089c4:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089c8:	2340      	movs	r3, #64	@ 0x40
 80089ca:	2200      	movs	r2, #0
 80089cc:	2180      	movs	r1, #128	@ 0x80
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f001 f947 	bl	8009c62 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2240      	movs	r2, #64	@ 0x40
 80089de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2200      	movs	r2, #0
 80089fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d009      	beq.n	8008a1c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	6852      	ldr	r2, [r2, #4]
 8008a14:	b2d2      	uxtb	r2, r2
 8008a16:	4611      	mov	r1, r2
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	4798      	blx	r3
  }

  return USBD_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3708      	adds	r7, #8
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a26:	b480      	push	{r7}
 8008a28:	b083      	sub	sp, #12
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	460b      	mov	r3, r1
 8008a30:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	78fa      	ldrb	r2, [r7, #3]
 8008a36:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a46:	b480      	push	{r7}
 8008a48:	b083      	sub	sp, #12
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2204      	movs	r2, #4
 8008a5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	370c      	adds	r7, #12
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b083      	sub	sp, #12
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a7e:	2b04      	cmp	r3, #4
 8008a80:	d105      	bne.n	8008a8e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a8e:	2300      	movs	r3, #0
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	370c      	adds	r7, #12
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aaa:	2b03      	cmp	r3, #3
 8008aac:	d10b      	bne.n	8008ac6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ab4:	69db      	ldr	r3, [r3, #28]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ac0:	69db      	ldr	r3, [r3, #28]
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ac6:	2300      	movs	r3, #0
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3708      	adds	r7, #8
 8008acc:	46bd      	mov	sp, r7
 8008ace:	bd80      	pop	{r7, pc}

08008ad0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b084      	sub	sp, #16
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ae6:	2b40      	cmp	r3, #64	@ 0x40
 8008ae8:	d005      	beq.n	8008af6 <USBD_StdDevReq+0x26>
 8008aea:	2b40      	cmp	r3, #64	@ 0x40
 8008aec:	d84f      	bhi.n	8008b8e <USBD_StdDevReq+0xbe>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d009      	beq.n	8008b06 <USBD_StdDevReq+0x36>
 8008af2:	2b20      	cmp	r3, #32
 8008af4:	d14b      	bne.n	8008b8e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008afc:	689b      	ldr	r3, [r3, #8]
 8008afe:	6839      	ldr	r1, [r7, #0]
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
      break;
 8008b04:	e048      	b.n	8008b98 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	785b      	ldrb	r3, [r3, #1]
 8008b0a:	2b09      	cmp	r3, #9
 8008b0c:	d839      	bhi.n	8008b82 <USBD_StdDevReq+0xb2>
 8008b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8008b14 <USBD_StdDevReq+0x44>)
 8008b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b14:	08008b65 	.word	0x08008b65
 8008b18:	08008b79 	.word	0x08008b79
 8008b1c:	08008b83 	.word	0x08008b83
 8008b20:	08008b6f 	.word	0x08008b6f
 8008b24:	08008b83 	.word	0x08008b83
 8008b28:	08008b47 	.word	0x08008b47
 8008b2c:	08008b3d 	.word	0x08008b3d
 8008b30:	08008b83 	.word	0x08008b83
 8008b34:	08008b5b 	.word	0x08008b5b
 8008b38:	08008b51 	.word	0x08008b51
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f9dc 	bl	8008efc <USBD_GetDescriptor>
          break;
 8008b44:	e022      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fb3f 	bl	80091cc <USBD_SetAddress>
          break;
 8008b4e:	e01d      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008b50:	6839      	ldr	r1, [r7, #0]
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fb7e 	bl	8009254 <USBD_SetConfig>
          break;
 8008b58:	e018      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b5a:	6839      	ldr	r1, [r7, #0]
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fc07 	bl	8009370 <USBD_GetConfig>
          break;
 8008b62:	e013      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fc37 	bl	80093da <USBD_GetStatus>
          break;
 8008b6c:	e00e      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b6e:	6839      	ldr	r1, [r7, #0]
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f000 fc65 	bl	8009440 <USBD_SetFeature>
          break;
 8008b76:	e009      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 fc74 	bl	8009468 <USBD_ClrFeature>
          break;
 8008b80:	e004      	b.n	8008b8c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008b82:	6839      	ldr	r1, [r7, #0]
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 fcca 	bl	800951e <USBD_CtlError>
          break;
 8008b8a:	bf00      	nop
      }
      break;
 8008b8c:	e004      	b.n	8008b98 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b8e:	6839      	ldr	r1, [r7, #0]
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fcc4 	bl	800951e <USBD_CtlError>
      break;
 8008b96:	bf00      	nop
  }

  return ret;
 8008b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3710      	adds	r7, #16
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
 8008ba2:	bf00      	nop

08008ba4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bba:	2b40      	cmp	r3, #64	@ 0x40
 8008bbc:	d005      	beq.n	8008bca <USBD_StdItfReq+0x26>
 8008bbe:	2b40      	cmp	r3, #64	@ 0x40
 8008bc0:	d82e      	bhi.n	8008c20 <USBD_StdItfReq+0x7c>
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d001      	beq.n	8008bca <USBD_StdItfReq+0x26>
 8008bc6:	2b20      	cmp	r3, #32
 8008bc8:	d12a      	bne.n	8008c20 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	2b02      	cmp	r3, #2
 8008bd4:	d81d      	bhi.n	8008c12 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	889b      	ldrh	r3, [r3, #4]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d813      	bhi.n	8008c08 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	6839      	ldr	r1, [r7, #0]
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	4798      	blx	r3
 8008bee:	4603      	mov	r3, r0
 8008bf0:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	88db      	ldrh	r3, [r3, #6]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d110      	bne.n	8008c1c <USBD_StdItfReq+0x78>
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d10d      	bne.n	8008c1c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 fd55 	bl	80096b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c06:	e009      	b.n	8008c1c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008c08:	6839      	ldr	r1, [r7, #0]
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f000 fc87 	bl	800951e <USBD_CtlError>
          break;
 8008c10:	e004      	b.n	8008c1c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008c12:	6839      	ldr	r1, [r7, #0]
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	f000 fc82 	bl	800951e <USBD_CtlError>
          break;
 8008c1a:	e000      	b.n	8008c1e <USBD_StdItfReq+0x7a>
          break;
 8008c1c:	bf00      	nop
      }
      break;
 8008c1e:	e004      	b.n	8008c2a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008c20:	6839      	ldr	r1, [r7, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f000 fc7b 	bl	800951e <USBD_CtlError>
      break;
 8008c28:	bf00      	nop
  }

  return USBD_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3710      	adds	r7, #16
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b084      	sub	sp, #16
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
 8008c3c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	889b      	ldrh	r3, [r3, #4]
 8008c46:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	781b      	ldrb	r3, [r3, #0]
 8008c4c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c50:	2b40      	cmp	r3, #64	@ 0x40
 8008c52:	d007      	beq.n	8008c64 <USBD_StdEPReq+0x30>
 8008c54:	2b40      	cmp	r3, #64	@ 0x40
 8008c56:	f200 8146 	bhi.w	8008ee6 <USBD_StdEPReq+0x2b2>
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00a      	beq.n	8008c74 <USBD_StdEPReq+0x40>
 8008c5e:	2b20      	cmp	r3, #32
 8008c60:	f040 8141 	bne.w	8008ee6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	6839      	ldr	r1, [r7, #0]
 8008c6e:	6878      	ldr	r0, [r7, #4]
 8008c70:	4798      	blx	r3
      break;
 8008c72:	e13d      	b.n	8008ef0 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	781b      	ldrb	r3, [r3, #0]
 8008c78:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c7c:	2b20      	cmp	r3, #32
 8008c7e:	d10a      	bne.n	8008c96 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	6839      	ldr	r1, [r7, #0]
 8008c8a:	6878      	ldr	r0, [r7, #4]
 8008c8c:	4798      	blx	r3
 8008c8e:	4603      	mov	r3, r0
 8008c90:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c92:	7bfb      	ldrb	r3, [r7, #15]
 8008c94:	e12d      	b.n	8008ef2 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	785b      	ldrb	r3, [r3, #1]
 8008c9a:	2b03      	cmp	r3, #3
 8008c9c:	d007      	beq.n	8008cae <USBD_StdEPReq+0x7a>
 8008c9e:	2b03      	cmp	r3, #3
 8008ca0:	f300 811b 	bgt.w	8008eda <USBD_StdEPReq+0x2a6>
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d072      	beq.n	8008d8e <USBD_StdEPReq+0x15a>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d03a      	beq.n	8008d22 <USBD_StdEPReq+0xee>
 8008cac:	e115      	b.n	8008eda <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d002      	beq.n	8008cbe <USBD_StdEPReq+0x8a>
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d015      	beq.n	8008ce8 <USBD_StdEPReq+0xb4>
 8008cbc:	e02b      	b.n	8008d16 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00c      	beq.n	8008cde <USBD_StdEPReq+0xaa>
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b80      	cmp	r3, #128	@ 0x80
 8008cc8:	d009      	beq.n	8008cde <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 f80c 	bl	8009cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cd4:	2180      	movs	r1, #128	@ 0x80
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f001 f808 	bl	8009cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cdc:	e020      	b.n	8008d20 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fc1c 	bl	800951e <USBD_CtlError>
              break;
 8008ce6:	e01b      	b.n	8008d20 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	885b      	ldrh	r3, [r3, #2]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10e      	bne.n	8008d0e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d00b      	beq.n	8008d0e <USBD_StdEPReq+0xda>
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	2b80      	cmp	r3, #128	@ 0x80
 8008cfa:	d008      	beq.n	8008d0e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	88db      	ldrh	r3, [r3, #6]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d104      	bne.n	8008d0e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d04:	7bbb      	ldrb	r3, [r7, #14]
 8008d06:	4619      	mov	r1, r3
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 ffef 	bl	8009cec <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fcce 	bl	80096b0 <USBD_CtlSendStatus>

              break;
 8008d14:	e004      	b.n	8008d20 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008d16:	6839      	ldr	r1, [r7, #0]
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fc00 	bl	800951e <USBD_CtlError>
              break;
 8008d1e:	bf00      	nop
          }
          break;
 8008d20:	e0e0      	b.n	8008ee4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d002      	beq.n	8008d32 <USBD_StdEPReq+0xfe>
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d015      	beq.n	8008d5c <USBD_StdEPReq+0x128>
 8008d30:	e026      	b.n	8008d80 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d32:	7bbb      	ldrb	r3, [r7, #14]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d00c      	beq.n	8008d52 <USBD_StdEPReq+0x11e>
 8008d38:	7bbb      	ldrb	r3, [r7, #14]
 8008d3a:	2b80      	cmp	r3, #128	@ 0x80
 8008d3c:	d009      	beq.n	8008d52 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 ffd2 	bl	8009cec <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d48:	2180      	movs	r1, #128	@ 0x80
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f000 ffce 	bl	8009cec <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d50:	e01c      	b.n	8008d8c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fbe2 	bl	800951e <USBD_CtlError>
              break;
 8008d5a:	e017      	b.n	8008d8c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	885b      	ldrh	r3, [r3, #2]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d112      	bne.n	8008d8a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d64:	7bbb      	ldrb	r3, [r7, #14]
 8008d66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d004      	beq.n	8008d78 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d6e:	7bbb      	ldrb	r3, [r7, #14]
 8008d70:	4619      	mov	r1, r3
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f000 ffd9 	bl	8009d2a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fc99 	bl	80096b0 <USBD_CtlSendStatus>
              }
              break;
 8008d7e:	e004      	b.n	8008d8a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008d80:	6839      	ldr	r1, [r7, #0]
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	f000 fbcb 	bl	800951e <USBD_CtlError>
              break;
 8008d88:	e000      	b.n	8008d8c <USBD_StdEPReq+0x158>
              break;
 8008d8a:	bf00      	nop
          }
          break;
 8008d8c:	e0aa      	b.n	8008ee4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d94:	2b02      	cmp	r3, #2
 8008d96:	d002      	beq.n	8008d9e <USBD_StdEPReq+0x16a>
 8008d98:	2b03      	cmp	r3, #3
 8008d9a:	d032      	beq.n	8008e02 <USBD_StdEPReq+0x1ce>
 8008d9c:	e097      	b.n	8008ece <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d9e:	7bbb      	ldrb	r3, [r7, #14]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d007      	beq.n	8008db4 <USBD_StdEPReq+0x180>
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b80      	cmp	r3, #128	@ 0x80
 8008da8:	d004      	beq.n	8008db4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008daa:	6839      	ldr	r1, [r7, #0]
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 fbb6 	bl	800951e <USBD_CtlError>
                break;
 8008db2:	e091      	b.n	8008ed8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008db4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	da0b      	bge.n	8008dd4 <USBD_StdEPReq+0x1a0>
 8008dbc:	7bbb      	ldrb	r3, [r7, #14]
 8008dbe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	3310      	adds	r3, #16
 8008dcc:	687a      	ldr	r2, [r7, #4]
 8008dce:	4413      	add	r3, r2
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	e00b      	b.n	8008dec <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008dd4:	7bbb      	ldrb	r3, [r7, #14]
 8008dd6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dda:	4613      	mov	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	4413      	add	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	4413      	add	r3, r2
 8008dea:	3304      	adds	r3, #4
 8008dec:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	2202      	movs	r2, #2
 8008df8:	4619      	mov	r1, r3
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fbfa 	bl	80095f4 <USBD_CtlSendData>
              break;
 8008e00:	e06a      	b.n	8008ed8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	da11      	bge.n	8008e2e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e0a:	7bbb      	ldrb	r3, [r7, #14]
 8008e0c:	f003 020f 	and.w	r2, r3, #15
 8008e10:	6879      	ldr	r1, [r7, #4]
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	440b      	add	r3, r1
 8008e1c:	3318      	adds	r3, #24
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d117      	bne.n	8008e54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e24:	6839      	ldr	r1, [r7, #0]
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f000 fb79 	bl	800951e <USBD_CtlError>
                  break;
 8008e2c:	e054      	b.n	8008ed8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d104      	bne.n	8008e54 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e4a:	6839      	ldr	r1, [r7, #0]
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 fb66 	bl	800951e <USBD_CtlError>
                  break;
 8008e52:	e041      	b.n	8008ed8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	da0b      	bge.n	8008e74 <USBD_StdEPReq+0x240>
 8008e5c:	7bbb      	ldrb	r3, [r7, #14]
 8008e5e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e62:	4613      	mov	r3, r2
 8008e64:	009b      	lsls	r3, r3, #2
 8008e66:	4413      	add	r3, r2
 8008e68:	009b      	lsls	r3, r3, #2
 8008e6a:	3310      	adds	r3, #16
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	4413      	add	r3, r2
 8008e70:	3304      	adds	r3, #4
 8008e72:	e00b      	b.n	8008e8c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e74:	7bbb      	ldrb	r3, [r7, #14]
 8008e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	009b      	lsls	r3, r3, #2
 8008e7e:	4413      	add	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e86:	687a      	ldr	r2, [r7, #4]
 8008e88:	4413      	add	r3, r2
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e8e:	7bbb      	ldrb	r3, [r7, #14]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d002      	beq.n	8008e9a <USBD_StdEPReq+0x266>
 8008e94:	7bbb      	ldrb	r3, [r7, #14]
 8008e96:	2b80      	cmp	r3, #128	@ 0x80
 8008e98:	d103      	bne.n	8008ea2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008e9a:	68bb      	ldr	r3, [r7, #8]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	601a      	str	r2, [r3, #0]
 8008ea0:	e00e      	b.n	8008ec0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ea2:	7bbb      	ldrb	r3, [r7, #14]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 ff5e 	bl	8009d68 <USBD_LL_IsStallEP>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d003      	beq.n	8008eba <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	e002      	b.n	8008ec0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	2202      	movs	r2, #2
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 fb94 	bl	80095f4 <USBD_CtlSendData>
              break;
 8008ecc:	e004      	b.n	8008ed8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008ece:	6839      	ldr	r1, [r7, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb24 	bl	800951e <USBD_CtlError>
              break;
 8008ed6:	bf00      	nop
          }
          break;
 8008ed8:	e004      	b.n	8008ee4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008eda:	6839      	ldr	r1, [r7, #0]
 8008edc:	6878      	ldr	r0, [r7, #4]
 8008ede:	f000 fb1e 	bl	800951e <USBD_CtlError>
          break;
 8008ee2:	bf00      	nop
      }
      break;
 8008ee4:	e004      	b.n	8008ef0 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008ee6:	6839      	ldr	r1, [r7, #0]
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f000 fb18 	bl	800951e <USBD_CtlError>
      break;
 8008eee:	bf00      	nop
  }

  return ret;
 8008ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3710      	adds	r7, #16
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b084      	sub	sp, #16
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f06:	2300      	movs	r3, #0
 8008f08:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	885b      	ldrh	r3, [r3, #2]
 8008f16:	0a1b      	lsrs	r3, r3, #8
 8008f18:	b29b      	uxth	r3, r3
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	2b06      	cmp	r3, #6
 8008f1e:	f200 8128 	bhi.w	8009172 <USBD_GetDescriptor+0x276>
 8008f22:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <USBD_GetDescriptor+0x2c>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f45 	.word	0x08008f45
 8008f2c:	08008f5d 	.word	0x08008f5d
 8008f30:	08008f9d 	.word	0x08008f9d
 8008f34:	08009173 	.word	0x08009173
 8008f38:	08009173 	.word	0x08009173
 8008f3c:	08009113 	.word	0x08009113
 8008f40:	0800913f 	.word	0x0800913f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	687a      	ldr	r2, [r7, #4]
 8008f4e:	7c12      	ldrb	r2, [r2, #16]
 8008f50:	f107 0108 	add.w	r1, r7, #8
 8008f54:	4610      	mov	r0, r2
 8008f56:	4798      	blx	r3
 8008f58:	60f8      	str	r0, [r7, #12]
      break;
 8008f5a:	e112      	b.n	8009182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	7c1b      	ldrb	r3, [r3, #16]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10d      	bne.n	8008f80 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f6c:	f107 0208 	add.w	r2, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3301      	adds	r3, #1
 8008f7a:	2202      	movs	r2, #2
 8008f7c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f7e:	e100      	b.n	8009182 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	f107 0208 	add.w	r2, r7, #8
 8008f8c:	4610      	mov	r0, r2
 8008f8e:	4798      	blx	r3
 8008f90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3301      	adds	r3, #1
 8008f96:	2202      	movs	r2, #2
 8008f98:	701a      	strb	r2, [r3, #0]
      break;
 8008f9a:	e0f2      	b.n	8009182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	885b      	ldrh	r3, [r3, #2]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b05      	cmp	r3, #5
 8008fa4:	f200 80ac 	bhi.w	8009100 <USBD_GetDescriptor+0x204>
 8008fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8008fb0 <USBD_GetDescriptor+0xb4>)
 8008faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fae:	bf00      	nop
 8008fb0:	08008fc9 	.word	0x08008fc9
 8008fb4:	08008ffd 	.word	0x08008ffd
 8008fb8:	08009031 	.word	0x08009031
 8008fbc:	08009065 	.word	0x08009065
 8008fc0:	08009099 	.word	0x08009099
 8008fc4:	080090cd 	.word	0x080090cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	7c12      	ldrb	r2, [r2, #16]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fea:	e091      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa95 	bl	800951e <USBD_CtlError>
            err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8008ffa:	e089      	b.n	8009110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800900e:	689b      	ldr	r3, [r3, #8]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7c12      	ldrb	r2, [r2, #16]
 8009014:	f107 0108 	add.w	r1, r7, #8
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
 800901c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800901e:	e077      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa7b 	bl	800951e <USBD_CtlError>
            err++;
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	3301      	adds	r3, #1
 800902c:	72fb      	strb	r3, [r7, #11]
          break;
 800902e:	e06f      	b.n	8009110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009036:	68db      	ldr	r3, [r3, #12]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009042:	68db      	ldr	r3, [r3, #12]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009052:	e05d      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa61 	bl	800951e <USBD_CtlError>
            err++;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	3301      	adds	r3, #1
 8009060:	72fb      	strb	r3, [r7, #11]
          break;
 8009062:	e055      	b.n	8009110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800906a:	691b      	ldr	r3, [r3, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7c12      	ldrb	r2, [r2, #16]
 800907c:	f107 0108 	add.w	r1, r7, #8
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009086:	e043      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa47 	bl	800951e <USBD_CtlError>
            err++;
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	3301      	adds	r3, #1
 8009094:	72fb      	strb	r3, [r7, #11]
          break;
 8009096:	e03b      	b.n	8009110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800909e:	695b      	ldr	r3, [r3, #20]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090aa:	695b      	ldr	r3, [r3, #20]
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	7c12      	ldrb	r2, [r2, #16]
 80090b0:	f107 0108 	add.w	r1, r7, #8
 80090b4:	4610      	mov	r0, r2
 80090b6:	4798      	blx	r3
 80090b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ba:	e029      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090bc:	6839      	ldr	r1, [r7, #0]
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f000 fa2d 	bl	800951e <USBD_CtlError>
            err++;
 80090c4:	7afb      	ldrb	r3, [r7, #11]
 80090c6:	3301      	adds	r3, #1
 80090c8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ca:	e021      	b.n	8009110 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090d2:	699b      	ldr	r3, [r3, #24]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d00b      	beq.n	80090f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090de:	699b      	ldr	r3, [r3, #24]
 80090e0:	687a      	ldr	r2, [r7, #4]
 80090e2:	7c12      	ldrb	r2, [r2, #16]
 80090e4:	f107 0108 	add.w	r1, r7, #8
 80090e8:	4610      	mov	r0, r2
 80090ea:	4798      	blx	r3
 80090ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090ee:	e00f      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090f0:	6839      	ldr	r1, [r7, #0]
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa13 	bl	800951e <USBD_CtlError>
            err++;
 80090f8:	7afb      	ldrb	r3, [r7, #11]
 80090fa:	3301      	adds	r3, #1
 80090fc:	72fb      	strb	r3, [r7, #11]
          break;
 80090fe:	e007      	b.n	8009110 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009100:	6839      	ldr	r1, [r7, #0]
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 fa0b 	bl	800951e <USBD_CtlError>
          err++;
 8009108:	7afb      	ldrb	r3, [r7, #11]
 800910a:	3301      	adds	r3, #1
 800910c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800910e:	e038      	b.n	8009182 <USBD_GetDescriptor+0x286>
 8009110:	e037      	b.n	8009182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	7c1b      	ldrb	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d109      	bne.n	800912e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009122:	f107 0208 	add.w	r2, r7, #8
 8009126:	4610      	mov	r0, r2
 8009128:	4798      	blx	r3
 800912a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800912c:	e029      	b.n	8009182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f000 f9f4 	bl	800951e <USBD_CtlError>
        err++;
 8009136:	7afb      	ldrb	r3, [r7, #11]
 8009138:	3301      	adds	r3, #1
 800913a:	72fb      	strb	r3, [r7, #11]
      break;
 800913c:	e021      	b.n	8009182 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	7c1b      	ldrb	r3, [r3, #16]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d10d      	bne.n	8009162 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800914c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800914e:	f107 0208 	add.w	r2, r7, #8
 8009152:	4610      	mov	r0, r2
 8009154:	4798      	blx	r3
 8009156:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	3301      	adds	r3, #1
 800915c:	2207      	movs	r2, #7
 800915e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009160:	e00f      	b.n	8009182 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009162:	6839      	ldr	r1, [r7, #0]
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f000 f9da 	bl	800951e <USBD_CtlError>
        err++;
 800916a:	7afb      	ldrb	r3, [r7, #11]
 800916c:	3301      	adds	r3, #1
 800916e:	72fb      	strb	r3, [r7, #11]
      break;
 8009170:	e007      	b.n	8009182 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009172:	6839      	ldr	r1, [r7, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f9d2 	bl	800951e <USBD_CtlError>
      err++;
 800917a:	7afb      	ldrb	r3, [r7, #11]
 800917c:	3301      	adds	r3, #1
 800917e:	72fb      	strb	r3, [r7, #11]
      break;
 8009180:	bf00      	nop
  }

  if (err != 0U)
 8009182:	7afb      	ldrb	r3, [r7, #11]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d11c      	bne.n	80091c2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009188:	893b      	ldrh	r3, [r7, #8]
 800918a:	2b00      	cmp	r3, #0
 800918c:	d011      	beq.n	80091b2 <USBD_GetDescriptor+0x2b6>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	88db      	ldrh	r3, [r3, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d00d      	beq.n	80091b2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	88da      	ldrh	r2, [r3, #6]
 800919a:	893b      	ldrh	r3, [r7, #8]
 800919c:	4293      	cmp	r3, r2
 800919e:	bf28      	it	cs
 80091a0:	4613      	movcs	r3, r2
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091a6:	893b      	ldrh	r3, [r7, #8]
 80091a8:	461a      	mov	r2, r3
 80091aa:	68f9      	ldr	r1, [r7, #12]
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa21 	bl	80095f4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa78 	bl	80096b0 <USBD_CtlSendStatus>
 80091c0:	e000      	b.n	80091c4 <USBD_GetDescriptor+0x2c8>
    return;
 80091c2:	bf00      	nop
    }
  }
}
 80091c4:	3710      	adds	r7, #16
 80091c6:	46bd      	mov	sp, r7
 80091c8:	bd80      	pop	{r7, pc}
 80091ca:	bf00      	nop

080091cc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b084      	sub	sp, #16
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	889b      	ldrh	r3, [r3, #4]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d130      	bne.n	8009240 <USBD_SetAddress+0x74>
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	88db      	ldrh	r3, [r3, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d12c      	bne.n	8009240 <USBD_SetAddress+0x74>
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	885b      	ldrh	r3, [r3, #2]
 80091ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80091ec:	d828      	bhi.n	8009240 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	885b      	ldrh	r3, [r3, #2]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80091f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009200:	2b03      	cmp	r3, #3
 8009202:	d104      	bne.n	800920e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009204:	6839      	ldr	r1, [r7, #0]
 8009206:	6878      	ldr	r0, [r7, #4]
 8009208:	f000 f989 	bl	800951e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800920c:	e01d      	b.n	800924a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	7bfa      	ldrb	r2, [r7, #15]
 8009212:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009216:	7bfb      	ldrb	r3, [r7, #15]
 8009218:	4619      	mov	r1, r3
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 fdd0 	bl	8009dc0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fa45 	bl	80096b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d004      	beq.n	8009236 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009234:	e009      	b.n	800924a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2201      	movs	r2, #1
 800923a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923e:	e004      	b.n	800924a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 f96b 	bl	800951e <USBD_CtlError>
  }
}
 8009248:	bf00      	nop
 800924a:	bf00      	nop
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
	...

08009254 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	885b      	ldrh	r3, [r3, #2]
 8009262:	b2da      	uxtb	r2, r3
 8009264:	4b41      	ldr	r3, [pc, #260]	@ (800936c <USBD_SetConfig+0x118>)
 8009266:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009268:	4b40      	ldr	r3, [pc, #256]	@ (800936c <USBD_SetConfig+0x118>)
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	2b01      	cmp	r3, #1
 800926e:	d904      	bls.n	800927a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009270:	6839      	ldr	r1, [r7, #0]
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 f953 	bl	800951e <USBD_CtlError>
 8009278:	e075      	b.n	8009366 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009280:	2b02      	cmp	r3, #2
 8009282:	d002      	beq.n	800928a <USBD_SetConfig+0x36>
 8009284:	2b03      	cmp	r3, #3
 8009286:	d023      	beq.n	80092d0 <USBD_SetConfig+0x7c>
 8009288:	e062      	b.n	8009350 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800928a:	4b38      	ldr	r3, [pc, #224]	@ (800936c <USBD_SetConfig+0x118>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d01a      	beq.n	80092c8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8009292:	4b36      	ldr	r3, [pc, #216]	@ (800936c <USBD_SetConfig+0x118>)
 8009294:	781b      	ldrb	r3, [r3, #0]
 8009296:	461a      	mov	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2203      	movs	r2, #3
 80092a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092a4:	4b31      	ldr	r3, [pc, #196]	@ (800936c <USBD_SetConfig+0x118>)
 80092a6:	781b      	ldrb	r3, [r3, #0]
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7ff f9e5 	bl	800867a <USBD_SetClassConfig>
 80092b0:	4603      	mov	r3, r0
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d104      	bne.n	80092c0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80092b6:	6839      	ldr	r1, [r7, #0]
 80092b8:	6878      	ldr	r0, [r7, #4]
 80092ba:	f000 f930 	bl	800951e <USBD_CtlError>
            return;
 80092be:	e052      	b.n	8009366 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f9f5 	bl	80096b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092c6:	e04e      	b.n	8009366 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 f9f1 	bl	80096b0 <USBD_CtlSendStatus>
        break;
 80092ce:	e04a      	b.n	8009366 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80092d0:	4b26      	ldr	r3, [pc, #152]	@ (800936c <USBD_SetConfig+0x118>)
 80092d2:	781b      	ldrb	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d112      	bne.n	80092fe <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 80092e0:	4b22      	ldr	r3, [pc, #136]	@ (800936c <USBD_SetConfig+0x118>)
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	461a      	mov	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80092ea:	4b20      	ldr	r3, [pc, #128]	@ (800936c <USBD_SetConfig+0x118>)
 80092ec:	781b      	ldrb	r3, [r3, #0]
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff f9e1 	bl	80086b8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 f9da 	bl	80096b0 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092fc:	e033      	b.n	8009366 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80092fe:	4b1b      	ldr	r3, [pc, #108]	@ (800936c <USBD_SetConfig+0x118>)
 8009300:	781b      	ldrb	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	685b      	ldr	r3, [r3, #4]
 8009308:	429a      	cmp	r2, r3
 800930a:	d01d      	beq.n	8009348 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	685b      	ldr	r3, [r3, #4]
 8009310:	b2db      	uxtb	r3, r3
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff f9cf 	bl	80086b8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800931a:	4b14      	ldr	r3, [pc, #80]	@ (800936c <USBD_SetConfig+0x118>)
 800931c:	781b      	ldrb	r3, [r3, #0]
 800931e:	461a      	mov	r2, r3
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009324:	4b11      	ldr	r3, [pc, #68]	@ (800936c <USBD_SetConfig+0x118>)
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	4619      	mov	r1, r3
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff f9a5 	bl	800867a <USBD_SetClassConfig>
 8009330:	4603      	mov	r3, r0
 8009332:	2b02      	cmp	r3, #2
 8009334:	d104      	bne.n	8009340 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8009336:	6839      	ldr	r1, [r7, #0]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f000 f8f0 	bl	800951e <USBD_CtlError>
            return;
 800933e:	e012      	b.n	8009366 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f000 f9b5 	bl	80096b0 <USBD_CtlSendStatus>
        break;
 8009346:	e00e      	b.n	8009366 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f9b1 	bl	80096b0 <USBD_CtlSendStatus>
        break;
 800934e:	e00a      	b.n	8009366 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009350:	6839      	ldr	r1, [r7, #0]
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 f8e3 	bl	800951e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8009358:	4b04      	ldr	r3, [pc, #16]	@ (800936c <USBD_SetConfig+0x118>)
 800935a:	781b      	ldrb	r3, [r3, #0]
 800935c:	4619      	mov	r1, r3
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff f9aa 	bl	80086b8 <USBD_ClrClassConfig>
        break;
 8009364:	bf00      	nop
    }
  }
}
 8009366:	3708      	adds	r7, #8
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	2000031c 	.word	0x2000031c

08009370 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
 8009378:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	88db      	ldrh	r3, [r3, #6]
 800937e:	2b01      	cmp	r3, #1
 8009380:	d004      	beq.n	800938c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 f8ca 	bl	800951e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800938a:	e022      	b.n	80093d2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009392:	2b02      	cmp	r3, #2
 8009394:	dc02      	bgt.n	800939c <USBD_GetConfig+0x2c>
 8009396:	2b00      	cmp	r3, #0
 8009398:	dc03      	bgt.n	80093a2 <USBD_GetConfig+0x32>
 800939a:	e015      	b.n	80093c8 <USBD_GetConfig+0x58>
 800939c:	2b03      	cmp	r3, #3
 800939e:	d00b      	beq.n	80093b8 <USBD_GetConfig+0x48>
 80093a0:	e012      	b.n	80093c8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	3308      	adds	r3, #8
 80093ac:	2201      	movs	r2, #1
 80093ae:	4619      	mov	r1, r3
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 f91f 	bl	80095f4 <USBD_CtlSendData>
        break;
 80093b6:	e00c      	b.n	80093d2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	3304      	adds	r3, #4
 80093bc:	2201      	movs	r2, #1
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 f917 	bl	80095f4 <USBD_CtlSendData>
        break;
 80093c6:	e004      	b.n	80093d2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 f8a7 	bl	800951e <USBD_CtlError>
        break;
 80093d0:	bf00      	nop
}
 80093d2:	bf00      	nop
 80093d4:	3708      	adds	r7, #8
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b082      	sub	sp, #8
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093ea:	3b01      	subs	r3, #1
 80093ec:	2b02      	cmp	r3, #2
 80093ee:	d81e      	bhi.n	800942e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	88db      	ldrh	r3, [r3, #6]
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d004      	beq.n	8009402 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f88f 	bl	800951e <USBD_CtlError>
        break;
 8009400:	e01a      	b.n	8009438 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2201      	movs	r2, #1
 8009406:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800940e:	2b00      	cmp	r3, #0
 8009410:	d005      	beq.n	800941e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	f043 0202 	orr.w	r2, r3, #2
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	330c      	adds	r3, #12
 8009422:	2202      	movs	r2, #2
 8009424:	4619      	mov	r1, r3
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f000 f8e4 	bl	80095f4 <USBD_CtlSendData>
      break;
 800942c:	e004      	b.n	8009438 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800942e:	6839      	ldr	r1, [r7, #0]
 8009430:	6878      	ldr	r0, [r7, #4]
 8009432:	f000 f874 	bl	800951e <USBD_CtlError>
      break;
 8009436:	bf00      	nop
  }
}
 8009438:	bf00      	nop
 800943a:	3708      	adds	r7, #8
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
 8009448:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	885b      	ldrh	r3, [r3, #2]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d106      	bne.n	8009460 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f928 	bl	80096b0 <USBD_CtlSendStatus>
  }
}
 8009460:	bf00      	nop
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009478:	3b01      	subs	r3, #1
 800947a:	2b02      	cmp	r3, #2
 800947c:	d80b      	bhi.n	8009496 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	885b      	ldrh	r3, [r3, #2]
 8009482:	2b01      	cmp	r3, #1
 8009484:	d10c      	bne.n	80094a0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f90e 	bl	80096b0 <USBD_CtlSendStatus>
      }
      break;
 8009494:	e004      	b.n	80094a0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009496:	6839      	ldr	r1, [r7, #0]
 8009498:	6878      	ldr	r0, [r7, #4]
 800949a:	f000 f840 	bl	800951e <USBD_CtlError>
      break;
 800949e:	e000      	b.n	80094a2 <USBD_ClrFeature+0x3a>
      break;
 80094a0:	bf00      	nop
  }
}
 80094a2:	bf00      	nop
 80094a4:	3708      	adds	r7, #8
 80094a6:	46bd      	mov	sp, r7
 80094a8:	bd80      	pop	{r7, pc}

080094aa <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094aa:	b480      	push	{r7}
 80094ac:	b083      	sub	sp, #12
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781a      	ldrb	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80094bc:	683b      	ldr	r3, [r7, #0]
 80094be:	785a      	ldrb	r2, [r3, #1]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	3302      	adds	r3, #2
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	461a      	mov	r2, r3
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	3303      	adds	r3, #3
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	021b      	lsls	r3, r3, #8
 80094d4:	b29b      	uxth	r3, r3
 80094d6:	4413      	add	r3, r2
 80094d8:	b29a      	uxth	r2, r3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	3304      	adds	r3, #4
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	3305      	adds	r3, #5
 80094ea:	781b      	ldrb	r3, [r3, #0]
 80094ec:	021b      	lsls	r3, r3, #8
 80094ee:	b29b      	uxth	r3, r3
 80094f0:	4413      	add	r3, r2
 80094f2:	b29a      	uxth	r2, r3
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	3306      	adds	r3, #6
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	3307      	adds	r3, #7
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	021b      	lsls	r3, r3, #8
 8009508:	b29b      	uxth	r3, r3
 800950a:	4413      	add	r3, r2
 800950c:	b29a      	uxth	r2, r3
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	80da      	strh	r2, [r3, #6]

}
 8009512:	bf00      	nop
 8009514:	370c      	adds	r7, #12
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr

0800951e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800951e:	b580      	push	{r7, lr}
 8009520:	b082      	sub	sp, #8
 8009522:	af00      	add	r7, sp, #0
 8009524:	6078      	str	r0, [r7, #4]
 8009526:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009528:	2180      	movs	r1, #128	@ 0x80
 800952a:	6878      	ldr	r0, [r7, #4]
 800952c:	f000 fbde 	bl	8009cec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009530:	2100      	movs	r1, #0
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 fbda 	bl	8009cec <USBD_LL_StallEP>
}
 8009538:	bf00      	nop
 800953a:	3708      	adds	r7, #8
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800954c:	2300      	movs	r3, #0
 800954e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d032      	beq.n	80095bc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f834 	bl	80095c4 <USBD_GetLen>
 800955c:	4603      	mov	r3, r0
 800955e:	3301      	adds	r3, #1
 8009560:	b29b      	uxth	r3, r3
 8009562:	005b      	lsls	r3, r3, #1
 8009564:	b29a      	uxth	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	75fa      	strb	r2, [r7, #23]
 8009570:	461a      	mov	r2, r3
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	4413      	add	r3, r2
 8009576:	687a      	ldr	r2, [r7, #4]
 8009578:	7812      	ldrb	r2, [r2, #0]
 800957a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800957c:	7dfb      	ldrb	r3, [r7, #23]
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	75fa      	strb	r2, [r7, #23]
 8009582:	461a      	mov	r2, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	4413      	add	r3, r2
 8009588:	2203      	movs	r2, #3
 800958a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800958c:	e012      	b.n	80095b4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	60fa      	str	r2, [r7, #12]
 8009594:	7dfa      	ldrb	r2, [r7, #23]
 8009596:	1c51      	adds	r1, r2, #1
 8009598:	75f9      	strb	r1, [r7, #23]
 800959a:	4611      	mov	r1, r2
 800959c:	68ba      	ldr	r2, [r7, #8]
 800959e:	440a      	add	r2, r1
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80095a4:	7dfb      	ldrb	r3, [r7, #23]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	75fa      	strb	r2, [r7, #23]
 80095aa:	461a      	mov	r2, r3
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	4413      	add	r3, r2
 80095b0:	2200      	movs	r2, #0
 80095b2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1e8      	bne.n	800958e <USBD_GetString+0x4e>
    }
  }
}
 80095bc:	bf00      	nop
 80095be:	3718      	adds	r7, #24
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80095d0:	e005      	b.n	80095de <USBD_GetLen+0x1a>
  {
    len++;
 80095d2:	7bfb      	ldrb	r3, [r7, #15]
 80095d4:	3301      	adds	r3, #1
 80095d6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	3301      	adds	r3, #1
 80095dc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1f5      	bne.n	80095d2 <USBD_GetLen+0xe>
  }

  return len;
 80095e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	4613      	mov	r3, r2
 8009600:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2202      	movs	r2, #2
 8009606:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800960a:	88fa      	ldrh	r2, [r7, #6]
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009610:	88fa      	ldrh	r2, [r7, #6]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009616:	88fb      	ldrh	r3, [r7, #6]
 8009618:	68ba      	ldr	r2, [r7, #8]
 800961a:	2100      	movs	r1, #0
 800961c:	68f8      	ldr	r0, [r7, #12]
 800961e:	f000 fbee 	bl	8009dfe <USBD_LL_Transmit>

  return USBD_OK;
 8009622:	2300      	movs	r3, #0
}
 8009624:	4618      	mov	r0, r3
 8009626:	3710      	adds	r7, #16
 8009628:	46bd      	mov	sp, r7
 800962a:	bd80      	pop	{r7, pc}

0800962c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800962c:	b580      	push	{r7, lr}
 800962e:	b084      	sub	sp, #16
 8009630:	af00      	add	r7, sp, #0
 8009632:	60f8      	str	r0, [r7, #12]
 8009634:	60b9      	str	r1, [r7, #8]
 8009636:	4613      	mov	r3, r2
 8009638:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	2100      	movs	r1, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 fbdc 	bl	8009dfe <USBD_LL_Transmit>

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	4613      	mov	r3, r2
 800965c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2203      	movs	r2, #3
 8009662:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009666:	88fa      	ldrh	r2, [r7, #6]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800966e:	88fa      	ldrh	r2, [r7, #6]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009676:	88fb      	ldrh	r3, [r7, #6]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	2100      	movs	r1, #0
 800967c:	68f8      	ldr	r0, [r7, #12]
 800967e:	f000 fbe1 	bl	8009e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009682:	2300      	movs	r3, #0
}
 8009684:	4618      	mov	r0, r3
 8009686:	3710      	adds	r7, #16
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	4613      	mov	r3, r2
 8009698:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	2100      	movs	r1, #0
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fbcf 	bl	8009e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2204      	movs	r2, #4
 80096bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096c0:	2300      	movs	r3, #0
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 fb99 	bl	8009dfe <USBD_LL_Transmit>

  return USBD_OK;
 80096cc:	2300      	movs	r3, #0
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3708      	adds	r7, #8
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b082      	sub	sp, #8
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2205      	movs	r2, #5
 80096e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096e6:	2300      	movs	r3, #0
 80096e8:	2200      	movs	r2, #0
 80096ea:	2100      	movs	r1, #0
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fba9 	bl	8009e44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096f2:	2300      	movs	r3, #0
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009700:	2200      	movs	r2, #0
 8009702:	4912      	ldr	r1, [pc, #72]	@ (800974c <MX_USB_DEVICE_Init+0x50>)
 8009704:	4812      	ldr	r0, [pc, #72]	@ (8009750 <MX_USB_DEVICE_Init+0x54>)
 8009706:	f7fe ff5c 	bl	80085c2 <USBD_Init>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d001      	beq.n	8009714 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009710:	f7f7 f8be 	bl	8000890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009714:	490f      	ldr	r1, [pc, #60]	@ (8009754 <MX_USB_DEVICE_Init+0x58>)
 8009716:	480e      	ldr	r0, [pc, #56]	@ (8009750 <MX_USB_DEVICE_Init+0x54>)
 8009718:	f7fe ff7e 	bl	8008618 <USBD_RegisterClass>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d001      	beq.n	8009726 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009722:	f7f7 f8b5 	bl	8000890 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8009726:	490c      	ldr	r1, [pc, #48]	@ (8009758 <MX_USB_DEVICE_Init+0x5c>)
 8009728:	4809      	ldr	r0, [pc, #36]	@ (8009750 <MX_USB_DEVICE_Init+0x54>)
 800972a:	f7fe ff33 	bl	8008594 <USBD_CUSTOM_HID_RegisterInterface>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009734:	f7f7 f8ac 	bl	8000890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009738:	4805      	ldr	r0, [pc, #20]	@ (8009750 <MX_USB_DEVICE_Init+0x54>)
 800973a:	f7fe ff87 	bl	800864c <USBD_Start>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009744:	f7f7 f8a4 	bl	8000890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009748:	bf00      	nop
 800974a:	bd80      	pop	{r7, pc}
 800974c:	2000011c 	.word	0x2000011c
 8009750:	20000320 	.word	0x20000320
 8009754:	2000000c 	.word	0x2000000c
 8009758:	2000010c 	.word	0x2000010c

0800975c <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 800975c:	b480      	push	{r7}
 800975e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009760:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009762:	4618      	mov	r0, r3
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 800976c:	b480      	push	{r7}
 800976e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009770:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009772:	4618      	mov	r0, r3
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	4603      	mov	r3, r0
 8009784:	460a      	mov	r2, r1
 8009786:	71fb      	strb	r3, [r7, #7]
 8009788:	4613      	mov	r3, r2
 800978a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800978c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800978e:	4618      	mov	r0, r3
 8009790:	370c      	adds	r7, #12
 8009792:	46bd      	mov	sp, r7
 8009794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009798:	4770      	bx	lr
	...

0800979c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	4603      	mov	r3, r0
 80097a4:	6039      	str	r1, [r7, #0]
 80097a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2212      	movs	r2, #18
 80097ac:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097ae:	4b03      	ldr	r3, [pc, #12]	@ (80097bc <USBD_FS_DeviceDescriptor+0x20>)
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr
 80097bc:	20000138 	.word	0x20000138

080097c0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2204      	movs	r2, #4
 80097d0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097d2:	4b03      	ldr	r3, [pc, #12]	@ (80097e0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	2000014c 	.word	0x2000014c

080097e4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80097f0:	79fb      	ldrb	r3, [r7, #7]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d105      	bne.n	8009802 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80097f6:	683a      	ldr	r2, [r7, #0]
 80097f8:	4907      	ldr	r1, [pc, #28]	@ (8009818 <USBD_FS_ProductStrDescriptor+0x34>)
 80097fa:	4808      	ldr	r0, [pc, #32]	@ (800981c <USBD_FS_ProductStrDescriptor+0x38>)
 80097fc:	f7ff fea0 	bl	8009540 <USBD_GetString>
 8009800:	e004      	b.n	800980c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	4904      	ldr	r1, [pc, #16]	@ (8009818 <USBD_FS_ProductStrDescriptor+0x34>)
 8009806:	4805      	ldr	r0, [pc, #20]	@ (800981c <USBD_FS_ProductStrDescriptor+0x38>)
 8009808:	f7ff fe9a 	bl	8009540 <USBD_GetString>
  }
  return USBD_StrDesc;
 800980c:	4b02      	ldr	r3, [pc, #8]	@ (8009818 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800980e:	4618      	mov	r0, r3
 8009810:	3708      	adds	r7, #8
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	200005e4 	.word	0x200005e4
 800981c:	08009f9c 	.word	0x08009f9c

08009820 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	4603      	mov	r3, r0
 8009828:	6039      	str	r1, [r7, #0]
 800982a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	4904      	ldr	r1, [pc, #16]	@ (8009840 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009830:	4804      	ldr	r0, [pc, #16]	@ (8009844 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009832:	f7ff fe85 	bl	8009540 <USBD_GetString>
  return USBD_StrDesc;
 8009836:	4b02      	ldr	r3, [pc, #8]	@ (8009840 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009838:	4618      	mov	r0, r3
 800983a:	3708      	adds	r7, #8
 800983c:	46bd      	mov	sp, r7
 800983e:	bd80      	pop	{r7, pc}
 8009840:	200005e4 	.word	0x200005e4
 8009844:	08009fbc 	.word	0x08009fbc

08009848 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b082      	sub	sp, #8
 800984c:	af00      	add	r7, sp, #0
 800984e:	4603      	mov	r3, r0
 8009850:	6039      	str	r1, [r7, #0]
 8009852:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	221a      	movs	r2, #26
 8009858:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800985a:	f000 f843 	bl	80098e4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800985e:	4b02      	ldr	r3, [pc, #8]	@ (8009868 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009860:	4618      	mov	r0, r3
 8009862:	3708      	adds	r7, #8
 8009864:	46bd      	mov	sp, r7
 8009866:	bd80      	pop	{r7, pc}
 8009868:	20000150 	.word	0x20000150

0800986c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009878:	79fb      	ldrb	r3, [r7, #7]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d105      	bne.n	800988a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4907      	ldr	r1, [pc, #28]	@ (80098a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009882:	4808      	ldr	r0, [pc, #32]	@ (80098a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009884:	f7ff fe5c 	bl	8009540 <USBD_GetString>
 8009888:	e004      	b.n	8009894 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	4904      	ldr	r1, [pc, #16]	@ (80098a0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800988e:	4805      	ldr	r0, [pc, #20]	@ (80098a4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009890:	f7ff fe56 	bl	8009540 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009894:	4b02      	ldr	r3, [pc, #8]	@ (80098a0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009896:	4618      	mov	r0, r3
 8009898:	3708      	adds	r7, #8
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
 800989e:	bf00      	nop
 80098a0:	200005e4 	.word	0x200005e4
 80098a4:	08009fd0 	.word	0x08009fd0

080098a8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b082      	sub	sp, #8
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	6039      	str	r1, [r7, #0]
 80098b2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098b4:	79fb      	ldrb	r3, [r7, #7]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d105      	bne.n	80098c6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098ba:	683a      	ldr	r2, [r7, #0]
 80098bc:	4907      	ldr	r1, [pc, #28]	@ (80098dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098be:	4808      	ldr	r0, [pc, #32]	@ (80098e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098c0:	f7ff fe3e 	bl	8009540 <USBD_GetString>
 80098c4:	e004      	b.n	80098d0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	4904      	ldr	r1, [pc, #16]	@ (80098dc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098ca:	4805      	ldr	r0, [pc, #20]	@ (80098e0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098cc:	f7ff fe38 	bl	8009540 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d0:	4b02      	ldr	r3, [pc, #8]	@ (80098dc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
 80098da:	bf00      	nop
 80098dc:	200005e4 	.word	0x200005e4
 80098e0:	08009fe4 	.word	0x08009fe4

080098e4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b084      	sub	sp, #16
 80098e8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80098ea:	4b0f      	ldr	r3, [pc, #60]	@ (8009928 <Get_SerialNum+0x44>)
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80098f0:	4b0e      	ldr	r3, [pc, #56]	@ (800992c <Get_SerialNum+0x48>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80098f6:	4b0e      	ldr	r3, [pc, #56]	@ (8009930 <Get_SerialNum+0x4c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d009      	beq.n	800991e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800990a:	2208      	movs	r2, #8
 800990c:	4909      	ldr	r1, [pc, #36]	@ (8009934 <Get_SerialNum+0x50>)
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f000 f814 	bl	800993c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009914:	2204      	movs	r2, #4
 8009916:	4908      	ldr	r1, [pc, #32]	@ (8009938 <Get_SerialNum+0x54>)
 8009918:	68b8      	ldr	r0, [r7, #8]
 800991a:	f000 f80f 	bl	800993c <IntToUnicode>
  }
}
 800991e:	bf00      	nop
 8009920:	3710      	adds	r7, #16
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	1ffff7ac 	.word	0x1ffff7ac
 800992c:	1ffff7b0 	.word	0x1ffff7b0
 8009930:	1ffff7b4 	.word	0x1ffff7b4
 8009934:	20000152 	.word	0x20000152
 8009938:	20000162 	.word	0x20000162

0800993c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800993c:	b480      	push	{r7}
 800993e:	b087      	sub	sp, #28
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	4613      	mov	r3, r2
 8009948:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800994a:	2300      	movs	r3, #0
 800994c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800994e:	2300      	movs	r3, #0
 8009950:	75fb      	strb	r3, [r7, #23]
 8009952:	e027      	b.n	80099a4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	0f1b      	lsrs	r3, r3, #28
 8009958:	2b09      	cmp	r3, #9
 800995a:	d80b      	bhi.n	8009974 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	0f1b      	lsrs	r3, r3, #28
 8009960:	b2da      	uxtb	r2, r3
 8009962:	7dfb      	ldrb	r3, [r7, #23]
 8009964:	005b      	lsls	r3, r3, #1
 8009966:	4619      	mov	r1, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	440b      	add	r3, r1
 800996c:	3230      	adds	r2, #48	@ 0x30
 800996e:	b2d2      	uxtb	r2, r2
 8009970:	701a      	strb	r2, [r3, #0]
 8009972:	e00a      	b.n	800998a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	0f1b      	lsrs	r3, r3, #28
 8009978:	b2da      	uxtb	r2, r3
 800997a:	7dfb      	ldrb	r3, [r7, #23]
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	4619      	mov	r1, r3
 8009980:	68bb      	ldr	r3, [r7, #8]
 8009982:	440b      	add	r3, r1
 8009984:	3237      	adds	r2, #55	@ 0x37
 8009986:	b2d2      	uxtb	r2, r2
 8009988:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	011b      	lsls	r3, r3, #4
 800998e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009990:	7dfb      	ldrb	r3, [r7, #23]
 8009992:	005b      	lsls	r3, r3, #1
 8009994:	3301      	adds	r3, #1
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	4413      	add	r3, r2
 800999a:	2200      	movs	r2, #0
 800999c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	3301      	adds	r3, #1
 80099a2:	75fb      	strb	r3, [r7, #23]
 80099a4:	7dfa      	ldrb	r2, [r7, #23]
 80099a6:	79fb      	ldrb	r3, [r7, #7]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d3d3      	bcc.n	8009954 <IntToUnicode+0x18>
  }
}
 80099ac:	bf00      	nop
 80099ae:	bf00      	nop
 80099b0:	371c      	adds	r7, #28
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr
	...

080099bc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	b08a      	sub	sp, #40	@ 0x28
 80099c0:	af00      	add	r7, sp, #0
 80099c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099c4:	f107 0314 	add.w	r3, r7, #20
 80099c8:	2200      	movs	r2, #0
 80099ca:	601a      	str	r2, [r3, #0]
 80099cc:	605a      	str	r2, [r3, #4]
 80099ce:	609a      	str	r2, [r3, #8]
 80099d0:	60da      	str	r2, [r3, #12]
 80099d2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a1c      	ldr	r2, [pc, #112]	@ (8009a4c <HAL_PCD_MspInit+0x90>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d131      	bne.n	8009a42 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099de:	4b1c      	ldr	r3, [pc, #112]	@ (8009a50 <HAL_PCD_MspInit+0x94>)
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	4a1b      	ldr	r2, [pc, #108]	@ (8009a50 <HAL_PCD_MspInit+0x94>)
 80099e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099e8:	6153      	str	r3, [r2, #20]
 80099ea:	4b19      	ldr	r3, [pc, #100]	@ (8009a50 <HAL_PCD_MspInit+0x94>)
 80099ec:	695b      	ldr	r3, [r3, #20]
 80099ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80099f2:	613b      	str	r3, [r7, #16]
 80099f4:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 80099f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80099fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80099fc:	2302      	movs	r3, #2
 80099fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a00:	2300      	movs	r3, #0
 8009a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a04:	2303      	movs	r3, #3
 8009a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009a08:	230e      	movs	r3, #14
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a0c:	f107 0314 	add.w	r3, r7, #20
 8009a10:	4619      	mov	r1, r3
 8009a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a16:	f7f8 fcb9 	bl	800238c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8009a50 <HAL_PCD_MspInit+0x94>)
 8009a1c:	69db      	ldr	r3, [r3, #28]
 8009a1e:	4a0c      	ldr	r2, [pc, #48]	@ (8009a50 <HAL_PCD_MspInit+0x94>)
 8009a20:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a24:	61d3      	str	r3, [r2, #28]
 8009a26:	4b0a      	ldr	r3, [pc, #40]	@ (8009a50 <HAL_PCD_MspInit+0x94>)
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a2e:	60fb      	str	r3, [r7, #12]
 8009a30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	2014      	movs	r0, #20
 8009a38:	f7f8 fabf 	bl	8001fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009a3c:	2014      	movs	r0, #20
 8009a3e:	f7f8 fad8 	bl	8001ff2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a42:	bf00      	nop
 8009a44:	3728      	adds	r7, #40	@ 0x28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40005c00 	.word	0x40005c00
 8009a50:	40021000 	.word	0x40021000

08009a54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b082      	sub	sp, #8
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009a68:	4619      	mov	r1, r3
 8009a6a:	4610      	mov	r0, r2
 8009a6c:	f7fe fe37 	bl	80086de <USBD_LL_SetupStage>
}
 8009a70:	bf00      	nop
 8009a72:	3708      	adds	r7, #8
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009a8a:	78fa      	ldrb	r2, [r7, #3]
 8009a8c:	6879      	ldr	r1, [r7, #4]
 8009a8e:	4613      	mov	r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	00db      	lsls	r3, r3, #3
 8009a96:	440b      	add	r3, r1
 8009a98:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	78fb      	ldrb	r3, [r7, #3]
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f7fe fe69 	bl	8008778 <USBD_LL_DataOutStage>
}
 8009aa6:	bf00      	nop
 8009aa8:	3708      	adds	r7, #8
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}

08009aae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aae:	b580      	push	{r7, lr}
 8009ab0:	b082      	sub	sp, #8
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	6078      	str	r0, [r7, #4]
 8009ab6:	460b      	mov	r3, r1
 8009ab8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009ac0:	78fa      	ldrb	r2, [r7, #3]
 8009ac2:	6879      	ldr	r1, [r7, #4]
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	440b      	add	r3, r1
 8009ace:	3324      	adds	r3, #36	@ 0x24
 8009ad0:	681a      	ldr	r2, [r3, #0]
 8009ad2:	78fb      	ldrb	r3, [r7, #3]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	f7fe fec0 	bl	800885a <USBD_LL_DataInStage>
}
 8009ada:	bf00      	nop
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}

08009ae2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ae2:	b580      	push	{r7, lr}
 8009ae4:	b082      	sub	sp, #8
 8009ae6:	af00      	add	r7, sp, #0
 8009ae8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009af0:	4618      	mov	r0, r3
 8009af2:	f7fe ffd3 	bl	8008a9c <USBD_LL_SOF>
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}

08009afe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afe:	b580      	push	{r7, lr}
 8009b00:	b084      	sub	sp, #16
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	795b      	ldrb	r3, [r3, #5]
 8009b0e:	2b02      	cmp	r3, #2
 8009b10:	d001      	beq.n	8009b16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b12:	f7f6 febd 	bl	8000890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b1c:	7bfa      	ldrb	r2, [r7, #15]
 8009b1e:	4611      	mov	r1, r2
 8009b20:	4618      	mov	r0, r3
 8009b22:	f7fe ff80 	bl	8008a26 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	f7fe ff39 	bl	80089a4 <USBD_LL_Reset>
}
 8009b32:	bf00      	nop
 8009b34:	3710      	adds	r7, #16
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}
	...

08009b3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f7fe ff7b 	bl	8008a46 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	7a5b      	ldrb	r3, [r3, #9]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d005      	beq.n	8009b64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b58:	4b04      	ldr	r3, [pc, #16]	@ (8009b6c <HAL_PCD_SuspendCallback+0x30>)
 8009b5a:	691b      	ldr	r3, [r3, #16]
 8009b5c:	4a03      	ldr	r2, [pc, #12]	@ (8009b6c <HAL_PCD_SuspendCallback+0x30>)
 8009b5e:	f043 0306 	orr.w	r3, r3, #6
 8009b62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b64:	bf00      	nop
 8009b66:	3708      	adds	r7, #8
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}
 8009b6c:	e000ed00 	.word	0xe000ed00

08009b70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b7e:	4618      	mov	r0, r3
 8009b80:	f7fe ff76 	bl	8008a70 <USBD_LL_Resume>
}
 8009b84:	bf00      	nop
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b94:	4a23      	ldr	r2, [pc, #140]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4a21      	ldr	r2, [pc, #132]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009ba0:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009ba6:	4a20      	ldr	r2, [pc, #128]	@ (8009c28 <USBD_LL_Init+0x9c>)
 8009ba8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009baa:	4b1e      	ldr	r3, [pc, #120]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009bac:	2208      	movs	r2, #8
 8009bae:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bb0:	4b1c      	ldr	r3, [pc, #112]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009bb2:	2202      	movs	r2, #2
 8009bb4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bb6:	4b1b      	ldr	r3, [pc, #108]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009bb8:	2202      	movs	r2, #2
 8009bba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009bbc:	4b19      	ldr	r3, [pc, #100]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009bc2:	4b18      	ldr	r3, [pc, #96]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bc8:	4816      	ldr	r0, [pc, #88]	@ (8009c24 <USBD_LL_Init+0x98>)
 8009bca:	f7f8 fed3 	bl	8002974 <HAL_PCD_Init>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d001      	beq.n	8009bd8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009bd4:	f7f6 fe5c 	bl	8000890 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bde:	2318      	movs	r3, #24
 8009be0:	2200      	movs	r2, #0
 8009be2:	2100      	movs	r1, #0
 8009be4:	f7fa fb34 	bl	8004250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bee:	2358      	movs	r3, #88	@ 0x58
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	2180      	movs	r1, #128	@ 0x80
 8009bf4:	f7fa fb2c 	bl	8004250 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009bfe:	2398      	movs	r3, #152	@ 0x98
 8009c00:	2200      	movs	r2, #0
 8009c02:	2181      	movs	r1, #129	@ 0x81
 8009c04:	f7fa fb24 	bl	8004250 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c0e:	23d8      	movs	r3, #216	@ 0xd8
 8009c10:	2200      	movs	r2, #0
 8009c12:	2101      	movs	r1, #1
 8009c14:	f7fa fb1c 	bl	8004250 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3708      	adds	r7, #8
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	200007e4 	.word	0x200007e4
 8009c28:	40005c00 	.word	0x40005c00

08009c2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c34:	2300      	movs	r3, #0
 8009c36:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f7f8 ff5d 	bl	8002b02 <HAL_PCD_Start>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c4c:	7bfb      	ldrb	r3, [r7, #15]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f000 f940 	bl	8009ed4 <USBD_Get_USB_Status>
 8009c54:	4603      	mov	r3, r0
 8009c56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c58:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b084      	sub	sp, #16
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
 8009c6a:	4608      	mov	r0, r1
 8009c6c:	4611      	mov	r1, r2
 8009c6e:	461a      	mov	r2, r3
 8009c70:	4603      	mov	r3, r0
 8009c72:	70fb      	strb	r3, [r7, #3]
 8009c74:	460b      	mov	r3, r1
 8009c76:	70bb      	strb	r3, [r7, #2]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c8a:	78bb      	ldrb	r3, [r7, #2]
 8009c8c:	883a      	ldrh	r2, [r7, #0]
 8009c8e:	78f9      	ldrb	r1, [r7, #3]
 8009c90:	f7f9 f855 	bl	8002d3e <HAL_PCD_EP_Open>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f91a 	bl	8009ed4 <USBD_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cc8:	78fa      	ldrb	r2, [r7, #3]
 8009cca:	4611      	mov	r1, r2
 8009ccc:	4618      	mov	r0, r3
 8009cce:	f7f9 f893 	bl	8002df8 <HAL_PCD_EP_Close>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cd6:	7bfb      	ldrb	r3, [r7, #15]
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f000 f8fb 	bl	8009ed4 <USBD_Get_USB_Status>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ce2:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	3710      	adds	r7, #16
 8009ce8:	46bd      	mov	sp, r7
 8009cea:	bd80      	pop	{r7, pc}

08009cec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
 8009cf4:	460b      	mov	r3, r1
 8009cf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cf8:	2300      	movs	r3, #0
 8009cfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d06:	78fa      	ldrb	r2, [r7, #3]
 8009d08:	4611      	mov	r1, r2
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7f9 f924 	bl	8002f58 <HAL_PCD_EP_SetStall>
 8009d10:	4603      	mov	r3, r0
 8009d12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d14:	7bfb      	ldrb	r3, [r7, #15]
 8009d16:	4618      	mov	r0, r3
 8009d18:	f000 f8dc 	bl	8009ed4 <USBD_Get_USB_Status>
 8009d1c:	4603      	mov	r3, r0
 8009d1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d20:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3710      	adds	r7, #16
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b084      	sub	sp, #16
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	460b      	mov	r3, r1
 8009d34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d36:	2300      	movs	r3, #0
 8009d38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d44:	78fa      	ldrb	r2, [r7, #3]
 8009d46:	4611      	mov	r1, r2
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f7f9 f957 	bl	8002ffc <HAL_PCD_EP_ClrStall>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d52:	7bfb      	ldrb	r3, [r7, #15]
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 f8bd 	bl	8009ed4 <USBD_Get_USB_Status>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3710      	adds	r7, #16
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d68:	b480      	push	{r7}
 8009d6a:	b085      	sub	sp, #20
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	460b      	mov	r3, r1
 8009d72:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d7a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	da0b      	bge.n	8009d9c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d8a:	68f9      	ldr	r1, [r7, #12]
 8009d8c:	4613      	mov	r3, r2
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	00db      	lsls	r3, r3, #3
 8009d94:	440b      	add	r3, r1
 8009d96:	3312      	adds	r3, #18
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	e00b      	b.n	8009db4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d9c:	78fb      	ldrb	r3, [r7, #3]
 8009d9e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009da2:	68f9      	ldr	r1, [r7, #12]
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	00db      	lsls	r3, r3, #3
 8009dac:	440b      	add	r3, r1
 8009dae:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009db2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3714      	adds	r7, #20
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dda:	78fa      	ldrb	r2, [r7, #3]
 8009ddc:	4611      	mov	r1, r2
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7f8 ff89 	bl	8002cf6 <HAL_PCD_SetAddress>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
 8009dea:	4618      	mov	r0, r3
 8009dec:	f000 f872 	bl	8009ed4 <USBD_Get_USB_Status>
 8009df0:	4603      	mov	r3, r0
 8009df2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009df4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3710      	adds	r7, #16
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b086      	sub	sp, #24
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	461a      	mov	r2, r3
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	72fb      	strb	r3, [r7, #11]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e16:	2300      	movs	r3, #0
 8009e18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e20:	893b      	ldrh	r3, [r7, #8]
 8009e22:	7af9      	ldrb	r1, [r7, #11]
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	f7f9 f860 	bl	8002eea <HAL_PCD_EP_Transmit>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
 8009e30:	4618      	mov	r0, r3
 8009e32:	f000 f84f 	bl	8009ed4 <USBD_Get_USB_Status>
 8009e36:	4603      	mov	r3, r0
 8009e38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e3a:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3718      	adds	r7, #24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b086      	sub	sp, #24
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	607a      	str	r2, [r7, #4]
 8009e4e:	461a      	mov	r2, r3
 8009e50:	460b      	mov	r3, r1
 8009e52:	72fb      	strb	r3, [r7, #11]
 8009e54:	4613      	mov	r3, r2
 8009e56:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e66:	893b      	ldrh	r3, [r7, #8]
 8009e68:	7af9      	ldrb	r1, [r7, #11]
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	f7f9 f80c 	bl	8002e88 <HAL_PCD_EP_Receive>
 8009e70:	4603      	mov	r3, r0
 8009e72:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e74:	7dfb      	ldrb	r3, [r7, #23]
 8009e76:	4618      	mov	r0, r3
 8009e78:	f000 f82c 	bl	8009ed4 <USBD_Get_USB_Status>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e80:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009e94:	4b03      	ldr	r3, [pc, #12]	@ (8009ea4 <USBD_static_malloc+0x18>)
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	370c      	adds	r7, #12
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop
 8009ea4:	20000ab8 	.word	0x20000ab8

08009ea8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]

}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009ec8:	bf00      	nop
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	4603      	mov	r3, r0
 8009edc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009ee2:	79fb      	ldrb	r3, [r7, #7]
 8009ee4:	2b03      	cmp	r3, #3
 8009ee6:	d817      	bhi.n	8009f18 <USBD_Get_USB_Status+0x44>
 8009ee8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ef0 <USBD_Get_USB_Status+0x1c>)
 8009eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eee:	bf00      	nop
 8009ef0:	08009f01 	.word	0x08009f01
 8009ef4:	08009f07 	.word	0x08009f07
 8009ef8:	08009f0d 	.word	0x08009f0d
 8009efc:	08009f13 	.word	0x08009f13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	73fb      	strb	r3, [r7, #15]
    break;
 8009f04:	e00b      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f06:	2302      	movs	r3, #2
 8009f08:	73fb      	strb	r3, [r7, #15]
    break;
 8009f0a:	e008      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f0c:	2301      	movs	r3, #1
 8009f0e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f10:	e005      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f12:	2302      	movs	r3, #2
 8009f14:	73fb      	strb	r3, [r7, #15]
    break;
 8009f16:	e002      	b.n	8009f1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f18:	2302      	movs	r3, #2
 8009f1a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f1c:	bf00      	nop
  }
  return usb_status;
 8009f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3714      	adds	r7, #20
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <memset>:
 8009f2c:	4402      	add	r2, r0
 8009f2e:	4603      	mov	r3, r0
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d100      	bne.n	8009f36 <memset+0xa>
 8009f34:	4770      	bx	lr
 8009f36:	f803 1b01 	strb.w	r1, [r3], #1
 8009f3a:	e7f9      	b.n	8009f30 <memset+0x4>

08009f3c <__libc_init_array>:
 8009f3c:	b570      	push	{r4, r5, r6, lr}
 8009f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8009f74 <__libc_init_array+0x38>)
 8009f40:	4c0d      	ldr	r4, [pc, #52]	@ (8009f78 <__libc_init_array+0x3c>)
 8009f42:	1b64      	subs	r4, r4, r5
 8009f44:	10a4      	asrs	r4, r4, #2
 8009f46:	2600      	movs	r6, #0
 8009f48:	42a6      	cmp	r6, r4
 8009f4a:	d109      	bne.n	8009f60 <__libc_init_array+0x24>
 8009f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8009f7c <__libc_init_array+0x40>)
 8009f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8009f80 <__libc_init_array+0x44>)
 8009f50:	f000 f818 	bl	8009f84 <_init>
 8009f54:	1b64      	subs	r4, r4, r5
 8009f56:	10a4      	asrs	r4, r4, #2
 8009f58:	2600      	movs	r6, #0
 8009f5a:	42a6      	cmp	r6, r4
 8009f5c:	d105      	bne.n	8009f6a <__libc_init_array+0x2e>
 8009f5e:	bd70      	pop	{r4, r5, r6, pc}
 8009f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f64:	4798      	blx	r3
 8009f66:	3601      	adds	r6, #1
 8009f68:	e7ee      	b.n	8009f48 <__libc_init_array+0xc>
 8009f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f6e:	4798      	blx	r3
 8009f70:	3601      	adds	r6, #1
 8009f72:	e7f2      	b.n	8009f5a <__libc_init_array+0x1e>
 8009f74:	0800a02c 	.word	0x0800a02c
 8009f78:	0800a02c 	.word	0x0800a02c
 8009f7c:	0800a02c 	.word	0x0800a02c
 8009f80:	0800a030 	.word	0x0800a030

08009f84 <_init>:
 8009f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f86:	bf00      	nop
 8009f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f8a:	bc08      	pop	{r3}
 8009f8c:	469e      	mov	lr, r3
 8009f8e:	4770      	bx	lr

08009f90 <_fini>:
 8009f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f92:	bf00      	nop
 8009f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f96:	bc08      	pop	{r3}
 8009f98:	469e      	mov	lr, r3
 8009f9a:	4770      	bx	lr
