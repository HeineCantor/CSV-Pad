
GamePad_Prova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009e38  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a034  0800a034  0000c174  2**0
                  CONTENTS
  4 .ARM          00000000  0800a034  0800a034  0000c174  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a034  0800a034  0000c174  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a034  0800a034  0000b034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a038  0800a038  0000b038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000174  20000000  0800a03c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c174  2**0
                  CONTENTS
 10 .bss          000009b4  20000174  20000174  0000c174  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b28  20000b28  0000c174  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001393a  00000000  00000000  0000c1a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003601  00000000  00000000  0001fade  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  000230e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c78  00000000  00000000  00024168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020790  00000000  00000000  00024de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016dcd  00000000  00000000  00045570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b723d  00000000  00000000  0005c33d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011357a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000042ec  00000000  00000000  001135c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001178ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000174 	.word	0x20000174
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009fa8 	.word	0x08009fa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000178 	.word	0x20000178
 80001c4:	08009fa8 	.word	0x08009fa8

080001c8 <HAL_GPIO_EXTI_Callback>:
static uint32_t analogBuffer1[2], analogBuffer2[2];
static uint16_t GPIO_MASK = 0x0500; // 0000 0101 0000 0000

uint8_t gamepadBuffer[7];

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]

	uint8_t current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4810      	ldr	r0, [pc, #64]	@ (8000218 <HAL_GPIO_EXTI_Callback+0x50>)
 80001d8:	f002 fa64 	bl	80026a4 <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	73fb      	strb	r3, [r7, #15]


	if (current_pin_state)
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d007      	beq.n	80001f6 <HAL_GPIO_EXTI_Callback+0x2e>
		gamepad.buttons |= GPIO_Pin;
 80001e6:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001e8:	88da      	ldrh	r2, [r3, #6]
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001f2:	80da      	strh	r2, [r3, #6]
	else
		gamepad.buttons &= ~GPIO_Pin;
}
 80001f4:	e00b      	b.n	800020e <HAL_GPIO_EXTI_Callback+0x46>
		gamepad.buttons &= ~GPIO_Pin;
 80001f6:	4b09      	ldr	r3, [pc, #36]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001f8:	88db      	ldrh	r3, [r3, #6]
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000200:	43db      	mvns	r3, r3
 8000202:	b21b      	sxth	r3, r3
 8000204:	4013      	ands	r3, r2
 8000206:	b21b      	sxth	r3, r3
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b04      	ldr	r3, [pc, #16]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 800020c:	80da      	strh	r2, [r3, #6]
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	48000c00 	.word	0x48000c00
 800021c:	2000030c 	.word	0x2000030c

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd4f 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f887 	bl	800033c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa45 	bl	80006bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000232:	f000 fa11 	bl	8000658 <MX_DMA_Init>
  MX_I2C1_Init();
 8000236:	f000 f9cf 	bl	80005d8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800023a:	f009 fa71 	bl	8009720 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800023e:	f000 f8e1 	bl	8000404 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000242:	f000 f95d 	bl	8000500 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, analogBuffer1, 2); // start adc in dma mode for multichannel
 8000246:	2202      	movs	r2, #2
 8000248:	4934      	ldr	r1, [pc, #208]	@ (800031c <main+0xfc>)
 800024a:	4835      	ldr	r0, [pc, #212]	@ (8000320 <main+0x100>)
 800024c:	f000 ffc4 	bl	80011d8 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, analogBuffer2, 2); // start adc in dma mode for multichannel
 8000250:	2202      	movs	r2, #2
 8000252:	4934      	ldr	r1, [pc, #208]	@ (8000324 <main+0x104>)
 8000254:	4834      	ldr	r0, [pc, #208]	@ (8000328 <main+0x108>)
 8000256:	f000 ffbf 	bl	80011d8 <HAL_ADC_Start_DMA>

  gamepad.id=1;
 800025a:	4b34      	ldr	r3, [pc, #208]	@ (800032c <main+0x10c>)
 800025c:	2201      	movs	r2, #1
 800025e:	701a      	strb	r2, [r3, #0]

  gamepad.leftAxis[0] = 0;
 8000260:	4b32      	ldr	r3, [pc, #200]	@ (800032c <main+0x10c>)
 8000262:	2200      	movs	r2, #0
 8000264:	705a      	strb	r2, [r3, #1]
  gamepad.leftAxis[1] = 0;
 8000266:	4b31      	ldr	r3, [pc, #196]	@ (800032c <main+0x10c>)
 8000268:	2200      	movs	r2, #0
 800026a:	709a      	strb	r2, [r3, #2]

  gamepad.rightAxis[0] = 0;
 800026c:	4b2f      	ldr	r3, [pc, #188]	@ (800032c <main+0x10c>)
 800026e:	2200      	movs	r2, #0
 8000270:	70da      	strb	r2, [r3, #3]
  gamepad.rightAxis[1] = 0;
 8000272:	4b2e      	ldr	r3, [pc, #184]	@ (800032c <main+0x10c>)
 8000274:	2200      	movs	r2, #0
 8000276:	711a      	strb	r2, [r3, #4]

  gamepad.buttons = GPIO_MASK;
 8000278:	4b2d      	ldr	r3, [pc, #180]	@ (8000330 <main+0x110>)
 800027a:	881a      	ldrh	r2, [r3, #0]
 800027c:	4b2b      	ldr	r3, [pc, #172]	@ (800032c <main+0x10c>)
 800027e:	80da      	strh	r2, [r3, #6]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  gamepad.leftAxis[0] = (analogBuffer1[0]-2048)/16;
 8000280:	4b26      	ldr	r3, [pc, #152]	@ (800031c <main+0xfc>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000288:	091b      	lsrs	r3, r3, #4
 800028a:	b2da      	uxtb	r2, r3
 800028c:	4b27      	ldr	r3, [pc, #156]	@ (800032c <main+0x10c>)
 800028e:	705a      	strb	r2, [r3, #1]
	  gamepad.leftAxis[1] = (analogBuffer1[1]-2048)/16;
 8000290:	4b22      	ldr	r3, [pc, #136]	@ (800031c <main+0xfc>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000298:	091b      	lsrs	r3, r3, #4
 800029a:	b2da      	uxtb	r2, r3
 800029c:	4b23      	ldr	r3, [pc, #140]	@ (800032c <main+0x10c>)
 800029e:	709a      	strb	r2, [r3, #2]

	  gamepad.rightAxis[0] = (analogBuffer2[0]-2048)/16;
 80002a0:	4b20      	ldr	r3, [pc, #128]	@ (8000324 <main+0x104>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002a8:	091b      	lsrs	r3, r3, #4
 80002aa:	b2da      	uxtb	r2, r3
 80002ac:	4b1f      	ldr	r3, [pc, #124]	@ (800032c <main+0x10c>)
 80002ae:	70da      	strb	r2, [r3, #3]
	  gamepad.rightAxis[1] = (analogBuffer2[1]-2048)/16;
 80002b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000324 <main+0x104>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	b2da      	uxtb	r2, r3
 80002bc:	4b1b      	ldr	r3, [pc, #108]	@ (800032c <main+0x10c>)
 80002be:	711a      	strb	r2, [r3, #4]

	  gamepadBuffer[0] = gamepad.id; // id
 80002c0:	4b1a      	ldr	r3, [pc, #104]	@ (800032c <main+0x10c>)
 80002c2:	781a      	ldrb	r2, [r3, #0]
 80002c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000334 <main+0x114>)
 80002c6:	701a      	strb	r2, [r3, #0]

	  gamepadBuffer[1] = gamepad.leftAxis[0]; // left movement (-1,1)
 80002c8:	4b18      	ldr	r3, [pc, #96]	@ (800032c <main+0x10c>)
 80002ca:	785a      	ldrb	r2, [r3, #1]
 80002cc:	4b19      	ldr	r3, [pc, #100]	@ (8000334 <main+0x114>)
 80002ce:	705a      	strb	r2, [r3, #1]
	  gamepadBuffer[2] = gamepad.leftAxis[1]; // right movement
 80002d0:	4b16      	ldr	r3, [pc, #88]	@ (800032c <main+0x10c>)
 80002d2:	789a      	ldrb	r2, [r3, #2]
 80002d4:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <main+0x114>)
 80002d6:	709a      	strb	r2, [r3, #2]

	  gamepadBuffer[3] = gamepad.rightAxis[0]; // left movement (-1,1)
 80002d8:	4b14      	ldr	r3, [pc, #80]	@ (800032c <main+0x10c>)
 80002da:	78da      	ldrb	r2, [r3, #3]
 80002dc:	4b15      	ldr	r3, [pc, #84]	@ (8000334 <main+0x114>)
 80002de:	70da      	strb	r2, [r3, #3]
	  gamepadBuffer[4] = gamepad.rightAxis[1]; // right movement
 80002e0:	4b12      	ldr	r3, [pc, #72]	@ (800032c <main+0x10c>)
 80002e2:	791a      	ldrb	r2, [r3, #4]
 80002e4:	4b13      	ldr	r3, [pc, #76]	@ (8000334 <main+0x114>)
 80002e6:	711a      	strb	r2, [r3, #4]

	  uint16_t buttonsWord = gamepad.buttons ^ GPIO_MASK;
 80002e8:	4b10      	ldr	r3, [pc, #64]	@ (800032c <main+0x10c>)
 80002ea:	88da      	ldrh	r2, [r3, #6]
 80002ec:	4b10      	ldr	r3, [pc, #64]	@ (8000330 <main+0x110>)
 80002ee:	881b      	ldrh	r3, [r3, #0]
 80002f0:	4053      	eors	r3, r2
 80002f2:	80fb      	strh	r3, [r7, #6]

	  gamepadBuffer[5] = (uint8_t) (0x00FF & buttonsWord); // buttons
 80002f4:	88fb      	ldrh	r3, [r7, #6]
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000334 <main+0x114>)
 80002fa:	715a      	strb	r2, [r3, #5]
	  gamepadBuffer[6] = (uint8_t) ((0xFF00 & buttonsWord) >> 8); // buttons
 80002fc:	88fb      	ldrh	r3, [r7, #6]
 80002fe:	0a1b      	lsrs	r3, r3, #8
 8000300:	b29b      	uxth	r3, r3
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b0b      	ldr	r3, [pc, #44]	@ (8000334 <main+0x114>)
 8000306:	719a      	strb	r2, [r3, #6]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, gamepadBuffer, 7);
 8000308:	2207      	movs	r2, #7
 800030a:	490a      	ldr	r1, [pc, #40]	@ (8000334 <main+0x114>)
 800030c:	480a      	ldr	r0, [pc, #40]	@ (8000338 <main+0x118>)
 800030e:	f008 f89b 	bl	8008448 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8000312:	2064      	movs	r0, #100	@ 0x64
 8000314:	f000 fd3e 	bl	8000d94 <HAL_Delay>
  {
 8000318:	bf00      	nop
 800031a:	e7b1      	b.n	8000280 <main+0x60>
 800031c:	20000314 	.word	0x20000314
 8000320:	20000190 	.word	0x20000190
 8000324:	2000031c 	.word	0x2000031c
 8000328:	200001e0 	.word	0x200001e0
 800032c:	2000030c 	.word	0x2000030c
 8000330:	20000000 	.word	0x20000000
 8000334:	20000324 	.word	0x20000324
 8000338:	20000338 	.word	0x20000338

0800033c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	b09e      	sub	sp, #120	@ 0x78
 8000340:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000342:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000346:	2228      	movs	r2, #40	@ 0x28
 8000348:	2100      	movs	r1, #0
 800034a:	4618      	mov	r0, r3
 800034c:	f009 fe00 	bl	8009f50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000354:	2200      	movs	r2, #0
 8000356:	601a      	str	r2, [r3, #0]
 8000358:	605a      	str	r2, [r3, #4]
 800035a:	609a      	str	r2, [r3, #8]
 800035c:	60da      	str	r2, [r3, #12]
 800035e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000360:	463b      	mov	r3, r7
 8000362:	223c      	movs	r2, #60	@ 0x3c
 8000364:	2100      	movs	r1, #0
 8000366:	4618      	mov	r0, r3
 8000368:	f009 fdf2 	bl	8009f50 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800036c:	2303      	movs	r3, #3
 800036e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000370:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000374:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000376:	2300      	movs	r3, #0
 8000378:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800037a:	2301      	movs	r3, #1
 800037c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800037e:	2310      	movs	r3, #16
 8000380:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000382:	2302      	movs	r3, #2
 8000384:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000386:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800038a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800038c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000390:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000392:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000396:	4618      	mov	r0, r3
 8000398:	f003 ffb0 	bl	80042fc <HAL_RCC_OscConfig>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80003a2:	f000 fa55 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a6:	230f      	movs	r3, #15
 80003a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003aa:	2302      	movs	r3, #2
 80003ac:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b8:	2300      	movs	r3, #0
 80003ba:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003c0:	2101      	movs	r1, #1
 80003c2:	4618      	mov	r0, r3
 80003c4:	f004 ffd8 	bl	8005378 <HAL_RCC_ClockConfig>
 80003c8:	4603      	mov	r3, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d001      	beq.n	80003d2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003ce:	f000 fa3f 	bl	8000850 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80003d2:	4b0b      	ldr	r3, [pc, #44]	@ (8000400 <SystemClock_Config+0xc4>)
 80003d4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003da:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003dc:	2300      	movs	r3, #0
 80003de:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003e0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003e6:	463b      	mov	r3, r7
 80003e8:	4618      	mov	r0, r3
 80003ea:	f005 f995 	bl	8005718 <HAL_RCCEx_PeriphCLKConfig>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003f4:	f000 fa2c 	bl	8000850 <Error_Handler>
  }
}
 80003f8:	bf00      	nop
 80003fa:	3778      	adds	r7, #120	@ 0x78
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	000200a0 	.word	0x000200a0

08000404 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b08a      	sub	sp, #40	@ 0x28
 8000408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800040a:	f107 031c 	add.w	r3, r7, #28
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000416:	1d3b      	adds	r3, r7, #4
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
 800041c:	605a      	str	r2, [r3, #4]
 800041e:	609a      	str	r2, [r3, #8]
 8000420:	60da      	str	r2, [r3, #12]
 8000422:	611a      	str	r2, [r3, #16]
 8000424:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000426:	4b35      	ldr	r3, [pc, #212]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000428:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800042c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800042e:	4b33      	ldr	r3, [pc, #204]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000430:	2200      	movs	r2, #0
 8000432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000434:	4b31      	ldr	r3, [pc, #196]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000436:	2200      	movs	r2, #0
 8000438:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800043a:	4b30      	ldr	r3, [pc, #192]	@ (80004fc <MX_ADC1_Init+0xf8>)
 800043c:	2201      	movs	r2, #1
 800043e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000440:	4b2e      	ldr	r3, [pc, #184]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000442:	2201      	movs	r2, #1
 8000444:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000446:	4b2d      	ldr	r3, [pc, #180]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000448:	2200      	movs	r2, #0
 800044a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800044e:	4b2b      	ldr	r3, [pc, #172]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000450:	2200      	movs	r2, #0
 8000452:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000454:	4b29      	ldr	r3, [pc, #164]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000456:	2201      	movs	r2, #1
 8000458:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800045a:	4b28      	ldr	r3, [pc, #160]	@ (80004fc <MX_ADC1_Init+0xf8>)
 800045c:	2200      	movs	r2, #0
 800045e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000460:	4b26      	ldr	r3, [pc, #152]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000462:	2202      	movs	r2, #2
 8000464:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000466:	4b25      	ldr	r3, [pc, #148]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000468:	2201      	movs	r2, #1
 800046a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800046e:	4b23      	ldr	r3, [pc, #140]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000470:	2208      	movs	r2, #8
 8000472:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000474:	4b21      	ldr	r3, [pc, #132]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000476:	2200      	movs	r2, #0
 8000478:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800047a:	4b20      	ldr	r3, [pc, #128]	@ (80004fc <MX_ADC1_Init+0xf8>)
 800047c:	2200      	movs	r2, #0
 800047e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000480:	481e      	ldr	r0, [pc, #120]	@ (80004fc <MX_ADC1_Init+0xf8>)
 8000482:	f000 fcc9 	bl	8000e18 <HAL_ADC_Init>
 8000486:	4603      	mov	r3, r0
 8000488:	2b00      	cmp	r3, #0
 800048a:	d001      	beq.n	8000490 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800048c:	f000 f9e0 	bl	8000850 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000490:	2300      	movs	r3, #0
 8000492:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000494:	f107 031c 	add.w	r3, r7, #28
 8000498:	4619      	mov	r1, r3
 800049a:	4818      	ldr	r0, [pc, #96]	@ (80004fc <MX_ADC1_Init+0xf8>)
 800049c:	f001 faa2 	bl	80019e4 <HAL_ADCEx_MultiModeConfigChannel>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80004a6:	f000 f9d3 	bl	8000850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004aa:	2301      	movs	r3, #1
 80004ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004ae:	2301      	movs	r3, #1
 80004b0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004b2:	2300      	movs	r3, #0
 80004b4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004b6:	2307      	movs	r3, #7
 80004b8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004be:	2300      	movs	r3, #0
 80004c0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004c2:	1d3b      	adds	r3, r7, #4
 80004c4:	4619      	mov	r1, r3
 80004c6:	480d      	ldr	r0, [pc, #52]	@ (80004fc <MX_ADC1_Init+0xf8>)
 80004c8:	f000 ffa2 	bl	8001410 <HAL_ADC_ConfigChannel>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004d2:	f000 f9bd 	bl	8000850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004d6:	2302      	movs	r3, #2
 80004d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004da:	2302      	movs	r3, #2
 80004dc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	4619      	mov	r1, r3
 80004e2:	4806      	ldr	r0, [pc, #24]	@ (80004fc <MX_ADC1_Init+0xf8>)
 80004e4:	f000 ff94 	bl	8001410 <HAL_ADC_ConfigChannel>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80004ee:	f000 f9af 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004f2:	bf00      	nop
 80004f4:	3728      	adds	r7, #40	@ 0x28
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	20000190 	.word	0x20000190

08000500 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b086      	sub	sp, #24
 8000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000506:	463b      	mov	r3, r7
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
 800050c:	605a      	str	r2, [r3, #4]
 800050e:	609a      	str	r2, [r3, #8]
 8000510:	60da      	str	r2, [r3, #12]
 8000512:	611a      	str	r2, [r3, #16]
 8000514:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000516:	4b2e      	ldr	r3, [pc, #184]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000518:	4a2e      	ldr	r2, [pc, #184]	@ (80005d4 <MX_ADC2_Init+0xd4>)
 800051a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800051c:	4b2c      	ldr	r3, [pc, #176]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800051e:	2200      	movs	r2, #0
 8000520:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000522:	4b2b      	ldr	r3, [pc, #172]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000528:	4b29      	ldr	r3, [pc, #164]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800052a:	2201      	movs	r2, #1
 800052c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800052e:	4b28      	ldr	r3, [pc, #160]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000530:	2201      	movs	r2, #1
 8000532:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000534:	4b26      	ldr	r3, [pc, #152]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000536:	2200      	movs	r2, #0
 8000538:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800053c:	4b24      	ldr	r3, [pc, #144]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800053e:	2200      	movs	r2, #0
 8000540:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000542:	4b23      	ldr	r3, [pc, #140]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000544:	2201      	movs	r2, #1
 8000546:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800054a:	2200      	movs	r2, #0
 800054c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800054e:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000550:	2202      	movs	r2, #2
 8000552:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000554:	4b1e      	ldr	r3, [pc, #120]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000556:	2201      	movs	r2, #1
 8000558:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800055e:	2208      	movs	r2, #8
 8000560:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000564:	2200      	movs	r2, #0
 8000566:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800056a:	2200      	movs	r2, #0
 800056c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800056e:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 8000570:	f000 fc52 	bl	8000e18 <HAL_ADC_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800057a:	f000 f969 	bl	8000850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800057e:	2305      	movs	r3, #5
 8000580:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000582:	2301      	movs	r3, #1
 8000584:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000586:	2300      	movs	r3, #0
 8000588:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800058a:	2307      	movs	r3, #7
 800058c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800058e:	2300      	movs	r3, #0
 8000590:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000596:	463b      	mov	r3, r7
 8000598:	4619      	mov	r1, r3
 800059a:	480d      	ldr	r0, [pc, #52]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 800059c:	f000 ff38 	bl	8001410 <HAL_ADC_ConfigChannel>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d001      	beq.n	80005aa <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 80005a6:	f000 f953 	bl	8000850 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005aa:	2306      	movs	r3, #6
 80005ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005b2:	463b      	mov	r3, r7
 80005b4:	4619      	mov	r1, r3
 80005b6:	4806      	ldr	r0, [pc, #24]	@ (80005d0 <MX_ADC2_Init+0xd0>)
 80005b8:	f000 ff2a 	bl	8001410 <HAL_ADC_ConfigChannel>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80005c2:	f000 f945 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	3718      	adds	r7, #24
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	200001e0 	.word	0x200001e0
 80005d4:	50000100 	.word	0x50000100

080005d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_I2C1_Init+0x74>)
 80005de:	4a1c      	ldr	r2, [pc, #112]	@ (8000650 <MX_I2C1_Init+0x78>)
 80005e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_I2C1_Init+0x74>)
 80005e4:	4a1b      	ldr	r2, [pc, #108]	@ (8000654 <MX_I2C1_Init+0x7c>)
 80005e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_I2C1_Init+0x74>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_I2C1_Init+0x74>)
 80005f0:	2201      	movs	r2, #1
 80005f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_I2C1_Init+0x74>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_I2C1_Init+0x74>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_I2C1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000606:	4b11      	ldr	r3, [pc, #68]	@ (800064c <MX_I2C1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800060c:	4b0f      	ldr	r3, [pc, #60]	@ (800064c <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000612:	480e      	ldr	r0, [pc, #56]	@ (800064c <MX_I2C1_Init+0x74>)
 8000614:	f002 f88e 	bl	8002734 <HAL_I2C_Init>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800061e:	f000 f917 	bl	8000850 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000622:	2100      	movs	r1, #0
 8000624:	4809      	ldr	r0, [pc, #36]	@ (800064c <MX_I2C1_Init+0x74>)
 8000626:	f002 f920 	bl	800286a <HAL_I2CEx_ConfigAnalogFilter>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000630:	f000 f90e 	bl	8000850 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000634:	2100      	movs	r1, #0
 8000636:	4805      	ldr	r0, [pc, #20]	@ (800064c <MX_I2C1_Init+0x74>)
 8000638:	f002 f962 	bl	8002900 <HAL_I2CEx_ConfigDigitalFilter>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000642:	f000 f905 	bl	8000850 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	200002b8 	.word	0x200002b8
 8000650:	40005400 	.word	0x40005400
 8000654:	2000090e 	.word	0x2000090e

08000658 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800065e:	4b16      	ldr	r3, [pc, #88]	@ (80006b8 <MX_DMA_Init+0x60>)
 8000660:	695b      	ldr	r3, [r3, #20]
 8000662:	4a15      	ldr	r2, [pc, #84]	@ (80006b8 <MX_DMA_Init+0x60>)
 8000664:	f043 0301 	orr.w	r3, r3, #1
 8000668:	6153      	str	r3, [r2, #20]
 800066a:	4b13      	ldr	r3, [pc, #76]	@ (80006b8 <MX_DMA_Init+0x60>)
 800066c:	695b      	ldr	r3, [r3, #20]
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000676:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <MX_DMA_Init+0x60>)
 8000678:	695b      	ldr	r3, [r3, #20]
 800067a:	4a0f      	ldr	r2, [pc, #60]	@ (80006b8 <MX_DMA_Init+0x60>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6153      	str	r3, [r2, #20]
 8000682:	4b0d      	ldr	r3, [pc, #52]	@ (80006b8 <MX_DMA_Init+0x60>)
 8000684:	695b      	ldr	r3, [r3, #20]
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	200b      	movs	r0, #11
 8000694:	f001 fca3 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000698:	200b      	movs	r0, #11
 800069a:	f001 fcbc 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2100      	movs	r1, #0
 80006a2:	2038      	movs	r0, #56	@ 0x38
 80006a4:	f001 fc9b 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80006a8:	2038      	movs	r0, #56	@ 0x38
 80006aa:	f001 fcb4 	bl	8002016 <HAL_NVIC_EnableIRQ>

}
 80006ae:	bf00      	nop
 80006b0:	3708      	adds	r7, #8
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40021000 	.word	0x40021000

080006bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	@ 0x30
 80006c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	2200      	movs	r2, #0
 80006c8:	601a      	str	r2, [r3, #0]
 80006ca:	605a      	str	r2, [r3, #4]
 80006cc:	609a      	str	r2, [r3, #8]
 80006ce:	60da      	str	r2, [r3, #12]
 80006d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006d2:	4b5c      	ldr	r3, [pc, #368]	@ (8000844 <MX_GPIO_Init+0x188>)
 80006d4:	695b      	ldr	r3, [r3, #20]
 80006d6:	4a5b      	ldr	r2, [pc, #364]	@ (8000844 <MX_GPIO_Init+0x188>)
 80006d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006dc:	6153      	str	r3, [r2, #20]
 80006de:	4b59      	ldr	r3, [pc, #356]	@ (8000844 <MX_GPIO_Init+0x188>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006e6:	61bb      	str	r3, [r7, #24]
 80006e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	4b56      	ldr	r3, [pc, #344]	@ (8000844 <MX_GPIO_Init+0x188>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	4a55      	ldr	r2, [pc, #340]	@ (8000844 <MX_GPIO_Init+0x188>)
 80006f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006f4:	6153      	str	r3, [r2, #20]
 80006f6:	4b53      	ldr	r3, [pc, #332]	@ (8000844 <MX_GPIO_Init+0x188>)
 80006f8:	695b      	ldr	r3, [r3, #20]
 80006fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000702:	4b50      	ldr	r3, [pc, #320]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000704:	695b      	ldr	r3, [r3, #20]
 8000706:	4a4f      	ldr	r2, [pc, #316]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000708:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800070c:	6153      	str	r3, [r2, #20]
 800070e:	4b4d      	ldr	r3, [pc, #308]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000710:	695b      	ldr	r3, [r3, #20]
 8000712:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b4a      	ldr	r3, [pc, #296]	@ (8000844 <MX_GPIO_Init+0x188>)
 800071c:	695b      	ldr	r3, [r3, #20]
 800071e:	4a49      	ldr	r2, [pc, #292]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000720:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000724:	6153      	str	r3, [r2, #20]
 8000726:	4b47      	ldr	r3, [pc, #284]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000728:	695b      	ldr	r3, [r3, #20]
 800072a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	4b44      	ldr	r3, [pc, #272]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000734:	695b      	ldr	r3, [r3, #20]
 8000736:	4a43      	ldr	r2, [pc, #268]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000738:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800073c:	6153      	str	r3, [r2, #20]
 800073e:	4b41      	ldr	r3, [pc, #260]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b3e      	ldr	r3, [pc, #248]	@ (8000844 <MX_GPIO_Init+0x188>)
 800074c:	695b      	ldr	r3, [r3, #20]
 800074e:	4a3d      	ldr	r2, [pc, #244]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000754:	6153      	str	r3, [r2, #20]
 8000756:	4b3b      	ldr	r3, [pc, #236]	@ (8000844 <MX_GPIO_Init+0x188>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 8000762:	2200      	movs	r2, #0
 8000764:	f64d 1108 	movw	r1, #55560	@ 0xd908
 8000768:	4837      	ldr	r0, [pc, #220]	@ (8000848 <MX_GPIO_Init+0x18c>)
 800076a:	f001 ffb3 	bl	80026d4 <HAL_GPIO_WritePin>
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD7_Pin LD9_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 800076e:	f64d 1308 	movw	r3, #55560	@ 0xd908
 8000772:	61fb      	str	r3, [r7, #28]
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4830      	ldr	r0, [pc, #192]	@ (8000848 <MX_GPIO_Init+0x18c>)
 8000788:	f001 fe12 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 800078c:	23c0      	movs	r3, #192	@ 0xc0
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000790:	2302      	movs	r3, #2
 8000792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000798:	2303      	movs	r3, #3
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800079c:	2305      	movs	r3, #5
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 031c 	add.w	r3, r7, #28
 80007a4:	4619      	mov	r1, r3
 80007a6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007aa:	f001 fe01 	bl	80023b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007be:	f107 031c 	add.w	r3, r7, #28
 80007c2:	4619      	mov	r1, r3
 80007c4:	4821      	ldr	r0, [pc, #132]	@ (800084c <MX_GPIO_Init+0x190>)
 80007c6:	f001 fdf3 	bl	80023b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007ca:	2200      	movs	r2, #0
 80007cc:	2100      	movs	r1, #0
 80007ce:	2006      	movs	r0, #6
 80007d0:	f001 fc05 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007d4:	2006      	movs	r0, #6
 80007d6:	f001 fc1e 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007da:	2200      	movs	r2, #0
 80007dc:	2100      	movs	r1, #0
 80007de:	2007      	movs	r0, #7
 80007e0:	f001 fbfd 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007e4:	2007      	movs	r0, #7
 80007e6:	f001 fc16 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2008      	movs	r0, #8
 80007f0:	f001 fbf5 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80007f4:	2008      	movs	r0, #8
 80007f6:	f001 fc0e 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2100      	movs	r1, #0
 80007fe:	2009      	movs	r0, #9
 8000800:	f001 fbed 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000804:	2009      	movs	r0, #9
 8000806:	f001 fc06 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2100      	movs	r1, #0
 800080e:	200a      	movs	r0, #10
 8000810:	f001 fbe5 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000814:	200a      	movs	r0, #10
 8000816:	f001 fbfe 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	2017      	movs	r0, #23
 8000820:	f001 fbdd 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000824:	2017      	movs	r0, #23
 8000826:	f001 fbf6 	bl	8002016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2100      	movs	r1, #0
 800082e:	2028      	movs	r0, #40	@ 0x28
 8000830:	f001 fbd5 	bl	8001fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000834:	2028      	movs	r0, #40	@ 0x28
 8000836:	f001 fbee 	bl	8002016 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083a:	bf00      	nop
 800083c:	3730      	adds	r7, #48	@ 0x30
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	40021000 	.word	0x40021000
 8000848:	48001000 	.word	0x48001000
 800084c:	48000c00 	.word	0x48000c00

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	bf00      	nop
 800085a:	e7fd      	b.n	8000858 <Error_Handler+0x8>

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	@ (80008a0 <HAL_MspInit+0x44>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a0e      	ldr	r2, [pc, #56]	@ (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b0c      	ldr	r3, [pc, #48]	@ (80008a0 <HAL_MspInit+0x44>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	@ (80008a0 <HAL_MspInit+0x44>)
 800087c:	69db      	ldr	r3, [r3, #28]
 800087e:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <HAL_MspInit+0x44>)
 8000880:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000884:	61d3      	str	r3, [r2, #28]
 8000886:	4b06      	ldr	r3, [pc, #24]	@ (80008a0 <HAL_MspInit+0x44>)
 8000888:	69db      	ldr	r3, [r3, #28]
 800088a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000892:	2007      	movs	r0, #7
 8000894:	f001 fb98 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08c      	sub	sp, #48	@ 0x30
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80008c4:	d156      	bne.n	8000974 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008c6:	4b67      	ldr	r3, [pc, #412]	@ (8000a64 <HAL_ADC_MspInit+0x1c0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	3301      	adds	r3, #1
 80008cc:	4a65      	ldr	r2, [pc, #404]	@ (8000a64 <HAL_ADC_MspInit+0x1c0>)
 80008ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008d0:	4b64      	ldr	r3, [pc, #400]	@ (8000a64 <HAL_ADC_MspInit+0x1c0>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	2b01      	cmp	r3, #1
 80008d6:	d10b      	bne.n	80008f0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008d8:	4b63      	ldr	r3, [pc, #396]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4a62      	ldr	r2, [pc, #392]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008e2:	6153      	str	r3, [r2, #20]
 80008e4:	4b60      	ldr	r3, [pc, #384]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	61bb      	str	r3, [r7, #24]
 80008ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f0:	4b5d      	ldr	r3, [pc, #372]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	4a5c      	ldr	r2, [pc, #368]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80008f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008fa:	6153      	str	r3, [r2, #20]
 80008fc:	4b5a      	ldr	r3, [pc, #360]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000908:	2303      	movs	r3, #3
 800090a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800090c:	2303      	movs	r3, #3
 800090e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800091e:	f001 fd47 	bl	80023b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000922:	4b52      	ldr	r3, [pc, #328]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 8000924:	4a52      	ldr	r2, [pc, #328]	@ (8000a70 <HAL_ADC_MspInit+0x1cc>)
 8000926:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000928:	4b50      	ldr	r3, [pc, #320]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 800092a:	2200      	movs	r2, #0
 800092c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800092e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 8000930:	2200      	movs	r2, #0
 8000932:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000934:	4b4d      	ldr	r3, [pc, #308]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 8000936:	2280      	movs	r2, #128	@ 0x80
 8000938:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093a:	4b4c      	ldr	r3, [pc, #304]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 800093c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000940:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000942:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 8000944:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000948:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800094a:	4b48      	ldr	r3, [pc, #288]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 800094c:	2220      	movs	r2, #32
 800094e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000950:	4b46      	ldr	r3, [pc, #280]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000956:	4845      	ldr	r0, [pc, #276]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 8000958:	f001 fb77 	bl	800204a <HAL_DMA_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 8000962:	f7ff ff75 	bl	8000850 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a40      	ldr	r2, [pc, #256]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 800096a:	639a      	str	r2, [r3, #56]	@ 0x38
 800096c:	4a3f      	ldr	r2, [pc, #252]	@ (8000a6c <HAL_ADC_MspInit+0x1c8>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8000972:	e072      	b.n	8000a5a <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a3e      	ldr	r2, [pc, #248]	@ (8000a74 <HAL_ADC_MspInit+0x1d0>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d16d      	bne.n	8000a5a <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800097e:	4b39      	ldr	r3, [pc, #228]	@ (8000a64 <HAL_ADC_MspInit+0x1c0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	3301      	adds	r3, #1
 8000984:	4a37      	ldr	r2, [pc, #220]	@ (8000a64 <HAL_ADC_MspInit+0x1c0>)
 8000986:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000988:	4b36      	ldr	r3, [pc, #216]	@ (8000a64 <HAL_ADC_MspInit+0x1c0>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b01      	cmp	r3, #1
 800098e:	d10b      	bne.n	80009a8 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000990:	4b35      	ldr	r3, [pc, #212]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	4a34      	ldr	r2, [pc, #208]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 8000996:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099a:	6153      	str	r3, [r2, #20]
 800099c:	4b32      	ldr	r3, [pc, #200]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80009aa:	695b      	ldr	r3, [r3, #20]
 80009ac:	4a2e      	ldr	r2, [pc, #184]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80009ae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80009b2:	6153      	str	r3, [r2, #20]
 80009b4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c0:	4b29      	ldr	r3, [pc, #164]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	4a28      	ldr	r2, [pc, #160]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80009c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ca:	6153      	str	r3, [r2, #20]
 80009cc:	4b26      	ldr	r3, [pc, #152]	@ (8000a68 <HAL_ADC_MspInit+0x1c4>)
 80009ce:	695b      	ldr	r3, [r3, #20]
 80009d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009d4:	60bb      	str	r3, [r7, #8]
 80009d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80009d8:	2311      	movs	r3, #17
 80009da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009dc:	2303      	movs	r3, #3
 80009de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009e4:	f107 031c 	add.w	r3, r7, #28
 80009e8:	4619      	mov	r1, r3
 80009ea:	4823      	ldr	r0, [pc, #140]	@ (8000a78 <HAL_ADC_MspInit+0x1d4>)
 80009ec:	f001 fce0 	bl	80023b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009f0:	2320      	movs	r3, #32
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 031c 	add.w	r3, r7, #28
 8000a00:	4619      	mov	r1, r3
 8000a02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a06:	f001 fcd3 	bl	80023b0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000a0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000a80 <HAL_ADC_MspInit+0x1dc>)
 8000a0e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a10:	4b1a      	ldr	r3, [pc, #104]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a16:	4b19      	ldr	r3, [pc, #100]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000a1c:	4b17      	ldr	r3, [pc, #92]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a22:	4b16      	ldr	r3, [pc, #88]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a28:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a2a:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a30:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a32:	4b12      	ldr	r3, [pc, #72]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a34:	2220      	movs	r2, #32
 8000a36:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a38:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a3e:	480f      	ldr	r0, [pc, #60]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a40:	f001 fb03 	bl	800204a <HAL_DMA_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8000a4a:	f7ff ff01 	bl	8000850 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4a0a      	ldr	r2, [pc, #40]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a52:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a54:	4a09      	ldr	r2, [pc, #36]	@ (8000a7c <HAL_ADC_MspInit+0x1d8>)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	@ 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000032c 	.word	0x2000032c
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	20000230 	.word	0x20000230
 8000a70:	40020008 	.word	0x40020008
 8000a74:	50000100 	.word	0x50000100
 8000a78:	48000800 	.word	0x48000800
 8000a7c:	20000274 	.word	0x20000274
 8000a80:	40020408 	.word	0x40020408

08000a84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a17      	ldr	r2, [pc, #92]	@ (8000b00 <HAL_I2C_MspInit+0x7c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d127      	bne.n	8000af6 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <HAL_I2C_MspInit+0x80>)
 8000aa8:	695b      	ldr	r3, [r3, #20]
 8000aaa:	4a16      	ldr	r2, [pc, #88]	@ (8000b04 <HAL_I2C_MspInit+0x80>)
 8000aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ab0:	6153      	str	r3, [r2, #20]
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <HAL_I2C_MspInit+0x80>)
 8000ab4:	695b      	ldr	r3, [r3, #20]
 8000ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000abe:	23c0      	movs	r3, #192	@ 0xc0
 8000ac0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aca:	2303      	movs	r3, #3
 8000acc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ace:	2304      	movs	r3, #4
 8000ad0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	480b      	ldr	r0, [pc, #44]	@ (8000b08 <HAL_I2C_MspInit+0x84>)
 8000ada:	f001 fc69 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <HAL_I2C_MspInit+0x80>)
 8000ae0:	69db      	ldr	r3, [r3, #28]
 8000ae2:	4a08      	ldr	r2, [pc, #32]	@ (8000b04 <HAL_I2C_MspInit+0x80>)
 8000ae4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ae8:	61d3      	str	r3, [r2, #28]
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <HAL_I2C_MspInit+0x80>)
 8000aec:	69db      	ldr	r3, [r3, #28]
 8000aee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000af6:	bf00      	nop
 8000af8:	3728      	adds	r7, #40	@ 0x28
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40005400 	.word	0x40005400
 8000b04:	40021000 	.word	0x40021000
 8000b08:	48000400 	.word	0x48000400

08000b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <NMI_Handler+0x4>

08000b14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b18:	bf00      	nop
 8000b1a:	e7fd      	b.n	8000b18 <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	bf00      	nop
 8000b22:	e7fd      	b.n	8000b20 <MemManage_Handler+0x4>

08000b24 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <BusFault_Handler+0x4>

08000b2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b30:	bf00      	nop
 8000b32:	e7fd      	b.n	8000b30 <UsageFault_Handler+0x4>

08000b34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b62:	f000 f8f7 	bl	8000d54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f001 fdc8 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b7c:	2002      	movs	r0, #2
 8000b7e:	f001 fdc1 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b8a:	2004      	movs	r0, #4
 8000b8c:	f001 fdba 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}

08000b94 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b98:	2008      	movs	r0, #8
 8000b9a:	f001 fdb3 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8000ba6:	2010      	movs	r0, #16
 8000ba8:	f001 fdac 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000bb4:	4802      	ldr	r0, [pc, #8]	@ (8000bc0 <DMA1_Channel1_IRQHandler+0x10>)
 8000bb6:	f001 faee 	bl	8002196 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000230 	.word	0x20000230

08000bc4 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000bc8:	4802      	ldr	r0, [pc, #8]	@ (8000bd4 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000bca:	f001 ffd2 	bl	8002b72 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000bce:	bf00      	nop
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	200007fc 	.word	0x200007fc

08000bd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000bdc:	2020      	movs	r0, #32
 8000bde:	f001 fd91 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000be2:	2040      	movs	r0, #64	@ 0x40
 8000be4:	f001 fd8e 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000be8:	2080      	movs	r0, #128	@ 0x80
 8000bea:	f001 fd8b 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000bee:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000bf2:	f001 fd87 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8000bf6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000bfa:	f001 fd83 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000c06:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000c0a:	f001 fd7b 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000c0e:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000c12:	f001 fd77 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000c16:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000c1a:	f001 fd73 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c1e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c22:	f001 fd6f 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000c26:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000c2a:	f001 fd6b 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000c2e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8000c32:	f001 fd67 	bl	8002704 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
	...

08000c3c <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <DMA2_Channel1_IRQHandler+0x10>)
 8000c42:	f001 faa8 	bl	8002196 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	20000274 	.word	0x20000274

08000c50 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <SystemInit+0x20>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c5a:	4a05      	ldr	r2, [pc, #20]	@ (8000c70 <SystemInit+0x20>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	e000ed00 	.word	0xe000ed00

08000c74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cac <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff ffea 	bl	8000c50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480c      	ldr	r0, [pc, #48]	@ (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7e:	490d      	ldr	r1, [pc, #52]	@ (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c80:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a0a      	ldr	r2, [pc, #40]	@ (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c94:	4c0a      	ldr	r4, [pc, #40]	@ (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f009 f95d 	bl	8009f60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ca6:	f7ff fabb 	bl	8000220 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
	  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000cac:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000174 	.word	0x20000174
  ldr r2, =_sidata
 8000cb8:	0800a03c 	.word	0x0800a03c
  ldr r2, =_sbss
 8000cbc:	20000174 	.word	0x20000174
  ldr r4, =_ebss
 8000cc0:	20000b28 	.word	0x20000b28

08000cc4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_2_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <HAL_Init+0x28>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a07      	ldr	r2, [pc, #28]	@ (8000cf0 <HAL_Init+0x28>)
 8000cd2:	f043 0310 	orr.w	r3, r3, #16
 8000cd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd8:	2003      	movs	r0, #3
 8000cda:	f001 f975 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cde:	2000      	movs	r0, #0
 8000ce0:	f000 f808 	bl	8000cf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce4:	f7ff fdba 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40022000 	.word	0x40022000

08000cf4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_InitTick+0x54>)
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <HAL_InitTick+0x58>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	4619      	mov	r1, r3
 8000d06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d12:	4618      	mov	r0, r3
 8000d14:	f001 f98d 	bl	8002032 <HAL_SYSTICK_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00e      	b.n	8000d40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d80a      	bhi.n	8000d3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000d30:	f001 f955 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d34:	4a06      	ldr	r2, [pc, #24]	@ (8000d50 <HAL_InitTick+0x5c>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e000      	b.n	8000d40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	2000000c 	.word	0x2000000c
 8000d50:	20000008 	.word	0x20000008

08000d54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d58:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x20>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_IncTick+0x24>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4413      	add	r3, r2
 8000d64:	4a04      	ldr	r2, [pc, #16]	@ (8000d78 <HAL_IncTick+0x24>)
 8000d66:	6013      	str	r3, [r2, #0]
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr
 8000d72:	bf00      	nop
 8000d74:	2000000c 	.word	0x2000000c
 8000d78:	20000330 	.word	0x20000330

08000d7c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d80:	4b03      	ldr	r3, [pc, #12]	@ (8000d90 <HAL_GetTick+0x14>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	20000330 	.word	0x20000330

08000d94 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b084      	sub	sp, #16
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d9c:	f7ff ffee 	bl	8000d7c <HAL_GetTick>
 8000da0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000dac:	d005      	beq.n	8000dba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dae:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd8 <HAL_Delay+0x44>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	461a      	mov	r2, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	4413      	add	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dba:	bf00      	nop
 8000dbc:	f7ff ffde 	bl	8000d7c <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	68fa      	ldr	r2, [r7, #12]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d8f7      	bhi.n	8000dbc <HAL_Delay+0x28>
  {
  }
}
 8000dcc:	bf00      	nop
 8000dce:	bf00      	nop
 8000dd0:	3710      	adds	r7, #16
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	b083      	sub	sp, #12
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000de4:	bf00      	nop
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000df8:	bf00      	nop
 8000dfa:	370c      	adds	r7, #12
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr

08000e18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b09a      	sub	sp, #104	@ 0x68
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e20:	2300      	movs	r3, #0
 8000e22:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d101      	bne.n	8000e38 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	e1c9      	b.n	80011cc <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	691b      	ldr	r3, [r3, #16]
 8000e3c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f003 0310 	and.w	r3, r3, #16
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d176      	bne.n	8000f38 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d152      	bne.n	8000ef8 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2200      	movs	r2, #0
 8000e56:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e6c:	6878      	ldr	r0, [r7, #4]
 8000e6e:	f7ff fd19 	bl	80008a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d13b      	bne.n	8000ef8 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000e80:	6878      	ldr	r0, [r7, #4]
 8000e82:	f000 ff6b 	bl	8001d5c <ADC_Disable>
 8000e86:	4603      	mov	r3, r0
 8000e88:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d12f      	bne.n	8000ef8 <HAL_ADC_Init+0xe0>
 8000e98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d12b      	bne.n	8000ef8 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ea8:	f023 0302 	bic.w	r3, r3, #2
 8000eac:	f043 0202 	orr.w	r2, r3, #2
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000ec2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	689a      	ldr	r2, [r3, #8]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000ed2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed4:	4b86      	ldr	r3, [pc, #536]	@ (80010f0 <HAL_ADC_Init+0x2d8>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a86      	ldr	r2, [pc, #536]	@ (80010f4 <HAL_ADC_Init+0x2dc>)
 8000eda:	fba2 2303 	umull	r2, r3, r2, r3
 8000ede:	0c9a      	lsrs	r2, r3, #18
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	4413      	add	r3, r2
 8000ee6:	005b      	lsls	r3, r3, #1
 8000ee8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000eea:	e002      	b.n	8000ef2 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	3b01      	subs	r3, #1
 8000ef0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1f9      	bne.n	8000eec <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d007      	beq.n	8000f16 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	689b      	ldr	r3, [r3, #8]
 8000f0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000f14:	d110      	bne.n	8000f38 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1a:	f023 0312 	bic.w	r3, r3, #18
 8000f1e:	f043 0210 	orr.w	r2, r3, #16
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2a:	f043 0201 	orr.w	r2, r3, #1
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000f32:	2301      	movs	r3, #1
 8000f34:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3c:	f003 0310 	and.w	r3, r3, #16
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	f040 8136 	bne.w	80011b2 <HAL_ADC_Init+0x39a>
 8000f46:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f040 8131 	bne.w	80011b2 <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8129 	bne.w	80011b2 <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000f68:	f043 0202 	orr.w	r2, r3, #2
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f78:	d004      	beq.n	8000f84 <HAL_ADC_Init+0x16c>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	@ (80010f8 <HAL_ADC_Init+0x2e0>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d101      	bne.n	8000f88 <HAL_ADC_Init+0x170>
 8000f84:	4b5d      	ldr	r3, [pc, #372]	@ (80010fc <HAL_ADC_Init+0x2e4>)
 8000f86:	e000      	b.n	8000f8a <HAL_ADC_Init+0x172>
 8000f88:	4b5d      	ldr	r3, [pc, #372]	@ (8001100 <HAL_ADC_Init+0x2e8>)
 8000f8a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000f94:	d102      	bne.n	8000f9c <HAL_ADC_Init+0x184>
 8000f96:	4b58      	ldr	r3, [pc, #352]	@ (80010f8 <HAL_ADC_Init+0x2e0>)
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e01a      	b.n	8000fd2 <HAL_ADC_Init+0x1ba>
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a55      	ldr	r2, [pc, #340]	@ (80010f8 <HAL_ADC_Init+0x2e0>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d103      	bne.n	8000fae <HAL_ADC_Init+0x196>
 8000fa6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	e011      	b.n	8000fd2 <HAL_ADC_Init+0x1ba>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a54      	ldr	r2, [pc, #336]	@ (8001104 <HAL_ADC_Init+0x2ec>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d102      	bne.n	8000fbe <HAL_ADC_Init+0x1a6>
 8000fb8:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <HAL_ADC_Init+0x2f0>)
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	e009      	b.n	8000fd2 <HAL_ADC_Init+0x1ba>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a51      	ldr	r2, [pc, #324]	@ (8001108 <HAL_ADC_Init+0x2f0>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d102      	bne.n	8000fce <HAL_ADC_Init+0x1b6>
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001104 <HAL_ADC_Init+0x2ec>)
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	e001      	b.n	8000fd2 <HAL_ADC_Init+0x1ba>
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f003 0303 	and.w	r3, r3, #3
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d108      	bne.n	8000ff2 <HAL_ADC_Init+0x1da>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d101      	bne.n	8000ff2 <HAL_ADC_Init+0x1da>
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e000      	b.n	8000ff4 <HAL_ADC_Init+0x1dc>
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d11c      	bne.n	8001032 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d010      	beq.n	8001020 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 0303 	and.w	r3, r3, #3
 8001006:	2b01      	cmp	r3, #1
 8001008:	d107      	bne.n	800101a <HAL_ADC_Init+0x202>
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	2b01      	cmp	r3, #1
 8001014:	d101      	bne.n	800101a <HAL_ADC_Init+0x202>
 8001016:	2301      	movs	r3, #1
 8001018:	e000      	b.n	800101c <HAL_ADC_Init+0x204>
 800101a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800101c:	2b00      	cmp	r3, #0
 800101e:	d108      	bne.n	8001032 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001020:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	431a      	orrs	r2, r3
 800102e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001030:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	7e5b      	ldrb	r3, [r3, #25]
 8001036:	035b      	lsls	r3, r3, #13
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800103c:	2a01      	cmp	r2, #1
 800103e:	d002      	beq.n	8001046 <HAL_ADC_Init+0x22e>
 8001040:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001044:	e000      	b.n	8001048 <HAL_ADC_Init+0x230>
 8001046:	2200      	movs	r2, #0
 8001048:	431a      	orrs	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	431a      	orrs	r2, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	689b      	ldr	r3, [r3, #8]
 8001054:	4313      	orrs	r3, r2
 8001056:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001058:	4313      	orrs	r3, r2
 800105a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001062:	2b01      	cmp	r3, #1
 8001064:	d11b      	bne.n	800109e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	7e5b      	ldrb	r3, [r3, #25]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d109      	bne.n	8001082 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001072:	3b01      	subs	r3, #1
 8001074:	045a      	lsls	r2, r3, #17
 8001076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001078:	4313      	orrs	r3, r2
 800107a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800107e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001080:	e00d      	b.n	800109e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800108a:	f043 0220 	orr.w	r2, r3, #32
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d03a      	beq.n	800111c <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a16      	ldr	r2, [pc, #88]	@ (8001104 <HAL_ADC_Init+0x2ec>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d004      	beq.n	80010ba <HAL_ADC_Init+0x2a2>
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <HAL_ADC_Init+0x2f0>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d128      	bne.n	800110c <HAL_ADC_Init+0x2f4>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010be:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80010c2:	d012      	beq.n	80010ea <HAL_ADC_Init+0x2d2>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80010cc:	d00a      	beq.n	80010e4 <HAL_ADC_Init+0x2cc>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010d2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80010d6:	d002      	beq.n	80010de <HAL_ADC_Init+0x2c6>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010dc:	e018      	b.n	8001110 <HAL_ADC_Init+0x2f8>
 80010de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010e2:	e015      	b.n	8001110 <HAL_ADC_Init+0x2f8>
 80010e4:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 80010e8:	e012      	b.n	8001110 <HAL_ADC_Init+0x2f8>
 80010ea:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 80010ee:	e00f      	b.n	8001110 <HAL_ADC_Init+0x2f8>
 80010f0:	20000004 	.word	0x20000004
 80010f4:	431bde83 	.word	0x431bde83
 80010f8:	50000100 	.word	0x50000100
 80010fc:	50000300 	.word	0x50000300
 8001100:	50000700 	.word	0x50000700
 8001104:	50000400 	.word	0x50000400
 8001108:	50000500 	.word	0x50000500
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001114:	4313      	orrs	r3, r2
 8001116:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001118:	4313      	orrs	r3, r2
 800111a:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
 8001126:	2b00      	cmp	r3, #0
 8001128:	d114      	bne.n	8001154 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001138:	f023 0302 	bic.w	r3, r3, #2
 800113c:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	7e1b      	ldrb	r3, [r3, #24]
 8001142:	039a      	lsls	r2, r3, #14
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	4313      	orrs	r3, r2
 800114e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001150:	4313      	orrs	r3, r2
 8001152:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	4b1e      	ldr	r3, [pc, #120]	@ (80011d4 <HAL_ADC_Init+0x3bc>)
 800115c:	4013      	ands	r3, r2
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	6812      	ldr	r2, [r2, #0]
 8001162:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001164:	430b      	orrs	r3, r1
 8001166:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	691b      	ldr	r3, [r3, #16]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d10c      	bne.n	800118a <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001176:	f023 010f 	bic.w	r1, r3, #15
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	1e5a      	subs	r2, r3, #1
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	430a      	orrs	r2, r1
 8001186:	631a      	str	r2, [r3, #48]	@ 0x30
 8001188:	e007      	b.n	800119a <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 020f 	bic.w	r2, r2, #15
 8001198:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a4:	f023 0303 	bic.w	r3, r3, #3
 80011a8:	f043 0201 	orr.w	r2, r3, #1
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	641a      	str	r2, [r3, #64]	@ 0x40
 80011b0:	e00a      	b.n	80011c8 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f023 0312 	bic.w	r3, r3, #18
 80011ba:	f043 0210 	orr.w	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80011c2:	2301      	movs	r3, #1
 80011c4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80011c8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3768      	adds	r7, #104	@ 0x68
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	fff0c007 	.word	0xfff0c007

080011d8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b086      	sub	sp, #24
 80011dc:	af00      	add	r7, sp, #0
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f003 0304 	and.w	r3, r3, #4
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f040 80f7 	bne.w	80013e6 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d101      	bne.n	8001206 <HAL_ADC_Start_DMA+0x2e>
 8001202:	2302      	movs	r3, #2
 8001204:	e0f2      	b.n	80013ec <HAL_ADC_Start_DMA+0x214>
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	2201      	movs	r2, #1
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001216:	d004      	beq.n	8001222 <HAL_ADC_Start_DMA+0x4a>
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a75      	ldr	r2, [pc, #468]	@ (80013f4 <HAL_ADC_Start_DMA+0x21c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d109      	bne.n	8001236 <HAL_ADC_Start_DMA+0x5e>
 8001222:	4b75      	ldr	r3, [pc, #468]	@ (80013f8 <HAL_ADC_Start_DMA+0x220>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 031f 	and.w	r3, r3, #31
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf0c      	ite	eq
 800122e:	2301      	moveq	r3, #1
 8001230:	2300      	movne	r3, #0
 8001232:	b2db      	uxtb	r3, r3
 8001234:	e008      	b.n	8001248 <HAL_ADC_Start_DMA+0x70>
 8001236:	4b71      	ldr	r3, [pc, #452]	@ (80013fc <HAL_ADC_Start_DMA+0x224>)
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	f003 031f 	and.w	r3, r3, #31
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf0c      	ite	eq
 8001242:	2301      	moveq	r3, #1
 8001244:	2300      	movne	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80c5 	beq.w	80013d8 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f000 fd20 	bl	8001c94 <ADC_Enable>
 8001254:	4603      	mov	r3, r0
 8001256:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	2b00      	cmp	r3, #0
 800125c:	f040 80b7 	bne.w	80013ce <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001268:	f023 0301 	bic.w	r3, r3, #1
 800126c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800127c:	d004      	beq.n	8001288 <HAL_ADC_Start_DMA+0xb0>
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a5c      	ldr	r2, [pc, #368]	@ (80013f4 <HAL_ADC_Start_DMA+0x21c>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d106      	bne.n	8001296 <HAL_ADC_Start_DMA+0xbe>
 8001288:	4b5b      	ldr	r3, [pc, #364]	@ (80013f8 <HAL_ADC_Start_DMA+0x220>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 031f 	and.w	r3, r3, #31
 8001290:	2b00      	cmp	r3, #0
 8001292:	d010      	beq.n	80012b6 <HAL_ADC_Start_DMA+0xde>
 8001294:	e005      	b.n	80012a2 <HAL_ADC_Start_DMA+0xca>
 8001296:	4b59      	ldr	r3, [pc, #356]	@ (80013fc <HAL_ADC_Start_DMA+0x224>)
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 031f 	and.w	r3, r3, #31
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d009      	beq.n	80012b6 <HAL_ADC_Start_DMA+0xde>
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012aa:	d004      	beq.n	80012b6 <HAL_ADC_Start_DMA+0xde>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a53      	ldr	r2, [pc, #332]	@ (8001400 <HAL_ADC_Start_DMA+0x228>)
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d115      	bne.n	80012e2 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68db      	ldr	r3, [r3, #12]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d036      	beq.n	800133e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80012d8:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80012e0:	e02d      	b.n	800133e <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80012f6:	d004      	beq.n	8001302 <HAL_ADC_Start_DMA+0x12a>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a3d      	ldr	r2, [pc, #244]	@ (80013f4 <HAL_ADC_Start_DMA+0x21c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d10a      	bne.n	8001318 <HAL_ADC_Start_DMA+0x140>
 8001302:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130c:	2b00      	cmp	r3, #0
 800130e:	bf14      	ite	ne
 8001310:	2301      	movne	r3, #1
 8001312:	2300      	moveq	r3, #0
 8001314:	b2db      	uxtb	r3, r3
 8001316:	e008      	b.n	800132a <HAL_ADC_Start_DMA+0x152>
 8001318:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <HAL_ADC_Start_DMA+0x228>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001320:	2b00      	cmp	r3, #0
 8001322:	bf14      	ite	ne
 8001324:	2301      	movne	r3, #1
 8001326:	2300      	moveq	r3, #0
 8001328:	b2db      	uxtb	r3, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	d007      	beq.n	800133e <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001332:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001336:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001346:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800134a:	d106      	bne.n	800135a <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001350:	f023 0206 	bic.w	r2, r3, #6
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	645a      	str	r2, [r3, #68]	@ 0x44
 8001358:	e002      	b.n	8001360 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2200      	movs	r2, #0
 800135e:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800136c:	4a25      	ldr	r2, [pc, #148]	@ (8001404 <HAL_ADC_Start_DMA+0x22c>)
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001374:	4a24      	ldr	r2, [pc, #144]	@ (8001408 <HAL_ADC_Start_DMA+0x230>)
 8001376:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800137c:	4a23      	ldr	r2, [pc, #140]	@ (800140c <HAL_ADC_Start_DMA+0x234>)
 800137e:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	221c      	movs	r2, #28
 8001386:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f042 0210 	orr.w	r2, r2, #16
 8001396:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	68da      	ldr	r2, [r3, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f042 0201 	orr.w	r2, r2, #1
 80013a6:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3340      	adds	r3, #64	@ 0x40
 80013b2:	4619      	mov	r1, r3
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f000 fe8e 	bl	80020d8 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0204 	orr.w	r2, r2, #4
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	e00d      	b.n	80013ea <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80013d6:	e008      	b.n	80013ea <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80013d8:	2301      	movs	r3, #1
 80013da:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80013e4:	e001      	b.n	80013ea <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80013e6:	2302      	movs	r3, #2
 80013e8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80013ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	50000100 	.word	0x50000100
 80013f8:	50000300 	.word	0x50000300
 80013fc:	50000700 	.word	0x50000700
 8001400:	50000400 	.word	0x50000400
 8001404:	08001bc9 	.word	0x08001bc9
 8001408:	08001c43 	.word	0x08001c43
 800140c:	08001c5f 	.word	0x08001c5f

08001410 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001410:	b480      	push	{r7}
 8001412:	b09b      	sub	sp, #108	@ 0x6c
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800141a:	2300      	movs	r3, #0
 800141c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800142a:	2b01      	cmp	r3, #1
 800142c:	d101      	bne.n	8001432 <HAL_ADC_ConfigChannel+0x22>
 800142e:	2302      	movs	r3, #2
 8001430:	e2c8      	b.n	80019c4 <HAL_ADC_ConfigChannel+0x5b4>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2201      	movs	r2, #1
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f040 82ac 	bne.w	80019a2 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b04      	cmp	r3, #4
 8001450:	d81c      	bhi.n	800148c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	4413      	add	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	461a      	mov	r2, r3
 8001466:	231f      	movs	r3, #31
 8001468:	4093      	lsls	r3, r2
 800146a:	43db      	mvns	r3, r3
 800146c:	4019      	ands	r1, r3
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	6818      	ldr	r0, [r3, #0]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa00 f203 	lsl.w	r2, r0, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	430a      	orrs	r2, r1
 8001488:	631a      	str	r2, [r3, #48]	@ 0x30
 800148a:	e063      	b.n	8001554 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2b09      	cmp	r3, #9
 8001492:	d81e      	bhi.n	80014d2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	4613      	mov	r3, r2
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	4413      	add	r3, r2
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	3b1e      	subs	r3, #30
 80014a8:	221f      	movs	r2, #31
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43db      	mvns	r3, r3
 80014b0:	4019      	ands	r1, r3
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	6818      	ldr	r0, [r3, #0]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	3b1e      	subs	r3, #30
 80014c4:	fa00 f203 	lsl.w	r2, r0, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	430a      	orrs	r2, r1
 80014ce:	635a      	str	r2, [r3, #52]	@ 0x34
 80014d0:	e040      	b.n	8001554 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	2b0e      	cmp	r3, #14
 80014d8:	d81e      	bhi.n	8001518 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	3b3c      	subs	r3, #60	@ 0x3c
 80014ee:	221f      	movs	r2, #31
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	43db      	mvns	r3, r3
 80014f6:	4019      	ands	r1, r3
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6818      	ldr	r0, [r3, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685a      	ldr	r2, [r3, #4]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	3b3c      	subs	r3, #60	@ 0x3c
 800150a:	fa00 f203 	lsl.w	r2, r0, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	430a      	orrs	r2, r1
 8001514:	639a      	str	r2, [r3, #56]	@ 0x38
 8001516:	e01d      	b.n	8001554 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	3b5a      	subs	r3, #90	@ 0x5a
 800152c:	221f      	movs	r2, #31
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	4019      	ands	r1, r3
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	6818      	ldr	r0, [r3, #0]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	3b5a      	subs	r3, #90	@ 0x5a
 8001548:	fa00 f203 	lsl.w	r2, r0, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	430a      	orrs	r2, r1
 8001552:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b00      	cmp	r3, #0
 8001560:	f040 80e5 	bne.w	800172e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b09      	cmp	r3, #9
 800156a:	d91c      	bls.n	80015a6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6999      	ldr	r1, [r3, #24]
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	3b1e      	subs	r3, #30
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	3b1e      	subs	r3, #30
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	619a      	str	r2, [r3, #24]
 80015a4:	e019      	b.n	80015da <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6959      	ldr	r1, [r3, #20]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4613      	mov	r3, r2
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	4413      	add	r3, r2
 80015b6:	2207      	movs	r2, #7
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	4019      	ands	r1, r3
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	6898      	ldr	r0, [r3, #8]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	fa00 f203 	lsl.w	r2, r0, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	430a      	orrs	r2, r1
 80015d8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	695a      	ldr	r2, [r3, #20]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	08db      	lsrs	r3, r3, #3
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	691b      	ldr	r3, [r3, #16]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d84f      	bhi.n	800169c <HAL_ADC_ConfigChannel+0x28c>
 80015fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001604 <HAL_ADC_ConfigChannel+0x1f4>)
 80015fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001602:	bf00      	nop
 8001604:	08001615 	.word	0x08001615
 8001608:	08001637 	.word	0x08001637
 800160c:	08001659 	.word	0x08001659
 8001610:	0800167b 	.word	0x0800167b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800161a:	4b99      	ldr	r3, [pc, #612]	@ (8001880 <HAL_ADC_ConfigChannel+0x470>)
 800161c:	4013      	ands	r3, r2
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	0691      	lsls	r1, r2, #26
 8001624:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001626:	430a      	orrs	r2, r1
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001632:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001634:	e07b      	b.n	800172e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800163c:	4b90      	ldr	r3, [pc, #576]	@ (8001880 <HAL_ADC_ConfigChannel+0x470>)
 800163e:	4013      	ands	r3, r2
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	6812      	ldr	r2, [r2, #0]
 8001644:	0691      	lsls	r1, r2, #26
 8001646:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001648:	430a      	orrs	r2, r1
 800164a:	431a      	orrs	r2, r3
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001654:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001656:	e06a      	b.n	800172e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800165e:	4b88      	ldr	r3, [pc, #544]	@ (8001880 <HAL_ADC_ConfigChannel+0x470>)
 8001660:	4013      	ands	r3, r2
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	6812      	ldr	r2, [r2, #0]
 8001666:	0691      	lsls	r1, r2, #26
 8001668:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800166a:	430a      	orrs	r2, r1
 800166c:	431a      	orrs	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001676:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001678:	e059      	b.n	800172e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001680:	4b7f      	ldr	r3, [pc, #508]	@ (8001880 <HAL_ADC_ConfigChannel+0x470>)
 8001682:	4013      	ands	r3, r2
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	0691      	lsls	r1, r2, #26
 800168a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800168c:	430a      	orrs	r2, r1
 800168e:	431a      	orrs	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001698:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800169a:	e048      	b.n	800172e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	069b      	lsls	r3, r3, #26
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d107      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016be:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80016c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	069b      	lsls	r3, r3, #26
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d107      	bne.n	80016e4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80016e2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80016ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	069b      	lsls	r3, r3, #26
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d107      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001706:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800170e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	069b      	lsls	r3, r3, #26
 8001718:	429a      	cmp	r2, r3
 800171a:	d107      	bne.n	800172c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800172a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800172c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_ADC_ConfigChannel+0x33e>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b01      	cmp	r3, #1
 8001748:	d101      	bne.n	800174e <HAL_ADC_ConfigChannel+0x33e>
 800174a:	2301      	movs	r3, #1
 800174c:	e000      	b.n	8001750 <HAL_ADC_ConfigChannel+0x340>
 800174e:	2300      	movs	r3, #0
 8001750:	2b00      	cmp	r3, #0
 8001752:	f040 8131 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d00f      	beq.n	800177e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2201      	movs	r2, #1
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43da      	mvns	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	400a      	ands	r2, r1
 8001778:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800177c:	e049      	b.n	8001812 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2201      	movs	r2, #1
 800178c:	409a      	lsls	r2, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b09      	cmp	r3, #9
 800179e:	d91c      	bls.n	80017da <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6999      	ldr	r1, [r3, #24]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4613      	mov	r3, r2
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	4413      	add	r3, r2
 80017b0:	3b1b      	subs	r3, #27
 80017b2:	2207      	movs	r2, #7
 80017b4:	fa02 f303 	lsl.w	r3, r2, r3
 80017b8:	43db      	mvns	r3, r3
 80017ba:	4019      	ands	r1, r3
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6898      	ldr	r0, [r3, #8]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4613      	mov	r3, r2
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	4413      	add	r3, r2
 80017ca:	3b1b      	subs	r3, #27
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	619a      	str	r2, [r3, #24]
 80017d8:	e01b      	b.n	8001812 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6959      	ldr	r1, [r3, #20]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	4613      	mov	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	2207      	movs	r2, #7
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	4019      	ands	r1, r3
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6898      	ldr	r0, [r3, #8]
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	1c5a      	adds	r2, r3, #1
 8001800:	4613      	mov	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	fa00 f203 	lsl.w	r2, r0, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800181a:	d004      	beq.n	8001826 <HAL_ADC_ConfigChannel+0x416>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a18      	ldr	r2, [pc, #96]	@ (8001884 <HAL_ADC_ConfigChannel+0x474>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d101      	bne.n	800182a <HAL_ADC_ConfigChannel+0x41a>
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_ADC_ConfigChannel+0x478>)
 8001828:	e000      	b.n	800182c <HAL_ADC_ConfigChannel+0x41c>
 800182a:	4b18      	ldr	r3, [pc, #96]	@ (800188c <HAL_ADC_ConfigChannel+0x47c>)
 800182c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b10      	cmp	r3, #16
 8001834:	d105      	bne.n	8001842 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800183e:	2b00      	cmp	r3, #0
 8001840:	d015      	beq.n	800186e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001846:	2b11      	cmp	r3, #17
 8001848:	d105      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800184a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d00b      	beq.n	800186e <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800185a:	2b12      	cmp	r3, #18
 800185c:	f040 80ac 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001868:	2b00      	cmp	r3, #0
 800186a:	f040 80a5 	bne.w	80019b8 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001876:	d10b      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x480>
 8001878:	4b02      	ldr	r3, [pc, #8]	@ (8001884 <HAL_ADC_ConfigChannel+0x474>)
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e023      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x4b6>
 800187e:	bf00      	nop
 8001880:	83fff000 	.word	0x83fff000
 8001884:	50000100 	.word	0x50000100
 8001888:	50000300 	.word	0x50000300
 800188c:	50000700 	.word	0x50000700
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a4e      	ldr	r2, [pc, #312]	@ (80019d0 <HAL_ADC_ConfigChannel+0x5c0>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d103      	bne.n	80018a2 <HAL_ADC_ConfigChannel+0x492>
 800189a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800189e:	60fb      	str	r3, [r7, #12]
 80018a0:	e011      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x4b6>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a4b      	ldr	r2, [pc, #300]	@ (80019d4 <HAL_ADC_ConfigChannel+0x5c4>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d102      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x4a2>
 80018ac:	4b4a      	ldr	r3, [pc, #296]	@ (80019d8 <HAL_ADC_ConfigChannel+0x5c8>)
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	e009      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x4b6>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a48      	ldr	r2, [pc, #288]	@ (80019d8 <HAL_ADC_ConfigChannel+0x5c8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d102      	bne.n	80018c2 <HAL_ADC_ConfigChannel+0x4b2>
 80018bc:	4b45      	ldr	r3, [pc, #276]	@ (80019d4 <HAL_ADC_ConfigChannel+0x5c4>)
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e001      	b.n	80018c6 <HAL_ADC_ConfigChannel+0x4b6>
 80018c2:	2300      	movs	r3, #0
 80018c4:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	f003 0303 	and.w	r3, r3, #3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d108      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x4d6>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x4d6>
 80018e2:	2301      	movs	r3, #1
 80018e4:	e000      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x4d8>
 80018e6:	2300      	movs	r3, #0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d150      	bne.n	800198e <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d010      	beq.n	8001914 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b01      	cmp	r3, #1
 80018fc:	d107      	bne.n	800190e <HAL_ADC_ConfigChannel+0x4fe>
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b01      	cmp	r3, #1
 8001908:	d101      	bne.n	800190e <HAL_ADC_ConfigChannel+0x4fe>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_ADC_ConfigChannel+0x500>
 800190e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001910:	2b00      	cmp	r3, #0
 8001912:	d13c      	bne.n	800198e <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b10      	cmp	r3, #16
 800191a:	d11d      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x548>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001924:	d118      	bne.n	8001958 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800192e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001930:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001932:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <HAL_ADC_ConfigChannel+0x5cc>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a2a      	ldr	r2, [pc, #168]	@ (80019e0 <HAL_ADC_ConfigChannel+0x5d0>)
 8001938:	fba2 2303 	umull	r2, r3, r2, r3
 800193c:	0c9a      	lsrs	r2, r3, #18
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001948:	e002      	b.n	8001950 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	3b01      	subs	r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d1f9      	bne.n	800194a <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001956:	e02e      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b11      	cmp	r3, #17
 800195e:	d10b      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x568>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001968:	d106      	bne.n	8001978 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800196a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001972:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001974:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001976:	e01e      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b12      	cmp	r3, #18
 800197e:	d11a      	bne.n	80019b6 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001980:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001988:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800198a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800198c:	e013      	b.n	80019b6 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	f043 0220 	orr.w	r2, r3, #32
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80019a0:	e00a      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f043 0220 	orr.w	r2, r3, #32
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80019b4:	e000      	b.n	80019b8 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80019b6:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80019c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	376c      	adds	r7, #108	@ 0x6c
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	50000100 	.word	0x50000100
 80019d4:	50000400 	.word	0x50000400
 80019d8:	50000500 	.word	0x50000500
 80019dc:	20000004 	.word	0x20000004
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b099      	sub	sp, #100	@ 0x64
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019fc:	d102      	bne.n	8001a04 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80019fe:	4b6d      	ldr	r3, [pc, #436]	@ (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	e01a      	b.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a6a      	ldr	r2, [pc, #424]	@ (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d103      	bne.n	8001a16 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001a0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	e011      	b.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a67      	ldr	r2, [pc, #412]	@ (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d102      	bne.n	8001a26 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001a20:	4b66      	ldr	r3, [pc, #408]	@ (8001bbc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a22:	60bb      	str	r3, [r7, #8]
 8001a24:	e009      	b.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a64      	ldr	r2, [pc, #400]	@ (8001bbc <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d102      	bne.n	8001a36 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001a30:	4b61      	ldr	r3, [pc, #388]	@ (8001bb8 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	e001      	b.n	8001a3a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8001a36:	2300      	movs	r3, #0
 8001a38:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0b0      	b.n	8001ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0a9      	b.n	8001ba6 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f040 808d 	bne.w	8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f040 8086 	bne.w	8001b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a80:	d004      	beq.n	8001a8c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a4b      	ldr	r2, [pc, #300]	@ (8001bb4 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d101      	bne.n	8001a90 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8001a8e:	e000      	b.n	8001a92 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8001a90:	4b4c      	ldr	r3, [pc, #304]	@ (8001bc4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8001a92:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d040      	beq.n	8001b1e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	6859      	ldr	r1, [r3, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001aae:	035b      	lsls	r3, r3, #13
 8001ab0:	430b      	orrs	r3, r1
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ab6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0303 	and.w	r3, r3, #3
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0301 	and.w	r3, r3, #1
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d101      	bne.n	8001ad8 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d15c      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d107      	bne.n	8001afa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d101      	bne.n	8001afa <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001afa:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d14b      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b08:	f023 030f 	bic.w	r3, r3, #15
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	6811      	ldr	r1, [r2, #0]
 8001b10:	683a      	ldr	r2, [r7, #0]
 8001b12:	6892      	ldr	r2, [r2, #8]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	431a      	orrs	r2, r3
 8001b18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b1a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b1c:	e03c      	b.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001b1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b28:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d108      	bne.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d101      	bne.n	8001b4a <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d123      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d107      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d101      	bne.n	8001b6c <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001b6c:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d112      	bne.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001b72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001b7a:	f023 030f 	bic.w	r3, r3, #15
 8001b7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b80:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b82:	e009      	b.n	8001b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f043 0220 	orr.w	r2, r3, #32
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001b96:	e000      	b.n	8001b9a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b98:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001ba2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3764      	adds	r7, #100	@ 0x64
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	50000100 	.word	0x50000100
 8001bb8:	50000400 	.word	0x50000400
 8001bbc:	50000500 	.word	0x50000500
 8001bc0:	50000300 	.word	0x50000300
 8001bc4:	50000700 	.word	0x50000700

08001bc8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b084      	sub	sp, #16
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd4:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bda:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d126      	bne.n	8001c30 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d115      	bne.n	8001c28 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d111      	bne.n	8001c28 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d105      	bne.n	8001c28 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c20:	f043 0201 	orr.w	r2, r3, #1
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001c28:	68f8      	ldr	r0, [r7, #12]
 8001c2a:	f7ff f8d7 	bl	8000ddc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001c2e:	e004      	b.n	8001c3a <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}

08001c42 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b084      	sub	sp, #16
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001c50:	68f8      	ldr	r0, [r7, #12]
 8001c52:	f7ff f8cd 	bl	8000df0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b084      	sub	sp, #16
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c6a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c70:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c7c:	f043 0204 	orr.w	r2, r3, #4
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c84:	68f8      	ldr	r0, [r7, #12]
 8001c86:	f7ff f8bd 	bl	8000e04 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	f003 0303 	and.w	r3, r3, #3
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d108      	bne.n	8001cc0 <ADC_Enable+0x2c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <ADC_Enable+0x2c>
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e000      	b.n	8001cc2 <ADC_Enable+0x2e>
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d143      	bne.n	8001d4e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4b22      	ldr	r3, [pc, #136]	@ (8001d58 <ADC_Enable+0xc4>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00d      	beq.n	8001cf0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd8:	f043 0210 	orr.w	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ce4:	f043 0201 	orr.w	r2, r3, #1
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e02f      	b.n	8001d50 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	689a      	ldr	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001d00:	f7ff f83c 	bl	8000d7c <HAL_GetTick>
 8001d04:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d06:	e01b      	b.n	8001d40 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001d08:	f7ff f838 	bl	8000d7c <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d914      	bls.n	8001d40 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0301 	and.w	r3, r3, #1
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d00d      	beq.n	8001d40 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0210 	orr.w	r2, r3, #16
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e007      	b.n	8001d50 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d1dc      	bne.n	8001d08 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3710      	adds	r7, #16
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	8000003f 	.word	0x8000003f

08001d5c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d108      	bne.n	8001d88 <ADC_Disable+0x2c>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d101      	bne.n	8001d88 <ADC_Disable+0x2c>
 8001d84:	2301      	movs	r3, #1
 8001d86:	e000      	b.n	8001d8a <ADC_Disable+0x2e>
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d047      	beq.n	8001e1e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f003 030d 	and.w	r3, r3, #13
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d10f      	bne.n	8001dbc <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689a      	ldr	r2, [r3, #8]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f042 0202 	orr.w	r2, r2, #2
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2203      	movs	r2, #3
 8001db2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001db4:	f7fe ffe2 	bl	8000d7c <HAL_GetTick>
 8001db8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001dba:	e029      	b.n	8001e10 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc0:	f043 0210 	orr.w	r2, r3, #16
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e023      	b.n	8001e20 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001dd8:	f7fe ffd0 	bl	8000d7c <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b02      	cmp	r3, #2
 8001de4:	d914      	bls.n	8001e10 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d10d      	bne.n	8001e10 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df8:	f043 0210 	orr.w	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e04:	f043 0201 	orr.w	r2, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e007      	b.n	8001e20 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d0dc      	beq.n	8001dd8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001e1e:	2300      	movs	r3, #0
}
 8001e20:	4618      	mov	r0, r3
 8001e22:	3710      	adds	r7, #16
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f003 0307 	and.w	r3, r3, #7
 8001e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e38:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e44:	4013      	ands	r3, r2
 8001e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e5a:	4a04      	ldr	r2, [pc, #16]	@ (8001e6c <__NVIC_SetPriorityGrouping+0x44>)
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	60d3      	str	r3, [r2, #12]
}
 8001e60:	bf00      	nop
 8001e62:	3714      	adds	r7, #20
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e74:	4b04      	ldr	r3, [pc, #16]	@ (8001e88 <__NVIC_GetPriorityGrouping+0x18>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0307 	and.w	r3, r3, #7
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	db0b      	blt.n	8001eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	f003 021f 	and.w	r2, r3, #31
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <__NVIC_EnableIRQ+0x38>)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	095b      	lsrs	r3, r3, #5
 8001eac:	2001      	movs	r0, #1
 8001eae:	fa00 f202 	lsl.w	r2, r0, r2
 8001eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	e000e100 	.word	0xe000e100

08001ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	db0a      	blt.n	8001ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	b2da      	uxtb	r2, r3
 8001ee0:	490c      	ldr	r1, [pc, #48]	@ (8001f14 <__NVIC_SetPriority+0x4c>)
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	0112      	lsls	r2, r2, #4
 8001ee8:	b2d2      	uxtb	r2, r2
 8001eea:	440b      	add	r3, r1
 8001eec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef0:	e00a      	b.n	8001f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	b2da      	uxtb	r2, r3
 8001ef6:	4908      	ldr	r1, [pc, #32]	@ (8001f18 <__NVIC_SetPriority+0x50>)
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	3b04      	subs	r3, #4
 8001f00:	0112      	lsls	r2, r2, #4
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	440b      	add	r3, r1
 8001f06:	761a      	strb	r2, [r3, #24]
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000e100 	.word	0xe000e100
 8001f18:	e000ed00 	.word	0xe000ed00

08001f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b089      	sub	sp, #36	@ 0x24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f1c3 0307 	rsb	r3, r3, #7
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	bf28      	it	cs
 8001f3a:	2304      	movcs	r3, #4
 8001f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	3304      	adds	r3, #4
 8001f42:	2b06      	cmp	r3, #6
 8001f44:	d902      	bls.n	8001f4c <NVIC_EncodePriority+0x30>
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	3b03      	subs	r3, #3
 8001f4a:	e000      	b.n	8001f4e <NVIC_EncodePriority+0x32>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	401a      	ands	r2, r3
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f6e:	43d9      	mvns	r1, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f74:	4313      	orrs	r3, r2
         );
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	@ 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
	...

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001fa8:	f7ff ff8e 	bl	8001ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff29 	bl	8001e28 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff3e 	bl	8001e70 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff8e 	bl	8001f1c <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5d 	bl	8001ec8 <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff31 	bl	8001e8c <__NVIC_EnableIRQ>
}
 800202a:	bf00      	nop
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b082      	sub	sp, #8
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff ffa2 	bl	8001f84 <SysTick_Config>
 8002040:	4603      	mov	r3, r0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e037      	b.n	80020d0 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2202      	movs	r2, #2
 8002064:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002076:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800207a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002084:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002090:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800209c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f940 	bl	8002338 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b086      	sub	sp, #24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	60f8      	str	r0, [r7, #12]
 80020e0:	60b9      	str	r1, [r7, #8]
 80020e2:	607a      	str	r2, [r7, #4]
 80020e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020e6:	2300      	movs	r3, #0
 80020e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d101      	bne.n	80020f8 <HAL_DMA_Start_IT+0x20>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e04a      	b.n	800218e <HAL_DMA_Start_IT+0xb6>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002106:	2b01      	cmp	r3, #1
 8002108:	d13a      	bne.n	8002180 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2200      	movs	r2, #0
 8002116:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f022 0201 	bic.w	r2, r2, #1
 8002126:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f8d4 	bl	80022dc <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d008      	beq.n	800214e <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f042 020e 	orr.w	r2, r2, #14
 800214a:	601a      	str	r2, [r3, #0]
 800214c:	e00f      	b.n	800216e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f042 020a 	orr.w	r2, r2, #10
 800215c:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 0204 	bic.w	r2, r2, #4
 800216c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0201 	orr.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e005      	b.n	800218c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002188:	2302      	movs	r3, #2
 800218a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800218c:	7dfb      	ldrb	r3, [r7, #23]
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	2204      	movs	r2, #4
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d024      	beq.n	8002208 <HAL_DMA_IRQHandler+0x72>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	f003 0304 	and.w	r3, r3, #4
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d01f      	beq.n	8002208 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d107      	bne.n	80021e6 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f022 0204 	bic.w	r2, r2, #4
 80021e4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ee:	2104      	movs	r1, #4
 80021f0:	fa01 f202 	lsl.w	r2, r1, r2
 80021f4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d06a      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002206:	e065      	b.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220c:	2202      	movs	r2, #2
 800220e:	409a      	lsls	r2, r3
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	4013      	ands	r3, r2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d02c      	beq.n	8002272 <HAL_DMA_IRQHandler+0xdc>
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d027      	beq.n	8002272 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0320 	and.w	r3, r3, #32
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10b      	bne.n	8002248 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f022 020a 	bic.w	r2, r2, #10
 800223e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002250:	2102      	movs	r1, #2
 8002252:	fa01 f202 	lsl.w	r2, r1, r2
 8002256:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	2b00      	cmp	r3, #0
 8002266:	d035      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002270:	e030      	b.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	2208      	movs	r2, #8
 8002278:	409a      	lsls	r2, r3
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4013      	ands	r3, r2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d028      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f022 020e 	bic.w	r2, r2, #14
 800229a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022a4:	2101      	movs	r1, #1
 80022a6:	fa01 f202 	lsl.w	r2, r1, r2
 80022aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2201      	movs	r2, #1
 80022b0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	4798      	blx	r3
    }
  }
}
 80022d2:	e7ff      	b.n	80022d4 <HAL_DMA_IRQHandler+0x13e>
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f2:	2101      	movs	r1, #1
 80022f4:	fa01 f202 	lsl.w	r2, r1, r2
 80022f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	2b10      	cmp	r3, #16
 8002308:	d108      	bne.n	800231c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800231a:	e007      	b.n	800232c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	60da      	str	r2, [r3, #12]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4b14      	ldr	r3, [pc, #80]	@ (8002398 <DMA_CalcBaseAndBitshift+0x60>)
 8002348:	429a      	cmp	r2, r3
 800234a:	d80f      	bhi.n	800236c <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	4b12      	ldr	r3, [pc, #72]	@ (800239c <DMA_CalcBaseAndBitshift+0x64>)
 8002354:	4413      	add	r3, r2
 8002356:	4a12      	ldr	r2, [pc, #72]	@ (80023a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	009a      	lsls	r2, r3, #2
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <DMA_CalcBaseAndBitshift+0x6c>)
 8002368:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800236a:	e00e      	b.n	800238a <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	461a      	mov	r2, r3
 8002372:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <DMA_CalcBaseAndBitshift+0x70>)
 8002374:	4413      	add	r3, r2
 8002376:	4a0a      	ldr	r2, [pc, #40]	@ (80023a0 <DMA_CalcBaseAndBitshift+0x68>)
 8002378:	fba2 2303 	umull	r2, r3, r2, r3
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	009a      	lsls	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a09      	ldr	r2, [pc, #36]	@ (80023ac <DMA_CalcBaseAndBitshift+0x74>)
 8002388:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	40020407 	.word	0x40020407
 800239c:	bffdfff8 	.word	0xbffdfff8
 80023a0:	cccccccd 	.word	0xcccccccd
 80023a4:	40020000 	.word	0x40020000
 80023a8:	bffdfbf8 	.word	0xbffdfbf8
 80023ac:	40020400 	.word	0x40020400

080023b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b087      	sub	sp, #28
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ba:	2300      	movs	r3, #0
 80023bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023be:	e154      	b.n	800266a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	2101      	movs	r1, #1
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	fa01 f303 	lsl.w	r3, r1, r3
 80023cc:	4013      	ands	r3, r2
 80023ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 8146 	beq.w	8002664 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 0303 	and.w	r3, r3, #3
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d005      	beq.n	80023f0 <HAL_GPIO_Init+0x40>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b02      	cmp	r3, #2
 80023ee:	d130      	bne.n	8002452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	2203      	movs	r2, #3
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	693a      	ldr	r2, [r7, #16]
 8002404:	4013      	ands	r3, r2
 8002406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68da      	ldr	r2, [r3, #12]
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002426:	2201      	movs	r2, #1
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	693a      	ldr	r2, [r7, #16]
 8002432:	4013      	ands	r3, r2
 8002434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	091b      	lsrs	r3, r3, #4
 800243c:	f003 0201 	and.w	r2, r3, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	693a      	ldr	r2, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	693a      	ldr	r2, [r7, #16]
 8002450:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 0303 	and.w	r3, r3, #3
 800245a:	2b03      	cmp	r3, #3
 800245c:	d017      	beq.n	800248e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	2203      	movs	r2, #3
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4013      	ands	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	693a      	ldr	r2, [r7, #16]
 8002484:	4313      	orrs	r3, r2
 8002486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d123      	bne.n	80024e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	08da      	lsrs	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3208      	adds	r2, #8
 80024a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	220f      	movs	r2, #15
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691a      	ldr	r2, [r3, #16]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	08da      	lsrs	r2, r3, #3
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3208      	adds	r2, #8
 80024dc:	6939      	ldr	r1, [r7, #16]
 80024de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	2203      	movs	r2, #3
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	43db      	mvns	r3, r3
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	4013      	ands	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0203 	and.w	r2, r3, #3
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	fa02 f303 	lsl.w	r3, r2, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800251e:	2b00      	cmp	r3, #0
 8002520:	f000 80a0 	beq.w	8002664 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002524:	4b58      	ldr	r3, [pc, #352]	@ (8002688 <HAL_GPIO_Init+0x2d8>)
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	4a57      	ldr	r2, [pc, #348]	@ (8002688 <HAL_GPIO_Init+0x2d8>)
 800252a:	f043 0301 	orr.w	r3, r3, #1
 800252e:	6193      	str	r3, [r2, #24]
 8002530:	4b55      	ldr	r3, [pc, #340]	@ (8002688 <HAL_GPIO_Init+0x2d8>)
 8002532:	699b      	ldr	r3, [r3, #24]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	60bb      	str	r3, [r7, #8]
 800253a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800253c:	4a53      	ldr	r2, [pc, #332]	@ (800268c <HAL_GPIO_Init+0x2dc>)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	3302      	adds	r3, #2
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	f003 0303 	and.w	r3, r3, #3
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	220f      	movs	r2, #15
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	4013      	ands	r3, r2
 800255e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002566:	d019      	beq.n	800259c <HAL_GPIO_Init+0x1ec>
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	4a49      	ldr	r2, [pc, #292]	@ (8002690 <HAL_GPIO_Init+0x2e0>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d013      	beq.n	8002598 <HAL_GPIO_Init+0x1e8>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4a48      	ldr	r2, [pc, #288]	@ (8002694 <HAL_GPIO_Init+0x2e4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_GPIO_Init+0x1e4>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4a47      	ldr	r2, [pc, #284]	@ (8002698 <HAL_GPIO_Init+0x2e8>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d007      	beq.n	8002590 <HAL_GPIO_Init+0x1e0>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4a46      	ldr	r2, [pc, #280]	@ (800269c <HAL_GPIO_Init+0x2ec>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d101      	bne.n	800258c <HAL_GPIO_Init+0x1dc>
 8002588:	2304      	movs	r3, #4
 800258a:	e008      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 800258c:	2305      	movs	r3, #5
 800258e:	e006      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002590:	2303      	movs	r3, #3
 8002592:	e004      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002594:	2302      	movs	r3, #2
 8002596:	e002      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_GPIO_Init+0x1ee>
 800259c:	2300      	movs	r3, #0
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	f002 0203 	and.w	r2, r2, #3
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	4093      	lsls	r3, r2
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025ae:	4937      	ldr	r1, [pc, #220]	@ (800268c <HAL_GPIO_Init+0x2dc>)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	3302      	adds	r3, #2
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025bc:	4b38      	ldr	r3, [pc, #224]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	43db      	mvns	r3, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4013      	ands	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d003      	beq.n	80025e0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80025d8:	693a      	ldr	r2, [r7, #16]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80025e0:	4a2f      	ldr	r2, [pc, #188]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e6:	4b2e      	ldr	r3, [pc, #184]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	4313      	orrs	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800260a:	4a25      	ldr	r2, [pc, #148]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002610:	4b23      	ldr	r3, [pc, #140]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	43db      	mvns	r3, r3
 800261a:	693a      	ldr	r2, [r7, #16]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d003      	beq.n	8002634 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4313      	orrs	r3, r2
 8002632:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002634:	4a1a      	ldr	r2, [pc, #104]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263a:	4b19      	ldr	r3, [pc, #100]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43db      	mvns	r3, r3
 8002644:	693a      	ldr	r2, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800265e:	4a10      	ldr	r2, [pc, #64]	@ (80026a0 <HAL_GPIO_Init+0x2f0>)
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	3301      	adds	r3, #1
 8002668:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	2b00      	cmp	r3, #0
 8002676:	f47f aea3 	bne.w	80023c0 <HAL_GPIO_Init+0x10>
  }
}
 800267a:	bf00      	nop
 800267c:	bf00      	nop
 800267e:	371c      	adds	r7, #28
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40021000 	.word	0x40021000
 800268c:	40010000 	.word	0x40010000
 8002690:	48000400 	.word	0x48000400
 8002694:	48000800 	.word	0x48000800
 8002698:	48000c00 	.word	0x48000c00
 800269c:	48001000 	.word	0x48001000
 80026a0:	40010400 	.word	0x40010400

080026a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b085      	sub	sp, #20
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691a      	ldr	r2, [r3, #16]
 80026b4:	887b      	ldrh	r3, [r7, #2]
 80026b6:	4013      	ands	r3, r2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d002      	beq.n	80026c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e001      	b.n	80026c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	460b      	mov	r3, r1
 80026de:	807b      	strh	r3, [r7, #2]
 80026e0:	4613      	mov	r3, r2
 80026e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026ea:	887a      	ldrh	r2, [r7, #2]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026f0:	e002      	b.n	80026f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026f2:	887a      	ldrh	r2, [r7, #2]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002702:	4770      	bx	lr

08002704 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	4603      	mov	r3, r0
 800270c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800270e:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002710:	695a      	ldr	r2, [r3, #20]
 8002712:	88fb      	ldrh	r3, [r7, #6]
 8002714:	4013      	ands	r3, r2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d006      	beq.n	8002728 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800271a:	4a05      	ldr	r2, [pc, #20]	@ (8002730 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800271c:	88fb      	ldrh	r3, [r7, #6]
 800271e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002720:	88fb      	ldrh	r3, [r7, #6]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd fd50 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002728:	bf00      	nop
 800272a:	3708      	adds	r7, #8
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}
 8002730:	40010400 	.word	0x40010400

08002734 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e08d      	b.n	8002862 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b00      	cmp	r3, #0
 8002750:	d106      	bne.n	8002760 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe f992 	bl	8000a84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2224      	movs	r2, #36	@ 0x24
 8002764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685a      	ldr	r2, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002784:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002794:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	e006      	b.n	80027bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689a      	ldr	r2, [r3, #8]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80027ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d108      	bne.n	80027d6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027d2:	605a      	str	r2, [r3, #4]
 80027d4:	e007      	b.n	80027e6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80027e4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	6812      	ldr	r2, [r2, #0]
 80027f0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027f8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002808:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691a      	ldr	r2, [r3, #16]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	699b      	ldr	r3, [r3, #24]
 800281a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	69d9      	ldr	r1, [r3, #28]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6a1a      	ldr	r2, [r3, #32]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2b20      	cmp	r3, #32
 800287e:	d138      	bne.n	80028f2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002886:	2b01      	cmp	r3, #1
 8002888:	d101      	bne.n	800288e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800288a:	2302      	movs	r3, #2
 800288c:	e032      	b.n	80028f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2224      	movs	r2, #36	@ 0x24
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80028bc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	6819      	ldr	r1, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	430a      	orrs	r2, r1
 80028cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002900:	b480      	push	{r7}
 8002902:	b085      	sub	sp, #20
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	d139      	bne.n	800298a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002920:	2302      	movs	r3, #2
 8002922:	e033      	b.n	800298c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2224      	movs	r2, #36	@ 0x24
 8002930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681a      	ldr	r2, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002952:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	021b      	lsls	r3, r3, #8
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	4313      	orrs	r3, r2
 800295c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f042 0201 	orr.w	r2, r2, #1
 8002974:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002986:	2300      	movs	r3, #0
 8002988:	e000      	b.n	800298c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e0b9      	b.n	8002b1e <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d106      	bne.n	80029c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f007 f80e 	bl	80099e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2203      	movs	r2, #3
 80029c8:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f003 f868 	bl	8005aa6 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e03e      	b.n	8002a5a <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029dc:	7bfa      	ldrb	r2, [r7, #15]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4413      	add	r3, r2
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	440b      	add	r3, r1
 80029ea:	3311      	adds	r3, #17
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	440b      	add	r3, r1
 80029fe:	3310      	adds	r3, #16
 8002a00:	7bfa      	ldrb	r2, [r7, #15]
 8002a02:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002a04:	7bfa      	ldrb	r2, [r7, #15]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	440b      	add	r3, r1
 8002a12:	3313      	adds	r3, #19
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a18:	7bfa      	ldrb	r2, [r7, #15]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	440b      	add	r3, r1
 8002a26:	3320      	adds	r3, #32
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a2c:	7bfa      	ldrb	r2, [r7, #15]
 8002a2e:	6879      	ldr	r1, [r7, #4]
 8002a30:	4613      	mov	r3, r2
 8002a32:	009b      	lsls	r3, r3, #2
 8002a34:	4413      	add	r3, r2
 8002a36:	00db      	lsls	r3, r3, #3
 8002a38:	440b      	add	r3, r1
 8002a3a:	3324      	adds	r3, #36	@ 0x24
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	1c5a      	adds	r2, r3, #1
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	00db      	lsls	r3, r3, #3
 8002a4e:	440b      	add	r3, r1
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
 8002a56:	3301      	adds	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	791b      	ldrb	r3, [r3, #4]
 8002a5e:	7bfa      	ldrb	r2, [r7, #15]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d3bb      	bcc.n	80029dc <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a64:	2300      	movs	r3, #0
 8002a66:	73fb      	strb	r3, [r7, #15]
 8002a68:	e044      	b.n	8002af4 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	4413      	add	r3, r2
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002a92:	7bfa      	ldrb	r2, [r7, #15]
 8002a94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	4413      	add	r3, r2
 8002aa0:	00db      	lsls	r3, r3, #3
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4413      	add	r3, r2
 8002ab6:	00db      	lsls	r3, r3, #3
 8002ab8:	440b      	add	r3, r1
 8002aba:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ad8:	7bfa      	ldrb	r2, [r7, #15]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	4413      	add	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	440b      	add	r3, r1
 8002ae6:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002aea:	2200      	movs	r2, #0
 8002aec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	3301      	adds	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	791b      	ldrb	r3, [r3, #4]
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d3b5      	bcc.n	8002a6a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	3304      	adds	r3, #4
 8002b06:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002b0a:	f002 ffe7 	bl	8005adc <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3710      	adds	r7, #16
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b082      	sub	sp, #8
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d101      	bne.n	8002b3c <HAL_PCD_Start+0x16>
 8002b38:	2302      	movs	r3, #2
 8002b3a:	e016      	b.n	8002b6a <HAL_PCD_Start+0x44>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f002 ff95 	bl	8005a78 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002b4e:	2101      	movs	r1, #1
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f007 f9c5 	bl	8009ee0 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f005 fa52 	bl	8008004 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f005 fa4b 	bl	800801a <USB_ReadInterrupts>
 8002b84:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fa99 	bl	80030c8 <PCD_EP_ISR_Handler>

    return;
 8002b96:	e0bd      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bb4:	b292      	uxth	r2, r2
 8002bb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f006 ffb1 	bl	8009b22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8a9 	bl	8002d1a <HAL_PCD_SetAddress>

    return;
 8002bc8:	e0a4      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002be6:	b292      	uxth	r2, r2
 8002be8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bec:	e092      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00c      	beq.n	8002c12 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c00:	b29a      	uxth	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c0a:	b292      	uxth	r2, r2
 8002c0c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c10:	e080      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d027      	beq.n	8002c6c <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 0204 	bic.w	r2, r2, #4
 8002c2e:	b292      	uxth	r2, r2
 8002c30:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c3c:	b29a      	uxth	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0208 	bic.w	r2, r2, #8
 8002c46:	b292      	uxth	r2, r2
 8002c48:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f006 ffa1 	bl	8009b94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002c64:	b292      	uxth	r2, r2
 8002c66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c6a:	e053      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d027      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f042 0208 	orr.w	r2, r2, #8
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c96:	b29a      	uxth	r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca0:	b292      	uxth	r2, r2
 8002ca2:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f042 0204 	orr.w	r2, r2, #4
 8002cb8:	b292      	uxth	r2, r2
 8002cba:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f006 ff4e 	bl	8009b60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cc4:	e026      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00f      	beq.n	8002cf0 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ce2:	b292      	uxth	r2, r2
 8002ce4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f006 ff0c 	bl	8009b06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002cee:	e011      	b.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d00c      	beq.n	8002d14 <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d0c:	b292      	uxth	r2, r2
 8002d0e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002d12:	bf00      	nop
  }
}
 8002d14:	3710      	adds	r7, #16
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	460b      	mov	r3, r1
 8002d24:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d2c:	2b01      	cmp	r3, #1
 8002d2e:	d101      	bne.n	8002d34 <HAL_PCD_SetAddress+0x1a>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e012      	b.n	8002d5a <HAL_PCD_SetAddress+0x40>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	78fa      	ldrb	r2, [r7, #3]
 8002d48:	4611      	mov	r1, r2
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f005 f946 	bl	8007fdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b084      	sub	sp, #16
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
 8002d6a:	4608      	mov	r0, r1
 8002d6c:	4611      	mov	r1, r2
 8002d6e:	461a      	mov	r2, r3
 8002d70:	4603      	mov	r3, r0
 8002d72:	70fb      	strb	r3, [r7, #3]
 8002d74:	460b      	mov	r3, r1
 8002d76:	803b      	strh	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	da0e      	bge.n	8002da6 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	f003 0207 	and.w	r2, r3, #7
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	3310      	adds	r3, #16
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	705a      	strb	r2, [r3, #1]
 8002da4:	e00e      	b.n	8002dc4 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	f003 0207 	and.w	r2, r3, #7
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	4413      	add	r3, r2
 8002dbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002dc4:	78fb      	ldrb	r3, [r7, #3]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002dd0:	883a      	ldrh	r2, [r7, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	78ba      	ldrb	r2, [r7, #2]
 8002dda:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ddc:	78bb      	ldrb	r3, [r7, #2]
 8002dde:	2b02      	cmp	r3, #2
 8002de0:	d102      	bne.n	8002de8 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_PCD_EP_Open+0x94>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e00e      	b.n	8002e14 <HAL_PCD_EP_Open+0xb2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68f9      	ldr	r1, [r7, #12]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f002 fe87 	bl	8005b18 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002e12:	7afb      	ldrb	r3, [r7, #11]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	460b      	mov	r3, r1
 8002e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	da0e      	bge.n	8002e4e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e30:	78fb      	ldrb	r3, [r7, #3]
 8002e32:	f003 0207 	and.w	r2, r3, #7
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	3310      	adds	r3, #16
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	4413      	add	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	705a      	strb	r2, [r3, #1]
 8002e4c:	e00e      	b.n	8002e6c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 0207 	and.w	r2, r3, #7
 8002e54:	4613      	mov	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4413      	add	r3, r2
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d101      	bne.n	8002e86 <HAL_PCD_EP_Close+0x6a>
 8002e82:	2302      	movs	r3, #2
 8002e84:	e00e      	b.n	8002ea4 <HAL_PCD_EP_Close+0x88>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68f9      	ldr	r1, [r7, #12]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f003 fa03 	bl	80062a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	607a      	str	r2, [r7, #4]
 8002eb6:	603b      	str	r3, [r7, #0]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ebc:	7afb      	ldrb	r3, [r7, #11]
 8002ebe:	f003 0207 	and.w	r2, r3, #7
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	00db      	lsls	r3, r3, #3
 8002eca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002ece:	68fa      	ldr	r2, [r7, #12]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	6979      	ldr	r1, [r7, #20]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f003 fbbb 	bl	800667a <USB_EPStartXfer>

  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}

08002f0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b086      	sub	sp, #24
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	607a      	str	r2, [r7, #4]
 8002f18:	603b      	str	r3, [r7, #0]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f1e:	7afb      	ldrb	r3, [r7, #11]
 8002f20:	f003 0207 	and.w	r2, r3, #7
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	3310      	adds	r3, #16
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2201      	movs	r2, #1
 8002f58:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f5a:	7afb      	ldrb	r3, [r7, #11]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	b2da      	uxtb	r2, r3
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6979      	ldr	r1, [r7, #20]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fb84 	bl	800667a <USB_EPStartXfer>

  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	7912      	ldrb	r2, [r2, #4]
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d901      	bls.n	8002f9a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e03e      	b.n	8003018 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	da0e      	bge.n	8002fc0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	f003 0207 	and.w	r2, r3, #7
 8002fa8:	4613      	mov	r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	4413      	add	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	3310      	adds	r3, #16
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	4413      	add	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	705a      	strb	r2, [r3, #1]
 8002fbe:	e00c      	b.n	8002fda <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f003 0307 	and.w	r3, r3, #7
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d101      	bne.n	8002ffa <HAL_PCD_EP_SetStall+0x7e>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e00e      	b.n	8003018 <HAL_PCD_EP_SetStall+0x9c>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	68f9      	ldr	r1, [r7, #12]
 8003008:	4618      	mov	r0, r3
 800300a:	f004 fee8 	bl	8007dde <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	7912      	ldrb	r2, [r2, #4]
 8003036:	4293      	cmp	r3, r2
 8003038:	d901      	bls.n	800303e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e040      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800303e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003042:	2b00      	cmp	r3, #0
 8003044:	da0e      	bge.n	8003064 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003046:	78fb      	ldrb	r3, [r7, #3]
 8003048:	f003 0207 	and.w	r2, r3, #7
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	00db      	lsls	r3, r3, #3
 8003054:	3310      	adds	r3, #16
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	4413      	add	r3, r2
 800305a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2201      	movs	r2, #1
 8003060:	705a      	strb	r2, [r3, #1]
 8003062:	e00e      	b.n	8003082 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	f003 0207 	and.w	r2, r3, #7
 800306a:	4613      	mov	r3, r2
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	4413      	add	r3, r2
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	4413      	add	r3, r2
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 0307 	and.w	r3, r3, #7
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_EP_ClrStall+0x82>
 800309e:	2302      	movs	r3, #2
 80030a0:	e00e      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0xa0>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 fee5 	bl	8007e80 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b096      	sub	sp, #88	@ 0x58
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80030d0:	e3bb      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80030da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80030de:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 80030ec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f040 8175 	bne.w	80033e0 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80030f6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80030fa:	f003 0310 	and.w	r3, r3, #16
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d14e      	bne.n	80031a0 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29b      	uxth	r3, r3
 800310a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800310e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003112:	81fb      	strh	r3, [r7, #14]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	89fb      	ldrh	r3, [r7, #14]
 800311a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800311e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003122:	b29b      	uxth	r3, r3
 8003124:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3310      	adds	r3, #16
 800312a:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003134:	b29b      	uxth	r3, r3
 8003136:	461a      	mov	r2, r3
 8003138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4413      	add	r3, r2
 8003140:	3302      	adds	r3, #2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6812      	ldr	r2, [r2, #0]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800314e:	881b      	ldrh	r3, [r3, #0]
 8003150:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003154:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003156:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315a:	695a      	ldr	r2, [r3, #20]
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	441a      	add	r2, r3
 8003162:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003164:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003166:	2100      	movs	r1, #0
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f006 fcb2 	bl	8009ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7b1b      	ldrb	r3, [r3, #12]
 8003172:	b2db      	uxtb	r3, r3
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8368 	beq.w	800384a <PCD_EP_ISR_Handler+0x782>
 800317a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	f040 8363 	bne.w	800384a <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	7b1b      	ldrb	r3, [r3, #12]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800318e:	b2da      	uxtb	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	731a      	strb	r2, [r3, #12]
 800319e:	e354      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80031a6:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	881b      	ldrh	r3, [r3, #0]
 80031ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80031b2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80031b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d034      	beq.n	8003228 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031cc:	781b      	ldrb	r3, [r3, #0]
 80031ce:	00db      	lsls	r3, r3, #3
 80031d0:	4413      	add	r3, r2
 80031d2:	3306      	adds	r3, #6
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80031f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031f6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80031f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fa:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f004 ff62 	bl	80080c6 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29a      	uxth	r2, r3
 800320a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800320e:	4013      	ands	r3, r2
 8003210:	823b      	strh	r3, [r7, #16]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	8a3a      	ldrh	r2, [r7, #16]
 8003218:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800321c:	b292      	uxth	r2, r2
 800321e:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	f006 fc29 	bl	8009a78 <HAL_PCD_SetupStageCallback>
 8003226:	e310      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003228:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 800322c:	2b00      	cmp	r3, #0
 800322e:	f280 830c 	bge.w	800384a <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	881b      	ldrh	r3, [r3, #0]
 8003238:	b29a      	uxth	r2, r3
 800323a:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800323e:	4013      	ands	r3, r2
 8003240:	83fb      	strh	r3, [r7, #30]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	8bfa      	ldrh	r2, [r7, #30]
 8003248:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800324c:	b292      	uxth	r2, r2
 800324e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003258:	b29b      	uxth	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	00db      	lsls	r3, r3, #3
 8003262:	4413      	add	r3, r2
 8003264:	3306      	adds	r3, #6
 8003266:	005b      	lsls	r3, r3, #1
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	6812      	ldr	r2, [r2, #0]
 800326c:	4413      	add	r3, r2
 800326e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003272:	881b      	ldrh	r3, [r3, #0]
 8003274:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800327c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327e:	69db      	ldr	r3, [r3, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d019      	beq.n	80032b8 <PCD_EP_ISR_Handler+0x1f0>
 8003284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d015      	beq.n	80032b8 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6818      	ldr	r0, [r3, #0]
 8003290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003292:	6959      	ldr	r1, [r3, #20]
 8003294:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003296:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800329c:	b29b      	uxth	r3, r3
 800329e:	f004 ff12 	bl	80080c6 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80032a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a8:	69db      	ldr	r3, [r3, #28]
 80032aa:	441a      	add	r2, r3
 80032ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ae:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80032b0:	2100      	movs	r1, #0
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f006 fbf2 	bl	8009a9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80032c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f040 82bd 	bne.w	800384a <PCD_EP_ISR_Handler+0x782>
 80032d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80032d4:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80032d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80032dc:	f000 82b5 	beq.w	800384a <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	4413      	add	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
 80032f8:	69bb      	ldr	r3, [r7, #24]
 80032fa:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	b29b      	uxth	r3, r3
 8003306:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800330a:	b29a      	uxth	r2, r3
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	801a      	strh	r2, [r3, #0]
 8003310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10a      	bne.n	800332e <PCD_EP_ISR_Handler+0x266>
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	881b      	ldrh	r3, [r3, #0]
 800331c:	b29b      	uxth	r3, r3
 800331e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003322:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003326:	b29a      	uxth	r2, r3
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	801a      	strh	r2, [r3, #0]
 800332c:	e039      	b.n	80033a2 <PCD_EP_ISR_Handler+0x2da>
 800332e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	2b3e      	cmp	r3, #62	@ 0x3e
 8003334:	d818      	bhi.n	8003368 <PCD_EP_ISR_Handler+0x2a0>
 8003336:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	085b      	lsrs	r3, r3, #1
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
 800333e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <PCD_EP_ISR_Handler+0x288>
 800334a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800334c:	3301      	adds	r3, #1
 800334e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	b29a      	uxth	r2, r3
 8003356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003358:	b29b      	uxth	r3, r3
 800335a:	029b      	lsls	r3, r3, #10
 800335c:	b29b      	uxth	r3, r3
 800335e:	4313      	orrs	r3, r2
 8003360:	b29a      	uxth	r2, r3
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	801a      	strh	r2, [r3, #0]
 8003366:	e01c      	b.n	80033a2 <PCD_EP_ISR_Handler+0x2da>
 8003368:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	095b      	lsrs	r3, r3, #5
 800336e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	f003 031f 	and.w	r3, r3, #31
 8003378:	2b00      	cmp	r3, #0
 800337a:	d102      	bne.n	8003382 <PCD_EP_ISR_Handler+0x2ba>
 800337c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800337e:	3b01      	subs	r3, #1
 8003380:	647b      	str	r3, [r7, #68]	@ 0x44
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29a      	uxth	r2, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338a:	b29b      	uxth	r3, r3
 800338c:	029b      	lsls	r3, r3, #10
 800338e:	b29b      	uxth	r3, r3
 8003390:	4313      	orrs	r3, r2
 8003392:	b29b      	uxth	r3, r3
 8003394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800339c:	b29a      	uxth	r2, r3
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033b2:	827b      	strh	r3, [r7, #18]
 80033b4:	8a7b      	ldrh	r3, [r7, #18]
 80033b6:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80033ba:	827b      	strh	r3, [r7, #18]
 80033bc:	8a7b      	ldrh	r3, [r7, #18]
 80033be:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80033c2:	827b      	strh	r3, [r7, #18]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	8a7b      	ldrh	r3, [r7, #18]
 80033ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80033ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80033d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033da:	b29b      	uxth	r3, r3
 80033dc:	8013      	strh	r3, [r2, #0]
 80033de:	e234      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	461a      	mov	r2, r3
 80033e6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	881b      	ldrh	r3, [r3, #0]
 80033f0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80033f4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f280 80fc 	bge.w	80035f6 <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4413      	add	r3, r2
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	b29a      	uxth	r2, r3
 8003410:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003414:	4013      	ands	r3, r2
 8003416:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	461a      	mov	r2, r3
 8003420:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	4413      	add	r3, r2
 8003428:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 800342c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003430:	b292      	uxth	r2, r2
 8003432:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003434:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003438:	4613      	mov	r3, r2
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	4413      	add	r3, r2
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	4413      	add	r3, r2
 8003448:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800344a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344c:	7b1b      	ldrb	r3, [r3, #12]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d125      	bne.n	800349e <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800345a:	b29b      	uxth	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	00db      	lsls	r3, r3, #3
 8003464:	4413      	add	r3, r2
 8003466:	3306      	adds	r3, #6
 8003468:	005b      	lsls	r3, r3, #1
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	6812      	ldr	r2, [r2, #0]
 800346e:	4413      	add	r3, r2
 8003470:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003474:	881b      	ldrh	r3, [r3, #0]
 8003476:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800347a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 800347e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003482:	2b00      	cmp	r3, #0
 8003484:	f000 8092 	beq.w	80035ac <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6818      	ldr	r0, [r3, #0]
 800348c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800348e:	6959      	ldr	r1, [r3, #20]
 8003490:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003492:	88da      	ldrh	r2, [r3, #6]
 8003494:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003498:	f004 fe15 	bl	80080c6 <USB_ReadPMA>
 800349c:	e086      	b.n	80035ac <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800349e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034a0:	78db      	ldrb	r3, [r3, #3]
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d10a      	bne.n	80034bc <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80034a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80034aa:	461a      	mov	r2, r3
 80034ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 f9d9 	bl	8003866 <HAL_PCD_EP_DB_Receive>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 80034ba:	e077      	b.n	80035ac <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	881b      	ldrh	r3, [r3, #0]
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034d6:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	441a      	add	r2, r3
 80034e8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80034ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034f8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80034fc:	b29b      	uxth	r3, r3
 80034fe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003516:	2b00      	cmp	r3, #0
 8003518:	d024      	beq.n	8003564 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	3302      	adds	r3, #2
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	4413      	add	r3, r2
 8003538:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003542:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003546:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800354a:	2b00      	cmp	r3, #0
 800354c:	d02e      	beq.n	80035ac <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6818      	ldr	r0, [r3, #0]
 8003552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003554:	6959      	ldr	r1, [r3, #20]
 8003556:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003558:	891a      	ldrh	r2, [r3, #8]
 800355a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800355e:	f004 fdb2 	bl	80080c6 <USB_ReadPMA>
 8003562:	e023      	b.n	80035ac <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800356c:	b29b      	uxth	r3, r3
 800356e:	461a      	mov	r2, r3
 8003570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	3306      	adds	r3, #6
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	6812      	ldr	r2, [r2, #0]
 8003580:	4413      	add	r3, r2
 8003582:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003586:	881b      	ldrh	r3, [r3, #0]
 8003588:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800358c:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8003590:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6818      	ldr	r0, [r3, #0]
 800359c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800359e:	6959      	ldr	r1, [r3, #20]
 80035a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a2:	895a      	ldrh	r2, [r3, #10]
 80035a4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035a8:	f004 fd8d 	bl	80080c6 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80035ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ae:	69da      	ldr	r2, [r3, #28]
 80035b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035b4:	441a      	add	r2, r3
 80035b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80035ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035bc:	695a      	ldr	r2, [r3, #20]
 80035be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80035c2:	441a      	add	r2, r3
 80035c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c6:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80035c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d005      	beq.n	80035dc <PCD_EP_ISR_Handler+0x514>
 80035d0:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80035d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d206      	bcs.n	80035ea <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80035dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	4619      	mov	r1, r3
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f006 fa5a 	bl	8009a9c <HAL_PCD_DataOutStageCallback>
 80035e8:	e005      	b.n	80035f6 <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80035f0:	4618      	mov	r0, r3
 80035f2:	f003 f842 	bl	800667a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80035f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035fe:	2b00      	cmp	r3, #0
 8003600:	f000 8123 	beq.w	800384a <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 8003604:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	3310      	adds	r3, #16
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	4413      	add	r3, r2
 8003616:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	461a      	mov	r2, r3
 800361e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4413      	add	r3, r2
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 800362e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003632:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	461a      	mov	r2, r3
 800363c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	441a      	add	r2, r3
 8003644:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8003648:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800364c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003650:	b29b      	uxth	r3, r3
 8003652:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003656:	78db      	ldrb	r3, [r3, #3]
 8003658:	2b01      	cmp	r3, #1
 800365a:	f040 80a2 	bne.w	80037a2 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 800365e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003666:	7b1b      	ldrb	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8093 	beq.w	8003794 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800366e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003672:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d046      	beq.n	8003708 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800367a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800367c:	785b      	ldrb	r3, [r3, #1]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d126      	bne.n	80036d0 <PCD_EP_ISR_Handler+0x608>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003690:	b29b      	uxth	r3, r3
 8003692:	461a      	mov	r2, r3
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	4413      	add	r3, r2
 8003698:	627b      	str	r3, [r7, #36]	@ 0x24
 800369a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	011a      	lsls	r2, r3, #4
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	4413      	add	r3, r2
 80036a4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036a8:	623b      	str	r3, [r7, #32]
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	6a3b      	ldr	r3, [r7, #32]
 80036b8:	801a      	strh	r2, [r3, #0]
 80036ba:	6a3b      	ldr	r3, [r7, #32]
 80036bc:	881b      	ldrh	r3, [r3, #0]
 80036be:	b29b      	uxth	r3, r3
 80036c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	801a      	strh	r2, [r3, #0]
 80036ce:	e061      	b.n	8003794 <PCD_EP_ISR_Handler+0x6cc>
 80036d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d15d      	bne.n	8003794 <PCD_EP_ISR_Handler+0x6cc>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	461a      	mov	r2, r3
 80036ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036ec:	4413      	add	r3, r2
 80036ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	011a      	lsls	r2, r3, #4
 80036f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036f8:	4413      	add	r3, r2
 80036fa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80036fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	2200      	movs	r2, #0
 8003704:	801a      	strh	r2, [r3, #0]
 8003706:	e045      	b.n	8003794 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800370e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003710:	785b      	ldrb	r3, [r3, #1]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d126      	bne.n	8003764 <PCD_EP_ISR_Handler+0x69c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	637b      	str	r3, [r7, #52]	@ 0x34
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003724:	b29b      	uxth	r3, r3
 8003726:	461a      	mov	r2, r3
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	4413      	add	r3, r2
 800372c:	637b      	str	r3, [r7, #52]	@ 0x34
 800372e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	011a      	lsls	r2, r3, #4
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	4413      	add	r3, r2
 8003738:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800373c:	633b      	str	r3, [r7, #48]	@ 0x30
 800373e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	b29b      	uxth	r3, r3
 8003744:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003748:	b29a      	uxth	r2, r3
 800374a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374c:	801a      	strh	r2, [r3, #0]
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	b29b      	uxth	r3, r3
 8003754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375c:	b29a      	uxth	r2, r3
 800375e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003760:	801a      	strh	r2, [r3, #0]
 8003762:	e017      	b.n	8003794 <PCD_EP_ISR_Handler+0x6cc>
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	785b      	ldrb	r3, [r3, #1]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d113      	bne.n	8003794 <PCD_EP_ISR_Handler+0x6cc>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003774:	b29b      	uxth	r3, r3
 8003776:	461a      	mov	r2, r3
 8003778:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800377a:	4413      	add	r3, r2
 800377c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800377e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	011a      	lsls	r2, r3, #4
 8003784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003786:	4413      	add	r3, r2
 8003788:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800378c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800378e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003790:	2200      	movs	r2, #0
 8003792:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f006 f999 	bl	8009ad2 <HAL_PCD_DataInStageCallback>
 80037a0:	e053      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80037a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d146      	bne.n	800383c <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	461a      	mov	r2, r3
 80037ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	3302      	adds	r3, #2
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	687a      	ldr	r2, [r7, #4]
 80037c8:	6812      	ldr	r2, [r2, #0]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80037d0:	881b      	ldrh	r3, [r3, #0]
 80037d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037d6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 80037da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037dc:	699a      	ldr	r2, [r3, #24]
 80037de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d907      	bls.n	80037f6 <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80037e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e8:	699a      	ldr	r2, [r3, #24]
 80037ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80037ee:	1ad2      	subs	r2, r2, r3
 80037f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f2:	619a      	str	r2, [r3, #24]
 80037f4:	e002      	b.n	80037fc <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80037f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037f8:	2200      	movs	r2, #0
 80037fa:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80037fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d106      	bne.n	8003812 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f006 f961 	bl	8009ad2 <HAL_PCD_DataInStageCallback>
 8003810:	e01b      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800381a:	441a      	add	r2, r3
 800381c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800381e:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003822:	69da      	ldr	r2, [r3, #28]
 8003824:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003828:	441a      	add	r2, r3
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003834:	4618      	mov	r0, r3
 8003836:	f002 ff20 	bl	800667a <USB_EPStartXfer>
 800383a:	e006      	b.n	800384a <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800383c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003840:	461a      	mov	r2, r3
 8003842:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 f91b 	bl	8003a80 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003852:	b29b      	uxth	r3, r3
 8003854:	b21b      	sxth	r3, r3
 8003856:	2b00      	cmp	r3, #0
 8003858:	f6ff ac3b 	blt.w	80030d2 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3758      	adds	r7, #88	@ 0x58
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b088      	sub	sp, #32
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	4613      	mov	r3, r2
 8003872:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d07e      	beq.n	800397c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	00db      	lsls	r3, r3, #3
 8003890:	4413      	add	r3, r2
 8003892:	3302      	adds	r3, #2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038a6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	699a      	ldr	r2, [r3, #24]
 80038ac:	8b7b      	ldrh	r3, [r7, #26]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	d306      	bcc.n	80038c0 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	8b7b      	ldrh	r3, [r7, #26]
 80038b8:	1ad2      	subs	r2, r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	619a      	str	r2, [r3, #24]
 80038be:	e002      	b.n	80038c6 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	2200      	movs	r2, #0
 80038c4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d123      	bne.n	8003916 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	461a      	mov	r2, r3
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038e8:	833b      	strh	r3, [r7, #24]
 80038ea:	8b3b      	ldrh	r3, [r7, #24]
 80038ec:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80038f0:	833b      	strh	r3, [r7, #24]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	441a      	add	r2, r3
 8003900:	8b3b      	ldrh	r3, [r7, #24]
 8003902:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003906:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800390a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800390e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003912:	b29b      	uxth	r3, r3
 8003914:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003916:	88fb      	ldrh	r3, [r7, #6]
 8003918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01f      	beq.n	8003960 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	b29b      	uxth	r3, r3
 8003932:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003936:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393a:	82fb      	strh	r3, [r7, #22]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	461a      	mov	r2, r3
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	441a      	add	r2, r3
 800394a:	8afb      	ldrh	r3, [r7, #22]
 800394c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003950:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003954:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003958:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800395c:	b29b      	uxth	r3, r3
 800395e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003960:	8b7b      	ldrh	r3, [r7, #26]
 8003962:	2b00      	cmp	r3, #0
 8003964:	f000 8087 	beq.w	8003a76 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	6959      	ldr	r1, [r3, #20]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	891a      	ldrh	r2, [r3, #8]
 8003974:	8b7b      	ldrh	r3, [r7, #26]
 8003976:	f004 fba6 	bl	80080c6 <USB_ReadPMA>
 800397a:	e07c      	b.n	8003a76 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003984:	b29b      	uxth	r3, r3
 8003986:	461a      	mov	r2, r3
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	00db      	lsls	r3, r3, #3
 800398e:	4413      	add	r3, r2
 8003990:	3306      	adds	r3, #6
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800399e:	881b      	ldrh	r3, [r3, #0]
 80039a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039a4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d306      	bcc.n	80039be <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	8b7b      	ldrh	r3, [r7, #26]
 80039b6:	1ad2      	subs	r2, r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	619a      	str	r2, [r3, #24]
 80039bc:	e002      	b.n	80039c4 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2200      	movs	r2, #0
 80039c2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	699b      	ldr	r3, [r3, #24]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d123      	bne.n	8003a14 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	461a      	mov	r2, r3
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e6:	83fb      	strh	r3, [r7, #30]
 80039e8:	8bfb      	ldrh	r3, [r7, #30]
 80039ea:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80039ee:	83fb      	strh	r3, [r7, #30]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	441a      	add	r2, r3
 80039fe:	8bfb      	ldrh	r3, [r7, #30]
 8003a00:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a04:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a08:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11f      	bne.n	8003a5e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	461a      	mov	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003a34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a38:	83bb      	strh	r3, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	441a      	add	r2, r3
 8003a48:	8bbb      	ldrh	r3, [r7, #28]
 8003a4a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003a4e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003a52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a56:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003a5e:	8b7b      	ldrh	r3, [r7, #26]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d008      	beq.n	8003a76 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	6959      	ldr	r1, [r3, #20]
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	895a      	ldrh	r2, [r3, #10]
 8003a70:	8b7b      	ldrh	r3, [r7, #26]
 8003a72:	f004 fb28 	bl	80080c6 <USB_ReadPMA>
    }
  }

  return count;
 8003a76:	8b7b      	ldrh	r3, [r7, #26]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3720      	adds	r7, #32
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b0a4      	sub	sp, #144	@ 0x90
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 81dd 	beq.w	8003e54 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	4413      	add	r3, r2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	005b      	lsls	r3, r3, #1
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	6812      	ldr	r2, [r2, #0]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003abc:	881b      	ldrh	r3, [r3, #0]
 8003abe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ac2:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	699a      	ldr	r2, [r3, #24]
 8003aca:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d907      	bls.n	8003ae2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	699a      	ldr	r2, [r3, #24]
 8003ad6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ada:	1ad2      	subs	r2, r2, r3
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	619a      	str	r2, [r3, #24]
 8003ae0:	e002      	b.n	8003ae8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	699b      	ldr	r3, [r3, #24]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	f040 80b9 	bne.w	8003c64 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	785b      	ldrb	r3, [r3, #1]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d126      	bne.n	8003b48 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0e:	4413      	add	r3, r2
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	011a      	lsls	r2, r3, #4
 8003b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1a:	4413      	add	r3, r2
 8003b1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	801a      	strh	r2, [r3, #0]
 8003b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b34:	881b      	ldrh	r3, [r3, #0]
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	801a      	strh	r2, [r3, #0]
 8003b46:	e01a      	b.n	8003b7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	785b      	ldrb	r3, [r3, #1]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d116      	bne.n	8003b7e <HAL_PCD_EP_DB_Transmit+0xfe>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	461a      	mov	r2, r3
 8003b62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b64:	4413      	add	r3, r2
 8003b66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	011a      	lsls	r2, r3, #4
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b70:	4413      	add	r3, r2
 8003b72:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	785b      	ldrb	r3, [r3, #1]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d126      	bne.n	8003bda <HAL_PCD_EP_DB_Transmit+0x15a>
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	61fb      	str	r3, [r7, #28]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	61fb      	str	r3, [r7, #28]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	011a      	lsls	r2, r3, #4
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	4413      	add	r3, r2
 8003bae:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003bb2:	61bb      	str	r3, [r7, #24]
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	881b      	ldrh	r3, [r3, #0]
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	801a      	strh	r2, [r3, #0]
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	881b      	ldrh	r3, [r3, #0]
 8003bc8:	b29b      	uxth	r3, r3
 8003bca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	801a      	strh	r2, [r3, #0]
 8003bd8:	e017      	b.n	8003c0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	785b      	ldrb	r3, [r3, #1]
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d113      	bne.n	8003c0a <HAL_PCD_EP_DB_Transmit+0x18a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	461a      	mov	r2, r3
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf0:	4413      	add	r3, r2
 8003bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	011a      	lsls	r2, r3, #4
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003c02:	623b      	str	r3, [r7, #32]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	2200      	movs	r2, #0
 8003c08:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f005 ff5e 	bl	8009ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 82fc 	beq.w	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3c:	82fb      	strh	r3, [r7, #22]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	461a      	mov	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	8afb      	ldrh	r3, [r7, #22]
 8003c4e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c52:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	8013      	strh	r3, [r2, #0]
 8003c62:	e2da      	b.n	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003c64:	88fb      	ldrh	r3, [r7, #6]
 8003c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d021      	beq.n	8003cb2 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	461a      	mov	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	881b      	ldrh	r3, [r3, #0]
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c88:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	461a      	mov	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	781b      	ldrb	r3, [r3, #0]
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c9e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003ca2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003ca6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003caa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	f040 82ae 	bne.w	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003cc6:	441a      	add	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	69da      	ldr	r2, [r3, #28]
 8003cd0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003cd4:	441a      	add	r2, r3
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a1a      	ldr	r2, [r3, #32]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d30b      	bcc.n	8003cfe <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf6:	1ad2      	subs	r2, r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	621a      	str	r2, [r3, #32]
 8003cfc:	e017      	b.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d108      	bne.n	8003d18 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003d06:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003d0a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003d16:	e00a      	b.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	785b      	ldrb	r3, [r3, #1]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d165      	bne.n	8003e02 <HAL_PCD_EP_DB_Transmit+0x382>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	461a      	mov	r2, r3
 8003d48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d4a:	4413      	add	r3, r2
 8003d4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	011a      	lsls	r2, r3, #4
 8003d54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d56:	4413      	add	r3, r2
 8003d58:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d60:	881b      	ldrh	r3, [r3, #0]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6c:	801a      	strh	r2, [r3, #0]
 8003d6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d10a      	bne.n	8003d8c <HAL_PCD_EP_DB_Transmit+0x30c>
 8003d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d78:	881b      	ldrh	r3, [r3, #0]
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d88:	801a      	strh	r2, [r3, #0]
 8003d8a:	e057      	b.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d90:	2b3e      	cmp	r3, #62	@ 0x3e
 8003d92:	d818      	bhi.n	8003dc6 <HAL_PCD_EP_DB_Transmit+0x346>
 8003d94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d98:	085b      	lsrs	r3, r3, #1
 8003d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003da0:	f003 0301 	and.w	r3, r3, #1
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d002      	beq.n	8003dae <HAL_PCD_EP_DB_Transmit+0x32e>
 8003da8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003daa:	3301      	adds	r3, #1
 8003dac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	029b      	lsls	r3, r3, #10
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dc2:	801a      	strh	r2, [r3, #0]
 8003dc4:	e03a      	b.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003dc6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dca:	095b      	lsrs	r3, r3, #5
 8003dcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003dce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003dd2:	f003 031f 	and.w	r3, r3, #31
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d102      	bne.n	8003de0 <HAL_PCD_EP_DB_Transmit+0x360>
 8003dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de2:	881b      	ldrh	r3, [r3, #0]
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	029b      	lsls	r3, r3, #10
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	4313      	orrs	r3, r2
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dfe:	801a      	strh	r2, [r3, #0]
 8003e00:	e01c      	b.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	785b      	ldrb	r3, [r3, #1]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d118      	bne.n	8003e3c <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e1e:	4413      	add	r3, r2
 8003e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	011a      	lsls	r2, r3, #4
 8003e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e30:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e3a:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	6959      	ldr	r1, [r3, #20]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	891a      	ldrh	r2, [r3, #8]
 8003e48:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f004 f8f4 	bl	800803a <USB_WritePMA>
 8003e52:	e1e2      	b.n	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	3306      	adds	r3, #6
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	6812      	ldr	r2, [r2, #0]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e7c:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	699a      	ldr	r2, [r3, #24]
 8003e84:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d307      	bcc.n	8003e9c <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	699a      	ldr	r2, [r3, #24]
 8003e90:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003e94:	1ad2      	subs	r2, r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	619a      	str	r2, [r3, #24]
 8003e9a:	e002      	b.n	8003ea2 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f040 80c0 	bne.w	800402c <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	785b      	ldrb	r3, [r3, #1]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d126      	bne.n	8003f02 <HAL_PCD_EP_DB_Transmit+0x482>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ec8:	4413      	add	r3, r2
 8003eca:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	011a      	lsls	r2, r3, #4
 8003ed2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003eda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003edc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efa:	b29a      	uxth	r2, r3
 8003efc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003efe:	801a      	strh	r2, [r3, #0]
 8003f00:	e01a      	b.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	785b      	ldrb	r3, [r3, #1]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d116      	bne.n	8003f38 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f1e:	4413      	add	r3, r2
 8003f20:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	011a      	lsls	r2, r3, #4
 8003f28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f34:	2200      	movs	r2, #0
 8003f36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	785b      	ldrb	r3, [r3, #1]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d12b      	bne.n	8003f9e <HAL_PCD_EP_DB_Transmit+0x51e>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	461a      	mov	r2, r3
 8003f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f5a:	4413      	add	r3, r2
 8003f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	011a      	lsls	r2, r3, #4
 8003f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f66:	4413      	add	r3, r2
 8003f68:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f74:	881b      	ldrh	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f82:	801a      	strh	r2, [r3, #0]
 8003f84:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f9a:	801a      	strh	r2, [r3, #0]
 8003f9c:	e017      	b.n	8003fce <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	785b      	ldrb	r3, [r3, #1]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d113      	bne.n	8003fce <HAL_PCD_EP_DB_Transmit+0x54e>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fb4:	4413      	add	r3, r2
 8003fb6:	677b      	str	r3, [r7, #116]	@ 0x74
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	011a      	lsls	r2, r3, #4
 8003fbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003fc6:	673b      	str	r3, [r7, #112]	@ 0x70
 8003fc8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fca:	2200      	movs	r2, #0
 8003fcc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	68f8      	ldr	r0, [r7, #12]
 8003fd6:	f005 fd7c 	bl	8009ad2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003fda:	88fb      	ldrh	r3, [r7, #6]
 8003fdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f040 811a 	bne.w	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	881b      	ldrh	r3, [r3, #0]
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ffc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004000:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	441a      	add	r2, r3
 8004012:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8004016:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800401a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800401e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004026:	b29b      	uxth	r3, r3
 8004028:	8013      	strh	r3, [r2, #0]
 800402a:	e0f6      	b.n	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800402c:	88fb      	ldrh	r3, [r7, #6]
 800402e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d121      	bne.n	800407a <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800404c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004050:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	461a      	mov	r2, r3
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8004066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800406a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800406e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004076:	b29b      	uxth	r3, r3
 8004078:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004080:	2b01      	cmp	r3, #1
 8004082:	f040 80ca 	bne.w	800421a <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	695a      	ldr	r2, [r3, #20]
 800408a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800408e:	441a      	add	r2, r3
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	69da      	ldr	r2, [r3, #28]
 8004098:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800409c:	441a      	add	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d30b      	bcc.n	80040c6 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6a1a      	ldr	r2, [r3, #32]
 80040ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040be:	1ad2      	subs	r2, r2, r3
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	621a      	str	r2, [r3, #32]
 80040c4:	e017      	b.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d108      	bne.n	80040e0 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 80040ce:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80040d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80040de:	e00a      	b.n	80040f6 <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2200      	movs	r2, #0
 80040ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	785b      	ldrb	r3, [r3, #1]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d165      	bne.n	80041d0 <HAL_PCD_EP_DB_Transmit+0x750>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004112:	b29b      	uxth	r3, r3
 8004114:	461a      	mov	r2, r3
 8004116:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004118:	4413      	add	r3, r2
 800411a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	011a      	lsls	r2, r3, #4
 8004122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004124:	4413      	add	r3, r2
 8004126:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800412a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800412c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	b29b      	uxth	r3, r3
 8004132:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004136:	b29a      	uxth	r2, r3
 8004138:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800413a:	801a      	strh	r2, [r3, #0]
 800413c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <HAL_PCD_EP_DB_Transmit+0x6da>
 8004144:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004146:	881b      	ldrh	r3, [r3, #0]
 8004148:	b29b      	uxth	r3, r3
 800414a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800414e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004152:	b29a      	uxth	r2, r3
 8004154:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004156:	801a      	strh	r2, [r3, #0]
 8004158:	e054      	b.n	8004204 <HAL_PCD_EP_DB_Transmit+0x784>
 800415a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800415e:	2b3e      	cmp	r3, #62	@ 0x3e
 8004160:	d818      	bhi.n	8004194 <HAL_PCD_EP_DB_Transmit+0x714>
 8004162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004166:	085b      	lsrs	r3, r3, #1
 8004168:	66bb      	str	r3, [r7, #104]	@ 0x68
 800416a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d002      	beq.n	800417c <HAL_PCD_EP_DB_Transmit+0x6fc>
 8004176:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004178:	3301      	adds	r3, #1
 800417a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800417c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b29a      	uxth	r2, r3
 8004182:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004184:	b29b      	uxth	r3, r3
 8004186:	029b      	lsls	r3, r3, #10
 8004188:	b29b      	uxth	r3, r3
 800418a:	4313      	orrs	r3, r2
 800418c:	b29a      	uxth	r2, r3
 800418e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004190:	801a      	strh	r2, [r3, #0]
 8004192:	e037      	b.n	8004204 <HAL_PCD_EP_DB_Transmit+0x784>
 8004194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800419c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041a0:	f003 031f 	and.w	r3, r3, #31
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d102      	bne.n	80041ae <HAL_PCD_EP_DB_Transmit+0x72e>
 80041a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041aa:	3b01      	subs	r3, #1
 80041ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	029b      	lsls	r3, r3, #10
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4313      	orrs	r3, r2
 80041be:	b29b      	uxth	r3, r3
 80041c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c8:	b29a      	uxth	r2, r3
 80041ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80041cc:	801a      	strh	r2, [r3, #0]
 80041ce:	e019      	b.n	8004204 <HAL_PCD_EP_DB_Transmit+0x784>
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	785b      	ldrb	r3, [r3, #1]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d115      	bne.n	8004204 <HAL_PCD_EP_DB_Transmit+0x784>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041e6:	4413      	add	r3, r2
 80041e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	011a      	lsls	r2, r3, #4
 80041f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f2:	4413      	add	r3, r2
 80041f4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80041f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80041fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80041fe:	b29a      	uxth	r2, r3
 8004200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004202:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6818      	ldr	r0, [r3, #0]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	6959      	ldr	r1, [r3, #20]
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	895a      	ldrh	r2, [r3, #10]
 8004210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004214:	b29b      	uxth	r3, r3
 8004216:	f003 ff10 	bl	800803a <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004230:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004234:	82bb      	strh	r3, [r7, #20]
 8004236:	8abb      	ldrh	r3, [r7, #20]
 8004238:	f083 0310 	eor.w	r3, r3, #16
 800423c:	82bb      	strh	r3, [r7, #20]
 800423e:	8abb      	ldrh	r3, [r7, #20]
 8004240:	f083 0320 	eor.w	r3, r3, #32
 8004244:	82bb      	strh	r3, [r7, #20]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	461a      	mov	r2, r3
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8abb      	ldrh	r3, [r7, #20]
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	3790      	adds	r7, #144	@ 0x90
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004274:	b480      	push	{r7}
 8004276:	b087      	sub	sp, #28
 8004278:	af00      	add	r7, sp, #0
 800427a:	60f8      	str	r0, [r7, #12]
 800427c:	607b      	str	r3, [r7, #4]
 800427e:	460b      	mov	r3, r1
 8004280:	817b      	strh	r3, [r7, #10]
 8004282:	4613      	mov	r3, r2
 8004284:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004286:	897b      	ldrh	r3, [r7, #10]
 8004288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004292:	897b      	ldrh	r3, [r7, #10]
 8004294:	f003 0207 	and.w	r2, r3, #7
 8004298:	4613      	mov	r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	4413      	add	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	3310      	adds	r3, #16
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
 80042a8:	e009      	b.n	80042be <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042aa:	897a      	ldrh	r2, [r7, #10]
 80042ac:	4613      	mov	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	4413      	add	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80042be:	893b      	ldrh	r3, [r7, #8]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d107      	bne.n	80042d4 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	2200      	movs	r2, #0
 80042c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	b29a      	uxth	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	80da      	strh	r2, [r3, #6]
 80042d2:	e00b      	b.n	80042ec <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2201      	movs	r2, #1
 80042d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	b29a      	uxth	r2, r3
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	0c1b      	lsrs	r3, r3, #16
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
	...

080042fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8004302:	af00      	add	r7, sp, #0
 8004304:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004308:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800430c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800430e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004312:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d102      	bne.n	8004322 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f001 b823 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004322:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004326:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 817d 	beq.w	8004632 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004338:	4bbc      	ldr	r3, [pc, #752]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 030c 	and.w	r3, r3, #12
 8004340:	2b04      	cmp	r3, #4
 8004342:	d00c      	beq.n	800435e <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004344:	4bb9      	ldr	r3, [pc, #740]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 030c 	and.w	r3, r3, #12
 800434c:	2b08      	cmp	r3, #8
 800434e:	d15c      	bne.n	800440a <HAL_RCC_OscConfig+0x10e>
 8004350:	4bb6      	ldr	r3, [pc, #728]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435c:	d155      	bne.n	800440a <HAL_RCC_OscConfig+0x10e>
 800435e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004362:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004366:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800436a:	fa93 f3a3 	rbit	r3, r3
 800436e:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004372:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004376:	fab3 f383 	clz	r3, r3
 800437a:	b2db      	uxtb	r3, r3
 800437c:	095b      	lsrs	r3, r3, #5
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f043 0301 	orr.w	r3, r3, #1
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b01      	cmp	r3, #1
 8004388:	d102      	bne.n	8004390 <HAL_RCC_OscConfig+0x94>
 800438a:	4ba8      	ldr	r3, [pc, #672]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	e015      	b.n	80043bc <HAL_RCC_OscConfig+0xc0>
 8004390:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004394:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004398:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800439c:	fa93 f3a3 	rbit	r3, r3
 80043a0:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80043a4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80043a8:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80043ac:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80043b0:	fa93 f3a3 	rbit	r3, r3
 80043b4:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80043b8:	4b9c      	ldr	r3, [pc, #624]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80043c0:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80043c4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80043c8:	fa92 f2a2 	rbit	r2, r2
 80043cc:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80043d0:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80043d4:	fab2 f282 	clz	r2, r2
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	f042 0220 	orr.w	r2, r2, #32
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	f002 021f 	and.w	r2, r2, #31
 80043e4:	2101      	movs	r1, #1
 80043e6:	fa01 f202 	lsl.w	r2, r1, r2
 80043ea:	4013      	ands	r3, r2
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	f000 811f 	beq.w	8004630 <HAL_RCC_OscConfig+0x334>
 80043f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f040 8116 	bne.w	8004630 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	f000 bfaf 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800440a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800441a:	d106      	bne.n	800442a <HAL_RCC_OscConfig+0x12e>
 800441c:	4b83      	ldr	r3, [pc, #524]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a82      	ldr	r2, [pc, #520]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	e036      	b.n	8004498 <HAL_RCC_OscConfig+0x19c>
 800442a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800442e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d10c      	bne.n	8004454 <HAL_RCC_OscConfig+0x158>
 800443a:	4b7c      	ldr	r3, [pc, #496]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a7b      	ldr	r2, [pc, #492]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004444:	6013      	str	r3, [r2, #0]
 8004446:	4b79      	ldr	r3, [pc, #484]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a78      	ldr	r2, [pc, #480]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800444c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e021      	b.n	8004498 <HAL_RCC_OscConfig+0x19c>
 8004454:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004458:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004464:	d10c      	bne.n	8004480 <HAL_RCC_OscConfig+0x184>
 8004466:	4b71      	ldr	r3, [pc, #452]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a70      	ldr	r2, [pc, #448]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800446c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004470:	6013      	str	r3, [r2, #0]
 8004472:	4b6e      	ldr	r3, [pc, #440]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a6d      	ldr	r2, [pc, #436]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e00b      	b.n	8004498 <HAL_RCC_OscConfig+0x19c>
 8004480:	4b6a      	ldr	r3, [pc, #424]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a69      	ldr	r2, [pc, #420]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004486:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b67      	ldr	r3, [pc, #412]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a66      	ldr	r2, [pc, #408]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004492:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004496:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004498:	4b64      	ldr	r3, [pc, #400]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800449a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800449c:	f023 020f 	bic.w	r2, r3, #15
 80044a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	495f      	ldr	r1, [pc, #380]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044b2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80044b6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d059      	beq.n	8004576 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c2:	f7fc fc5b 	bl	8000d7c <HAL_GetTick>
 80044c6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ca:	e00a      	b.n	80044e2 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fc fc56 	bl	8000d7c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b64      	cmp	r3, #100	@ 0x64
 80044da:	d902      	bls.n	80044e2 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	f000 bf43 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
 80044e2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80044e6:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80044ee:	fa93 f3a3 	rbit	r3, r3
 80044f2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80044f6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044fa:	fab3 f383 	clz	r3, r3
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	095b      	lsrs	r3, r3, #5
 8004502:	b2db      	uxtb	r3, r3
 8004504:	f043 0301 	orr.w	r3, r3, #1
 8004508:	b2db      	uxtb	r3, r3
 800450a:	2b01      	cmp	r3, #1
 800450c:	d102      	bne.n	8004514 <HAL_RCC_OscConfig+0x218>
 800450e:	4b47      	ldr	r3, [pc, #284]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	e015      	b.n	8004540 <HAL_RCC_OscConfig+0x244>
 8004514:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004518:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004520:	fa93 f3a3 	rbit	r3, r3
 8004524:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004528:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800452c:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004530:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8004534:	fa93 f3a3 	rbit	r3, r3
 8004538:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 800453c:	4b3b      	ldr	r3, [pc, #236]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 800453e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004540:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004544:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8004548:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800454c:	fa92 f2a2 	rbit	r2, r2
 8004550:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8004554:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8004558:	fab2 f282 	clz	r2, r2
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	f042 0220 	orr.w	r2, r2, #32
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	f002 021f 	and.w	r2, r2, #31
 8004568:	2101      	movs	r1, #1
 800456a:	fa01 f202 	lsl.w	r2, r1, r2
 800456e:	4013      	ands	r3, r2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d0ab      	beq.n	80044cc <HAL_RCC_OscConfig+0x1d0>
 8004574:	e05d      	b.n	8004632 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004576:	f7fc fc01 	bl	8000d7c <HAL_GetTick>
 800457a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800457e:	e00a      	b.n	8004596 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004580:	f7fc fbfc 	bl	8000d7c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	2b64      	cmp	r3, #100	@ 0x64
 800458e:	d902      	bls.n	8004596 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8004590:	2303      	movs	r3, #3
 8004592:	f000 bee9 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
 8004596:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800459a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80045a2:	fa93 f3a3 	rbit	r3, r3
 80045a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 80045aa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	fab3 f383 	clz	r3, r3
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	095b      	lsrs	r3, r3, #5
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f043 0301 	orr.w	r3, r3, #1
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d102      	bne.n	80045c8 <HAL_RCC_OscConfig+0x2cc>
 80045c2:	4b1a      	ldr	r3, [pc, #104]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	e015      	b.n	80045f4 <HAL_RCC_OscConfig+0x2f8>
 80045c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045cc:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80045d4:	fa93 f3a3 	rbit	r3, r3
 80045d8:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80045dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80045e0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80045e4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80045e8:	fa93 f3a3 	rbit	r3, r3
 80045ec:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80045f0:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <HAL_RCC_OscConfig+0x330>)
 80045f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80045f8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80045fc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004600:	fa92 f2a2 	rbit	r2, r2
 8004604:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004608:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 800460c:	fab2 f282 	clz	r2, r2
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	f042 0220 	orr.w	r2, r2, #32
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	f002 021f 	and.w	r2, r2, #31
 800461c:	2101      	movs	r1, #1
 800461e:	fa01 f202 	lsl.w	r2, r1, r2
 8004622:	4013      	ands	r3, r2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1ab      	bne.n	8004580 <HAL_RCC_OscConfig+0x284>
 8004628:	e003      	b.n	8004632 <HAL_RCC_OscConfig+0x336>
 800462a:	bf00      	nop
 800462c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004636:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 817d 	beq.w	8004942 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004648:	4ba6      	ldr	r3, [pc, #664]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00b      	beq.n	800466c <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004654:	4ba3      	ldr	r3, [pc, #652]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d172      	bne.n	8004746 <HAL_RCC_OscConfig+0x44a>
 8004660:	4ba0      	ldr	r3, [pc, #640]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d16c      	bne.n	8004746 <HAL_RCC_OscConfig+0x44a>
 800466c:	2302      	movs	r3, #2
 800466e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8004676:	fa93 f3a3 	rbit	r3, r3
 800467a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800467e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004682:	fab3 f383 	clz	r3, r3
 8004686:	b2db      	uxtb	r3, r3
 8004688:	095b      	lsrs	r3, r3, #5
 800468a:	b2db      	uxtb	r3, r3
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b01      	cmp	r3, #1
 8004694:	d102      	bne.n	800469c <HAL_RCC_OscConfig+0x3a0>
 8004696:	4b93      	ldr	r3, [pc, #588]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	e013      	b.n	80046c4 <HAL_RCC_OscConfig+0x3c8>
 800469c:	2302      	movs	r3, #2
 800469e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 80046a6:	fa93 f3a3 	rbit	r3, r3
 80046aa:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80046ae:	2302      	movs	r3, #2
 80046b0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80046b4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80046b8:	fa93 f3a3 	rbit	r3, r3
 80046bc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80046c0:	4b88      	ldr	r3, [pc, #544]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 80046c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c4:	2202      	movs	r2, #2
 80046c6:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80046ca:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80046ce:	fa92 f2a2 	rbit	r2, r2
 80046d2:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80046d6:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80046da:	fab2 f282 	clz	r2, r2
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	f042 0220 	orr.w	r2, r2, #32
 80046e4:	b2d2      	uxtb	r2, r2
 80046e6:	f002 021f 	and.w	r2, r2, #31
 80046ea:	2101      	movs	r1, #1
 80046ec:	fa01 f202 	lsl.w	r2, r1, r2
 80046f0:	4013      	ands	r3, r2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCC_OscConfig+0x410>
 80046f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d002      	beq.n	800470c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	f000 be2e 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800470c:	4b75      	ldr	r3, [pc, #468]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004714:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004718:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	695b      	ldr	r3, [r3, #20]
 8004720:	21f8      	movs	r1, #248	@ 0xf8
 8004722:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004726:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800472a:	fa91 f1a1 	rbit	r1, r1
 800472e:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8004732:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8004736:	fab1 f181 	clz	r1, r1
 800473a:	b2c9      	uxtb	r1, r1
 800473c:	408b      	lsls	r3, r1
 800473e:	4969      	ldr	r1, [pc, #420]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 8004740:	4313      	orrs	r3, r2
 8004742:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004744:	e0fd      	b.n	8004942 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004746:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800474a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	2b00      	cmp	r3, #0
 8004754:	f000 8088 	beq.w	8004868 <HAL_RCC_OscConfig+0x56c>
 8004758:	2301      	movs	r3, #1
 800475a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004762:	fa93 f3a3 	rbit	r3, r3
 8004766:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800476a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800476e:	fab3 f383 	clz	r3, r3
 8004772:	b2db      	uxtb	r3, r3
 8004774:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004778:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	461a      	mov	r2, r3
 8004780:	2301      	movs	r3, #1
 8004782:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fc fafa 	bl	8000d7c <HAL_GetTick>
 8004788:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800478c:	e00a      	b.n	80047a4 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800478e:	f7fc faf5 	bl	8000d7c <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b02      	cmp	r3, #2
 800479c:	d902      	bls.n	80047a4 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	f000 bde2 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
 80047a4:	2302      	movs	r3, #2
 80047a6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80047ae:	fa93 f3a3 	rbit	r3, r3
 80047b2:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 80047b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ba:	fab3 f383 	clz	r3, r3
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	095b      	lsrs	r3, r3, #5
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d102      	bne.n	80047d4 <HAL_RCC_OscConfig+0x4d8>
 80047ce:	4b45      	ldr	r3, [pc, #276]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	e013      	b.n	80047fc <HAL_RCC_OscConfig+0x500>
 80047d4:	2302      	movs	r3, #2
 80047d6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80047de:	fa93 f3a3 	rbit	r3, r3
 80047e2:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80047e6:	2302      	movs	r3, #2
 80047e8:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80047ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80047f0:	fa93 f3a3 	rbit	r3, r3
 80047f4:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80047f8:	4b3a      	ldr	r3, [pc, #232]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 80047fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047fc:	2202      	movs	r2, #2
 80047fe:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8004802:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8004806:	fa92 f2a2 	rbit	r2, r2
 800480a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800480e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8004812:	fab2 f282 	clz	r2, r2
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	f042 0220 	orr.w	r2, r2, #32
 800481c:	b2d2      	uxtb	r2, r2
 800481e:	f002 021f 	and.w	r2, r2, #31
 8004822:	2101      	movs	r1, #1
 8004824:	fa01 f202 	lsl.w	r2, r1, r2
 8004828:	4013      	ands	r3, r2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0af      	beq.n	800478e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482e:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004836:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800483a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	21f8      	movs	r1, #248	@ 0xf8
 8004844:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004848:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800484c:	fa91 f1a1 	rbit	r1, r1
 8004850:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8004854:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8004858:	fab1 f181 	clz	r1, r1
 800485c:	b2c9      	uxtb	r1, r1
 800485e:	408b      	lsls	r3, r1
 8004860:	4920      	ldr	r1, [pc, #128]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 8004862:	4313      	orrs	r3, r2
 8004864:	600b      	str	r3, [r1, #0]
 8004866:	e06c      	b.n	8004942 <HAL_RCC_OscConfig+0x646>
 8004868:	2301      	movs	r3, #1
 800486a:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8004872:	fa93 f3a3 	rbit	r3, r3
 8004876:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800487a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800487e:	fab3 f383 	clz	r3, r3
 8004882:	b2db      	uxtb	r3, r3
 8004884:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004888:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	461a      	mov	r2, r3
 8004890:	2300      	movs	r3, #0
 8004892:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004894:	f7fc fa72 	bl	8000d7c <HAL_GetTick>
 8004898:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800489e:	f7fc fa6d 	bl	8000d7c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d902      	bls.n	80048b4 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80048ae:	2303      	movs	r3, #3
 80048b0:	f000 bd5a 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
 80048b4:	2302      	movs	r3, #2
 80048b6:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80048be:	fa93 f3a3 	rbit	r3, r3
 80048c2:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 80048c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048ca:	fab3 f383 	clz	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	f043 0301 	orr.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d104      	bne.n	80048e8 <HAL_RCC_OscConfig+0x5ec>
 80048de:	4b01      	ldr	r3, [pc, #4]	@ (80048e4 <HAL_RCC_OscConfig+0x5e8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	e015      	b.n	8004910 <HAL_RCC_OscConfig+0x614>
 80048e4:	40021000 	.word	0x40021000
 80048e8:	2302      	movs	r3, #2
 80048ea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80048f2:	fa93 f3a3 	rbit	r3, r3
 80048f6:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80048fa:	2302      	movs	r3, #2
 80048fc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004900:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8004904:	fa93 f3a3 	rbit	r3, r3
 8004908:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800490c:	4bc8      	ldr	r3, [pc, #800]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	2202      	movs	r2, #2
 8004912:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8004916:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800491a:	fa92 f2a2 	rbit	r2, r2
 800491e:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8004922:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8004926:	fab2 f282 	clz	r2, r2
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	f042 0220 	orr.w	r2, r2, #32
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	f002 021f 	and.w	r2, r2, #31
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ad      	bne.n	800489e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 8110 	beq.w	8004b78 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004958:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800495c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d079      	beq.n	8004a5c <HAL_RCC_OscConfig+0x760>
 8004968:	2301      	movs	r3, #1
 800496a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800496e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004972:	fa93 f3a3 	rbit	r3, r3
 8004976:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800497a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800497e:	fab3 f383 	clz	r3, r3
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	4bab      	ldr	r3, [pc, #684]	@ (8004c34 <HAL_RCC_OscConfig+0x938>)
 8004988:	4413      	add	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	461a      	mov	r2, r3
 800498e:	2301      	movs	r3, #1
 8004990:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004992:	f7fc f9f3 	bl	8000d7c <HAL_GetTick>
 8004996:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800499a:	e00a      	b.n	80049b2 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800499c:	f7fc f9ee 	bl	8000d7c <HAL_GetTick>
 80049a0:	4602      	mov	r2, r0
 80049a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d902      	bls.n	80049b2 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	f000 bcdb 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
 80049b2:	2302      	movs	r3, #2
 80049b4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80049bc:	fa93 f3a3 	rbit	r3, r3
 80049c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049cc:	2202      	movs	r2, #2
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	fa93 f2a3 	rbit	r2, r3
 80049de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049f0:	2202      	movs	r2, #2
 80049f2:	601a      	str	r2, [r3, #0]
 80049f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	fa93 f2a3 	rbit	r2, r3
 8004a02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a06:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004a0a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0c:	4b88      	ldr	r3, [pc, #544]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004a0e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a14:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a18:	2102      	movs	r1, #2
 8004a1a:	6019      	str	r1, [r3, #0]
 8004a1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a20:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	fa93 f1a3 	rbit	r1, r3
 8004a2a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a32:	6019      	str	r1, [r3, #0]
  return result;
 8004a34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a38:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f003 031f 	and.w	r3, r3, #31
 8004a4e:	2101      	movs	r1, #1
 8004a50:	fa01 f303 	lsl.w	r3, r1, r3
 8004a54:	4013      	ands	r3, r2
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0a0      	beq.n	800499c <HAL_RCC_OscConfig+0x6a0>
 8004a5a:	e08d      	b.n	8004b78 <HAL_RCC_OscConfig+0x87c>
 8004a5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a60:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a64:	2201      	movs	r2, #1
 8004a66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a6c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	fa93 f2a3 	rbit	r2, r3
 8004a76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a7a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a7e:	601a      	str	r2, [r3, #0]
  return result;
 8004a80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a84:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004a88:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	461a      	mov	r2, r3
 8004a92:	4b68      	ldr	r3, [pc, #416]	@ (8004c34 <HAL_RCC_OscConfig+0x938>)
 8004a94:	4413      	add	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fc f96d 	bl	8000d7c <HAL_GetTick>
 8004aa2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa8:	f7fc f968 	bl	8000d7c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d902      	bls.n	8004abe <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f000 bc55 	b.w	8005368 <HAL_RCC_OscConfig+0x106c>
 8004abe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ac2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ac6:	2202      	movs	r2, #2
 8004ac8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ace:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	fa93 f2a3 	rbit	r2, r3
 8004ad8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004adc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004ae0:	601a      	str	r2, [r3, #0]
 8004ae2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004aea:	2202      	movs	r2, #2
 8004aec:	601a      	str	r2, [r3, #0]
 8004aee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004af2:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	fa93 f2a3 	rbit	r2, r3
 8004afc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b0a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004b0e:	2202      	movs	r2, #2
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b16:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	fa93 f2a3 	rbit	r2, r3
 8004b20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b24:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004b28:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b2a:	4b41      	ldr	r3, [pc, #260]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004b2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b32:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b36:	2102      	movs	r1, #2
 8004b38:	6019      	str	r1, [r3, #0]
 8004b3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b3e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	fa93 f1a3 	rbit	r1, r3
 8004b48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b4c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b50:	6019      	str	r1, [r3, #0]
  return result;
 8004b52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b56:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	fab3 f383 	clz	r3, r3
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 031f 	and.w	r3, r3, #31
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b72:	4013      	ands	r3, r2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d197      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 81a1 	beq.w	8004ed0 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b94:	4b26      	ldr	r3, [pc, #152]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004b96:	69db      	ldr	r3, [r3, #28]
 8004b98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d116      	bne.n	8004bce <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba0:	4b23      	ldr	r3, [pc, #140]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	4a22      	ldr	r2, [pc, #136]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004ba6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	61d3      	str	r3, [r2, #28]
 8004bac:	4b20      	ldr	r3, [pc, #128]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bb8:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004bbc:	601a      	str	r2, [r3, #0]
 8004bbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bc2:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004bc6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bce:	4b1a      	ldr	r3, [pc, #104]	@ (8004c38 <HAL_RCC_OscConfig+0x93c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d11a      	bne.n	8004c10 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bda:	4b17      	ldr	r3, [pc, #92]	@ (8004c38 <HAL_RCC_OscConfig+0x93c>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a16      	ldr	r2, [pc, #88]	@ (8004c38 <HAL_RCC_OscConfig+0x93c>)
 8004be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004be4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be6:	f7fc f8c9 	bl	8000d7c <HAL_GetTick>
 8004bea:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bee:	e009      	b.n	8004c04 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf0:	f7fc f8c4 	bl	8000d7c <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b64      	cmp	r3, #100	@ 0x64
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e3b1      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	4b0c      	ldr	r3, [pc, #48]	@ (8004c38 <HAL_RCC_OscConfig+0x93c>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ef      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCC_OscConfig+0x940>
 8004c20:	4b03      	ldr	r3, [pc, #12]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004c22:	6a1b      	ldr	r3, [r3, #32]
 8004c24:	4a02      	ldr	r2, [pc, #8]	@ (8004c30 <HAL_RCC_OscConfig+0x934>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	6213      	str	r3, [r2, #32]
 8004c2c:	e03c      	b.n	8004ca8 <HAL_RCC_OscConfig+0x9ac>
 8004c2e:	bf00      	nop
 8004c30:	40021000 	.word	0x40021000
 8004c34:	10908120 	.word	0x10908120
 8004c38:	40007000 	.word	0x40007000
 8004c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10c      	bne.n	8004c66 <HAL_RCC_OscConfig+0x96a>
 8004c4c:	4bc1      	ldr	r3, [pc, #772]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c4e:	6a1b      	ldr	r3, [r3, #32]
 8004c50:	4ac0      	ldr	r2, [pc, #768]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c52:	f023 0301 	bic.w	r3, r3, #1
 8004c56:	6213      	str	r3, [r2, #32]
 8004c58:	4bbe      	ldr	r3, [pc, #760]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	4abd      	ldr	r2, [pc, #756]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c5e:	f023 0304 	bic.w	r3, r3, #4
 8004c62:	6213      	str	r3, [r2, #32]
 8004c64:	e020      	b.n	8004ca8 <HAL_RCC_OscConfig+0x9ac>
 8004c66:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	2b05      	cmp	r3, #5
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x994>
 8004c76:	4bb7      	ldr	r3, [pc, #732]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	4ab6      	ldr	r2, [pc, #728]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c7c:	f043 0304 	orr.w	r3, r3, #4
 8004c80:	6213      	str	r3, [r2, #32]
 8004c82:	4bb4      	ldr	r3, [pc, #720]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	4ab3      	ldr	r2, [pc, #716]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c88:	f043 0301 	orr.w	r3, r3, #1
 8004c8c:	6213      	str	r3, [r2, #32]
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0x9ac>
 8004c90:	4bb0      	ldr	r3, [pc, #704]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	4aaf      	ldr	r2, [pc, #700]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c96:	f023 0301 	bic.w	r3, r3, #1
 8004c9a:	6213      	str	r3, [r2, #32]
 8004c9c:	4bad      	ldr	r3, [pc, #692]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004c9e:	6a1b      	ldr	r3, [r3, #32]
 8004ca0:	4aac      	ldr	r2, [pc, #688]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004ca2:	f023 0304 	bic.w	r3, r3, #4
 8004ca6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ca8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	f000 8081 	beq.w	8004dbc <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cba:	f7fc f85f 	bl	8000d7c <HAL_GetTick>
 8004cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc2:	e00b      	b.n	8004cdc <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fc f85a 	bl	8000d7c <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e345      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
 8004cdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ce0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ce8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cec:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	fa93 f2a3 	rbit	r2, r3
 8004cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cfa:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d04:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d08:	2202      	movs	r2, #2
 8004d0a:	601a      	str	r2, [r3, #0]
 8004d0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d10:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	fa93 f2a3 	rbit	r2, r3
 8004d1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d1e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d22:	601a      	str	r2, [r3, #0]
  return result;
 8004d24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d28:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004d2c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d2e:	fab3 f383 	clz	r3, r3
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	f043 0302 	orr.w	r3, r3, #2
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d102      	bne.n	8004d48 <HAL_RCC_OscConfig+0xa4c>
 8004d42:	4b84      	ldr	r3, [pc, #528]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004d44:	6a1b      	ldr	r3, [r3, #32]
 8004d46:	e013      	b.n	8004d70 <HAL_RCC_OscConfig+0xa74>
 8004d48:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d50:	2202      	movs	r2, #2
 8004d52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d54:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d58:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	fa93 f2a3 	rbit	r2, r3
 8004d62:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d66:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	4b79      	ldr	r3, [pc, #484]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d74:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d78:	2102      	movs	r1, #2
 8004d7a:	6011      	str	r1, [r2, #0]
 8004d7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d80:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004d84:	6812      	ldr	r2, [r2, #0]
 8004d86:	fa92 f1a2 	rbit	r1, r2
 8004d8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d8e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d92:	6011      	str	r1, [r2, #0]
  return result;
 8004d94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d98:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d9c:	6812      	ldr	r2, [r2, #0]
 8004d9e:	fab2 f282 	clz	r2, r2
 8004da2:	b2d2      	uxtb	r2, r2
 8004da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004da8:	b2d2      	uxtb	r2, r2
 8004daa:	f002 021f 	and.w	r2, r2, #31
 8004dae:	2101      	movs	r1, #1
 8004db0:	fa01 f202 	lsl.w	r2, r1, r2
 8004db4:	4013      	ands	r3, r2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d084      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x9c8>
 8004dba:	e07f      	b.n	8004ebc <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dbc:	f7fb ffde 	bl	8000d7c <HAL_GetTick>
 8004dc0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc4:	e00b      	b.n	8004dde <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dc6:	f7fb ffd9 	bl	8000d7c <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e2c4      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
 8004dde:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004de2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004de6:	2202      	movs	r2, #2
 8004de8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dee:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	fa93 f2a3 	rbit	r2, r3
 8004df8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dfc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004e00:	601a      	str	r2, [r3, #0]
 8004e02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e06:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e12:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	fa93 f2a3 	rbit	r2, r3
 8004e1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e20:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e24:	601a      	str	r2, [r3, #0]
  return result;
 8004e26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e2a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004e2e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e30:	fab3 f383 	clz	r3, r3
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	095b      	lsrs	r3, r3, #5
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	f043 0302 	orr.w	r3, r3, #2
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d102      	bne.n	8004e4a <HAL_RCC_OscConfig+0xb4e>
 8004e44:	4b43      	ldr	r3, [pc, #268]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	e013      	b.n	8004e72 <HAL_RCC_OscConfig+0xb76>
 8004e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e4e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e52:	2202      	movs	r2, #2
 8004e54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e5a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	fa93 f2a3 	rbit	r2, r3
 8004e64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e68:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	4b39      	ldr	r3, [pc, #228]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e72:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e76:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	6011      	str	r1, [r2, #0]
 8004e7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e82:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	fa92 f1a2 	rbit	r1, r2
 8004e8c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e90:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e94:	6011      	str	r1, [r2, #0]
  return result;
 8004e96:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e9a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	fab2 f282 	clz	r2, r2
 8004ea4:	b2d2      	uxtb	r2, r2
 8004ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	f002 021f 	and.w	r2, r2, #31
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8004eb6:	4013      	ands	r3, r2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d184      	bne.n	8004dc6 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ebc:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d105      	bne.n	8004ed0 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ec4:	4b23      	ldr	r3, [pc, #140]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004ec6:	69db      	ldr	r3, [r3, #28]
 8004ec8:	4a22      	ldr	r2, [pc, #136]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004eca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ece:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ed0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	69db      	ldr	r3, [r3, #28]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	f000 8242 	beq.w	8005366 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8004f54 <HAL_RCC_OscConfig+0xc58>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 030c 	and.w	r3, r3, #12
 8004eea:	2b08      	cmp	r3, #8
 8004eec:	f000 8213 	beq.w	8005316 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	f040 8162 	bne.w	80051c6 <HAL_RCC_OscConfig+0xeca>
 8004f02:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f06:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004f0a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f14:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	fa93 f2a3 	rbit	r2, r3
 8004f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f22:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f26:	601a      	str	r2, [r3, #0]
  return result;
 8004f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f2c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004f30:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f32:	fab3 f383 	clz	r3, r3
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004f3c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	461a      	mov	r2, r3
 8004f44:	2300      	movs	r3, #0
 8004f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fb ff18 	bl	8000d7c <HAL_GetTick>
 8004f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f50:	e00c      	b.n	8004f6c <HAL_RCC_OscConfig+0xc70>
 8004f52:	bf00      	nop
 8004f54:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f58:	f7fb ff10 	bl	8000d7c <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e1fd      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
 8004f6c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f70:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f78:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	fa93 f2a3 	rbit	r2, r3
 8004f88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f8c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f90:	601a      	str	r2, [r3, #0]
  return result;
 8004f92:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f96:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f9a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f9c:	fab3 f383 	clz	r3, r3
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	095b      	lsrs	r3, r3, #5
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	f043 0301 	orr.w	r3, r3, #1
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d102      	bne.n	8004fb6 <HAL_RCC_OscConfig+0xcba>
 8004fb0:	4bb0      	ldr	r3, [pc, #704]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	e027      	b.n	8005006 <HAL_RCC_OscConfig+0xd0a>
 8004fb6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fba:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004fbe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fc2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fc4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	fa93 f2a3 	rbit	r2, r3
 8004fd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004fda:	601a      	str	r2, [r3, #0]
 8004fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004fe4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fee:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	fa93 f2a3 	rbit	r2, r3
 8004ff8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ffc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8005000:	601a      	str	r2, [r3, #0]
 8005002:	4b9c      	ldr	r3, [pc, #624]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8005004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005006:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800500a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800500e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005012:	6011      	str	r1, [r2, #0]
 8005014:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005018:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800501c:	6812      	ldr	r2, [r2, #0]
 800501e:	fa92 f1a2 	rbit	r1, r2
 8005022:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005026:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800502a:	6011      	str	r1, [r2, #0]
  return result;
 800502c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005030:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	fab2 f282 	clz	r2, r2
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	f042 0220 	orr.w	r2, r2, #32
 8005040:	b2d2      	uxtb	r2, r2
 8005042:	f002 021f 	and.w	r2, r2, #31
 8005046:	2101      	movs	r1, #1
 8005048:	fa01 f202 	lsl.w	r2, r1, r2
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d182      	bne.n	8004f58 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005052:	4b88      	ldr	r3, [pc, #544]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800505a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800505e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005066:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800506a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	430b      	orrs	r3, r1
 8005074:	497f      	ldr	r1, [pc, #508]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8005076:	4313      	orrs	r3, r2
 8005078:	604b      	str	r3, [r1, #4]
 800507a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800507e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005082:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005088:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800508c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	fa93 f2a3 	rbit	r2, r3
 8005096:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800509a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800509e:	601a      	str	r2, [r3, #0]
  return result;
 80050a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050a4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80050a8:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050aa:	fab3 f383 	clz	r3, r3
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80050b4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	461a      	mov	r2, r3
 80050bc:	2301      	movs	r3, #1
 80050be:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c0:	f7fb fe5c 	bl	8000d7c <HAL_GetTick>
 80050c4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80050c8:	e009      	b.n	80050de <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050ca:	f7fb fe57 	bl	8000d7c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e144      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
 80050de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050e2:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050e6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050f0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	fa93 f2a3 	rbit	r2, r3
 80050fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050fe:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005102:	601a      	str	r2, [r3, #0]
  return result;
 8005104:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005108:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800510c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800510e:	fab3 f383 	clz	r3, r3
 8005112:	b2db      	uxtb	r3, r3
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	b2db      	uxtb	r3, r3
 8005118:	f043 0301 	orr.w	r3, r3, #1
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b01      	cmp	r3, #1
 8005120:	d102      	bne.n	8005128 <HAL_RCC_OscConfig+0xe2c>
 8005122:	4b54      	ldr	r3, [pc, #336]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	e027      	b.n	8005178 <HAL_RCC_OscConfig+0xe7c>
 8005128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800512c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005130:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005134:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005136:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800513a:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	fa93 f2a3 	rbit	r2, r3
 8005144:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005148:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800514c:	601a      	str	r2, [r3, #0]
 800514e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005152:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005156:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005160:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	fa93 f2a3 	rbit	r2, r3
 800516a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800516e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	4b3f      	ldr	r3, [pc, #252]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800517c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8005180:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8005184:	6011      	str	r1, [r2, #0]
 8005186:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800518a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	fa92 f1a2 	rbit	r1, r2
 8005194:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005198:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800519c:	6011      	str	r1, [r2, #0]
  return result;
 800519e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80051a2:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	fab2 f282 	clz	r2, r2
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	f042 0220 	orr.w	r2, r2, #32
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	f002 021f 	and.w	r2, r2, #31
 80051b8:	2101      	movs	r1, #1
 80051ba:	fa01 f202 	lsl.w	r2, r1, r2
 80051be:	4013      	ands	r3, r2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d082      	beq.n	80050ca <HAL_RCC_OscConfig+0xdce>
 80051c4:	e0cf      	b.n	8005366 <HAL_RCC_OscConfig+0x106a>
 80051c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051ca:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051ce:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80051d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051d8:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	fa93 f2a3 	rbit	r2, r3
 80051e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051e6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051ea:	601a      	str	r2, [r3, #0]
  return result;
 80051ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051f0:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80051f4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051f6:	fab3 f383 	clz	r3, r3
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005200:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	461a      	mov	r2, r3
 8005208:	2300      	movs	r3, #0
 800520a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fb fdb6 	bl	8000d7c <HAL_GetTick>
 8005210:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005214:	e009      	b.n	800522a <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005216:	f7fb fdb1 	bl	8000d7c <HAL_GetTick>
 800521a:	4602      	mov	r2, r0
 800521c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e09e      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
 800522a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800522e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005232:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005236:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005238:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800523c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	fa93 f2a3 	rbit	r2, r3
 8005246:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800524a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800524e:	601a      	str	r2, [r3, #0]
  return result;
 8005250:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005254:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8005258:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	095b      	lsrs	r3, r3, #5
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	d104      	bne.n	8005278 <HAL_RCC_OscConfig+0xf7c>
 800526e:	4b01      	ldr	r3, [pc, #4]	@ (8005274 <HAL_RCC_OscConfig+0xf78>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	e029      	b.n	80052c8 <HAL_RCC_OscConfig+0xfcc>
 8005274:	40021000 	.word	0x40021000
 8005278:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800527c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8005280:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005284:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005286:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800528a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	fa93 f2a3 	rbit	r2, r3
 8005294:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005298:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80052a6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80052aa:	601a      	str	r2, [r3, #0]
 80052ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052b0:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	fa93 f2a3 	rbit	r2, r3
 80052ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005374 <HAL_RCC_OscConfig+0x1078>)
 80052c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052cc:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80052d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80052d4:	6011      	str	r1, [r2, #0]
 80052d6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052da:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	fa92 f1a2 	rbit	r1, r2
 80052e4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052ec:	6011      	str	r1, [r2, #0]
  return result;
 80052ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80052f2:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80052f6:	6812      	ldr	r2, [r2, #0]
 80052f8:	fab2 f282 	clz	r2, r2
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	f042 0220 	orr.w	r2, r2, #32
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	f002 021f 	and.w	r2, r2, #31
 8005308:	2101      	movs	r1, #1
 800530a:	fa01 f202 	lsl.w	r2, r1, r2
 800530e:	4013      	ands	r3, r2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d180      	bne.n	8005216 <HAL_RCC_OscConfig+0xf1a>
 8005314:	e027      	b.n	8005366 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005316:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800531a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d101      	bne.n	800532a <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	e01e      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800532a:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <HAL_RCC_OscConfig+0x1078>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8005332:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8005336:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800533a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800533e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	429a      	cmp	r2, r3
 8005348:	d10b      	bne.n	8005362 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800534a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800534e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005352:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005356:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800535e:	429a      	cmp	r2, r3
 8005360:	d001      	beq.n	8005366 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e000      	b.n	8005368 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8005366:	2300      	movs	r3, #0
}
 8005368:	4618      	mov	r0, r3
 800536a:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40021000 	.word	0x40021000

08005378 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b09e      	sub	sp, #120	@ 0x78
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e162      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b90      	ldr	r3, [pc, #576]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d910      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b8d      	ldr	r3, [pc, #564]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	498b      	ldr	r1, [pc, #556]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b89      	ldr	r3, [pc, #548]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e14a      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053cc:	4b82      	ldr	r3, [pc, #520]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	497f      	ldr	r1, [pc, #508]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0301 	and.w	r3, r3, #1
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80dc 	beq.w	80055a4 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d13c      	bne.n	800546e <HAL_RCC_ClockConfig+0xf6>
 80053f4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80053f8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8005402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b01      	cmp	r3, #1
 8005416:	d102      	bne.n	800541e <HAL_RCC_ClockConfig+0xa6>
 8005418:	4b6f      	ldr	r3, [pc, #444]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	e00f      	b.n	800543e <HAL_RCC_ClockConfig+0xc6>
 800541e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005422:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005424:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005426:	fa93 f3a3 	rbit	r3, r3
 800542a:	667b      	str	r3, [r7, #100]	@ 0x64
 800542c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005430:	663b      	str	r3, [r7, #96]	@ 0x60
 8005432:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005434:	fa93 f3a3 	rbit	r3, r3
 8005438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800543a:	4b67      	ldr	r3, [pc, #412]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 800543c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800543e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005442:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005446:	fa92 f2a2 	rbit	r2, r2
 800544a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800544c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800544e:	fab2 f282 	clz	r2, r2
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	f042 0220 	orr.w	r2, r2, #32
 8005458:	b2d2      	uxtb	r2, r2
 800545a:	f002 021f 	and.w	r2, r2, #31
 800545e:	2101      	movs	r1, #1
 8005460:	fa01 f202 	lsl.w	r2, r1, r2
 8005464:	4013      	ands	r3, r2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d17b      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	e0f3      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	2b02      	cmp	r3, #2
 8005474:	d13c      	bne.n	80054f0 <HAL_RCC_ClockConfig+0x178>
 8005476:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800547a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800547e:	fa93 f3a3 	rbit	r3, r3
 8005482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8005484:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005486:	fab3 f383 	clz	r3, r3
 800548a:	b2db      	uxtb	r3, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	b2db      	uxtb	r3, r3
 8005490:	f043 0301 	orr.w	r3, r3, #1
 8005494:	b2db      	uxtb	r3, r3
 8005496:	2b01      	cmp	r3, #1
 8005498:	d102      	bne.n	80054a0 <HAL_RCC_ClockConfig+0x128>
 800549a:	4b4f      	ldr	r3, [pc, #316]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	e00f      	b.n	80054c0 <HAL_RCC_ClockConfig+0x148>
 80054a0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054a4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a8:	fa93 f3a3 	rbit	r3, r3
 80054ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ae:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80054b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80054b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054b6:	fa93 f3a3 	rbit	r3, r3
 80054ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80054bc:	4b46      	ldr	r3, [pc, #280]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80054c4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80054c6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054c8:	fa92 f2a2 	rbit	r2, r2
 80054cc:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80054ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80054d0:	fab2 f282 	clz	r2, r2
 80054d4:	b2d2      	uxtb	r2, r2
 80054d6:	f042 0220 	orr.w	r2, r2, #32
 80054da:	b2d2      	uxtb	r2, r2
 80054dc:	f002 021f 	and.w	r2, r2, #31
 80054e0:	2101      	movs	r1, #1
 80054e2:	fa01 f202 	lsl.w	r2, r1, r2
 80054e6:	4013      	ands	r3, r2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d13a      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	e0b2      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
 80054f0:	2302      	movs	r3, #2
 80054f2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f6:	fa93 f3a3 	rbit	r3, r3
 80054fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80054fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fe:	fab3 f383 	clz	r3, r3
 8005502:	b2db      	uxtb	r3, r3
 8005504:	095b      	lsrs	r3, r3, #5
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f043 0301 	orr.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b01      	cmp	r3, #1
 8005510:	d102      	bne.n	8005518 <HAL_RCC_ClockConfig+0x1a0>
 8005512:	4b31      	ldr	r3, [pc, #196]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	e00d      	b.n	8005534 <HAL_RCC_ClockConfig+0x1bc>
 8005518:	2302      	movs	r3, #2
 800551a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551e:	fa93 f3a3 	rbit	r3, r3
 8005522:	627b      	str	r3, [r7, #36]	@ 0x24
 8005524:	2302      	movs	r3, #2
 8005526:	623b      	str	r3, [r7, #32]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	fa93 f3a3 	rbit	r3, r3
 800552e:	61fb      	str	r3, [r7, #28]
 8005530:	4b29      	ldr	r3, [pc, #164]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005534:	2202      	movs	r2, #2
 8005536:	61ba      	str	r2, [r7, #24]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	fa92 f2a2 	rbit	r2, r2
 800553e:	617a      	str	r2, [r7, #20]
  return result;
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	fab2 f282 	clz	r2, r2
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	f042 0220 	orr.w	r2, r2, #32
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	f002 021f 	and.w	r2, r2, #31
 8005552:	2101      	movs	r1, #1
 8005554:	fa01 f202 	lsl.w	r2, r1, r2
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d101      	bne.n	8005562 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e079      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005562:	4b1d      	ldr	r3, [pc, #116]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	491a      	ldr	r1, [pc, #104]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005570:	4313      	orrs	r3, r2
 8005572:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005574:	f7fb fc02 	bl	8000d7c <HAL_GetTick>
 8005578:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800557a:	e00a      	b.n	8005592 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800557c:	f7fb fbfe 	bl	8000d7c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800558a:	4293      	cmp	r3, r2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e061      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	4b11      	ldr	r3, [pc, #68]	@ (80055d8 <HAL_RCC_ClockConfig+0x260>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	f003 020c 	and.w	r2, r3, #12
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d1eb      	bne.n	800557c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055a4:	4b0b      	ldr	r3, [pc, #44]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0307 	and.w	r3, r3, #7
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d214      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055b2:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f023 0207 	bic.w	r2, r3, #7
 80055ba:	4906      	ldr	r1, [pc, #24]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	4313      	orrs	r3, r2
 80055c0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055c2:	4b04      	ldr	r3, [pc, #16]	@ (80055d4 <HAL_RCC_ClockConfig+0x25c>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0307 	and.w	r3, r3, #7
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d005      	beq.n	80055dc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e040      	b.n	8005656 <HAL_RCC_ClockConfig+0x2de>
 80055d4:	40022000 	.word	0x40022000
 80055d8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	491a      	ldr	r1, [pc, #104]	@ (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005606:	4b16      	ldr	r3, [pc, #88]	@ (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4912      	ldr	r1, [pc, #72]	@ (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 8005616:	4313      	orrs	r3, r2
 8005618:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800561a:	f000 f829 	bl	8005670 <HAL_RCC_GetSysClockFreq>
 800561e:	4601      	mov	r1, r0
 8005620:	4b0f      	ldr	r3, [pc, #60]	@ (8005660 <HAL_RCC_ClockConfig+0x2e8>)
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005628:	22f0      	movs	r2, #240	@ 0xf0
 800562a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	fa92 f2a2 	rbit	r2, r2
 8005632:	60fa      	str	r2, [r7, #12]
  return result;
 8005634:	68fa      	ldr	r2, [r7, #12]
 8005636:	fab2 f282 	clz	r2, r2
 800563a:	b2d2      	uxtb	r2, r2
 800563c:	40d3      	lsrs	r3, r2
 800563e:	4a09      	ldr	r2, [pc, #36]	@ (8005664 <HAL_RCC_ClockConfig+0x2ec>)
 8005640:	5cd3      	ldrb	r3, [r2, r3]
 8005642:	fa21 f303 	lsr.w	r3, r1, r3
 8005646:	4a08      	ldr	r2, [pc, #32]	@ (8005668 <HAL_RCC_ClockConfig+0x2f0>)
 8005648:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800564a:	4b08      	ldr	r3, [pc, #32]	@ (800566c <HAL_RCC_ClockConfig+0x2f4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4618      	mov	r0, r3
 8005650:	f7fb fb50 	bl	8000cf4 <HAL_InitTick>
  
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3778      	adds	r7, #120	@ 0x78
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	40021000 	.word	0x40021000
 8005664:	0800a004 	.word	0x0800a004
 8005668:	20000004 	.word	0x20000004
 800566c:	20000008 	.word	0x20000008

08005670 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	60fb      	str	r3, [r7, #12]
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	2300      	movs	r3, #0
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	2300      	movs	r3, #0
 8005684:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800568a:	4b1e      	ldr	r3, [pc, #120]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x94>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 030c 	and.w	r3, r3, #12
 8005696:	2b04      	cmp	r3, #4
 8005698:	d002      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x30>
 800569a:	2b08      	cmp	r3, #8
 800569c:	d003      	beq.n	80056a6 <HAL_RCC_GetSysClockFreq+0x36>
 800569e:	e026      	b.n	80056ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80056a0:	4b19      	ldr	r3, [pc, #100]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x98>)
 80056a2:	613b      	str	r3, [r7, #16]
      break;
 80056a4:	e026      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	0c9b      	lsrs	r3, r3, #18
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	4a17      	ldr	r2, [pc, #92]	@ (800570c <HAL_RCC_GetSysClockFreq+0x9c>)
 80056b0:	5cd3      	ldrb	r3, [r2, r3]
 80056b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80056b4:	4b13      	ldr	r3, [pc, #76]	@ (8005704 <HAL_RCC_GetSysClockFreq+0x94>)
 80056b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b8:	f003 030f 	and.w	r3, r3, #15
 80056bc:	4a14      	ldr	r2, [pc, #80]	@ (8005710 <HAL_RCC_GetSysClockFreq+0xa0>)
 80056be:	5cd3      	ldrb	r3, [r2, r3]
 80056c0:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80056cc:	4a0e      	ldr	r2, [pc, #56]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x98>)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	fb02 f303 	mul.w	r3, r2, r3
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e004      	b.n	80056e8 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a0c      	ldr	r2, [pc, #48]	@ (8005714 <HAL_RCC_GetSysClockFreq+0xa4>)
 80056e2:	fb02 f303 	mul.w	r3, r2, r3
 80056e6:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	613b      	str	r3, [r7, #16]
      break;
 80056ec:	e002      	b.n	80056f4 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80056ee:	4b06      	ldr	r3, [pc, #24]	@ (8005708 <HAL_RCC_GetSysClockFreq+0x98>)
 80056f0:	613b      	str	r3, [r7, #16]
      break;
 80056f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056f4:	693b      	ldr	r3, [r7, #16]
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	371c      	adds	r7, #28
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	40021000 	.word	0x40021000
 8005708:	007a1200 	.word	0x007a1200
 800570c:	0800a014 	.word	0x0800a014
 8005710:	0800a024 	.word	0x0800a024
 8005714:	003d0900 	.word	0x003d0900

08005718 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b092      	sub	sp, #72	@ 0x48
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8005724:	2300      	movs	r3, #0
 8005726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80d4 	beq.w	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800573c:	4b4e      	ldr	r3, [pc, #312]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10e      	bne.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005748:	4b4b      	ldr	r3, [pc, #300]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574a:	69db      	ldr	r3, [r3, #28]
 800574c:	4a4a      	ldr	r2, [pc, #296]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800574e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005752:	61d3      	str	r3, [r2, #28]
 8005754:	4b48      	ldr	r3, [pc, #288]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005760:	2301      	movs	r3, #1
 8005762:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005766:	4b45      	ldr	r3, [pc, #276]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800576e:	2b00      	cmp	r3, #0
 8005770:	d118      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005772:	4b42      	ldr	r3, [pc, #264]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4a41      	ldr	r2, [pc, #260]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005778:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800577c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800577e:	f7fb fafd 	bl	8000d7c <HAL_GetTick>
 8005782:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005784:	e008      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005786:	f7fb faf9 	bl	8000d7c <HAL_GetTick>
 800578a:	4602      	mov	r2, r0
 800578c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	2b64      	cmp	r3, #100	@ 0x64
 8005792:	d901      	bls.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005794:	2303      	movs	r3, #3
 8005796:	e169      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005798:	4b38      	ldr	r3, [pc, #224]	@ (800587c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0f0      	beq.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80057a4:	4b34      	ldr	r3, [pc, #208]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8084 	beq.w	80058be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d07c      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057ce:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80057d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80057dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057de:	fab3 f383 	clz	r3, r3
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	461a      	mov	r2, r3
 80057e6:	4b26      	ldr	r3, [pc, #152]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80057e8:	4413      	add	r3, r2
 80057ea:	009b      	lsls	r3, r3, #2
 80057ec:	461a      	mov	r2, r3
 80057ee:	2301      	movs	r3, #1
 80057f0:	6013      	str	r3, [r2, #0]
 80057f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80057f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057fa:	fa93 f3a3 	rbit	r3, r3
 80057fe:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005802:	fab3 f383 	clz	r3, r3
 8005806:	b2db      	uxtb	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	4b1d      	ldr	r3, [pc, #116]	@ (8005880 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800580c:	4413      	add	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	461a      	mov	r2, r3
 8005812:	2300      	movs	r3, #0
 8005814:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005816:	4a18      	ldr	r2, [pc, #96]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800581c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	d04b      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fb faa9 	bl	8000d7c <HAL_GetTick>
 800582a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800582c:	e00a      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800582e:	f7fb faa5 	bl	8000d7c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	f241 3288 	movw	r2, #5000	@ 0x1388
 800583c:	4293      	cmp	r3, r2
 800583e:	d901      	bls.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e113      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x354>
 8005844:	2302      	movs	r3, #2
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584a:	fa93 f3a3 	rbit	r3, r3
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005850:	2302      	movs	r3, #2
 8005852:	623b      	str	r3, [r7, #32]
 8005854:	6a3b      	ldr	r3, [r7, #32]
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	61fb      	str	r3, [r7, #28]
  return result;
 800585c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f043 0302 	orr.w	r3, r3, #2
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d108      	bne.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005872:	4b01      	ldr	r3, [pc, #4]	@ (8005878 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	e00d      	b.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005878:	40021000 	.word	0x40021000
 800587c:	40007000 	.word	0x40007000
 8005880:	10908100 	.word	0x10908100
 8005884:	2302      	movs	r3, #2
 8005886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	4b78      	ldr	r3, [pc, #480]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	2202      	movs	r2, #2
 8005896:	613a      	str	r2, [r7, #16]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	fa92 f2a2 	rbit	r2, r2
 800589e:	60fa      	str	r2, [r7, #12]
  return result;
 80058a0:	68fa      	ldr	r2, [r7, #12]
 80058a2:	fab2 f282 	clz	r2, r2
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	f002 021f 	and.w	r2, r2, #31
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f202 	lsl.w	r2, r1, r2
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0b7      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80058be:	4b6d      	ldr	r3, [pc, #436]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c0:	6a1b      	ldr	r3, [r3, #32]
 80058c2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	496a      	ldr	r1, [pc, #424]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80058d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d105      	bne.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d8:	4b66      	ldr	r3, [pc, #408]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058da:	69db      	ldr	r3, [r3, #28]
 80058dc:	4a65      	ldr	r2, [pc, #404]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058e2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d008      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058f0:	4b60      	ldr	r3, [pc, #384]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f4:	f023 0203 	bic.w	r2, r3, #3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	495d      	ldr	r1, [pc, #372]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0302 	and.w	r3, r3, #2
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800590e:	4b59      	ldr	r3, [pc, #356]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005912:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	4956      	ldr	r1, [pc, #344]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800591c:	4313      	orrs	r3, r2
 800591e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d008      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800592c:	4b51      	ldr	r3, [pc, #324]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005930:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	494e      	ldr	r1, [pc, #312]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800593a:	4313      	orrs	r3, r2
 800593c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0320 	and.w	r3, r3, #32
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800594a:	4b4a      	ldr	r3, [pc, #296]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800594e:	f023 0210 	bic.w	r2, r3, #16
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	69db      	ldr	r3, [r3, #28]
 8005956:	4947      	ldr	r1, [pc, #284]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005958:	4313      	orrs	r3, r2
 800595a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005968:	4b42      	ldr	r3, [pc, #264]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005974:	493f      	ldr	r1, [pc, #252]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005986:	4b3b      	ldr	r3, [pc, #236]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800598a:	f023 0220 	bic.w	r2, r3, #32
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	4938      	ldr	r1, [pc, #224]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005994:	4313      	orrs	r3, r2
 8005996:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d008      	beq.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80059a4:	4b33      	ldr	r3, [pc, #204]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	4930      	ldr	r1, [pc, #192]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0310 	and.w	r3, r3, #16
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d008      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80059c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	4929      	ldr	r1, [pc, #164]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d008      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80059e0:	4b24      	ldr	r3, [pc, #144]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	4921      	ldr	r1, [pc, #132]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d008      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80059fe:	4b1d      	ldr	r3, [pc, #116]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a02:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0a:	491a      	ldr	r1, [pc, #104]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d008      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005a1c:	4b15      	ldr	r3, [pc, #84]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a20:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a28:	4912      	ldr	r1, [pc, #72]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a3e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	490b      	ldr	r1, [pc, #44]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005a58:	4b06      	ldr	r3, [pc, #24]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a5c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a64:	4903      	ldr	r1, [pc, #12]	@ (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3748      	adds	r7, #72	@ 0x48
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	40021000 	.word	0x40021000

08005a78 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a88:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a8c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a98:	2300      	movs	r3, #0
}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3714      	adds	r7, #20
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa4:	4770      	bx	lr

08005aa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005aa6:	b480      	push	{r7}
 8005aa8:	b085      	sub	sp, #20
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aae:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005ab2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005aba:	b29a      	uxth	r2, r3
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	43db      	mvns	r3, r3
 8005ac2:	b29b      	uxth	r3, r3
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	b29a      	uxth	r2, r3
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	1d3b      	adds	r3, r7, #4
 8005ae6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b09d      	sub	sp, #116	@ 0x74
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4413      	add	r3, r2
 8005b32:	881b      	ldrh	r3, [r3, #0]
 8005b34:	b29b      	uxth	r3, r3
 8005b36:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b3e:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	78db      	ldrb	r3, [r3, #3]
 8005b46:	2b03      	cmp	r3, #3
 8005b48:	d81f      	bhi.n	8005b8a <USB_ActivateEndpoint+0x72>
 8005b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b50 <USB_ActivateEndpoint+0x38>)
 8005b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b50:	08005b61 	.word	0x08005b61
 8005b54:	08005b7d 	.word	0x08005b7d
 8005b58:	08005b93 	.word	0x08005b93
 8005b5c:	08005b6f 	.word	0x08005b6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005b60:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005b68:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b6c:	e012      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005b6e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b72:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005b76:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b7a:	e00b      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005b7c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b80:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b84:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005b88:	e004      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005b90:	e000      	b.n	8005b94 <USB_ActivateEndpoint+0x7c>
      break;
 8005b92:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	441a      	add	r2, r3
 8005b9e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ba2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ba6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005baa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bb2:	b29b      	uxth	r3, r3
 8005bb4:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	881b      	ldrh	r3, [r3, #0]
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b21b      	sxth	r3, r3
 8005bc6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bce:	b21a      	sxth	r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	b21b      	sxth	r3, r3
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	b21b      	sxth	r3, r3
 8005bda:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	441a      	add	r2, r3
 8005be8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	7b1b      	ldrb	r3, [r3, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f040 8178 	bne.w	8005efa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f000 8084 	beq.w	8005d1c <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	61bb      	str	r3, [r7, #24]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	461a      	mov	r2, r3
 8005c22:	69bb      	ldr	r3, [r7, #24]
 8005c24:	4413      	add	r3, r2
 8005c26:	61bb      	str	r3, [r7, #24]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	781b      	ldrb	r3, [r3, #0]
 8005c2c:	011a      	lsls	r2, r3, #4
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005c36:	617b      	str	r3, [r7, #20]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	88db      	ldrh	r3, [r3, #6]
 8005c3c:	085b      	lsrs	r3, r3, #1
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	b29a      	uxth	r2, r3
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	781b      	ldrb	r3, [r3, #0]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	881b      	ldrh	r3, [r3, #0]
 8005c54:	827b      	strh	r3, [r7, #18]
 8005c56:	8a7b      	ldrh	r3, [r7, #18]
 8005c58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d01b      	beq.n	8005c98 <USB_ActivateEndpoint+0x180>
 8005c60:	687a      	ldr	r2, [r7, #4]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	881b      	ldrh	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c76:	823b      	strh	r3, [r7, #16]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	8a3b      	ldrh	r3, [r7, #16]
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c90:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	78db      	ldrb	r3, [r3, #3]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d020      	beq.n	8005ce2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cb6:	81bb      	strh	r3, [r7, #12]
 8005cb8:	89bb      	ldrh	r3, [r7, #12]
 8005cba:	f083 0320 	eor.w	r3, r3, #32
 8005cbe:	81bb      	strh	r3, [r7, #12]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	441a      	add	r2, r3
 8005cca:	89bb      	ldrh	r3, [r7, #12]
 8005ccc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005cd0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	8013      	strh	r3, [r2, #0]
 8005ce0:	e2d5      	b.n	800628e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	781b      	ldrb	r3, [r3, #0]
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	881b      	ldrh	r3, [r3, #0]
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cf4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005cf8:	81fb      	strh	r3, [r7, #14]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	441a      	add	r2, r3
 8005d04:	89fb      	ldrh	r3, [r7, #14]
 8005d06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d0e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005d12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	8013      	strh	r3, [r2, #0]
 8005d1a:	e2b8      	b.n	800628e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	4413      	add	r3, r2
 8005d2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	011a      	lsls	r2, r3, #4
 8005d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	88db      	ldrh	r3, [r3, #6]
 8005d44:	085b      	lsrs	r3, r3, #1
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	b29a      	uxth	r2, r3
 8005d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d60:	4413      	add	r3, r2
 8005d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	011a      	lsls	r2, r3, #4
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	4413      	add	r3, r2
 8005d6e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	881b      	ldrh	r3, [r3, #0]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005d7e:	b29a      	uxth	r2, r3
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	801a      	strh	r2, [r3, #0]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d10a      	bne.n	8005da2 <USB_ActivateEndpoint+0x28a>
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	b29b      	uxth	r3, r3
 8005d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9e:	801a      	strh	r2, [r3, #0]
 8005da0:	e039      	b.n	8005e16 <USB_ActivateEndpoint+0x2fe>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b3e      	cmp	r3, #62	@ 0x3e
 8005da8:	d818      	bhi.n	8005ddc <USB_ActivateEndpoint+0x2c4>
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	085b      	lsrs	r3, r3, #1
 8005db0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <USB_ActivateEndpoint+0x2ac>
 8005dbe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dc0:	3301      	adds	r3, #1
 8005dc2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc6:	881b      	ldrh	r3, [r3, #0]
 8005dc8:	b29a      	uxth	r2, r3
 8005dca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	029b      	lsls	r3, r3, #10
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	801a      	strh	r2, [r3, #0]
 8005dda:	e01c      	b.n	8005e16 <USB_ActivateEndpoint+0x2fe>
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691b      	ldr	r3, [r3, #16]
 8005de0:	095b      	lsrs	r3, r3, #5
 8005de2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	f003 031f 	and.w	r3, r3, #31
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d102      	bne.n	8005df6 <USB_ActivateEndpoint+0x2de>
 8005df0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005df2:	3b01      	subs	r3, #1
 8005df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df8:	881b      	ldrh	r3, [r3, #0]
 8005dfa:	b29a      	uxth	r2, r3
 8005dfc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	029b      	lsls	r3, r3, #10
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	4313      	orrs	r3, r2
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e10:	b29a      	uxth	r2, r3
 8005e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	881b      	ldrh	r3, [r3, #0]
 8005e22:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005e24:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005e26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01b      	beq.n	8005e66 <USB_ActivateEndpoint+0x34e>
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	4413      	add	r3, r2
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e44:	843b      	strh	r3, [r7, #32]
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	441a      	add	r2, r3
 8005e50:	8c3b      	ldrh	r3, [r7, #32]
 8005e52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e5a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005e5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d124      	bne.n	8005eb8 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	4413      	add	r3, r2
 8005e78:	881b      	ldrh	r3, [r3, #0]
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e84:	83bb      	strh	r3, [r7, #28]
 8005e86:	8bbb      	ldrh	r3, [r7, #28]
 8005e88:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005e8c:	83bb      	strh	r3, [r7, #28]
 8005e8e:	8bbb      	ldrh	r3, [r7, #28]
 8005e90:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e94:	83bb      	strh	r3, [r7, #28]
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	441a      	add	r2, r3
 8005ea0:	8bbb      	ldrh	r3, [r7, #28]
 8005ea2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ea6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eaa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005eae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	8013      	strh	r3, [r2, #0]
 8005eb6:	e1ea      	b.n	800628e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	881b      	ldrh	r3, [r3, #0]
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005eca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ece:	83fb      	strh	r3, [r7, #30]
 8005ed0:	8bfb      	ldrh	r3, [r7, #30]
 8005ed2:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ed6:	83fb      	strh	r3, [r7, #30]
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	781b      	ldrb	r3, [r3, #0]
 8005ede:	009b      	lsls	r3, r3, #2
 8005ee0:	441a      	add	r2, r3
 8005ee2:	8bfb      	ldrh	r3, [r7, #30]
 8005ee4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ee8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ef0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	8013      	strh	r3, [r2, #0]
 8005ef8:	e1c9      	b.n	800628e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	78db      	ldrb	r3, [r3, #3]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d11e      	bne.n	8005f40 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	881b      	ldrh	r3, [r3, #0]
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f14:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f18:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	441a      	add	r2, r3
 8005f26:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005f2a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f2e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f32:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005f36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	8013      	strh	r3, [r2, #0]
 8005f3e:	e01d      	b.n	8005f7c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	4413      	add	r3, r2
 8005f4a:	881b      	ldrh	r3, [r3, #0]
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f56:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	781b      	ldrb	r3, [r3, #0]
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	441a      	add	r2, r3
 8005f64:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005f68:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f6c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f70:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005f74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f8c:	4413      	add	r3, r2
 8005f8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f9e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	891b      	ldrh	r3, [r3, #8]
 8005fa4:	085b      	lsrs	r3, r3, #1
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fc0:	4413      	add	r3, r2
 8005fc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	011a      	lsls	r2, r3, #4
 8005fca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005fd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	895b      	ldrh	r3, [r3, #10]
 8005fd8:	085b      	lsrs	r3, r3, #1
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fe2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785b      	ldrb	r3, [r3, #1]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 8093 	bne.w	8006114 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	881b      	ldrh	r3, [r3, #0]
 8005ffa:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01b      	beq.n	8006042 <USB_ActivateEndpoint+0x52a>
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	b29b      	uxth	r3, r3
 8006018:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800601c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006020:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006036:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8006050:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8006052:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d01b      	beq.n	8006092 <USB_ActivateEndpoint+0x57a>
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	4413      	add	r3, r2
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	b29b      	uxth	r3, r3
 8006068:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800606c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006070:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	441a      	add	r2, r3
 800607c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800607e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006082:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006086:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800608e:	b29b      	uxth	r3, r3
 8006090:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	4413      	add	r3, r2
 800609c:	881b      	ldrh	r3, [r3, #0]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060a8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80060aa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060ac:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 80060b0:	873b      	strh	r3, [r7, #56]	@ 0x38
 80060b2:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060b4:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80060b8:	873b      	strh	r3, [r7, #56]	@ 0x38
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	781b      	ldrb	r3, [r3, #0]
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	441a      	add	r2, r3
 80060c4:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80060d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	4413      	add	r3, r2
 80060e4:	881b      	ldrh	r3, [r3, #0]
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	781b      	ldrb	r3, [r3, #0]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	441a      	add	r2, r3
 80060fc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80060fe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006102:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006106:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800610a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800610e:	b29b      	uxth	r3, r3
 8006110:	8013      	strh	r3, [r2, #0]
 8006112:	e0bc      	b.n	800628e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	781b      	ldrb	r3, [r3, #0]
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006128:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d01d      	beq.n	800616c <USB_ActivateEndpoint+0x654>
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006142:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006146:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	781b      	ldrb	r3, [r3, #0]
 8006150:	009b      	lsls	r3, r3, #2
 8006152:	441a      	add	r2, r3
 8006154:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8006158:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800615c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006160:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006164:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006168:	b29b      	uxth	r3, r3
 800616a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	781b      	ldrb	r3, [r3, #0]
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	4413      	add	r3, r2
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800617c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8006180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006184:	2b00      	cmp	r3, #0
 8006186:	d01d      	beq.n	80061c4 <USB_ActivateEndpoint+0x6ac>
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	4413      	add	r3, r2
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800619a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619e:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80061b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80061c0:	b29b      	uxth	r3, r3
 80061c2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	78db      	ldrb	r3, [r3, #3]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d024      	beq.n	8006216 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4413      	add	r3, r2
 80061d6:	881b      	ldrh	r3, [r3, #0]
 80061d8:	b29b      	uxth	r3, r3
 80061da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80061de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061e2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80061e6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80061ea:	f083 0320 	eor.w	r3, r3, #32
 80061ee:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	441a      	add	r2, r3
 80061fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006200:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006204:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006208:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800620c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006210:	b29b      	uxth	r3, r3
 8006212:	8013      	strh	r3, [r2, #0]
 8006214:	e01d      	b.n	8006252 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	4413      	add	r3, r2
 8006220:	881b      	ldrh	r3, [r3, #0]
 8006222:	b29b      	uxth	r3, r3
 8006224:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006228:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800622c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	441a      	add	r2, r3
 800623a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800623e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006242:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006246:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800624a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800624e:	b29b      	uxth	r3, r3
 8006250:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	4413      	add	r3, r2
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006268:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	781b      	ldrb	r3, [r3, #0]
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	441a      	add	r2, r3
 8006276:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800627a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800627e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800628a:	b29b      	uxth	r3, r3
 800628c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800628e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8006292:	4618      	mov	r0, r3
 8006294:	3774      	adds	r7, #116	@ 0x74
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop

080062a0 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b08d      	sub	sp, #52	@ 0x34
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	7b1b      	ldrb	r3, [r3, #12]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	f040 808e 	bne.w	80063d0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	785b      	ldrb	r3, [r3, #1]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d044      	beq.n	8006346 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	881b      	ldrh	r3, [r3, #0]
 80062c8:	81bb      	strh	r3, [r7, #12]
 80062ca:	89bb      	ldrh	r3, [r7, #12]
 80062cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d01b      	beq.n	800630c <USB_DeactivateEndpoint+0x6c>
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4413      	add	r3, r2
 80062de:	881b      	ldrh	r3, [r3, #0]
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ea:	817b      	strh	r3, [r7, #10]
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	009b      	lsls	r3, r3, #2
 80062f4:	441a      	add	r2, r3
 80062f6:	897b      	ldrh	r3, [r7, #10]
 80062f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006300:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006304:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006308:	b29b      	uxth	r3, r3
 800630a:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	881b      	ldrh	r3, [r3, #0]
 8006318:	b29b      	uxth	r3, r3
 800631a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800631e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006322:	813b      	strh	r3, [r7, #8]
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	441a      	add	r2, r3
 800632e:	893b      	ldrh	r3, [r7, #8]
 8006330:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006334:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800633c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006340:	b29b      	uxth	r3, r3
 8006342:	8013      	strh	r3, [r2, #0]
 8006344:	e192      	b.n	800666c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	4413      	add	r3, r2
 8006350:	881b      	ldrh	r3, [r3, #0]
 8006352:	827b      	strh	r3, [r7, #18]
 8006354:	8a7b      	ldrh	r3, [r7, #18]
 8006356:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800635a:	2b00      	cmp	r3, #0
 800635c:	d01b      	beq.n	8006396 <USB_DeactivateEndpoint+0xf6>
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	881b      	ldrh	r3, [r3, #0]
 800636a:	b29b      	uxth	r3, r3
 800636c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006370:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006374:	823b      	strh	r3, [r7, #16]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	781b      	ldrb	r3, [r3, #0]
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	441a      	add	r2, r3
 8006380:	8a3b      	ldrh	r3, [r7, #16]
 8006382:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006386:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800638a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800638e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006392:	b29b      	uxth	r3, r3
 8006394:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	4413      	add	r3, r2
 80063a0:	881b      	ldrh	r3, [r3, #0]
 80063a2:	b29b      	uxth	r3, r3
 80063a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80063a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063ac:	81fb      	strh	r3, [r7, #14]
 80063ae:	687a      	ldr	r2, [r7, #4]
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	441a      	add	r2, r3
 80063b8:	89fb      	ldrh	r3, [r7, #14]
 80063ba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063be:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	8013      	strh	r3, [r2, #0]
 80063ce:	e14d      	b.n	800666c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	f040 80a5 	bne.w	8006524 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	781b      	ldrb	r3, [r3, #0]
 80063e0:	009b      	lsls	r3, r3, #2
 80063e2:	4413      	add	r3, r2
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	843b      	strh	r3, [r7, #32]
 80063e8:	8c3b      	ldrh	r3, [r7, #32]
 80063ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d01b      	beq.n	800642a <USB_DeactivateEndpoint+0x18a>
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	881b      	ldrh	r3, [r3, #0]
 80063fe:	b29b      	uxth	r3, r3
 8006400:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006404:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006408:	83fb      	strh	r3, [r7, #30]
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	441a      	add	r2, r3
 8006414:	8bfb      	ldrh	r3, [r7, #30]
 8006416:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800641a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800641e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006422:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006426:	b29b      	uxth	r3, r3
 8006428:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	83bb      	strh	r3, [r7, #28]
 8006438:	8bbb      	ldrh	r3, [r7, #28]
 800643a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d01b      	beq.n	800647a <USB_DeactivateEndpoint+0x1da>
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	881b      	ldrh	r3, [r3, #0]
 800644e:	b29b      	uxth	r3, r3
 8006450:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006458:	837b      	strh	r3, [r7, #26]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	441a      	add	r2, r3
 8006464:	8b7b      	ldrh	r3, [r7, #26]
 8006466:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800646a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800646e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006472:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006476:	b29b      	uxth	r3, r3
 8006478:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	b29b      	uxth	r3, r3
 8006488:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800648c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006490:	833b      	strh	r3, [r7, #24]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	441a      	add	r2, r3
 800649c:	8b3b      	ldrh	r3, [r7, #24]
 800649e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	781b      	ldrb	r3, [r3, #0]
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	4413      	add	r3, r2
 80064bc:	881b      	ldrh	r3, [r3, #0]
 80064be:	b29b      	uxth	r3, r3
 80064c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80064c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064c8:	82fb      	strh	r3, [r7, #22]
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	441a      	add	r2, r3
 80064d4:	8afb      	ldrh	r3, [r7, #22]
 80064d6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064da:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80064e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ea:	687a      	ldr	r2, [r7, #4]
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	009b      	lsls	r3, r3, #2
 80064f2:	4413      	add	r3, r2
 80064f4:	881b      	ldrh	r3, [r3, #0]
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006500:	82bb      	strh	r3, [r7, #20]
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	441a      	add	r2, r3
 800650c:	8abb      	ldrh	r3, [r7, #20]
 800650e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006512:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006516:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800651a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800651e:	b29b      	uxth	r3, r3
 8006520:	8013      	strh	r3, [r2, #0]
 8006522:	e0a3      	b.n	800666c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	4413      	add	r3, r2
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006532:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006534:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01b      	beq.n	8006574 <USB_DeactivateEndpoint+0x2d4>
 800653c:	687a      	ldr	r2, [r7, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4413      	add	r3, r2
 8006546:	881b      	ldrh	r3, [r3, #0]
 8006548:	b29b      	uxth	r3, r3
 800654a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800654e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006552:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	441a      	add	r2, r3
 800655e:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006560:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006564:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006568:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800656c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006570:	b29b      	uxth	r3, r3
 8006572:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006582:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006584:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01b      	beq.n	80065c4 <USB_DeactivateEndpoint+0x324>
 800658c:	687a      	ldr	r2, [r7, #4]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	009b      	lsls	r3, r3, #2
 8006594:	4413      	add	r3, r2
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	b29b      	uxth	r3, r3
 800659a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800659e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065a2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065da:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	441a      	add	r2, r3
 80065e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80065e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065ec:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065f0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80065f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	4413      	add	r3, r2
 8006606:	881b      	ldrh	r3, [r3, #0]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800660e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006612:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006614:	687a      	ldr	r2, [r7, #4]
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	441a      	add	r2, r3
 800661e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006620:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006624:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006628:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800662c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006630:	b29b      	uxth	r3, r3
 8006632:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	781b      	ldrb	r3, [r3, #0]
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	881b      	ldrh	r3, [r3, #0]
 8006640:	b29b      	uxth	r3, r3
 8006642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800664a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	781b      	ldrb	r3, [r3, #0]
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	441a      	add	r2, r3
 8006656:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006658:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800665c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006660:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006664:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006668:	b29b      	uxth	r3, r3
 800666a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3734      	adds	r7, #52	@ 0x34
 8006672:	46bd      	mov	sp, r7
 8006674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006678:	4770      	bx	lr

0800667a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b0c2      	sub	sp, #264	@ 0x108
 800667e:	af00      	add	r7, sp, #0
 8006680:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006684:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006688:	6018      	str	r0, [r3, #0]
 800668a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006692:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	f040 86b7 	bne.w	8007414 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80066a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	699a      	ldr	r2, [r3, #24]
 80066b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d908      	bls.n	80066d4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80066d2:	e007      	b.n	80066e4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	699b      	ldr	r3, [r3, #24]
 80066e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	7b1b      	ldrb	r3, [r3, #12]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d13a      	bne.n	800676a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	6959      	ldr	r1, [r3, #20]
 8006700:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006704:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	88da      	ldrh	r2, [r3, #6]
 800670c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006710:	b29b      	uxth	r3, r3
 8006712:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006716:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800671a:	6800      	ldr	r0, [r0, #0]
 800671c:	f001 fc8d 	bl	800803a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006720:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006724:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	613b      	str	r3, [r7, #16]
 8006744:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006748:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	011a      	lsls	r2, r3, #4
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	4413      	add	r3, r2
 8006756:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800675a:	60fb      	str	r3, [r7, #12]
 800675c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006760:	b29a      	uxth	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	801a      	strh	r2, [r3, #0]
 8006766:	f000 be1f 	b.w	80073a8 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800676a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800676e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	78db      	ldrb	r3, [r3, #3]
 8006776:	2b02      	cmp	r3, #2
 8006778:	f040 8462 	bne.w	8007040 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	6a1a      	ldr	r2, [r3, #32]
 8006788:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	f240 83df 	bls.w	8006f58 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800679a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800679e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	881b      	ldrh	r3, [r3, #0]
 80067b6:	b29b      	uxth	r3, r3
 80067b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80067bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80067c0:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 80067c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	441a      	add	r2, r3
 80067de:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80067e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80067e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80067ea:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80067ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80067f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	6a1a      	ldr	r2, [r3, #32]
 8006802:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006806:	1ad2      	subs	r2, r2, r3
 8006808:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800680c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006814:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006818:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006822:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	881b      	ldrh	r3, [r3, #0]
 8006830:	b29b      	uxth	r3, r3
 8006832:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006836:	2b00      	cmp	r3, #0
 8006838:	f000 81c7 	beq.w	8006bca <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800683c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	633b      	str	r3, [r7, #48]	@ 0x30
 8006848:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800684c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	785b      	ldrb	r3, [r3, #1]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d177      	bne.n	8006948 <USB_EPStartXfer+0x2ce>
 8006858:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800685c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006864:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006868:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006872:	b29b      	uxth	r3, r3
 8006874:	461a      	mov	r2, r3
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	4413      	add	r3, r2
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800687c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006880:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	011a      	lsls	r2, r3, #4
 800688a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688c:	4413      	add	r3, r2
 800688e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006892:	627b      	str	r3, [r7, #36]	@ 0x24
 8006894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006896:	881b      	ldrh	r3, [r3, #0]
 8006898:	b29b      	uxth	r3, r3
 800689a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800689e:	b29a      	uxth	r2, r3
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	801a      	strh	r2, [r3, #0]
 80068a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10a      	bne.n	80068c2 <USB_EPStartXfer+0x248>
 80068ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ae:	881b      	ldrh	r3, [r3, #0]
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068ba:	b29a      	uxth	r2, r3
 80068bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068be:	801a      	strh	r2, [r3, #0]
 80068c0:	e067      	b.n	8006992 <USB_EPStartXfer+0x318>
 80068c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80068c8:	d81c      	bhi.n	8006904 <USB_EPStartXfer+0x28a>
 80068ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d8:	f003 0301 	and.w	r3, r3, #1
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d004      	beq.n	80068ea <USB_EPStartXfer+0x270>
 80068e0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068e4:	3301      	adds	r3, #1
 80068e6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80068ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ec:	881b      	ldrh	r3, [r3, #0]
 80068ee:	b29a      	uxth	r2, r3
 80068f0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80068f4:	b29b      	uxth	r3, r3
 80068f6:	029b      	lsls	r3, r3, #10
 80068f8:	b29b      	uxth	r3, r3
 80068fa:	4313      	orrs	r3, r2
 80068fc:	b29a      	uxth	r2, r3
 80068fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006900:	801a      	strh	r2, [r3, #0]
 8006902:	e046      	b.n	8006992 <USB_EPStartXfer+0x318>
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800690e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006912:	f003 031f 	and.w	r3, r3, #31
 8006916:	2b00      	cmp	r3, #0
 8006918:	d104      	bne.n	8006924 <USB_EPStartXfer+0x2aa>
 800691a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800691e:	3b01      	subs	r3, #1
 8006920:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006926:	881b      	ldrh	r3, [r3, #0]
 8006928:	b29a      	uxth	r2, r3
 800692a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800692e:	b29b      	uxth	r3, r3
 8006930:	029b      	lsls	r3, r3, #10
 8006932:	b29b      	uxth	r3, r3
 8006934:	4313      	orrs	r3, r2
 8006936:	b29b      	uxth	r3, r3
 8006938:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800693c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006940:	b29a      	uxth	r2, r3
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	801a      	strh	r2, [r3, #0]
 8006946:	e024      	b.n	8006992 <USB_EPStartXfer+0x318>
 8006948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800694c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d11c      	bne.n	8006992 <USB_EPStartXfer+0x318>
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006966:	b29b      	uxth	r3, r3
 8006968:	461a      	mov	r2, r3
 800696a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696c:	4413      	add	r3, r2
 800696e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	781b      	ldrb	r3, [r3, #0]
 800697c:	011a      	lsls	r2, r3, #4
 800697e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006980:	4413      	add	r3, r2
 8006982:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006986:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006988:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800698c:	b29a      	uxth	r2, r3
 800698e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006990:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006992:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006996:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	895b      	ldrh	r3, [r3, #10]
 800699e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80069a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6959      	ldr	r1, [r3, #20]
 80069ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069b2:	b29b      	uxth	r3, r3
 80069b4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80069b8:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80069bc:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80069c0:	6800      	ldr	r0, [r0, #0]
 80069c2:	f001 fb3a 	bl	800803a <USB_WritePMA>
            ep->xfer_buff += len;
 80069c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069d6:	441a      	add	r2, r3
 80069d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6a1a      	ldr	r2, [r3, #32]
 80069f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d90f      	bls.n	8006a20 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6a1a      	ldr	r2, [r3, #32]
 8006a0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a10:	1ad2      	subs	r2, r2, r3
 8006a12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	621a      	str	r2, [r3, #32]
 8006a1e:	e00e      	b.n	8006a3e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006a20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d177      	bne.n	8006b3e <USB_EPStartXfer+0x4c4>
 8006a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	4413      	add	r3, r2
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006a76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	781b      	ldrb	r3, [r3, #0]
 8006a7e:	011a      	lsls	r2, r3, #4
 8006a80:	69bb      	ldr	r3, [r7, #24]
 8006a82:	4413      	add	r3, r2
 8006a84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d10a      	bne.n	8006ab8 <USB_EPStartXfer+0x43e>
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	801a      	strh	r2, [r3, #0]
 8006ab6:	e06d      	b.n	8006b94 <USB_EPStartXfer+0x51a>
 8006ab8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006abc:	2b3e      	cmp	r3, #62	@ 0x3e
 8006abe:	d81c      	bhi.n	8006afa <USB_EPStartXfer+0x480>
 8006ac0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ac4:	085b      	lsrs	r3, r3, #1
 8006ac6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ace:	f003 0301 	and.w	r3, r3, #1
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d004      	beq.n	8006ae0 <USB_EPStartXfer+0x466>
 8006ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ada:	3301      	adds	r3, #1
 8006adc:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	881b      	ldrh	r3, [r3, #0]
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	029b      	lsls	r3, r3, #10
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	4313      	orrs	r3, r2
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e04c      	b.n	8006b94 <USB_EPStartXfer+0x51a>
 8006afa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006afe:	095b      	lsrs	r3, r3, #5
 8006b00:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b08:	f003 031f 	and.w	r3, r3, #31
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <USB_EPStartXfer+0x4a0>
 8006b10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b14:	3b01      	subs	r3, #1
 8006b16:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	881b      	ldrh	r3, [r3, #0]
 8006b1e:	b29a      	uxth	r2, r3
 8006b20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	029b      	lsls	r3, r3, #10
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	801a      	strh	r2, [r3, #0]
 8006b3c:	e02a      	b.n	8006b94 <USB_EPStartXfer+0x51a>
 8006b3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	785b      	ldrb	r3, [r3, #1]
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d122      	bne.n	8006b94 <USB_EPStartXfer+0x51a>
 8006b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	623b      	str	r3, [r7, #32]
 8006b5a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b5e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	4413      	add	r3, r2
 8006b70:	623b      	str	r3, [r7, #32]
 8006b72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	011a      	lsls	r2, r3, #4
 8006b80:	6a3b      	ldr	r3, [r7, #32]
 8006b82:	4413      	add	r3, r2
 8006b84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	891b      	ldrh	r3, [r3, #8]
 8006ba0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ba4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ba8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6959      	ldr	r1, [r3, #20]
 8006bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb4:	b29b      	uxth	r3, r3
 8006bb6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006bba:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006bbe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006bc2:	6800      	ldr	r0, [r0, #0]
 8006bc4:	f001 fa39 	bl	800803a <USB_WritePMA>
 8006bc8:	e3ee      	b.n	80073a8 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006bca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	785b      	ldrb	r3, [r3, #1]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d177      	bne.n	8006cca <USB_EPStartXfer+0x650>
 8006bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006be6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006bea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	461a      	mov	r2, r3
 8006bf8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bfa:	4413      	add	r3, r2
 8006bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	011a      	lsls	r2, r3, #4
 8006c0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c0e:	4413      	add	r3, r2
 8006c10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c18:	881b      	ldrh	r3, [r3, #0]
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c24:	801a      	strh	r2, [r3, #0]
 8006c26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d10a      	bne.n	8006c44 <USB_EPStartXfer+0x5ca>
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c30:	881b      	ldrh	r3, [r3, #0]
 8006c32:	b29b      	uxth	r3, r3
 8006c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c40:	801a      	strh	r2, [r3, #0]
 8006c42:	e06d      	b.n	8006d20 <USB_EPStartXfer+0x6a6>
 8006c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c48:	2b3e      	cmp	r3, #62	@ 0x3e
 8006c4a:	d81c      	bhi.n	8006c86 <USB_EPStartXfer+0x60c>
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c50:	085b      	lsrs	r3, r3, #1
 8006c52:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d004      	beq.n	8006c6c <USB_EPStartXfer+0x5f2>
 8006c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c66:	3301      	adds	r3, #1
 8006c68:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6e:	881b      	ldrh	r3, [r3, #0]
 8006c70:	b29a      	uxth	r2, r3
 8006c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c76:	b29b      	uxth	r3, r3
 8006c78:	029b      	lsls	r3, r3, #10
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	b29a      	uxth	r2, r3
 8006c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c82:	801a      	strh	r2, [r3, #0]
 8006c84:	e04c      	b.n	8006d20 <USB_EPStartXfer+0x6a6>
 8006c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c8a:	095b      	lsrs	r3, r3, #5
 8006c8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c94:	f003 031f 	and.w	r3, r3, #31
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d104      	bne.n	8006ca6 <USB_EPStartXfer+0x62c>
 8006c9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006ca0:	3b01      	subs	r3, #1
 8006ca2:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29a      	uxth	r2, r3
 8006cac:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	029b      	lsls	r3, r3, #10
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc6:	801a      	strh	r2, [r3, #0]
 8006cc8:	e02a      	b.n	8006d20 <USB_EPStartXfer+0x6a6>
 8006cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	785b      	ldrb	r3, [r3, #1]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d122      	bne.n	8006d20 <USB_EPStartXfer+0x6a6>
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cea:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006cf4:	b29b      	uxth	r3, r3
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006cfa:	4413      	add	r3, r2
 8006cfc:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cfe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	011a      	lsls	r2, r3, #4
 8006d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d0e:	4413      	add	r3, r2
 8006d10:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d1a:	b29a      	uxth	r2, r3
 8006d1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d1e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006d20:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d24:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	891b      	ldrh	r3, [r3, #8]
 8006d2c:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	6959      	ldr	r1, [r3, #20]
 8006d3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d40:	b29b      	uxth	r3, r3
 8006d42:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006d46:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006d4a:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006d4e:	6800      	ldr	r0, [r0, #0]
 8006d50:	f001 f973 	bl	800803a <USB_WritePMA>
            ep->xfer_buff += len;
 8006d54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	695a      	ldr	r2, [r3, #20]
 8006d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d64:	441a      	add	r2, r3
 8006d66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	6a1a      	ldr	r2, [r3, #32]
 8006d7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	429a      	cmp	r2, r3
 8006d8c:	d90f      	bls.n	8006dae <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006d8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d92:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	6a1a      	ldr	r2, [r3, #32]
 8006d9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d9e:	1ad2      	subs	r2, r2, r3
 8006da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006da4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	621a      	str	r2, [r3, #32]
 8006dac:	e00e      	b.n	8006dcc <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006dae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006db2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006dbe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dc2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006dcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dd0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dd8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ddc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	785b      	ldrb	r3, [r3, #1]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d177      	bne.n	8006ed8 <USB_EPStartXfer+0x85e>
 8006de8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006dec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006df4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006df8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	461a      	mov	r2, r3
 8006e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e08:	4413      	add	r3, r2
 8006e0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	011a      	lsls	r2, r3, #4
 8006e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e26:	881b      	ldrh	r3, [r3, #0]
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e2e:	b29a      	uxth	r2, r3
 8006e30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e32:	801a      	strh	r2, [r3, #0]
 8006e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10a      	bne.n	8006e52 <USB_EPStartXfer+0x7d8>
 8006e3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3e:	881b      	ldrh	r3, [r3, #0]
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e46:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e4a:	b29a      	uxth	r2, r3
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e4e:	801a      	strh	r2, [r3, #0]
 8006e50:	e067      	b.n	8006f22 <USB_EPStartXfer+0x8a8>
 8006e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e56:	2b3e      	cmp	r3, #62	@ 0x3e
 8006e58:	d81c      	bhi.n	8006e94 <USB_EPStartXfer+0x81a>
 8006e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e5e:	085b      	lsrs	r3, r3, #1
 8006e60:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d004      	beq.n	8006e7a <USB_EPStartXfer+0x800>
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e74:	3301      	adds	r3, #1
 8006e76:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7c:	881b      	ldrh	r3, [r3, #0]
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	029b      	lsls	r3, r3, #10
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	b29a      	uxth	r2, r3
 8006e8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e90:	801a      	strh	r2, [r3, #0]
 8006e92:	e046      	b.n	8006f22 <USB_EPStartXfer+0x8a8>
 8006e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ea2:	f003 031f 	and.w	r3, r3, #31
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d104      	bne.n	8006eb4 <USB_EPStartXfer+0x83a>
 8006eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006eb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eb6:	881b      	ldrh	r3, [r3, #0]
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ebe:	b29b      	uxth	r3, r3
 8006ec0:	029b      	lsls	r3, r3, #10
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ecc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ed0:	b29a      	uxth	r2, r3
 8006ed2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ed4:	801a      	strh	r2, [r3, #0]
 8006ed6:	e024      	b.n	8006f22 <USB_EPStartXfer+0x8a8>
 8006ed8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006edc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	785b      	ldrb	r3, [r3, #1]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d11c      	bne.n	8006f22 <USB_EPStartXfer+0x8a8>
 8006ee8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006eec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	461a      	mov	r2, r3
 8006efa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006efc:	4413      	add	r3, r2
 8006efe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	011a      	lsls	r2, r3, #4
 8006f0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006f10:	4413      	add	r3, r2
 8006f12:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f1c:	b29a      	uxth	r2, r3
 8006f1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f20:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006f22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f26:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	895b      	ldrh	r3, [r3, #10]
 8006f2e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	6959      	ldr	r1, [r3, #20]
 8006f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f48:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f4c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006f50:	6800      	ldr	r0, [r0, #0]
 8006f52:	f001 f872 	bl	800803a <USB_WritePMA>
 8006f56:	e227      	b.n	80073a8 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006f58:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f5c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6a1b      	ldr	r3, [r3, #32]
 8006f64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006f68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f6c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	4413      	add	r3, r2
 8006f82:	881b      	ldrh	r3, [r3, #0]
 8006f84:	b29b      	uxth	r3, r3
 8006f86:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006f8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f8e:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006f92:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f96:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fa0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	009b      	lsls	r3, r3, #2
 8006faa:	441a      	add	r2, r3
 8006fac:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006fb0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fb4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fb8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006fc4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fc8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fe4:	4413      	add	r3, r2
 8006fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fe8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	011a      	lsls	r2, r3, #4
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	4413      	add	r3, r2
 8006ffa:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006ffe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007000:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007004:	b29a      	uxth	r2, r3
 8007006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007008:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800700a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	891b      	ldrh	r3, [r3, #8]
 8007016:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800701a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	6959      	ldr	r1, [r3, #20]
 8007026:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800702a:	b29b      	uxth	r3, r3
 800702c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007030:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007034:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007038:	6800      	ldr	r0, [r0, #0]
 800703a:	f000 fffe 	bl	800803a <USB_WritePMA>
 800703e:	e1b3      	b.n	80073a8 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8007040:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007044:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	6a1a      	ldr	r2, [r3, #32]
 800704c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007050:	1ad2      	subs	r2, r2, r3
 8007052:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800705e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007062:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800706c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	4413      	add	r3, r2
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b29b      	uxth	r3, r3
 800707c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	f000 80c6 	beq.w	8007212 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007086:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800708a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	673b      	str	r3, [r7, #112]	@ 0x70
 8007092:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007096:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	785b      	ldrb	r3, [r3, #1]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d177      	bne.n	8007192 <USB_EPStartXfer+0xb18>
 80070a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80070bc:	b29b      	uxth	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070c2:	4413      	add	r3, r2
 80070c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070c6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070ca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	011a      	lsls	r2, r3, #4
 80070d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070d6:	4413      	add	r3, r2
 80070d8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80070dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80070de:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	b29b      	uxth	r3, r3
 80070e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070e8:	b29a      	uxth	r2, r3
 80070ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070ec:	801a      	strh	r2, [r3, #0]
 80070ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d10a      	bne.n	800710c <USB_EPStartXfer+0xa92>
 80070f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007104:	b29a      	uxth	r2, r3
 8007106:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007108:	801a      	strh	r2, [r3, #0]
 800710a:	e067      	b.n	80071dc <USB_EPStartXfer+0xb62>
 800710c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007110:	2b3e      	cmp	r3, #62	@ 0x3e
 8007112:	d81c      	bhi.n	800714e <USB_EPStartXfer+0xad4>
 8007114:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007118:	085b      	lsrs	r3, r3, #1
 800711a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800711e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d004      	beq.n	8007134 <USB_EPStartXfer+0xaba>
 800712a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800712e:	3301      	adds	r3, #1
 8007130:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007136:	881b      	ldrh	r3, [r3, #0]
 8007138:	b29a      	uxth	r2, r3
 800713a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800713e:	b29b      	uxth	r3, r3
 8007140:	029b      	lsls	r3, r3, #10
 8007142:	b29b      	uxth	r3, r3
 8007144:	4313      	orrs	r3, r2
 8007146:	b29a      	uxth	r2, r3
 8007148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800714a:	801a      	strh	r2, [r3, #0]
 800714c:	e046      	b.n	80071dc <USB_EPStartXfer+0xb62>
 800714e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007152:	095b      	lsrs	r3, r3, #5
 8007154:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800715c:	f003 031f 	and.w	r3, r3, #31
 8007160:	2b00      	cmp	r3, #0
 8007162:	d104      	bne.n	800716e <USB_EPStartXfer+0xaf4>
 8007164:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007168:	3b01      	subs	r3, #1
 800716a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800716e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007170:	881b      	ldrh	r3, [r3, #0]
 8007172:	b29a      	uxth	r2, r3
 8007174:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007178:	b29b      	uxth	r3, r3
 800717a:	029b      	lsls	r3, r3, #10
 800717c:	b29b      	uxth	r3, r3
 800717e:	4313      	orrs	r3, r2
 8007180:	b29b      	uxth	r3, r3
 8007182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800718a:	b29a      	uxth	r2, r3
 800718c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800718e:	801a      	strh	r2, [r3, #0]
 8007190:	e024      	b.n	80071dc <USB_EPStartXfer+0xb62>
 8007192:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b01      	cmp	r3, #1
 80071a0:	d11c      	bne.n	80071dc <USB_EPStartXfer+0xb62>
 80071a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071b0:	b29b      	uxth	r3, r3
 80071b2:	461a      	mov	r2, r3
 80071b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071b6:	4413      	add	r3, r2
 80071b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80071ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	011a      	lsls	r2, r3, #4
 80071c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071ca:	4413      	add	r3, r2
 80071cc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80071d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80071d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071d6:	b29a      	uxth	r2, r3
 80071d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80071dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	895b      	ldrh	r3, [r3, #10]
 80071e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80071ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6959      	ldr	r1, [r3, #20]
 80071f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007202:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007206:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800720a:	6800      	ldr	r0, [r0, #0]
 800720c:	f000 ff15 	bl	800803a <USB_WritePMA>
 8007210:	e0ca      	b.n	80073a8 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007212:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007216:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d177      	bne.n	8007312 <USB_EPStartXfer+0xc98>
 8007222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007226:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800722e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007232:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800723c:	b29b      	uxth	r3, r3
 800723e:	461a      	mov	r2, r3
 8007240:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007242:	4413      	add	r3, r2
 8007244:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007246:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800724a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	011a      	lsls	r2, r3, #4
 8007254:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007256:	4413      	add	r3, r2
 8007258:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800725c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800725e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007260:	881b      	ldrh	r3, [r3, #0]
 8007262:	b29b      	uxth	r3, r3
 8007264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007268:	b29a      	uxth	r2, r3
 800726a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800726c:	801a      	strh	r2, [r3, #0]
 800726e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10a      	bne.n	800728c <USB_EPStartXfer+0xc12>
 8007276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007278:	881b      	ldrh	r3, [r3, #0]
 800727a:	b29b      	uxth	r3, r3
 800727c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007280:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007284:	b29a      	uxth	r2, r3
 8007286:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007288:	801a      	strh	r2, [r3, #0]
 800728a:	e073      	b.n	8007374 <USB_EPStartXfer+0xcfa>
 800728c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007290:	2b3e      	cmp	r3, #62	@ 0x3e
 8007292:	d81c      	bhi.n	80072ce <USB_EPStartXfer+0xc54>
 8007294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007298:	085b      	lsrs	r3, r3, #1
 800729a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800729e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <USB_EPStartXfer+0xc3a>
 80072aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072ae:	3301      	adds	r3, #1
 80072b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072b6:	881b      	ldrh	r3, [r3, #0]
 80072b8:	b29a      	uxth	r2, r3
 80072ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072be:	b29b      	uxth	r3, r3
 80072c0:	029b      	lsls	r3, r3, #10
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	4313      	orrs	r3, r2
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072ca:	801a      	strh	r2, [r3, #0]
 80072cc:	e052      	b.n	8007374 <USB_EPStartXfer+0xcfa>
 80072ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d2:	095b      	lsrs	r3, r3, #5
 80072d4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072dc:	f003 031f 	and.w	r3, r3, #31
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d104      	bne.n	80072ee <USB_EPStartXfer+0xc74>
 80072e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072e8:	3b01      	subs	r3, #1
 80072ea:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80072ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072f0:	881b      	ldrh	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80072f8:	b29b      	uxth	r3, r3
 80072fa:	029b      	lsls	r3, r3, #10
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	4313      	orrs	r3, r2
 8007300:	b29b      	uxth	r3, r3
 8007302:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007306:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800730a:	b29a      	uxth	r2, r3
 800730c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800730e:	801a      	strh	r2, [r3, #0]
 8007310:	e030      	b.n	8007374 <USB_EPStartXfer+0xcfa>
 8007312:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007316:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	785b      	ldrb	r3, [r3, #1]
 800731e:	2b01      	cmp	r3, #1
 8007320:	d128      	bne.n	8007374 <USB_EPStartXfer+0xcfa>
 8007322:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007326:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007330:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007334:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800733e:	b29b      	uxth	r3, r3
 8007340:	461a      	mov	r2, r3
 8007342:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007346:	4413      	add	r3, r2
 8007348:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800734c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007350:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	011a      	lsls	r2, r3, #4
 800735a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800735e:	4413      	add	r3, r2
 8007360:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007368:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800736c:	b29a      	uxth	r2, r3
 800736e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007372:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8007374:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007378:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	891b      	ldrh	r3, [r3, #8]
 8007380:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007384:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6959      	ldr	r1, [r3, #20]
 8007390:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007394:	b29b      	uxth	r3, r3
 8007396:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800739a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800739e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80073a2:	6800      	ldr	r0, [r0, #0]
 80073a4:	f000 fe49 	bl	800803a <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80073a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ac:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	881b      	ldrh	r3, [r3, #0]
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073ce:	817b      	strh	r3, [r7, #10]
 80073d0:	897b      	ldrh	r3, [r7, #10]
 80073d2:	f083 0310 	eor.w	r3, r3, #16
 80073d6:	817b      	strh	r3, [r7, #10]
 80073d8:	897b      	ldrh	r3, [r7, #10]
 80073da:	f083 0320 	eor.w	r3, r3, #32
 80073de:	817b      	strh	r3, [r7, #10]
 80073e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073e4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	009b      	lsls	r3, r3, #2
 80073f8:	441a      	add	r2, r3
 80073fa:	897b      	ldrh	r3, [r7, #10]
 80073fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007400:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007404:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007408:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800740c:	b29b      	uxth	r3, r3
 800740e:	8013      	strh	r3, [r2, #0]
 8007410:	f000 bcdf 	b.w	8007dd2 <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007414:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007418:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	2b00      	cmp	r3, #0
 8007422:	f040 80bc 	bne.w	800759e <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007426:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	699a      	ldr	r2, [r3, #24]
 8007432:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007436:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	429a      	cmp	r2, r3
 8007440:	d917      	bls.n	8007472 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8007442:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007446:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 8007452:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007456:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699a      	ldr	r2, [r3, #24]
 800745e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007462:	1ad2      	subs	r2, r2, r3
 8007464:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007468:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	619a      	str	r2, [r3, #24]
 8007470:	e00e      	b.n	8007490 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8007472:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007476:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	699b      	ldr	r3, [r3, #24]
 800747e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 8007482:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007486:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2200      	movs	r2, #0
 800748e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8007490:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007494:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800749e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074a2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	461a      	mov	r2, r3
 80074b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074b4:	4413      	add	r3, r2
 80074b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80074be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	011a      	lsls	r2, r3, #4
 80074c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80074cc:	4413      	add	r3, r2
 80074ce:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80074d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80074d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	b29b      	uxth	r3, r3
 80074de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074e8:	801a      	strh	r2, [r3, #0]
 80074ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d10d      	bne.n	800750e <USB_EPStartXfer+0xe94>
 80074f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074f6:	881b      	ldrh	r3, [r3, #0]
 80074f8:	b29b      	uxth	r3, r3
 80074fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007502:	b29a      	uxth	r2, r3
 8007504:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007508:	801a      	strh	r2, [r3, #0]
 800750a:	f000 bc28 	b.w	8007d5e <USB_EPStartXfer+0x16e4>
 800750e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007512:	2b3e      	cmp	r3, #62	@ 0x3e
 8007514:	d81f      	bhi.n	8007556 <USB_EPStartXfer+0xedc>
 8007516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007520:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007524:	f003 0301 	and.w	r3, r3, #1
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <USB_EPStartXfer+0xebc>
 800752c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007530:	3301      	adds	r3, #1
 8007532:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007536:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800753a:	881b      	ldrh	r3, [r3, #0]
 800753c:	b29a      	uxth	r2, r3
 800753e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007542:	b29b      	uxth	r3, r3
 8007544:	029b      	lsls	r3, r3, #10
 8007546:	b29b      	uxth	r3, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	b29a      	uxth	r2, r3
 800754c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	f000 bc04 	b.w	8007d5e <USB_EPStartXfer+0x16e4>
 8007556:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800755a:	095b      	lsrs	r3, r3, #5
 800755c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007560:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007564:	f003 031f 	and.w	r3, r3, #31
 8007568:	2b00      	cmp	r3, #0
 800756a:	d104      	bne.n	8007576 <USB_EPStartXfer+0xefc>
 800756c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007570:	3b01      	subs	r3, #1
 8007572:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007576:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800757a:	881b      	ldrh	r3, [r3, #0]
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007582:	b29b      	uxth	r3, r3
 8007584:	029b      	lsls	r3, r3, #10
 8007586:	b29b      	uxth	r3, r3
 8007588:	4313      	orrs	r3, r2
 800758a:	b29b      	uxth	r3, r3
 800758c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007590:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007594:	b29a      	uxth	r2, r3
 8007596:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800759a:	801a      	strh	r2, [r3, #0]
 800759c:	e3df      	b.n	8007d5e <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800759e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	78db      	ldrb	r3, [r3, #3]
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	f040 8218 	bne.w	80079e0 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80075b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	785b      	ldrb	r3, [r3, #1]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 809d 	bne.w	80076fc <USB_EPStartXfer+0x1082>
 80075c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075e6:	4413      	add	r3, r2
 80075e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80075ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	011a      	lsls	r2, r3, #4
 80075fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80075fe:	4413      	add	r3, r2
 8007600:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007604:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007608:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800760c:	881b      	ldrh	r3, [r3, #0]
 800760e:	b29b      	uxth	r3, r3
 8007610:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007614:	b29a      	uxth	r2, r3
 8007616:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800761a:	801a      	strh	r2, [r3, #0]
 800761c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007620:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	691b      	ldr	r3, [r3, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d10c      	bne.n	8007646 <USB_EPStartXfer+0xfcc>
 800762c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800763c:	b29a      	uxth	r2, r3
 800763e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007642:	801a      	strh	r2, [r3, #0]
 8007644:	e08f      	b.n	8007766 <USB_EPStartXfer+0x10ec>
 8007646:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800764a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	2b3e      	cmp	r3, #62	@ 0x3e
 8007654:	d826      	bhi.n	80076a4 <USB_EPStartXfer+0x102a>
 8007656:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800765a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	085b      	lsrs	r3, r3, #1
 8007664:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800766c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	691b      	ldr	r3, [r3, #16]
 8007674:	f003 0301 	and.w	r3, r3, #1
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <USB_EPStartXfer+0x100c>
 800767c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007680:	3301      	adds	r3, #1
 8007682:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007686:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800768a:	881b      	ldrh	r3, [r3, #0]
 800768c:	b29a      	uxth	r2, r3
 800768e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007692:	b29b      	uxth	r3, r3
 8007694:	029b      	lsls	r3, r3, #10
 8007696:	b29b      	uxth	r3, r3
 8007698:	4313      	orrs	r3, r2
 800769a:	b29a      	uxth	r2, r3
 800769c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076a0:	801a      	strh	r2, [r3, #0]
 80076a2:	e060      	b.n	8007766 <USB_EPStartXfer+0x10ec>
 80076a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	691b      	ldr	r3, [r3, #16]
 80076b0:	095b      	lsrs	r3, r3, #5
 80076b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	691b      	ldr	r3, [r3, #16]
 80076c2:	f003 031f 	and.w	r3, r3, #31
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d104      	bne.n	80076d4 <USB_EPStartXfer+0x105a>
 80076ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ce:	3b01      	subs	r3, #1
 80076d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80076d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076d8:	881b      	ldrh	r3, [r3, #0]
 80076da:	b29a      	uxth	r2, r3
 80076dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e0:	b29b      	uxth	r3, r3
 80076e2:	029b      	lsls	r3, r3, #10
 80076e4:	b29b      	uxth	r3, r3
 80076e6:	4313      	orrs	r3, r2
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80076ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80076f8:	801a      	strh	r2, [r3, #0]
 80076fa:	e034      	b.n	8007766 <USB_EPStartXfer+0x10ec>
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	785b      	ldrb	r3, [r3, #1]
 8007708:	2b01      	cmp	r3, #1
 800770a:	d12c      	bne.n	8007766 <USB_EPStartXfer+0x10ec>
 800770c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007710:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800771a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007728:	b29b      	uxth	r3, r3
 800772a:	461a      	mov	r2, r3
 800772c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007730:	4413      	add	r3, r2
 8007732:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800773a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	011a      	lsls	r2, r3, #4
 8007744:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007748:	4413      	add	r3, r2
 800774a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800774e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007752:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007756:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	b29a      	uxth	r2, r3
 8007760:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8007764:	801a      	strh	r2, [r3, #0]
 8007766:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800776a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007774:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007778:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	785b      	ldrb	r3, [r3, #1]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f040 809d 	bne.w	80078c0 <USB_EPStartXfer+0x1246>
 8007786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800778a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	461a      	mov	r2, r3
 80077a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077aa:	4413      	add	r3, r2
 80077ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80077b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	011a      	lsls	r2, r3, #4
 80077be:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077c2:	4413      	add	r3, r2
 80077c4:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80077c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80077cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077d0:	881b      	ldrh	r3, [r3, #0]
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077d8:	b29a      	uxth	r2, r3
 80077da:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077de:	801a      	strh	r2, [r3, #0]
 80077e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	691b      	ldr	r3, [r3, #16]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d10c      	bne.n	800780a <USB_EPStartXfer+0x1190>
 80077f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077f4:	881b      	ldrh	r3, [r3, #0]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007800:	b29a      	uxth	r2, r3
 8007802:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007806:	801a      	strh	r2, [r3, #0]
 8007808:	e088      	b.n	800791c <USB_EPStartXfer+0x12a2>
 800780a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800780e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	2b3e      	cmp	r3, #62	@ 0x3e
 8007818:	d826      	bhi.n	8007868 <USB_EPStartXfer+0x11ee>
 800781a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800781e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	691b      	ldr	r3, [r3, #16]
 8007826:	085b      	lsrs	r3, r3, #1
 8007828:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800782c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007830:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d004      	beq.n	800784a <USB_EPStartXfer+0x11d0>
 8007840:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007844:	3301      	adds	r3, #1
 8007846:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800784a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	b29a      	uxth	r2, r3
 8007852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007856:	b29b      	uxth	r3, r3
 8007858:	029b      	lsls	r3, r3, #10
 800785a:	b29b      	uxth	r3, r3
 800785c:	4313      	orrs	r3, r2
 800785e:	b29a      	uxth	r2, r3
 8007860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007864:	801a      	strh	r2, [r3, #0]
 8007866:	e059      	b.n	800791c <USB_EPStartXfer+0x12a2>
 8007868:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800786c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	095b      	lsrs	r3, r3, #5
 8007876:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800787a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800787e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 031f 	and.w	r3, r3, #31
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <USB_EPStartXfer+0x121e>
 800788e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007892:	3b01      	subs	r3, #1
 8007894:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007898:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29a      	uxth	r2, r3
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	029b      	lsls	r3, r3, #10
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	4313      	orrs	r3, r2
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078b6:	b29a      	uxth	r2, r3
 80078b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80078bc:	801a      	strh	r2, [r3, #0]
 80078be:	e02d      	b.n	800791c <USB_EPStartXfer+0x12a2>
 80078c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078c4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d125      	bne.n	800791c <USB_EPStartXfer+0x12a2>
 80078d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078d4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80078de:	b29b      	uxth	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078e6:	4413      	add	r3, r2
 80078e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80078ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	011a      	lsls	r2, r3, #4
 80078fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80078fe:	4413      	add	r3, r2
 8007900:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007904:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007908:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800790c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	691b      	ldr	r3, [r3, #16]
 8007914:	b29a      	uxth	r2, r3
 8007916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800791a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800791c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007920:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	69db      	ldr	r3, [r3, #28]
 8007928:	2b00      	cmp	r3, #0
 800792a:	f000 8218 	beq.w	8007d5e <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800792e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007932:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800793c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	009b      	lsls	r3, r3, #2
 8007946:	4413      	add	r3, r2
 8007948:	881b      	ldrh	r3, [r3, #0]
 800794a:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800794e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007952:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007956:	2b00      	cmp	r3, #0
 8007958:	d005      	beq.n	8007966 <USB_EPStartXfer+0x12ec>
 800795a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800795e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10d      	bne.n	8007982 <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007966:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 800796a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800796e:	2b00      	cmp	r3, #0
 8007970:	f040 81f5 	bne.w	8007d5e <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007974:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8007978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797c:	2b00      	cmp	r3, #0
 800797e:	f040 81ee 	bne.w	8007d5e <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8007982:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007986:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800798a:	681a      	ldr	r2, [r3, #0]
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	4413      	add	r3, r2
 800799c:	881b      	ldrh	r3, [r3, #0]
 800799e:	b29b      	uxth	r3, r3
 80079a0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079a8:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 80079ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079b4:	681a      	ldr	r2, [r3, #0]
 80079b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	009b      	lsls	r3, r3, #2
 80079c4:	441a      	add	r2, r3
 80079c6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 80079ca:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80079ce:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80079d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80079d6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80079da:	b29b      	uxth	r3, r3
 80079dc:	8013      	strh	r3, [r2, #0]
 80079de:	e1be      	b.n	8007d5e <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80079e0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	78db      	ldrb	r3, [r3, #3]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f040 81b4 	bne.w	8007d5a <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80079f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699a      	ldr	r2, [r3, #24]
 80079fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d917      	bls.n	8007a3e <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007a1e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a22:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699a      	ldr	r2, [r3, #24]
 8007a2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	619a      	str	r2, [r3, #24]
 8007a3c:	e00e      	b.n	8007a5c <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 8007a3e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a42:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8007a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a52:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8007a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	785b      	ldrb	r3, [r3, #1]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	f040 8085 	bne.w	8007b78 <USB_EPStartXfer+0x14fe>
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a92:	4413      	add	r3, r2
 8007a94:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	011a      	lsls	r2, r3, #4
 8007aa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007aaa:	4413      	add	r3, r2
 8007aac:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ab4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ab8:	881b      	ldrh	r3, [r3, #0]
 8007aba:	b29b      	uxth	r3, r3
 8007abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ac6:	801a      	strh	r2, [r3, #0]
 8007ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d10c      	bne.n	8007aea <USB_EPStartXfer+0x1470>
 8007ad0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ad4:	881b      	ldrh	r3, [r3, #0]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007adc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ae6:	801a      	strh	r2, [r3, #0]
 8007ae8:	e077      	b.n	8007bda <USB_EPStartXfer+0x1560>
 8007aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aee:	2b3e      	cmp	r3, #62	@ 0x3e
 8007af0:	d81e      	bhi.n	8007b30 <USB_EPStartXfer+0x14b6>
 8007af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007af6:	085b      	lsrs	r3, r3, #1
 8007af8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007afc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b00:	f003 0301 	and.w	r3, r3, #1
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <USB_EPStartXfer+0x1498>
 8007b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b0c:	3301      	adds	r3, #1
 8007b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b16:	881b      	ldrh	r3, [r3, #0]
 8007b18:	b29a      	uxth	r2, r3
 8007b1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b1e:	b29b      	uxth	r3, r3
 8007b20:	029b      	lsls	r3, r3, #10
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4313      	orrs	r3, r2
 8007b26:	b29a      	uxth	r2, r3
 8007b28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b2c:	801a      	strh	r2, [r3, #0]
 8007b2e:	e054      	b.n	8007bda <USB_EPStartXfer+0x1560>
 8007b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b34:	095b      	lsrs	r3, r3, #5
 8007b36:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3e:	f003 031f 	and.w	r3, r3, #31
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d104      	bne.n	8007b50 <USB_EPStartXfer+0x14d6>
 8007b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007b50:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b54:	881b      	ldrh	r3, [r3, #0]
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	029b      	lsls	r3, r3, #10
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	4313      	orrs	r3, r2
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b6e:	b29a      	uxth	r2, r3
 8007b70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b74:	801a      	strh	r2, [r3, #0]
 8007b76:	e030      	b.n	8007bda <USB_EPStartXfer+0x1560>
 8007b78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	785b      	ldrb	r3, [r3, #1]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d128      	bne.n	8007bda <USB_EPStartXfer+0x1560>
 8007b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b8c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b96:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b9a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bac:	4413      	add	r3, r2
 8007bae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007bb2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bb6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	011a      	lsls	r2, r3, #4
 8007bc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007bca:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007bce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007bd8:	801a      	strh	r2, [r3, #0]
 8007bda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bde:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007be8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	785b      	ldrb	r3, [r3, #1]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f040 8085 	bne.w	8007d04 <USB_EPStartXfer+0x168a>
 8007bfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007bfe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	461a      	mov	r2, r3
 8007c1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c1e:	4413      	add	r3, r2
 8007c20:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007c24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	011a      	lsls	r2, r3, #4
 8007c32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007c36:	4413      	add	r3, r2
 8007c38:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c3c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c40:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c44:	881b      	ldrh	r3, [r3, #0]
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007c4c:	b29a      	uxth	r2, r3
 8007c4e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c52:	801a      	strh	r2, [r3, #0]
 8007c54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d10c      	bne.n	8007c76 <USB_EPStartXfer+0x15fc>
 8007c5c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c60:	881b      	ldrh	r3, [r3, #0]
 8007c62:	b29b      	uxth	r3, r3
 8007c64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c6c:	b29a      	uxth	r2, r3
 8007c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c72:	801a      	strh	r2, [r3, #0]
 8007c74:	e073      	b.n	8007d5e <USB_EPStartXfer+0x16e4>
 8007c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7a:	2b3e      	cmp	r3, #62	@ 0x3e
 8007c7c:	d81e      	bhi.n	8007cbc <USB_EPStartXfer+0x1642>
 8007c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c82:	085b      	lsrs	r3, r3, #1
 8007c84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c88:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c8c:	f003 0301 	and.w	r3, r3, #1
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d004      	beq.n	8007c9e <USB_EPStartXfer+0x1624>
 8007c94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c98:	3301      	adds	r3, #1
 8007c9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ca2:	881b      	ldrh	r3, [r3, #0]
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	029b      	lsls	r3, r3, #10
 8007cae:	b29b      	uxth	r3, r3
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	b29a      	uxth	r2, r3
 8007cb4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007cb8:	801a      	strh	r2, [r3, #0]
 8007cba:	e050      	b.n	8007d5e <USB_EPStartXfer+0x16e4>
 8007cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cc0:	095b      	lsrs	r3, r3, #5
 8007cc2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cca:	f003 031f 	and.w	r3, r3, #31
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d104      	bne.n	8007cdc <USB_EPStartXfer+0x1662>
 8007cd2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007cd6:	3b01      	subs	r3, #1
 8007cd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29a      	uxth	r2, r3
 8007ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	029b      	lsls	r3, r3, #10
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	b29b      	uxth	r3, r3
 8007cf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007cf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007cfa:	b29a      	uxth	r2, r3
 8007cfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007d00:	801a      	strh	r2, [r3, #0]
 8007d02:	e02c      	b.n	8007d5e <USB_EPStartXfer+0x16e4>
 8007d04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	785b      	ldrb	r3, [r3, #1]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d124      	bne.n	8007d5e <USB_EPStartXfer+0x16e4>
 8007d14:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d22:	b29b      	uxth	r3, r3
 8007d24:	461a      	mov	r2, r3
 8007d26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d2a:	4413      	add	r3, r2
 8007d2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d30:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d34:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	781b      	ldrb	r3, [r3, #0]
 8007d3c:	011a      	lsls	r2, r3, #4
 8007d3e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007d42:	4413      	add	r3, r2
 8007d44:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007d48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d50:	b29a      	uxth	r2, r3
 8007d52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007d56:	801a      	strh	r2, [r3, #0]
 8007d58:	e001      	b.n	8007d5e <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e03a      	b.n	8007dd4 <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007d80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d84:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d8c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007d90:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d94:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d98:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d9c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007da0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007da4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007dae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	781b      	ldrb	r3, [r3, #0]
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	441a      	add	r2, r3
 8007dba:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007dbe:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dc2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dce:	b29b      	uxth	r3, r3
 8007dd0:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}

08007dde <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007dde:	b480      	push	{r7}
 8007de0:	b085      	sub	sp, #20
 8007de2:	af00      	add	r7, sp, #0
 8007de4:	6078      	str	r0, [r7, #4]
 8007de6:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007de8:	683b      	ldr	r3, [r7, #0]
 8007dea:	785b      	ldrb	r3, [r3, #1]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d020      	beq.n	8007e32 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	009b      	lsls	r3, r3, #2
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e06:	81bb      	strh	r3, [r7, #12]
 8007e08:	89bb      	ldrh	r3, [r7, #12]
 8007e0a:	f083 0310 	eor.w	r3, r3, #16
 8007e0e:	81bb      	strh	r3, [r7, #12]
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	441a      	add	r2, r3
 8007e1a:	89bb      	ldrh	r3, [r7, #12]
 8007e1c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e20:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e24:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	8013      	strh	r3, [r2, #0]
 8007e30:	e01f      	b.n	8007e72 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007e32:	687a      	ldr	r2, [r7, #4]
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	781b      	ldrb	r3, [r3, #0]
 8007e38:	009b      	lsls	r3, r3, #2
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007e44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e48:	81fb      	strh	r3, [r7, #14]
 8007e4a:	89fb      	ldrh	r3, [r7, #14]
 8007e4c:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007e50:	81fb      	strh	r3, [r7, #14]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	89fb      	ldrh	r3, [r7, #14]
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007e72:	2300      	movs	r3, #0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b087      	sub	sp, #28
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	7b1b      	ldrb	r3, [r3, #12]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	f040 809d 	bne.w	8007fce <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	785b      	ldrb	r3, [r3, #1]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d04c      	beq.n	8007f36 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e9c:	687a      	ldr	r2, [r7, #4]
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	781b      	ldrb	r3, [r3, #0]
 8007ea2:	009b      	lsls	r3, r3, #2
 8007ea4:	4413      	add	r3, r2
 8007ea6:	881b      	ldrh	r3, [r3, #0]
 8007ea8:	823b      	strh	r3, [r7, #16]
 8007eaa:	8a3b      	ldrh	r3, [r7, #16]
 8007eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d01b      	beq.n	8007eec <USB_EPClearStall+0x6c>
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	4413      	add	r3, r2
 8007ebe:	881b      	ldrh	r3, [r3, #0]
 8007ec0:	b29b      	uxth	r3, r3
 8007ec2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007eca:	81fb      	strh	r3, [r7, #14]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	683b      	ldr	r3, [r7, #0]
 8007ed0:	781b      	ldrb	r3, [r3, #0]
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	441a      	add	r2, r3
 8007ed6:	89fb      	ldrh	r3, [r7, #14]
 8007ed8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007edc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ee4:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	78db      	ldrb	r3, [r3, #3]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d06c      	beq.n	8007fce <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	4413      	add	r3, r2
 8007efe:	881b      	ldrh	r3, [r3, #0]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007f0a:	81bb      	strh	r3, [r7, #12]
 8007f0c:	89bb      	ldrh	r3, [r7, #12]
 8007f0e:	f083 0320 	eor.w	r3, r3, #32
 8007f12:	81bb      	strh	r3, [r7, #12]
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	441a      	add	r2, r3
 8007f1e:	89bb      	ldrh	r3, [r7, #12]
 8007f20:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f24:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	8013      	strh	r3, [r2, #0]
 8007f34:	e04b      	b.n	8007fce <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	009b      	lsls	r3, r3, #2
 8007f3e:	4413      	add	r3, r2
 8007f40:	881b      	ldrh	r3, [r3, #0]
 8007f42:	82fb      	strh	r3, [r7, #22]
 8007f44:	8afb      	ldrh	r3, [r7, #22]
 8007f46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d01b      	beq.n	8007f86 <USB_EPClearStall+0x106>
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	781b      	ldrb	r3, [r3, #0]
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	881b      	ldrh	r3, [r3, #0]
 8007f5a:	b29b      	uxth	r3, r3
 8007f5c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007f60:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f64:	82bb      	strh	r3, [r7, #20]
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	441a      	add	r2, r3
 8007f70:	8abb      	ldrh	r3, [r7, #20]
 8007f72:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f76:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	683b      	ldr	r3, [r7, #0]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	881b      	ldrh	r3, [r3, #0]
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f9c:	827b      	strh	r3, [r7, #18]
 8007f9e:	8a7b      	ldrh	r3, [r7, #18]
 8007fa0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007fa4:	827b      	strh	r3, [r7, #18]
 8007fa6:	8a7b      	ldrh	r3, [r7, #18]
 8007fa8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007fac:	827b      	strh	r3, [r7, #18]
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	683b      	ldr	r3, [r7, #0]
 8007fb2:	781b      	ldrb	r3, [r3, #0]
 8007fb4:	009b      	lsls	r3, r3, #2
 8007fb6:	441a      	add	r2, r3
 8007fb8:	8a7b      	ldrh	r3, [r7, #18]
 8007fba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007fbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007fc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fca:	b29b      	uxth	r3, r3
 8007fcc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	371c      	adds	r7, #28
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007fe8:	78fb      	ldrb	r3, [r7, #3]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d103      	bne.n	8007ff6 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2280      	movs	r2, #128	@ 0x80
 8007ff2:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	370c      	adds	r7, #12
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008002:	4770      	bx	lr

08008004 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8008004:	b480      	push	{r7}
 8008006:	b083      	sub	sp, #12
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr

0800801a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800801a:	b480      	push	{r7}
 800801c:	b085      	sub	sp, #20
 800801e:	af00      	add	r7, sp, #0
 8008020:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8008028:	b29b      	uxth	r3, r3
 800802a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800802c:	68fb      	ldr	r3, [r7, #12]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3714      	adds	r7, #20
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800803a:	b480      	push	{r7}
 800803c:	b08b      	sub	sp, #44	@ 0x2c
 800803e:	af00      	add	r7, sp, #0
 8008040:	60f8      	str	r0, [r7, #12]
 8008042:	60b9      	str	r1, [r7, #8]
 8008044:	4611      	mov	r1, r2
 8008046:	461a      	mov	r2, r3
 8008048:	460b      	mov	r3, r1
 800804a:	80fb      	strh	r3, [r7, #6]
 800804c:	4613      	mov	r3, r2
 800804e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8008050:	88bb      	ldrh	r3, [r7, #4]
 8008052:	3301      	adds	r3, #1
 8008054:	085b      	lsrs	r3, r3, #1
 8008056:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008060:	88fb      	ldrh	r3, [r7, #6]
 8008062:	005a      	lsls	r2, r3, #1
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	4413      	add	r3, r2
 8008068:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800806c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800806e:	69bb      	ldr	r3, [r7, #24]
 8008070:	627b      	str	r3, [r7, #36]	@ 0x24
 8008072:	e01e      	b.n	80080b2 <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8008074:	69fb      	ldr	r3, [r7, #28]
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	3301      	adds	r3, #1
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b21a      	sxth	r2, r3
 8008084:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008088:	4313      	orrs	r3, r2
 800808a:	b21b      	sxth	r3, r3
 800808c:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	8a7a      	ldrh	r2, [r7, #18]
 8008092:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	3302      	adds	r3, #2
 8008098:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	3302      	adds	r3, #2
 800809e:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	3301      	adds	r3, #1
 80080a4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	3301      	adds	r3, #1
 80080aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80080ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ae:	3b01      	subs	r3, #1
 80080b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80080b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d1dd      	bne.n	8008074 <USB_WritePMA+0x3a>
  }
}
 80080b8:	bf00      	nop
 80080ba:	bf00      	nop
 80080bc:	372c      	adds	r7, #44	@ 0x2c
 80080be:	46bd      	mov	sp, r7
 80080c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c4:	4770      	bx	lr

080080c6 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80080c6:	b480      	push	{r7}
 80080c8:	b08b      	sub	sp, #44	@ 0x2c
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	60f8      	str	r0, [r7, #12]
 80080ce:	60b9      	str	r1, [r7, #8]
 80080d0:	4611      	mov	r1, r2
 80080d2:	461a      	mov	r2, r3
 80080d4:	460b      	mov	r3, r1
 80080d6:	80fb      	strh	r3, [r7, #6]
 80080d8:	4613      	mov	r3, r2
 80080da:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80080dc:	88bb      	ldrh	r3, [r7, #4]
 80080de:	085b      	lsrs	r3, r3, #1
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	005a      	lsls	r2, r3, #1
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	4413      	add	r3, r2
 80080f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080f8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80080fa:	69bb      	ldr	r3, [r7, #24]
 80080fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80080fe:	e01b      	b.n	8008138 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008108:	6a3b      	ldr	r3, [r7, #32]
 800810a:	3302      	adds	r3, #2
 800810c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800810e:	693b      	ldr	r3, [r7, #16]
 8008110:	b2da      	uxtb	r2, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3301      	adds	r3, #1
 800811a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800811c:	693b      	ldr	r3, [r7, #16]
 800811e:	0a1b      	lsrs	r3, r3, #8
 8008120:	b2da      	uxtb	r2, r3
 8008122:	69fb      	ldr	r3, [r7, #28]
 8008124:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	3301      	adds	r3, #1
 800812a:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800812c:	6a3b      	ldr	r3, [r7, #32]
 800812e:	3302      	adds	r3, #2
 8008130:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8008132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008134:	3b01      	subs	r3, #1
 8008136:	627b      	str	r3, [r7, #36]	@ 0x24
 8008138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1e0      	bne.n	8008100 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800813e:	88bb      	ldrh	r3, [r7, #4]
 8008140:	f003 0301 	and.w	r3, r3, #1
 8008144:	b29b      	uxth	r3, r3
 8008146:	2b00      	cmp	r3, #0
 8008148:	d007      	beq.n	800815a <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 800814a:	6a3b      	ldr	r3, [r7, #32]
 800814c:	881b      	ldrh	r3, [r3, #0]
 800814e:	b29b      	uxth	r3, r3
 8008150:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008152:	693b      	ldr	r3, [r7, #16]
 8008154:	b2da      	uxtb	r2, r3
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	701a      	strb	r2, [r3, #0]
  }
}
 800815a:	bf00      	nop
 800815c:	372c      	adds	r7, #44	@ 0x2c
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b084      	sub	sp, #16
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	460b      	mov	r3, r1
 8008170:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 8008176:	2302      	movs	r3, #2
 8008178:	2203      	movs	r2, #3
 800817a:	2181      	movs	r1, #129	@ 0x81
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f001 fd82 	bl	8009c86 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	2201      	movs	r2, #1
 8008186:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 8008188:	2302      	movs	r3, #2
 800818a:	2203      	movs	r2, #3
 800818c:	2101      	movs	r1, #1
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f001 fd79 	bl	8009c86 <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2201      	movs	r2, #1
 8008198:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 800819c:	2054      	movs	r0, #84	@ 0x54
 800819e:	f001 fe87 	bl	8009eb0 <USBD_static_malloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d102      	bne.n	80081ba <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
 80081b8:	e012      	b.n	80081e0 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c0:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80081d4:	68ba      	ldr	r2, [r7, #8]
 80081d6:	2340      	movs	r3, #64	@ 0x40
 80081d8:	2101      	movs	r1, #1
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f001 fe44 	bl	8009e68 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 80081e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3710      	adds	r7, #16
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b082      	sub	sp, #8
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
 80081f2:	460b      	mov	r3, r1
 80081f4:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 80081f6:	2181      	movs	r1, #129	@ 0x81
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f001 fd6a 	bl	8009cd2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 8008204:	2101      	movs	r1, #1
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f001 fd63 	bl	8009cd2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2200      	movs	r2, #0
 8008210:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00e      	beq.n	800823c <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800822e:	4618      	mov	r0, r3
 8008230:	f001 fe4c 	bl	8009ecc <USBD_static_free>
    pdev->pClassData = NULL;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 800823c:	2300      	movs	r3, #0
}
 800823e:	4618      	mov	r0, r3
 8008240:	3708      	adds	r7, #8
 8008242:	46bd      	mov	sp, r7
 8008244:	bd80      	pop	{r7, pc}
	...

08008248 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008258:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 800825a:	2300      	movs	r3, #0
 800825c:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800825e:	2300      	movs	r3, #0
 8008260:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	781b      	ldrb	r3, [r3, #0]
 800826e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008272:	2b00      	cmp	r3, #0
 8008274:	d051      	beq.n	800831a <USBD_CUSTOM_HID_Setup+0xd2>
 8008276:	2b20      	cmp	r3, #32
 8008278:	f040 80d8 	bne.w	800842c <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	785b      	ldrb	r3, [r3, #1]
 8008280:	3b02      	subs	r3, #2
 8008282:	2b09      	cmp	r3, #9
 8008284:	d841      	bhi.n	800830a <USBD_CUSTOM_HID_Setup+0xc2>
 8008286:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <USBD_CUSTOM_HID_Setup+0x44>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082e5 	.word	0x080082e5
 8008290:	080082c3 	.word	0x080082c3
 8008294:	0800830b 	.word	0x0800830b
 8008298:	0800830b 	.word	0x0800830b
 800829c:	0800830b 	.word	0x0800830b
 80082a0:	0800830b 	.word	0x0800830b
 80082a4:	0800830b 	.word	0x0800830b
 80082a8:	080082f5 	.word	0x080082f5
 80082ac:	080082d3 	.word	0x080082d3
 80082b0:	080082b5 	.word	0x080082b5
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	885b      	ldrh	r3, [r3, #2]
 80082b8:	b2db      	uxtb	r3, r3
 80082ba:	461a      	mov	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 80082c0:	e02a      	b.n	8008318 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3340      	adds	r3, #64	@ 0x40
 80082c6:	2201      	movs	r2, #1
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f001 f9a4 	bl	8009618 <USBD_CtlSendData>
          break;
 80082d0:	e022      	b.n	8008318 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	885b      	ldrh	r3, [r3, #2]
 80082d6:	0a1b      	lsrs	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	461a      	mov	r2, r3
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 80082e2:	e019      	b.n	8008318 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	3344      	adds	r3, #68	@ 0x44
 80082e8:	2201      	movs	r2, #1
 80082ea:	4619      	mov	r1, r3
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f001 f993 	bl	8009618 <USBD_CtlSendData>
          break;
 80082f2:	e011      	b.n	8008318 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	2201      	movs	r2, #1
 80082f8:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 80082fa:	6939      	ldr	r1, [r7, #16]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	88db      	ldrh	r3, [r3, #6]
 8008300:	461a      	mov	r2, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f001 f9b6 	bl	8009674 <USBD_CtlPrepareRx>
          break;
 8008308:	e006      	b.n	8008318 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 800830a:	6839      	ldr	r1, [r7, #0]
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f001 f918 	bl	8009542 <USBD_CtlError>
          ret = USBD_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	75fb      	strb	r3, [r7, #23]
          break;
 8008316:	bf00      	nop
      }
      break;
 8008318:	e08f      	b.n	800843a <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	785b      	ldrb	r3, [r3, #1]
 800831e:	2b0b      	cmp	r3, #11
 8008320:	d87c      	bhi.n	800841c <USBD_CUSTOM_HID_Setup+0x1d4>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <USBD_CUSTOM_HID_Setup+0xe0>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008359 	.word	0x08008359
 800832c:	0800841d 	.word	0x0800841d
 8008330:	0800841d 	.word	0x0800841d
 8008334:	0800841d 	.word	0x0800841d
 8008338:	0800841d 	.word	0x0800841d
 800833c:	0800841d 	.word	0x0800841d
 8008340:	08008381 	.word	0x08008381
 8008344:	0800841d 	.word	0x0800841d
 8008348:	0800841d 	.word	0x0800841d
 800834c:	0800841d 	.word	0x0800841d
 8008350:	080083cf 	.word	0x080083cf
 8008354:	080083f7 	.word	0x080083f7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800835e:	2b03      	cmp	r3, #3
 8008360:	d107      	bne.n	8008372 <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8008362:	f107 030e 	add.w	r3, r7, #14
 8008366:	2202      	movs	r2, #2
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 f954 	bl	8009618 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008370:	e05b      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008372:	6839      	ldr	r1, [r7, #0]
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f001 f8e4 	bl	8009542 <USBD_CtlError>
            ret = USBD_FAIL;
 800837a:	2302      	movs	r3, #2
 800837c:	75fb      	strb	r3, [r7, #23]
          break;
 800837e:	e054      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	885b      	ldrh	r3, [r3, #2]
 8008384:	0a1b      	lsrs	r3, r3, #8
 8008386:	b29b      	uxth	r3, r3
 8008388:	2b22      	cmp	r3, #34	@ 0x22
 800838a:	d10b      	bne.n	80083a4 <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800838c:	683b      	ldr	r3, [r7, #0]
 800838e:	88db      	ldrh	r3, [r3, #6]
 8008390:	2b30      	cmp	r3, #48	@ 0x30
 8008392:	bf28      	it	cs
 8008394:	2330      	movcs	r3, #48	@ 0x30
 8008396:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	61bb      	str	r3, [r7, #24]
 80083a2:	e00d      	b.n	80083c0 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 80083a4:	683b      	ldr	r3, [r7, #0]
 80083a6:	885b      	ldrh	r3, [r3, #2]
 80083a8:	0a1b      	lsrs	r3, r3, #8
 80083aa:	b29b      	uxth	r3, r3
 80083ac:	2b21      	cmp	r3, #33	@ 0x21
 80083ae:	d107      	bne.n	80083c0 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80083b0:	4b24      	ldr	r3, [pc, #144]	@ (8008444 <USBD_CUSTOM_HID_Setup+0x1fc>)
 80083b2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	88db      	ldrh	r3, [r3, #6]
 80083b8:	2b09      	cmp	r3, #9
 80083ba:	bf28      	it	cs
 80083bc:	2309      	movcs	r3, #9
 80083be:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 80083c0:	8bfb      	ldrh	r3, [r7, #30]
 80083c2:	461a      	mov	r2, r3
 80083c4:	69b9      	ldr	r1, [r7, #24]
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f001 f926 	bl	8009618 <USBD_CtlSendData>
          break;
 80083cc:	e02d      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083d4:	2b03      	cmp	r3, #3
 80083d6:	d107      	bne.n	80083e8 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	3348      	adds	r3, #72	@ 0x48
 80083dc:	2201      	movs	r2, #1
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 f919 	bl	8009618 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083e6:	e020      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80083e8:	6839      	ldr	r1, [r7, #0]
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f001 f8a9 	bl	8009542 <USBD_CtlError>
            ret = USBD_FAIL;
 80083f0:	2302      	movs	r3, #2
 80083f2:	75fb      	strb	r3, [r7, #23]
          break;
 80083f4:	e019      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083fc:	2b03      	cmp	r3, #3
 80083fe:	d106      	bne.n	800840e <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	885b      	ldrh	r3, [r3, #2]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	461a      	mov	r2, r3
 8008408:	693b      	ldr	r3, [r7, #16]
 800840a:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800840c:	e00d      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 f896 	bl	8009542 <USBD_CtlError>
            ret = USBD_FAIL;
 8008416:	2302      	movs	r3, #2
 8008418:	75fb      	strb	r3, [r7, #23]
          break;
 800841a:	e006      	b.n	800842a <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 f88f 	bl	8009542 <USBD_CtlError>
          ret = USBD_FAIL;
 8008424:	2302      	movs	r3, #2
 8008426:	75fb      	strb	r3, [r7, #23]
          break;
 8008428:	bf00      	nop
      }
      break;
 800842a:	e006      	b.n	800843a <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 800842c:	6839      	ldr	r1, [r7, #0]
 800842e:	6878      	ldr	r0, [r7, #4]
 8008430:	f001 f887 	bl	8009542 <USBD_CtlError>
      ret = USBD_FAIL;
 8008434:	2302      	movs	r3, #2
 8008436:	75fb      	strb	r3, [r7, #23]
      break;
 8008438:	bf00      	nop
  }
  return ret;
 800843a:	7dfb      	ldrb	r3, [r7, #23]
}
 800843c:	4618      	mov	r0, r3
 800843e:	3720      	adds	r7, #32
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}
 8008444:	200000cc 	.word	0x200000cc

08008448 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	4613      	mov	r3, r2
 8008454:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800845c:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008464:	2b03      	cmp	r3, #3
 8008466:	d111      	bne.n	800848c <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800846e:	2b00      	cmp	r3, #0
 8008470:	d10a      	bne.n	8008488 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 800847a:	88fb      	ldrh	r3, [r7, #6]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	2181      	movs	r1, #129	@ 0x81
 8008480:	68f8      	ldr	r0, [r7, #12]
 8008482:	f001 fcce 	bl	8009e22 <USBD_LL_Transmit>
 8008486:	e001      	b.n	800848c <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 8008488:	2301      	movs	r3, #1
 800848a:	e000      	b.n	800848e <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3718      	adds	r7, #24
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}
	...

08008498 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2229      	movs	r2, #41	@ 0x29
 80084a4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 80084a6:	4b03      	ldr	r3, [pc, #12]	@ (80084b4 <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	370c      	adds	r7, #12
 80084ac:	46bd      	mov	sp, r7
 80084ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b2:	4770      	bx	lr
 80084b4:	20000048 	.word	0x20000048

080084b8 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2229      	movs	r2, #41	@ 0x29
 80084c4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 80084c6:	4b03      	ldr	r3, [pc, #12]	@ (80084d4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	370c      	adds	r7, #12
 80084cc:	46bd      	mov	sp, r7
 80084ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d2:	4770      	bx	lr
 80084d4:	20000074 	.word	0x20000074

080084d8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2229      	movs	r2, #41	@ 0x29
 80084e4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 80084e6:	4b03      	ldr	r3, [pc, #12]	@ (80084f4 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200000a0 	.word	0x200000a0

080084f8 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	460b      	mov	r3, r1
 8008502:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800850a:	2200      	movs	r2, #0
 800850c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return USBD_OK;
 8008510:	2300      	movs	r3, #0
}
 8008512:	4618      	mov	r0, r3
 8008514:	370c      	adds	r7, #12
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr

0800851e <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b084      	sub	sp, #16
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
 8008526:	460b      	mov	r3, r1
 8008528:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008530:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	68fa      	ldr	r2, [r7, #12]
 800853c:	7810      	ldrb	r0, [r2, #0]
 800853e:	68fa      	ldr	r2, [r7, #12]
 8008540:	7852      	ldrb	r2, [r2, #1]
 8008542:	4611      	mov	r1, r2
 8008544:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	2340      	movs	r3, #64	@ 0x40
 800854a:	2101      	movs	r1, #1
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 fc8b 	bl	8009e68 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800856a:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008570:	2b01      	cmp	r3, #1
 8008572:	d10c      	bne.n	800858e <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	68fa      	ldr	r2, [r7, #12]
 800857e:	7810      	ldrb	r0, [r2, #0]
 8008580:	68fa      	ldr	r2, [r7, #12]
 8008582:	7852      	ldrb	r2, [r2, #1]
 8008584:	4611      	mov	r1, r2
 8008586:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2200      	movs	r2, #0
 800858c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	3710      	adds	r7, #16
 8008594:	46bd      	mov	sp, r7
 8008596:	bd80      	pop	{r7, pc}

08008598 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	220a      	movs	r2, #10
 80085a4:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 80085a6:	4b03      	ldr	r3, [pc, #12]	@ (80085b4 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	370c      	adds	r7, #12
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr
 80085b4:	200000d8 	.word	0x200000d8

080085b8 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80085c2:	2302      	movs	r3, #2
 80085c4:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d005      	beq.n	80085d8 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	683a      	ldr	r2, [r7, #0]
 80085d0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80085d4:	2300      	movs	r3, #0
 80085d6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3714      	adds	r7, #20
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b084      	sub	sp, #16
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	60f8      	str	r0, [r7, #12]
 80085ee:	60b9      	str	r1, [r7, #8]
 80085f0:	4613      	mov	r3, r2
 80085f2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d101      	bne.n	80085fe <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80085fa:	2302      	movs	r3, #2
 80085fc:	e01a      	b.n	8008634 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008604:	2b00      	cmp	r3, #0
 8008606:	d003      	beq.n	8008610 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	79fa      	ldrb	r2, [r7, #7]
 800862a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800862c:	68f8      	ldr	r0, [r7, #12]
 800862e:	f001 fabf 	bl	8009bb0 <USBD_LL_Init>

  return USBD_OK;
 8008632:	2300      	movs	r3, #0
}
 8008634:	4618      	mov	r0, r3
 8008636:	3710      	adds	r7, #16
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}

0800863c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800863c:	b480      	push	{r7}
 800863e:	b085      	sub	sp, #20
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
 8008644:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008646:	2300      	movs	r3, #0
 8008648:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d006      	beq.n	800865e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73fb      	strb	r3, [r7, #15]
 800865c:	e001      	b.n	8008662 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800865e:	2302      	movs	r3, #2
 8008660:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008662:	7bfb      	ldrb	r3, [r7, #15]
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f001 fae9 	bl	8009c50 <USBD_LL_Start>

  return USBD_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
 80086a6:	460b      	mov	r3, r1
 80086a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80086aa:	2302      	movs	r3, #2
 80086ac:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d00c      	beq.n	80086d2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	78fa      	ldrb	r2, [r7, #3]
 80086c2:	4611      	mov	r1, r2
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	4798      	blx	r3
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d101      	bne.n	80086d2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80086ce:	2300      	movs	r3, #0
 80086d0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
 80086e4:	460b      	mov	r3, r1
 80086e6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80086ee:	685b      	ldr	r3, [r3, #4]
 80086f0:	78fa      	ldrb	r2, [r7, #3]
 80086f2:	4611      	mov	r1, r2
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	4798      	blx	r3

  return USBD_OK;
 80086f8:	2300      	movs	r3, #0
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}

08008702 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008712:	6839      	ldr	r1, [r7, #0]
 8008714:	4618      	mov	r0, r3
 8008716:	f000 feda 	bl	80094ce <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008728:	461a      	mov	r2, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008736:	f003 031f 	and.w	r3, r3, #31
 800873a:	2b02      	cmp	r3, #2
 800873c:	d016      	beq.n	800876c <USBD_LL_SetupStage+0x6a>
 800873e:	2b02      	cmp	r3, #2
 8008740:	d81c      	bhi.n	800877c <USBD_LL_SetupStage+0x7a>
 8008742:	2b00      	cmp	r3, #0
 8008744:	d002      	beq.n	800874c <USBD_LL_SetupStage+0x4a>
 8008746:	2b01      	cmp	r3, #1
 8008748:	d008      	beq.n	800875c <USBD_LL_SetupStage+0x5a>
 800874a:	e017      	b.n	800877c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 f9cd 	bl	8008af4 <USBD_StdDevReq>
      break;
 800875a:	e01a      	b.n	8008792 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008762:	4619      	mov	r1, r3
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f000 fa2f 	bl	8008bc8 <USBD_StdItfReq>
      break;
 800876a:	e012      	b.n	8008792 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f000 fa6f 	bl	8008c58 <USBD_StdEPReq>
      break;
 800877a:	e00a      	b.n	8008792 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8008782:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008786:	b2db      	uxtb	r3, r3
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f001 fac0 	bl	8009d10 <USBD_LL_StallEP>
      break;
 8008790:	bf00      	nop
  }

  return USBD_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b086      	sub	sp, #24
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	460b      	mov	r3, r1
 80087a6:	607a      	str	r2, [r7, #4]
 80087a8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087aa:	7afb      	ldrb	r3, [r7, #11]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d14b      	bne.n	8008848 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80087b6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80087be:	2b03      	cmp	r3, #3
 80087c0:	d134      	bne.n	800882c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80087c2:	697b      	ldr	r3, [r7, #20]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d919      	bls.n	8008802 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80087ce:	697b      	ldr	r3, [r7, #20]
 80087d0:	68da      	ldr	r2, [r3, #12]
 80087d2:	697b      	ldr	r3, [r7, #20]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	1ad2      	subs	r2, r2, r3
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d203      	bcs.n	80087f0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	e002      	b.n	80087f6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80087f4:	b29b      	uxth	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 ff58 	bl	80096b0 <USBD_CtlContinueRx>
 8008800:	e038      	b.n	8008874 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00a      	beq.n	8008824 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008814:	2b03      	cmp	r3, #3
 8008816:	d105      	bne.n	8008824 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f000 ff55 	bl	80096d4 <USBD_CtlSendStatus>
 800882a:	e023      	b.n	8008874 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008832:	2b05      	cmp	r3, #5
 8008834:	d11e      	bne.n	8008874 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 800883e:	2100      	movs	r1, #0
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f001 fa65 	bl	8009d10 <USBD_LL_StallEP>
 8008846:	e015      	b.n	8008874 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d00d      	beq.n	8008870 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800885a:	2b03      	cmp	r3, #3
 800885c:	d108      	bne.n	8008870 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	7afa      	ldrb	r2, [r7, #11]
 8008868:	4611      	mov	r1, r2
 800886a:	68f8      	ldr	r0, [r7, #12]
 800886c:	4798      	blx	r3
 800886e:	e001      	b.n	8008874 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008870:	2302      	movs	r3, #2
 8008872:	e000      	b.n	8008876 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008874:	2300      	movs	r3, #0
}
 8008876:	4618      	mov	r0, r3
 8008878:	3718      	adds	r7, #24
 800887a:	46bd      	mov	sp, r7
 800887c:	bd80      	pop	{r7, pc}

0800887e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800887e:	b580      	push	{r7, lr}
 8008880:	b086      	sub	sp, #24
 8008882:	af00      	add	r7, sp, #0
 8008884:	60f8      	str	r0, [r7, #12]
 8008886:	460b      	mov	r3, r1
 8008888:	607a      	str	r2, [r7, #4]
 800888a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800888c:	7afb      	ldrb	r3, [r7, #11]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d17f      	bne.n	8008992 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	3314      	adds	r3, #20
 8008896:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d15c      	bne.n	800895c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	68da      	ldr	r2, [r3, #12]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d915      	bls.n	80088da <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	68da      	ldr	r2, [r3, #12]
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	1ad2      	subs	r2, r2, r3
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	461a      	mov	r2, r3
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	68f8      	ldr	r0, [r7, #12]
 80088c8:	f000 fec2 	bl	8009650 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80088cc:	2300      	movs	r3, #0
 80088ce:	2200      	movs	r2, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	68f8      	ldr	r0, [r7, #12]
 80088d4:	f001 fac8 	bl	8009e68 <USBD_LL_PrepareReceive>
 80088d8:	e04e      	b.n	8008978 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	689b      	ldr	r3, [r3, #8]
 80088de:	697a      	ldr	r2, [r7, #20]
 80088e0:	6912      	ldr	r2, [r2, #16]
 80088e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80088e6:	fb01 f202 	mul.w	r2, r1, r2
 80088ea:	1a9b      	subs	r3, r3, r2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d11c      	bne.n	800892a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80088f0:	697b      	ldr	r3, [r7, #20]
 80088f2:	689a      	ldr	r2, [r3, #8]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80088f8:	429a      	cmp	r2, r3
 80088fa:	d316      	bcc.n	800892a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008906:	429a      	cmp	r2, r3
 8008908:	d20f      	bcs.n	800892a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800890a:	2200      	movs	r2, #0
 800890c:	2100      	movs	r1, #0
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 fe9e 	bl	8009650 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800891c:	2300      	movs	r3, #0
 800891e:	2200      	movs	r2, #0
 8008920:	2100      	movs	r1, #0
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f001 faa0 	bl	8009e68 <USBD_LL_PrepareReceive>
 8008928:	e026      	b.n	8008978 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008930:	68db      	ldr	r3, [r3, #12]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00a      	beq.n	800894c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800893c:	2b03      	cmp	r3, #3
 800893e:	d105      	bne.n	800894c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	68f8      	ldr	r0, [r7, #12]
 800894a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800894c:	2180      	movs	r1, #128	@ 0x80
 800894e:	68f8      	ldr	r0, [r7, #12]
 8008950:	f001 f9de 	bl	8009d10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008954:	68f8      	ldr	r0, [r7, #12]
 8008956:	f000 fed0 	bl	80096fa <USBD_CtlReceiveStatus>
 800895a:	e00d      	b.n	8008978 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008962:	2b04      	cmp	r3, #4
 8008964:	d004      	beq.n	8008970 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800896c:	2b00      	cmp	r3, #0
 800896e:	d103      	bne.n	8008978 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8008970:	2180      	movs	r1, #128	@ 0x80
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f001 f9cc 	bl	8009d10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800897e:	2b01      	cmp	r3, #1
 8008980:	d11d      	bne.n	80089be <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f7ff fe80 	bl	8008688 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008990:	e015      	b.n	80089be <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008998:	695b      	ldr	r3, [r3, #20]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00d      	beq.n	80089ba <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089a4:	2b03      	cmp	r3, #3
 80089a6:	d108      	bne.n	80089ba <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80089ae:	695b      	ldr	r3, [r3, #20]
 80089b0:	7afa      	ldrb	r2, [r7, #11]
 80089b2:	4611      	mov	r1, r2
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	4798      	blx	r3
 80089b8:	e001      	b.n	80089be <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089ba:	2302      	movs	r3, #2
 80089bc:	e000      	b.n	80089c0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3718      	adds	r7, #24
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089d0:	2340      	movs	r3, #64	@ 0x40
 80089d2:	2200      	movs	r2, #0
 80089d4:	2100      	movs	r1, #0
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f001 f955 	bl	8009c86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2240      	movs	r2, #64	@ 0x40
 80089e8:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80089ec:	2340      	movs	r3, #64	@ 0x40
 80089ee:	2200      	movs	r2, #0
 80089f0:	2180      	movs	r1, #128	@ 0x80
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f001 f947 	bl	8009c86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2240      	movs	r2, #64	@ 0x40
 8008a02:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2200      	movs	r2, #0
 8008a18:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6852      	ldr	r2, [r2, #4]
 8008a38:	b2d2      	uxtb	r2, r2
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
  }

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	460b      	mov	r3, r1
 8008a54:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	78fa      	ldrb	r2, [r7, #3]
 8008a5a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	370c      	adds	r7, #12
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr

08008a6a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a6a:	b480      	push	{r7}
 8008a6c:	b083      	sub	sp, #12
 8008a6e:	af00      	add	r7, sp, #0
 8008a70:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2204      	movs	r2, #4
 8008a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008aa2:	2b04      	cmp	r3, #4
 8008aa4:	d105      	bne.n	8008ab2 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ace:	2b03      	cmp	r3, #3
 8008ad0:	d10b      	bne.n	8008aea <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ad8:	69db      	ldr	r3, [r3, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d005      	beq.n	8008aea <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008aea:	2300      	movs	r3, #0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3708      	adds	r7, #8
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}

08008af4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008afe:	2300      	movs	r3, #0
 8008b00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	781b      	ldrb	r3, [r3, #0]
 8008b06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b0a:	2b40      	cmp	r3, #64	@ 0x40
 8008b0c:	d005      	beq.n	8008b1a <USBD_StdDevReq+0x26>
 8008b0e:	2b40      	cmp	r3, #64	@ 0x40
 8008b10:	d84f      	bhi.n	8008bb2 <USBD_StdDevReq+0xbe>
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d009      	beq.n	8008b2a <USBD_StdDevReq+0x36>
 8008b16:	2b20      	cmp	r3, #32
 8008b18:	d14b      	bne.n	8008bb2 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	4798      	blx	r3
      break;
 8008b28:	e048      	b.n	8008bbc <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	2b09      	cmp	r3, #9
 8008b30:	d839      	bhi.n	8008ba6 <USBD_StdDevReq+0xb2>
 8008b32:	a201      	add	r2, pc, #4	@ (adr r2, 8008b38 <USBD_StdDevReq+0x44>)
 8008b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b38:	08008b89 	.word	0x08008b89
 8008b3c:	08008b9d 	.word	0x08008b9d
 8008b40:	08008ba7 	.word	0x08008ba7
 8008b44:	08008b93 	.word	0x08008b93
 8008b48:	08008ba7 	.word	0x08008ba7
 8008b4c:	08008b6b 	.word	0x08008b6b
 8008b50:	08008b61 	.word	0x08008b61
 8008b54:	08008ba7 	.word	0x08008ba7
 8008b58:	08008b7f 	.word	0x08008b7f
 8008b5c:	08008b75 	.word	0x08008b75
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 f9dc 	bl	8008f20 <USBD_GetDescriptor>
          break;
 8008b68:	e022      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008b6a:	6839      	ldr	r1, [r7, #0]
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f000 fb3f 	bl	80091f0 <USBD_SetAddress>
          break;
 8008b72:	e01d      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 fb7e 	bl	8009278 <USBD_SetConfig>
          break;
 8008b7c:	e018      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008b7e:	6839      	ldr	r1, [r7, #0]
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fc07 	bl	8009394 <USBD_GetConfig>
          break;
 8008b86:	e013      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008b88:	6839      	ldr	r1, [r7, #0]
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fc37 	bl	80093fe <USBD_GetStatus>
          break;
 8008b90:	e00e      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008b92:	6839      	ldr	r1, [r7, #0]
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 fc65 	bl	8009464 <USBD_SetFeature>
          break;
 8008b9a:	e009      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fc74 	bl	800948c <USBD_ClrFeature>
          break;
 8008ba4:	e004      	b.n	8008bb0 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008ba6:	6839      	ldr	r1, [r7, #0]
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fcca 	bl	8009542 <USBD_CtlError>
          break;
 8008bae:	bf00      	nop
      }
      break;
 8008bb0:	e004      	b.n	8008bbc <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008bb2:	6839      	ldr	r1, [r7, #0]
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fcc4 	bl	8009542 <USBD_CtlError>
      break;
 8008bba:	bf00      	nop
  }

  return ret;
 8008bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop

08008bc8 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	b084      	sub	sp, #16
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
 8008bd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bde:	2b40      	cmp	r3, #64	@ 0x40
 8008be0:	d005      	beq.n	8008bee <USBD_StdItfReq+0x26>
 8008be2:	2b40      	cmp	r3, #64	@ 0x40
 8008be4:	d82e      	bhi.n	8008c44 <USBD_StdItfReq+0x7c>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d001      	beq.n	8008bee <USBD_StdItfReq+0x26>
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	d12a      	bne.n	8008c44 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	2b02      	cmp	r3, #2
 8008bf8:	d81d      	bhi.n	8008c36 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008bfa:	683b      	ldr	r3, [r7, #0]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d813      	bhi.n	8008c2c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	88db      	ldrh	r3, [r3, #6]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d110      	bne.n	8008c40 <USBD_StdItfReq+0x78>
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10d      	bne.n	8008c40 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	f000 fd55 	bl	80096d4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008c2a:	e009      	b.n	8008c40 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008c2c:	6839      	ldr	r1, [r7, #0]
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 fc87 	bl	8009542 <USBD_CtlError>
          break;
 8008c34:	e004      	b.n	8008c40 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008c36:	6839      	ldr	r1, [r7, #0]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fc82 	bl	8009542 <USBD_CtlError>
          break;
 8008c3e:	e000      	b.n	8008c42 <USBD_StdItfReq+0x7a>
          break;
 8008c40:	bf00      	nop
      }
      break;
 8008c42:	e004      	b.n	8008c4e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fc7b 	bl	8009542 <USBD_CtlError>
      break;
 8008c4c:	bf00      	nop
  }

  return USBD_OK;
 8008c4e:	2300      	movs	r3, #0
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b084      	sub	sp, #16
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	889b      	ldrh	r3, [r3, #4]
 8008c6a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c74:	2b40      	cmp	r3, #64	@ 0x40
 8008c76:	d007      	beq.n	8008c88 <USBD_StdEPReq+0x30>
 8008c78:	2b40      	cmp	r3, #64	@ 0x40
 8008c7a:	f200 8146 	bhi.w	8008f0a <USBD_StdEPReq+0x2b2>
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00a      	beq.n	8008c98 <USBD_StdEPReq+0x40>
 8008c82:	2b20      	cmp	r3, #32
 8008c84:	f040 8141 	bne.w	8008f0a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	4798      	blx	r3
      break;
 8008c96:	e13d      	b.n	8008f14 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008ca0:	2b20      	cmp	r3, #32
 8008ca2:	d10a      	bne.n	8008cba <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	6839      	ldr	r1, [r7, #0]
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	4798      	blx	r3
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008cb6:	7bfb      	ldrb	r3, [r7, #15]
 8008cb8:	e12d      	b.n	8008f16 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	785b      	ldrb	r3, [r3, #1]
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d007      	beq.n	8008cd2 <USBD_StdEPReq+0x7a>
 8008cc2:	2b03      	cmp	r3, #3
 8008cc4:	f300 811b 	bgt.w	8008efe <USBD_StdEPReq+0x2a6>
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d072      	beq.n	8008db2 <USBD_StdEPReq+0x15a>
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d03a      	beq.n	8008d46 <USBD_StdEPReq+0xee>
 8008cd0:	e115      	b.n	8008efe <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cd8:	2b02      	cmp	r3, #2
 8008cda:	d002      	beq.n	8008ce2 <USBD_StdEPReq+0x8a>
 8008cdc:	2b03      	cmp	r3, #3
 8008cde:	d015      	beq.n	8008d0c <USBD_StdEPReq+0xb4>
 8008ce0:	e02b      	b.n	8008d3a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d00c      	beq.n	8008d02 <USBD_StdEPReq+0xaa>
 8008ce8:	7bbb      	ldrb	r3, [r7, #14]
 8008cea:	2b80      	cmp	r3, #128	@ 0x80
 8008cec:	d009      	beq.n	8008d02 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	4619      	mov	r1, r3
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f001 f80c 	bl	8009d10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cf8:	2180      	movs	r1, #128	@ 0x80
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 f808 	bl	8009d10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d00:	e020      	b.n	8008d44 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008d02:	6839      	ldr	r1, [r7, #0]
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc1c 	bl	8009542 <USBD_CtlError>
              break;
 8008d0a:	e01b      	b.n	8008d44 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	885b      	ldrh	r3, [r3, #2]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10e      	bne.n	8008d32 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008d14:	7bbb      	ldrb	r3, [r7, #14]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d00b      	beq.n	8008d32 <USBD_StdEPReq+0xda>
 8008d1a:	7bbb      	ldrb	r3, [r7, #14]
 8008d1c:	2b80      	cmp	r3, #128	@ 0x80
 8008d1e:	d008      	beq.n	8008d32 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008d20:	683b      	ldr	r3, [r7, #0]
 8008d22:	88db      	ldrh	r3, [r3, #6]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d104      	bne.n	8008d32 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008d28:	7bbb      	ldrb	r3, [r7, #14]
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 ffef 	bl	8009d10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fcce 	bl	80096d4 <USBD_CtlSendStatus>

              break;
 8008d38:	e004      	b.n	8008d44 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008d3a:	6839      	ldr	r1, [r7, #0]
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f000 fc00 	bl	8009542 <USBD_CtlError>
              break;
 8008d42:	bf00      	nop
          }
          break;
 8008d44:	e0e0      	b.n	8008f08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d002      	beq.n	8008d56 <USBD_StdEPReq+0xfe>
 8008d50:	2b03      	cmp	r3, #3
 8008d52:	d015      	beq.n	8008d80 <USBD_StdEPReq+0x128>
 8008d54:	e026      	b.n	8008da4 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d56:	7bbb      	ldrb	r3, [r7, #14]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d00c      	beq.n	8008d76 <USBD_StdEPReq+0x11e>
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	2b80      	cmp	r3, #128	@ 0x80
 8008d60:	d009      	beq.n	8008d76 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008d62:	7bbb      	ldrb	r3, [r7, #14]
 8008d64:	4619      	mov	r1, r3
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f000 ffd2 	bl	8009d10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008d6c:	2180      	movs	r1, #128	@ 0x80
 8008d6e:	6878      	ldr	r0, [r7, #4]
 8008d70:	f000 ffce 	bl	8009d10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008d74:	e01c      	b.n	8008db0 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fbe2 	bl	8009542 <USBD_CtlError>
              break;
 8008d7e:	e017      	b.n	8008db0 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	885b      	ldrh	r3, [r3, #2]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d112      	bne.n	8008dae <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008d88:	7bbb      	ldrb	r3, [r7, #14]
 8008d8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d004      	beq.n	8008d9c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d92:	7bbb      	ldrb	r3, [r7, #14]
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 ffd9 	bl	8009d4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fc99 	bl	80096d4 <USBD_CtlSendStatus>
              }
              break;
 8008da2:	e004      	b.n	8008dae <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008da4:	6839      	ldr	r1, [r7, #0]
 8008da6:	6878      	ldr	r0, [r7, #4]
 8008da8:	f000 fbcb 	bl	8009542 <USBD_CtlError>
              break;
 8008dac:	e000      	b.n	8008db0 <USBD_StdEPReq+0x158>
              break;
 8008dae:	bf00      	nop
          }
          break;
 8008db0:	e0aa      	b.n	8008f08 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d002      	beq.n	8008dc2 <USBD_StdEPReq+0x16a>
 8008dbc:	2b03      	cmp	r3, #3
 8008dbe:	d032      	beq.n	8008e26 <USBD_StdEPReq+0x1ce>
 8008dc0:	e097      	b.n	8008ef2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008dc2:	7bbb      	ldrb	r3, [r7, #14]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d007      	beq.n	8008dd8 <USBD_StdEPReq+0x180>
 8008dc8:	7bbb      	ldrb	r3, [r7, #14]
 8008dca:	2b80      	cmp	r3, #128	@ 0x80
 8008dcc:	d004      	beq.n	8008dd8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008dce:	6839      	ldr	r1, [r7, #0]
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 fbb6 	bl	8009542 <USBD_CtlError>
                break;
 8008dd6:	e091      	b.n	8008efc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dd8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	da0b      	bge.n	8008df8 <USBD_StdEPReq+0x1a0>
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008de6:	4613      	mov	r3, r2
 8008de8:	009b      	lsls	r3, r3, #2
 8008dea:	4413      	add	r3, r2
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	3310      	adds	r3, #16
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	4413      	add	r3, r2
 8008df4:	3304      	adds	r3, #4
 8008df6:	e00b      	b.n	8008e10 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e0a:	687a      	ldr	r2, [r7, #4]
 8008e0c:	4413      	add	r3, r2
 8008e0e:	3304      	adds	r3, #4
 8008e10:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	2200      	movs	r2, #0
 8008e16:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	2202      	movs	r2, #2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f000 fbfa 	bl	8009618 <USBD_CtlSendData>
              break;
 8008e24:	e06a      	b.n	8008efc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008e26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da11      	bge.n	8008e52 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	6879      	ldr	r1, [r7, #4]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	440b      	add	r3, r1
 8008e40:	3318      	adds	r3, #24
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d117      	bne.n	8008e78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e48:	6839      	ldr	r1, [r7, #0]
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fb79 	bl	8009542 <USBD_CtlError>
                  break;
 8008e50:	e054      	b.n	8008efc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008e52:	7bbb      	ldrb	r3, [r7, #14]
 8008e54:	f003 020f 	and.w	r2, r3, #15
 8008e58:	6879      	ldr	r1, [r7, #4]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	4413      	add	r3, r2
 8008e60:	009b      	lsls	r3, r3, #2
 8008e62:	440b      	add	r3, r1
 8008e64:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d104      	bne.n	8008e78 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fb66 	bl	8009542 <USBD_CtlError>
                  break;
 8008e76:	e041      	b.n	8008efc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	da0b      	bge.n	8008e98 <USBD_StdEPReq+0x240>
 8008e80:	7bbb      	ldrb	r3, [r7, #14]
 8008e82:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008e86:	4613      	mov	r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	4413      	add	r3, r2
 8008e8c:	009b      	lsls	r3, r3, #2
 8008e8e:	3310      	adds	r3, #16
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4413      	add	r3, r2
 8008e94:	3304      	adds	r3, #4
 8008e96:	e00b      	b.n	8008eb0 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e98:	7bbb      	ldrb	r3, [r7, #14]
 8008e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	009b      	lsls	r3, r3, #2
 8008ea2:	4413      	add	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008eaa:	687a      	ldr	r2, [r7, #4]
 8008eac:	4413      	add	r3, r2
 8008eae:	3304      	adds	r3, #4
 8008eb0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d002      	beq.n	8008ebe <USBD_StdEPReq+0x266>
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b80      	cmp	r3, #128	@ 0x80
 8008ebc:	d103      	bne.n	8008ec6 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	601a      	str	r2, [r3, #0]
 8008ec4:	e00e      	b.n	8008ee4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008ec6:	7bbb      	ldrb	r3, [r7, #14]
 8008ec8:	4619      	mov	r1, r3
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 ff5e 	bl	8009d8c <USBD_LL_IsStallEP>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d003      	beq.n	8008ede <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2201      	movs	r2, #1
 8008eda:	601a      	str	r2, [r3, #0]
 8008edc:	e002      	b.n	8008ee4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	4619      	mov	r1, r3
 8008eea:	6878      	ldr	r0, [r7, #4]
 8008eec:	f000 fb94 	bl	8009618 <USBD_CtlSendData>
              break;
 8008ef0:	e004      	b.n	8008efc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008ef2:	6839      	ldr	r1, [r7, #0]
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fb24 	bl	8009542 <USBD_CtlError>
              break;
 8008efa:	bf00      	nop
          }
          break;
 8008efc:	e004      	b.n	8008f08 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fb1e 	bl	8009542 <USBD_CtlError>
          break;
 8008f06:	bf00      	nop
      }
      break;
 8008f08:	e004      	b.n	8008f14 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008f0a:	6839      	ldr	r1, [r7, #0]
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fb18 	bl	8009542 <USBD_CtlError>
      break;
 8008f12:	bf00      	nop
  }

  return ret;
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
	...

08008f20 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
 8008f28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	885b      	ldrh	r3, [r3, #2]
 8008f3a:	0a1b      	lsrs	r3, r3, #8
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	2b06      	cmp	r3, #6
 8008f42:	f200 8128 	bhi.w	8009196 <USBD_GetDescriptor+0x276>
 8008f46:	a201      	add	r2, pc, #4	@ (adr r2, 8008f4c <USBD_GetDescriptor+0x2c>)
 8008f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4c:	08008f69 	.word	0x08008f69
 8008f50:	08008f81 	.word	0x08008f81
 8008f54:	08008fc1 	.word	0x08008fc1
 8008f58:	08009197 	.word	0x08009197
 8008f5c:	08009197 	.word	0x08009197
 8008f60:	08009137 	.word	0x08009137
 8008f64:	08009163 	.word	0x08009163
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	687a      	ldr	r2, [r7, #4]
 8008f72:	7c12      	ldrb	r2, [r2, #16]
 8008f74:	f107 0108 	add.w	r1, r7, #8
 8008f78:	4610      	mov	r0, r2
 8008f7a:	4798      	blx	r3
 8008f7c:	60f8      	str	r0, [r7, #12]
      break;
 8008f7e:	e112      	b.n	80091a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	7c1b      	ldrb	r3, [r3, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10d      	bne.n	8008fa4 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f90:	f107 0208 	add.w	r2, r7, #8
 8008f94:	4610      	mov	r0, r2
 8008f96:	4798      	blx	r3
 8008f98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008fa2:	e100      	b.n	80091a6 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fac:	f107 0208 	add.w	r2, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	2202      	movs	r2, #2
 8008fbc:	701a      	strb	r2, [r3, #0]
      break;
 8008fbe:	e0f2      	b.n	80091a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	885b      	ldrh	r3, [r3, #2]
 8008fc4:	b2db      	uxtb	r3, r3
 8008fc6:	2b05      	cmp	r3, #5
 8008fc8:	f200 80ac 	bhi.w	8009124 <USBD_GetDescriptor+0x204>
 8008fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8008fd4 <USBD_GetDescriptor+0xb4>)
 8008fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fd2:	bf00      	nop
 8008fd4:	08008fed 	.word	0x08008fed
 8008fd8:	08009021 	.word	0x08009021
 8008fdc:	08009055 	.word	0x08009055
 8008fe0:	08009089 	.word	0x08009089
 8008fe4:	080090bd 	.word	0x080090bd
 8008fe8:	080090f1 	.word	0x080090f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	7c12      	ldrb	r2, [r2, #16]
 8009004:	f107 0108 	add.w	r1, r7, #8
 8009008:	4610      	mov	r0, r2
 800900a:	4798      	blx	r3
 800900c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800900e:	e091      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	6878      	ldr	r0, [r7, #4]
 8009014:	f000 fa95 	bl	8009542 <USBD_CtlError>
            err++;
 8009018:	7afb      	ldrb	r3, [r7, #11]
 800901a:	3301      	adds	r3, #1
 800901c:	72fb      	strb	r3, [r7, #11]
          break;
 800901e:	e089      	b.n	8009134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2b00      	cmp	r3, #0
 800902a:	d00b      	beq.n	8009044 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009032:	689b      	ldr	r3, [r3, #8]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	7c12      	ldrb	r2, [r2, #16]
 8009038:	f107 0108 	add.w	r1, r7, #8
 800903c:	4610      	mov	r0, r2
 800903e:	4798      	blx	r3
 8009040:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009042:	e077      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009044:	6839      	ldr	r1, [r7, #0]
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa7b 	bl	8009542 <USBD_CtlError>
            err++;
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	3301      	adds	r3, #1
 8009050:	72fb      	strb	r3, [r7, #11]
          break;
 8009052:	e06f      	b.n	8009134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800905a:	68db      	ldr	r3, [r3, #12]
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00b      	beq.n	8009078 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	687a      	ldr	r2, [r7, #4]
 800906a:	7c12      	ldrb	r2, [r2, #16]
 800906c:	f107 0108 	add.w	r1, r7, #8
 8009070:	4610      	mov	r0, r2
 8009072:	4798      	blx	r3
 8009074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009076:	e05d      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009078:	6839      	ldr	r1, [r7, #0]
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fa61 	bl	8009542 <USBD_CtlError>
            err++;
 8009080:	7afb      	ldrb	r3, [r7, #11]
 8009082:	3301      	adds	r3, #1
 8009084:	72fb      	strb	r3, [r7, #11]
          break;
 8009086:	e055      	b.n	8009134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d00b      	beq.n	80090ac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800909a:	691b      	ldr	r3, [r3, #16]
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	7c12      	ldrb	r2, [r2, #16]
 80090a0:	f107 0108 	add.w	r1, r7, #8
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
 80090a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090aa:	e043      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090ac:	6839      	ldr	r1, [r7, #0]
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 fa47 	bl	8009542 <USBD_CtlError>
            err++;
 80090b4:	7afb      	ldrb	r3, [r7, #11]
 80090b6:	3301      	adds	r3, #1
 80090b8:	72fb      	strb	r3, [r7, #11]
          break;
 80090ba:	e03b      	b.n	8009134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090c2:	695b      	ldr	r3, [r3, #20]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d00b      	beq.n	80090e0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090ce:	695b      	ldr	r3, [r3, #20]
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	7c12      	ldrb	r2, [r2, #16]
 80090d4:	f107 0108 	add.w	r1, r7, #8
 80090d8:	4610      	mov	r0, r2
 80090da:	4798      	blx	r3
 80090dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80090de:	e029      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80090e0:	6839      	ldr	r1, [r7, #0]
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa2d 	bl	8009542 <USBD_CtlError>
            err++;
 80090e8:	7afb      	ldrb	r3, [r7, #11]
 80090ea:	3301      	adds	r3, #1
 80090ec:	72fb      	strb	r3, [r7, #11]
          break;
 80090ee:	e021      	b.n	8009134 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 80090f6:	699b      	ldr	r3, [r3, #24]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d00b      	beq.n	8009114 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009102:	699b      	ldr	r3, [r3, #24]
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	7c12      	ldrb	r2, [r2, #16]
 8009108:	f107 0108 	add.w	r1, r7, #8
 800910c:	4610      	mov	r0, r2
 800910e:	4798      	blx	r3
 8009110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009112:	e00f      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa13 	bl	8009542 <USBD_CtlError>
            err++;
 800911c:	7afb      	ldrb	r3, [r7, #11]
 800911e:	3301      	adds	r3, #1
 8009120:	72fb      	strb	r3, [r7, #11]
          break;
 8009122:	e007      	b.n	8009134 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fa0b 	bl	8009542 <USBD_CtlError>
          err++;
 800912c:	7afb      	ldrb	r3, [r7, #11]
 800912e:	3301      	adds	r3, #1
 8009130:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8009132:	e038      	b.n	80091a6 <USBD_GetDescriptor+0x286>
 8009134:	e037      	b.n	80091a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	7c1b      	ldrb	r3, [r3, #16]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d109      	bne.n	8009152 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009144:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009146:	f107 0208 	add.w	r2, r7, #8
 800914a:	4610      	mov	r0, r2
 800914c:	4798      	blx	r3
 800914e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009150:	e029      	b.n	80091a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009152:	6839      	ldr	r1, [r7, #0]
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f000 f9f4 	bl	8009542 <USBD_CtlError>
        err++;
 800915a:	7afb      	ldrb	r3, [r7, #11]
 800915c:	3301      	adds	r3, #1
 800915e:	72fb      	strb	r3, [r7, #11]
      break;
 8009160:	e021      	b.n	80091a6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	7c1b      	ldrb	r3, [r3, #16]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d10d      	bne.n	8009186 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009172:	f107 0208 	add.w	r2, r7, #8
 8009176:	4610      	mov	r0, r2
 8009178:	4798      	blx	r3
 800917a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	3301      	adds	r3, #1
 8009180:	2207      	movs	r2, #7
 8009182:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009184:	e00f      	b.n	80091a6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009186:	6839      	ldr	r1, [r7, #0]
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 f9da 	bl	8009542 <USBD_CtlError>
        err++;
 800918e:	7afb      	ldrb	r3, [r7, #11]
 8009190:	3301      	adds	r3, #1
 8009192:	72fb      	strb	r3, [r7, #11]
      break;
 8009194:	e007      	b.n	80091a6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009196:	6839      	ldr	r1, [r7, #0]
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 f9d2 	bl	8009542 <USBD_CtlError>
      err++;
 800919e:	7afb      	ldrb	r3, [r7, #11]
 80091a0:	3301      	adds	r3, #1
 80091a2:	72fb      	strb	r3, [r7, #11]
      break;
 80091a4:	bf00      	nop
  }

  if (err != 0U)
 80091a6:	7afb      	ldrb	r3, [r7, #11]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d11c      	bne.n	80091e6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80091ac:	893b      	ldrh	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d011      	beq.n	80091d6 <USBD_GetDescriptor+0x2b6>
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	88db      	ldrh	r3, [r3, #6]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00d      	beq.n	80091d6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	88da      	ldrh	r2, [r3, #6]
 80091be:	893b      	ldrh	r3, [r7, #8]
 80091c0:	4293      	cmp	r3, r2
 80091c2:	bf28      	it	cs
 80091c4:	4613      	movcs	r3, r2
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80091ca:	893b      	ldrh	r3, [r7, #8]
 80091cc:	461a      	mov	r2, r3
 80091ce:	68f9      	ldr	r1, [r7, #12]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 fa21 	bl	8009618 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80091d6:	683b      	ldr	r3, [r7, #0]
 80091d8:	88db      	ldrh	r3, [r3, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa78 	bl	80096d4 <USBD_CtlSendStatus>
 80091e4:	e000      	b.n	80091e8 <USBD_GetDescriptor+0x2c8>
    return;
 80091e6:	bf00      	nop
    }
  }
}
 80091e8:	3710      	adds	r7, #16
 80091ea:	46bd      	mov	sp, r7
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop

080091f0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	889b      	ldrh	r3, [r3, #4]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d130      	bne.n	8009264 <USBD_SetAddress+0x74>
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	88db      	ldrh	r3, [r3, #6]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d12c      	bne.n	8009264 <USBD_SetAddress+0x74>
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	885b      	ldrh	r3, [r3, #2]
 800920e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009210:	d828      	bhi.n	8009264 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	885b      	ldrh	r3, [r3, #2]
 8009216:	b2db      	uxtb	r3, r3
 8009218:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800921c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009224:	2b03      	cmp	r3, #3
 8009226:	d104      	bne.n	8009232 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f989 	bl	8009542 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009230:	e01d      	b.n	800926e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	7bfa      	ldrb	r2, [r7, #15]
 8009236:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800923a:	7bfb      	ldrb	r3, [r7, #15]
 800923c:	4619      	mov	r1, r3
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 fdd0 	bl	8009de4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 fa45 	bl	80096d4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2202      	movs	r2, #2
 8009254:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009258:	e009      	b.n	800926e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2201      	movs	r2, #1
 800925e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009262:	e004      	b.n	800926e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 f96b 	bl	8009542 <USBD_CtlError>
  }
}
 800926c:	bf00      	nop
 800926e:	bf00      	nop
 8009270:	3710      	adds	r7, #16
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}
	...

08009278 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	885b      	ldrh	r3, [r3, #2]
 8009286:	b2da      	uxtb	r2, r3
 8009288:	4b41      	ldr	r3, [pc, #260]	@ (8009390 <USBD_SetConfig+0x118>)
 800928a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800928c:	4b40      	ldr	r3, [pc, #256]	@ (8009390 <USBD_SetConfig+0x118>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d904      	bls.n	800929e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8009294:	6839      	ldr	r1, [r7, #0]
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 f953 	bl	8009542 <USBD_CtlError>
 800929c:	e075      	b.n	800938a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092a4:	2b02      	cmp	r3, #2
 80092a6:	d002      	beq.n	80092ae <USBD_SetConfig+0x36>
 80092a8:	2b03      	cmp	r3, #3
 80092aa:	d023      	beq.n	80092f4 <USBD_SetConfig+0x7c>
 80092ac:	e062      	b.n	8009374 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80092ae:	4b38      	ldr	r3, [pc, #224]	@ (8009390 <USBD_SetConfig+0x118>)
 80092b0:	781b      	ldrb	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d01a      	beq.n	80092ec <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80092b6:	4b36      	ldr	r3, [pc, #216]	@ (8009390 <USBD_SetConfig+0x118>)
 80092b8:	781b      	ldrb	r3, [r3, #0]
 80092ba:	461a      	mov	r2, r3
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2203      	movs	r2, #3
 80092c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092c8:	4b31      	ldr	r3, [pc, #196]	@ (8009390 <USBD_SetConfig+0x118>)
 80092ca:	781b      	ldrb	r3, [r3, #0]
 80092cc:	4619      	mov	r1, r3
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	f7ff f9e5 	bl	800869e <USBD_SetClassConfig>
 80092d4:	4603      	mov	r3, r0
 80092d6:	2b02      	cmp	r3, #2
 80092d8:	d104      	bne.n	80092e4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80092da:	6839      	ldr	r1, [r7, #0]
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f930 	bl	8009542 <USBD_CtlError>
            return;
 80092e2:	e052      	b.n	800938a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f000 f9f5 	bl	80096d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80092ea:	e04e      	b.n	800938a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f000 f9f1 	bl	80096d4 <USBD_CtlSendStatus>
        break;
 80092f2:	e04a      	b.n	800938a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80092f4:	4b26      	ldr	r3, [pc, #152]	@ (8009390 <USBD_SetConfig+0x118>)
 80092f6:	781b      	ldrb	r3, [r3, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d112      	bne.n	8009322 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2202      	movs	r2, #2
 8009300:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 8009304:	4b22      	ldr	r3, [pc, #136]	@ (8009390 <USBD_SetConfig+0x118>)
 8009306:	781b      	ldrb	r3, [r3, #0]
 8009308:	461a      	mov	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800930e:	4b20      	ldr	r3, [pc, #128]	@ (8009390 <USBD_SetConfig+0x118>)
 8009310:	781b      	ldrb	r3, [r3, #0]
 8009312:	4619      	mov	r1, r3
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f7ff f9e1 	bl	80086dc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 f9da 	bl	80096d4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009320:	e033      	b.n	800938a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8009322:	4b1b      	ldr	r3, [pc, #108]	@ (8009390 <USBD_SetConfig+0x118>)
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	685b      	ldr	r3, [r3, #4]
 800932c:	429a      	cmp	r2, r3
 800932e:	d01d      	beq.n	800936c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	685b      	ldr	r3, [r3, #4]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	4619      	mov	r1, r3
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff f9cf 	bl	80086dc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800933e:	4b14      	ldr	r3, [pc, #80]	@ (8009390 <USBD_SetConfig+0x118>)
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	461a      	mov	r2, r3
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009348:	4b11      	ldr	r3, [pc, #68]	@ (8009390 <USBD_SetConfig+0x118>)
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	4619      	mov	r1, r3
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff f9a5 	bl	800869e <USBD_SetClassConfig>
 8009354:	4603      	mov	r3, r0
 8009356:	2b02      	cmp	r3, #2
 8009358:	d104      	bne.n	8009364 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 f8f0 	bl	8009542 <USBD_CtlError>
            return;
 8009362:	e012      	b.n	800938a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 f9b5 	bl	80096d4 <USBD_CtlSendStatus>
        break;
 800936a:	e00e      	b.n	800938a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 f9b1 	bl	80096d4 <USBD_CtlSendStatus>
        break;
 8009372:	e00a      	b.n	800938a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8009374:	6839      	ldr	r1, [r7, #0]
 8009376:	6878      	ldr	r0, [r7, #4]
 8009378:	f000 f8e3 	bl	8009542 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800937c:	4b04      	ldr	r3, [pc, #16]	@ (8009390 <USBD_SetConfig+0x118>)
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f7ff f9aa 	bl	80086dc <USBD_ClrClassConfig>
        break;
 8009388:	bf00      	nop
    }
  }
}
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}
 8009390:	20000334 	.word	0x20000334

08009394 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	88db      	ldrh	r3, [r3, #6]
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d004      	beq.n	80093b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80093a6:	6839      	ldr	r1, [r7, #0]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f000 f8ca 	bl	8009542 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80093ae:	e022      	b.n	80093f6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	dc02      	bgt.n	80093c0 <USBD_GetConfig+0x2c>
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	dc03      	bgt.n	80093c6 <USBD_GetConfig+0x32>
 80093be:	e015      	b.n	80093ec <USBD_GetConfig+0x58>
 80093c0:	2b03      	cmp	r3, #3
 80093c2:	d00b      	beq.n	80093dc <USBD_GetConfig+0x48>
 80093c4:	e012      	b.n	80093ec <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2200      	movs	r2, #0
 80093ca:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	3308      	adds	r3, #8
 80093d0:	2201      	movs	r2, #1
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f000 f91f 	bl	8009618 <USBD_CtlSendData>
        break;
 80093da:	e00c      	b.n	80093f6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	3304      	adds	r3, #4
 80093e0:	2201      	movs	r2, #1
 80093e2:	4619      	mov	r1, r3
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 f917 	bl	8009618 <USBD_CtlSendData>
        break;
 80093ea:	e004      	b.n	80093f6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f8a7 	bl	8009542 <USBD_CtlError>
        break;
 80093f4:	bf00      	nop
}
 80093f6:	bf00      	nop
 80093f8:	3708      	adds	r7, #8
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b082      	sub	sp, #8
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800940e:	3b01      	subs	r3, #1
 8009410:	2b02      	cmp	r3, #2
 8009412:	d81e      	bhi.n	8009452 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	88db      	ldrh	r3, [r3, #6]
 8009418:	2b02      	cmp	r3, #2
 800941a:	d004      	beq.n	8009426 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800941c:	6839      	ldr	r1, [r7, #0]
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	f000 f88f 	bl	8009542 <USBD_CtlError>
        break;
 8009424:	e01a      	b.n	800945c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2201      	movs	r2, #1
 800942a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009432:	2b00      	cmp	r3, #0
 8009434:	d005      	beq.n	8009442 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	f043 0202 	orr.w	r2, r3, #2
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	330c      	adds	r3, #12
 8009446:	2202      	movs	r2, #2
 8009448:	4619      	mov	r1, r3
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	f000 f8e4 	bl	8009618 <USBD_CtlSendData>
      break;
 8009450:	e004      	b.n	800945c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8009452:	6839      	ldr	r1, [r7, #0]
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 f874 	bl	8009542 <USBD_CtlError>
      break;
 800945a:	bf00      	nop
  }
}
 800945c:	bf00      	nop
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	885b      	ldrh	r3, [r3, #2]
 8009472:	2b01      	cmp	r3, #1
 8009474:	d106      	bne.n	8009484 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f000 f928 	bl	80096d4 <USBD_CtlSendStatus>
  }
}
 8009484:	bf00      	nop
 8009486:	3708      	adds	r7, #8
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800949c:	3b01      	subs	r3, #1
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d80b      	bhi.n	80094ba <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	885b      	ldrh	r3, [r3, #2]
 80094a6:	2b01      	cmp	r3, #1
 80094a8:	d10c      	bne.n	80094c4 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f000 f90e 	bl	80096d4 <USBD_CtlSendStatus>
      }
      break;
 80094b8:	e004      	b.n	80094c4 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80094ba:	6839      	ldr	r1, [r7, #0]
 80094bc:	6878      	ldr	r0, [r7, #4]
 80094be:	f000 f840 	bl	8009542 <USBD_CtlError>
      break;
 80094c2:	e000      	b.n	80094c6 <USBD_ClrFeature+0x3a>
      break;
 80094c4:	bf00      	nop
  }
}
 80094c6:	bf00      	nop
 80094c8:	3708      	adds	r7, #8
 80094ca:	46bd      	mov	sp, r7
 80094cc:	bd80      	pop	{r7, pc}

080094ce <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80094ce:	b480      	push	{r7}
 80094d0:	b083      	sub	sp, #12
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	6078      	str	r0, [r7, #4]
 80094d6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781a      	ldrb	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	785a      	ldrb	r2, [r3, #1]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	3302      	adds	r3, #2
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	461a      	mov	r2, r3
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	3303      	adds	r3, #3
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	b29b      	uxth	r3, r3
 80094fa:	4413      	add	r3, r2
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	3304      	adds	r3, #4
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	461a      	mov	r2, r3
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	3305      	adds	r3, #5
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	021b      	lsls	r3, r3, #8
 8009512:	b29b      	uxth	r3, r3
 8009514:	4413      	add	r3, r2
 8009516:	b29a      	uxth	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	3306      	adds	r3, #6
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	461a      	mov	r2, r3
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	3307      	adds	r3, #7
 8009528:	781b      	ldrb	r3, [r3, #0]
 800952a:	021b      	lsls	r3, r3, #8
 800952c:	b29b      	uxth	r3, r3
 800952e:	4413      	add	r3, r2
 8009530:	b29a      	uxth	r2, r3
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	80da      	strh	r2, [r3, #6]

}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b082      	sub	sp, #8
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
 800954a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800954c:	2180      	movs	r1, #128	@ 0x80
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 fbde 	bl	8009d10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009554:	2100      	movs	r1, #0
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fbda 	bl	8009d10 <USBD_LL_StallEP>
}
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b086      	sub	sp, #24
 8009568:	af00      	add	r7, sp, #0
 800956a:	60f8      	str	r0, [r7, #12]
 800956c:	60b9      	str	r1, [r7, #8]
 800956e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009570:	2300      	movs	r3, #0
 8009572:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2b00      	cmp	r3, #0
 8009578:	d032      	beq.n	80095e0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800957a:	68f8      	ldr	r0, [r7, #12]
 800957c:	f000 f834 	bl	80095e8 <USBD_GetLen>
 8009580:	4603      	mov	r3, r0
 8009582:	3301      	adds	r3, #1
 8009584:	b29b      	uxth	r3, r3
 8009586:	005b      	lsls	r3, r3, #1
 8009588:	b29a      	uxth	r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800958e:	7dfb      	ldrb	r3, [r7, #23]
 8009590:	1c5a      	adds	r2, r3, #1
 8009592:	75fa      	strb	r2, [r7, #23]
 8009594:	461a      	mov	r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	4413      	add	r3, r2
 800959a:	687a      	ldr	r2, [r7, #4]
 800959c:	7812      	ldrb	r2, [r2, #0]
 800959e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80095a0:	7dfb      	ldrb	r3, [r7, #23]
 80095a2:	1c5a      	adds	r2, r3, #1
 80095a4:	75fa      	strb	r2, [r7, #23]
 80095a6:	461a      	mov	r2, r3
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	4413      	add	r3, r2
 80095ac:	2203      	movs	r2, #3
 80095ae:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80095b0:	e012      	b.n	80095d8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	1c5a      	adds	r2, r3, #1
 80095b6:	60fa      	str	r2, [r7, #12]
 80095b8:	7dfa      	ldrb	r2, [r7, #23]
 80095ba:	1c51      	adds	r1, r2, #1
 80095bc:	75f9      	strb	r1, [r7, #23]
 80095be:	4611      	mov	r1, r2
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	440a      	add	r2, r1
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80095c8:	7dfb      	ldrb	r3, [r7, #23]
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	75fa      	strb	r2, [r7, #23]
 80095ce:	461a      	mov	r2, r3
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	4413      	add	r3, r2
 80095d4:	2200      	movs	r2, #0
 80095d6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d1e8      	bne.n	80095b2 <USBD_GetString+0x4e>
    }
  }
}
 80095e0:	bf00      	nop
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b085      	sub	sp, #20
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80095f4:	e005      	b.n	8009602 <USBD_GetLen+0x1a>
  {
    len++;
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	3301      	adds	r3, #1
 80095fa:	73fb      	strb	r3, [r7, #15]
    buf++;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	3301      	adds	r3, #1
 8009600:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d1f5      	bne.n	80095f6 <USBD_GetLen+0xe>
  }

  return len;
 800960a:	7bfb      	ldrb	r3, [r7, #15]
}
 800960c:	4618      	mov	r0, r3
 800960e:	3714      	adds	r7, #20
 8009610:	46bd      	mov	sp, r7
 8009612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009616:	4770      	bx	lr

08009618 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	4613      	mov	r3, r2
 8009624:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2202      	movs	r2, #2
 800962a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800962e:	88fa      	ldrh	r2, [r7, #6]
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8009634:	88fa      	ldrh	r2, [r7, #6]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800963a:	88fb      	ldrh	r3, [r7, #6]
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	2100      	movs	r1, #0
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 fbee 	bl	8009e22 <USBD_LL_Transmit>

  return USBD_OK;
 8009646:	2300      	movs	r3, #0
}
 8009648:	4618      	mov	r0, r3
 800964a:	3710      	adds	r7, #16
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	4613      	mov	r3, r2
 800965c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800965e:	88fb      	ldrh	r3, [r7, #6]
 8009660:	68ba      	ldr	r2, [r7, #8]
 8009662:	2100      	movs	r1, #0
 8009664:	68f8      	ldr	r0, [r7, #12]
 8009666:	f000 fbdc 	bl	8009e22 <USBD_LL_Transmit>

  return USBD_OK;
 800966a:	2300      	movs	r3, #0
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	60f8      	str	r0, [r7, #12]
 800967c:	60b9      	str	r1, [r7, #8]
 800967e:	4613      	mov	r3, r2
 8009680:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2203      	movs	r2, #3
 8009686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800968a:	88fa      	ldrh	r2, [r7, #6]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 8009692:	88fa      	ldrh	r2, [r7, #6]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800969a:	88fb      	ldrh	r3, [r7, #6]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	2100      	movs	r1, #0
 80096a0:	68f8      	ldr	r0, [r7, #12]
 80096a2:	f000 fbe1 	bl	8009e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096a6:	2300      	movs	r3, #0
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	60f8      	str	r0, [r7, #12]
 80096b8:	60b9      	str	r1, [r7, #8]
 80096ba:	4613      	mov	r3, r2
 80096bc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80096be:	88fb      	ldrh	r3, [r7, #6]
 80096c0:	68ba      	ldr	r2, [r7, #8]
 80096c2:	2100      	movs	r1, #0
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 fbcf 	bl	8009e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096ca:	2300      	movs	r3, #0
}
 80096cc:	4618      	mov	r0, r3
 80096ce:	3710      	adds	r7, #16
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}

080096d4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	b082      	sub	sp, #8
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2204      	movs	r2, #4
 80096e0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80096e4:	2300      	movs	r3, #0
 80096e6:	2200      	movs	r2, #0
 80096e8:	2100      	movs	r1, #0
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fb99 	bl	8009e22 <USBD_LL_Transmit>

  return USBD_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2205      	movs	r2, #5
 8009706:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800970a:	2300      	movs	r3, #0
 800970c:	2200      	movs	r2, #0
 800970e:	2100      	movs	r1, #0
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f000 fba9 	bl	8009e68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009716:	2300      	movs	r3, #0
}
 8009718:	4618      	mov	r0, r3
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009724:	2200      	movs	r2, #0
 8009726:	4912      	ldr	r1, [pc, #72]	@ (8009770 <MX_USB_DEVICE_Init+0x50>)
 8009728:	4812      	ldr	r0, [pc, #72]	@ (8009774 <MX_USB_DEVICE_Init+0x54>)
 800972a:	f7fe ff5c 	bl	80085e6 <USBD_Init>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009734:	f7f7 f88c 	bl	8000850 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8009738:	490f      	ldr	r1, [pc, #60]	@ (8009778 <MX_USB_DEVICE_Init+0x58>)
 800973a:	480e      	ldr	r0, [pc, #56]	@ (8009774 <MX_USB_DEVICE_Init+0x54>)
 800973c:	f7fe ff7e 	bl	800863c <USBD_RegisterClass>
 8009740:	4603      	mov	r3, r0
 8009742:	2b00      	cmp	r3, #0
 8009744:	d001      	beq.n	800974a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009746:	f7f7 f883 	bl	8000850 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800974a:	490c      	ldr	r1, [pc, #48]	@ (800977c <MX_USB_DEVICE_Init+0x5c>)
 800974c:	4809      	ldr	r0, [pc, #36]	@ (8009774 <MX_USB_DEVICE_Init+0x54>)
 800974e:	f7fe ff33 	bl	80085b8 <USBD_CUSTOM_HID_RegisterInterface>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d001      	beq.n	800975c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009758:	f7f7 f87a 	bl	8000850 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800975c:	4805      	ldr	r0, [pc, #20]	@ (8009774 <MX_USB_DEVICE_Init+0x54>)
 800975e:	f7fe ff87 	bl	8008670 <USBD_Start>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d001      	beq.n	800976c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009768:	f7f7 f872 	bl	8000850 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800976c:	bf00      	nop
 800976e:	bd80      	pop	{r7, pc}
 8009770:	20000124 	.word	0x20000124
 8009774:	20000338 	.word	0x20000338
 8009778:	20000010 	.word	0x20000010
 800977c:	20000114 	.word	0x20000114

08009780 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009784:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009786:	4618      	mov	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8009790:	b480      	push	{r7}
 8009792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009794:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009796:	4618      	mov	r0, r3
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80097a0:	b480      	push	{r7}
 80097a2:	b083      	sub	sp, #12
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	4603      	mov	r3, r0
 80097a8:	460a      	mov	r2, r1
 80097aa:	71fb      	strb	r3, [r7, #7]
 80097ac:	4613      	mov	r3, r2
 80097ae:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 80097b0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	370c      	adds	r7, #12
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
	...

080097c0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	4603      	mov	r3, r0
 80097c8:	6039      	str	r1, [r7, #0]
 80097ca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80097cc:	683b      	ldr	r3, [r7, #0]
 80097ce:	2212      	movs	r2, #18
 80097d0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80097d2:	4b03      	ldr	r3, [pc, #12]	@ (80097e0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	20000140 	.word	0x20000140

080097e4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	2204      	movs	r2, #4
 80097f4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80097f6:	4b03      	ldr	r3, [pc, #12]	@ (8009804 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr
 8009804:	20000154 	.word	0x20000154

08009808 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4907      	ldr	r1, [pc, #28]	@ (800983c <USBD_FS_ProductStrDescriptor+0x34>)
 800981e:	4808      	ldr	r0, [pc, #32]	@ (8009840 <USBD_FS_ProductStrDescriptor+0x38>)
 8009820:	f7ff fea0 	bl	8009564 <USBD_GetString>
 8009824:	e004      	b.n	8009830 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4904      	ldr	r1, [pc, #16]	@ (800983c <USBD_FS_ProductStrDescriptor+0x34>)
 800982a:	4805      	ldr	r0, [pc, #20]	@ (8009840 <USBD_FS_ProductStrDescriptor+0x38>)
 800982c:	f7ff fe9a 	bl	8009564 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009830:	4b02      	ldr	r3, [pc, #8]	@ (800983c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200005fc 	.word	0x200005fc
 8009840:	08009fc0 	.word	0x08009fc0

08009844 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009850:	683a      	ldr	r2, [r7, #0]
 8009852:	4904      	ldr	r1, [pc, #16]	@ (8009864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009854:	4804      	ldr	r0, [pc, #16]	@ (8009868 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009856:	f7ff fe85 	bl	8009564 <USBD_GetString>
  return USBD_StrDesc;
 800985a:	4b02      	ldr	r3, [pc, #8]	@ (8009864 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800985c:	4618      	mov	r0, r3
 800985e:	3708      	adds	r7, #8
 8009860:	46bd      	mov	sp, r7
 8009862:	bd80      	pop	{r7, pc}
 8009864:	200005fc 	.word	0x200005fc
 8009868:	08009fd4 	.word	0x08009fd4

0800986c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b082      	sub	sp, #8
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	221a      	movs	r2, #26
 800987c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800987e:	f000 f843 	bl	8009908 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009882:	4b02      	ldr	r3, [pc, #8]	@ (800988c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}
 800988c:	20000158 	.word	0x20000158

08009890 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	6039      	str	r1, [r7, #0]
 800989a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800989c:	79fb      	ldrb	r3, [r7, #7]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d105      	bne.n	80098ae <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	4907      	ldr	r1, [pc, #28]	@ (80098c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098a6:	4808      	ldr	r0, [pc, #32]	@ (80098c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098a8:	f7ff fe5c 	bl	8009564 <USBD_GetString>
 80098ac:	e004      	b.n	80098b8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80098ae:	683a      	ldr	r2, [r7, #0]
 80098b0:	4904      	ldr	r1, [pc, #16]	@ (80098c4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80098b2:	4805      	ldr	r0, [pc, #20]	@ (80098c8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80098b4:	f7ff fe56 	bl	8009564 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098b8:	4b02      	ldr	r3, [pc, #8]	@ (80098c4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80098ba:	4618      	mov	r0, r3
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	200005fc 	.word	0x200005fc
 80098c8:	08009fd8 	.word	0x08009fd8

080098cc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	4603      	mov	r3, r0
 80098d4:	6039      	str	r1, [r7, #0]
 80098d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d105      	bne.n	80098ea <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098de:	683a      	ldr	r2, [r7, #0]
 80098e0:	4907      	ldr	r1, [pc, #28]	@ (8009900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098e2:	4808      	ldr	r0, [pc, #32]	@ (8009904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098e4:	f7ff fe3e 	bl	8009564 <USBD_GetString>
 80098e8:	e004      	b.n	80098f4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4904      	ldr	r1, [pc, #16]	@ (8009900 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80098ee:	4805      	ldr	r0, [pc, #20]	@ (8009904 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80098f0:	f7ff fe38 	bl	8009564 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098f4:	4b02      	ldr	r3, [pc, #8]	@ (8009900 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3708      	adds	r7, #8
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	200005fc 	.word	0x200005fc
 8009904:	08009fec 	.word	0x08009fec

08009908 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800990e:	4b0f      	ldr	r3, [pc, #60]	@ (800994c <Get_SerialNum+0x44>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009914:	4b0e      	ldr	r3, [pc, #56]	@ (8009950 <Get_SerialNum+0x48>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800991a:	4b0e      	ldr	r3, [pc, #56]	@ (8009954 <Get_SerialNum+0x4c>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009920:	68fa      	ldr	r2, [r7, #12]
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4413      	add	r3, r2
 8009926:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	2b00      	cmp	r3, #0
 800992c:	d009      	beq.n	8009942 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800992e:	2208      	movs	r2, #8
 8009930:	4909      	ldr	r1, [pc, #36]	@ (8009958 <Get_SerialNum+0x50>)
 8009932:	68f8      	ldr	r0, [r7, #12]
 8009934:	f000 f814 	bl	8009960 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009938:	2204      	movs	r2, #4
 800993a:	4908      	ldr	r1, [pc, #32]	@ (800995c <Get_SerialNum+0x54>)
 800993c:	68b8      	ldr	r0, [r7, #8]
 800993e:	f000 f80f 	bl	8009960 <IntToUnicode>
  }
}
 8009942:	bf00      	nop
 8009944:	3710      	adds	r7, #16
 8009946:	46bd      	mov	sp, r7
 8009948:	bd80      	pop	{r7, pc}
 800994a:	bf00      	nop
 800994c:	1ffff7ac 	.word	0x1ffff7ac
 8009950:	1ffff7b0 	.word	0x1ffff7b0
 8009954:	1ffff7b4 	.word	0x1ffff7b4
 8009958:	2000015a 	.word	0x2000015a
 800995c:	2000016a 	.word	0x2000016a

08009960 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009960:	b480      	push	{r7}
 8009962:	b087      	sub	sp, #28
 8009964:	af00      	add	r7, sp, #0
 8009966:	60f8      	str	r0, [r7, #12]
 8009968:	60b9      	str	r1, [r7, #8]
 800996a:	4613      	mov	r3, r2
 800996c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800996e:	2300      	movs	r3, #0
 8009970:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009972:	2300      	movs	r3, #0
 8009974:	75fb      	strb	r3, [r7, #23]
 8009976:	e027      	b.n	80099c8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	0f1b      	lsrs	r3, r3, #28
 800997c:	2b09      	cmp	r3, #9
 800997e:	d80b      	bhi.n	8009998 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	0f1b      	lsrs	r3, r3, #28
 8009984:	b2da      	uxtb	r2, r3
 8009986:	7dfb      	ldrb	r3, [r7, #23]
 8009988:	005b      	lsls	r3, r3, #1
 800998a:	4619      	mov	r1, r3
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	440b      	add	r3, r1
 8009990:	3230      	adds	r2, #48	@ 0x30
 8009992:	b2d2      	uxtb	r2, r2
 8009994:	701a      	strb	r2, [r3, #0]
 8009996:	e00a      	b.n	80099ae <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	0f1b      	lsrs	r3, r3, #28
 800999c:	b2da      	uxtb	r2, r3
 800999e:	7dfb      	ldrb	r3, [r7, #23]
 80099a0:	005b      	lsls	r3, r3, #1
 80099a2:	4619      	mov	r1, r3
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	440b      	add	r3, r1
 80099a8:	3237      	adds	r2, #55	@ 0x37
 80099aa:	b2d2      	uxtb	r2, r2
 80099ac:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80099b4:	7dfb      	ldrb	r3, [r7, #23]
 80099b6:	005b      	lsls	r3, r3, #1
 80099b8:	3301      	adds	r3, #1
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	2200      	movs	r2, #0
 80099c0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80099c2:	7dfb      	ldrb	r3, [r7, #23]
 80099c4:	3301      	adds	r3, #1
 80099c6:	75fb      	strb	r3, [r7, #23]
 80099c8:	7dfa      	ldrb	r2, [r7, #23]
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d3d3      	bcc.n	8009978 <IntToUnicode+0x18>
  }
}
 80099d0:	bf00      	nop
 80099d2:	bf00      	nop
 80099d4:	371c      	adds	r7, #28
 80099d6:	46bd      	mov	sp, r7
 80099d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099dc:	4770      	bx	lr
	...

080099e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08a      	sub	sp, #40	@ 0x28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099e8:	f107 0314 	add.w	r3, r7, #20
 80099ec:	2200      	movs	r2, #0
 80099ee:	601a      	str	r2, [r3, #0]
 80099f0:	605a      	str	r2, [r3, #4]
 80099f2:	609a      	str	r2, [r3, #8]
 80099f4:	60da      	str	r2, [r3, #12]
 80099f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a1c      	ldr	r2, [pc, #112]	@ (8009a70 <HAL_PCD_MspInit+0x90>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d131      	bne.n	8009a66 <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a02:	4b1c      	ldr	r3, [pc, #112]	@ (8009a74 <HAL_PCD_MspInit+0x94>)
 8009a04:	695b      	ldr	r3, [r3, #20]
 8009a06:	4a1b      	ldr	r2, [pc, #108]	@ (8009a74 <HAL_PCD_MspInit+0x94>)
 8009a08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a0c:	6153      	str	r3, [r2, #20]
 8009a0e:	4b19      	ldr	r3, [pc, #100]	@ (8009a74 <HAL_PCD_MspInit+0x94>)
 8009a10:	695b      	ldr	r3, [r3, #20]
 8009a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009a16:	613b      	str	r3, [r7, #16]
 8009a18:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009a1a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a20:	2302      	movs	r3, #2
 8009a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009a28:	2303      	movs	r3, #3
 8009a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009a2c:	230e      	movs	r3, #14
 8009a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a30:	f107 0314 	add.w	r3, r7, #20
 8009a34:	4619      	mov	r1, r3
 8009a36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009a3a:	f7f8 fcb9 	bl	80023b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009a74 <HAL_PCD_MspInit+0x94>)
 8009a40:	69db      	ldr	r3, [r3, #28]
 8009a42:	4a0c      	ldr	r2, [pc, #48]	@ (8009a74 <HAL_PCD_MspInit+0x94>)
 8009a44:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8009a48:	61d3      	str	r3, [r2, #28]
 8009a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009a74 <HAL_PCD_MspInit+0x94>)
 8009a4c:	69db      	ldr	r3, [r3, #28]
 8009a4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009a52:	60fb      	str	r3, [r7, #12]
 8009a54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 8009a56:	2200      	movs	r2, #0
 8009a58:	2100      	movs	r1, #0
 8009a5a:	2014      	movs	r0, #20
 8009a5c:	f7f8 fabf 	bl	8001fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 8009a60:	2014      	movs	r0, #20
 8009a62:	f7f8 fad8 	bl	8002016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009a66:	bf00      	nop
 8009a68:	3728      	adds	r7, #40	@ 0x28
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	40005c00 	.word	0x40005c00
 8009a74:	40021000 	.word	0x40021000

08009a78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b082      	sub	sp, #8
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4610      	mov	r0, r2
 8009a90:	f7fe fe37 	bl	8008702 <USBD_LL_SetupStage>
}
 8009a94:	bf00      	nop
 8009a96:	3708      	adds	r7, #8
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009aae:	78fa      	ldrb	r2, [r7, #3]
 8009ab0:	6879      	ldr	r1, [r7, #4]
 8009ab2:	4613      	mov	r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4413      	add	r3, r2
 8009ab8:	00db      	lsls	r3, r3, #3
 8009aba:	440b      	add	r3, r1
 8009abc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	78fb      	ldrb	r3, [r7, #3]
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	f7fe fe69 	bl	800879c <USBD_LL_DataOutStage>
}
 8009aca:	bf00      	nop
 8009acc:	3708      	adds	r7, #8
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b082      	sub	sp, #8
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
 8009ada:	460b      	mov	r3, r1
 8009adc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009ae4:	78fa      	ldrb	r2, [r7, #3]
 8009ae6:	6879      	ldr	r1, [r7, #4]
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	00db      	lsls	r3, r3, #3
 8009af0:	440b      	add	r3, r1
 8009af2:	3324      	adds	r3, #36	@ 0x24
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	78fb      	ldrb	r3, [r7, #3]
 8009af8:	4619      	mov	r1, r3
 8009afa:	f7fe fec0 	bl	800887e <USBD_LL_DataInStage>
}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f7fe ffd3 	bl	8008ac0 <USBD_LL_SOF>
}
 8009b1a:	bf00      	nop
 8009b1c:	3708      	adds	r7, #8
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}

08009b22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b22:	b580      	push	{r7, lr}
 8009b24:	b084      	sub	sp, #16
 8009b26:	af00      	add	r7, sp, #0
 8009b28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	795b      	ldrb	r3, [r3, #5]
 8009b32:	2b02      	cmp	r3, #2
 8009b34:	d001      	beq.n	8009b3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009b36:	f7f6 fe8b 	bl	8000850 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b40:	7bfa      	ldrb	r2, [r7, #15]
 8009b42:	4611      	mov	r1, r2
 8009b44:	4618      	mov	r0, r3
 8009b46:	f7fe ff80 	bl	8008a4a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b50:	4618      	mov	r0, r3
 8009b52:	f7fe ff39 	bl	80089c8 <USBD_LL_Reset>
}
 8009b56:	bf00      	nop
 8009b58:	3710      	adds	r7, #16
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7fe ff7b 	bl	8008a6a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	7a5b      	ldrb	r3, [r3, #9]
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d005      	beq.n	8009b88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b7c:	4b04      	ldr	r3, [pc, #16]	@ (8009b90 <HAL_PCD_SuspendCallback+0x30>)
 8009b7e:	691b      	ldr	r3, [r3, #16]
 8009b80:	4a03      	ldr	r2, [pc, #12]	@ (8009b90 <HAL_PCD_SuspendCallback+0x30>)
 8009b82:	f043 0306 	orr.w	r3, r3, #6
 8009b86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b88:	bf00      	nop
 8009b8a:	3708      	adds	r7, #8
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	e000ed00 	.word	0xe000ed00

08009b94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f7fe ff76 	bl	8008a94 <USBD_LL_Resume>
}
 8009ba8:	bf00      	nop
 8009baa:	3708      	adds	r7, #8
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}

08009bb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009bb0:	b580      	push	{r7, lr}
 8009bb2:	b082      	sub	sp, #8
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009bb8:	4a23      	ldr	r2, [pc, #140]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	4a21      	ldr	r2, [pc, #132]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bc4:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bca:	4a20      	ldr	r2, [pc, #128]	@ (8009c4c <USBD_LL_Init+0x9c>)
 8009bcc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009bce:	4b1e      	ldr	r3, [pc, #120]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bd0:	2208      	movs	r2, #8
 8009bd2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009bda:	4b1b      	ldr	r3, [pc, #108]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bdc:	2202      	movs	r2, #2
 8009bde:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009be0:	4b19      	ldr	r3, [pc, #100]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009be2:	2200      	movs	r2, #0
 8009be4:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009be6:	4b18      	ldr	r3, [pc, #96]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009be8:	2200      	movs	r2, #0
 8009bea:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009bec:	4816      	ldr	r0, [pc, #88]	@ (8009c48 <USBD_LL_Init+0x98>)
 8009bee:	f7f8 fed3 	bl	8002998 <HAL_PCD_Init>
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d001      	beq.n	8009bfc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009bf8:	f7f6 fe2a 	bl	8000850 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c02:	2318      	movs	r3, #24
 8009c04:	2200      	movs	r2, #0
 8009c06:	2100      	movs	r1, #0
 8009c08:	f7fa fb34 	bl	8004274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c12:	2358      	movs	r3, #88	@ 0x58
 8009c14:	2200      	movs	r2, #0
 8009c16:	2180      	movs	r1, #128	@ 0x80
 8009c18:	f7fa fb2c 	bl	8004274 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c22:	2398      	movs	r3, #152	@ 0x98
 8009c24:	2200      	movs	r2, #0
 8009c26:	2181      	movs	r1, #129	@ 0x81
 8009c28:	f7fa fb24 	bl	8004274 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c32:	23d8      	movs	r3, #216	@ 0xd8
 8009c34:	2200      	movs	r2, #0
 8009c36:	2101      	movs	r1, #1
 8009c38:	f7fa fb1c 	bl	8004274 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3708      	adds	r7, #8
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	200007fc 	.word	0x200007fc
 8009c4c:	40005c00 	.word	0x40005c00

08009c50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b084      	sub	sp, #16
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c66:	4618      	mov	r0, r3
 8009c68:	f7f8 ff5d 	bl	8002b26 <HAL_PCD_Start>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c70:	7bfb      	ldrb	r3, [r7, #15]
 8009c72:	4618      	mov	r0, r3
 8009c74:	f000 f940 	bl	8009ef8 <USBD_Get_USB_Status>
 8009c78:	4603      	mov	r3, r0
 8009c7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	4608      	mov	r0, r1
 8009c90:	4611      	mov	r1, r2
 8009c92:	461a      	mov	r2, r3
 8009c94:	4603      	mov	r3, r0
 8009c96:	70fb      	strb	r3, [r7, #3]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	70bb      	strb	r3, [r7, #2]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009cae:	78bb      	ldrb	r3, [r7, #2]
 8009cb0:	883a      	ldrh	r2, [r7, #0]
 8009cb2:	78f9      	ldrb	r1, [r7, #3]
 8009cb4:	f7f9 f855 	bl	8002d62 <HAL_PCD_EP_Open>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cbc:	7bfb      	ldrb	r3, [r7, #15]
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	f000 f91a 	bl	8009ef8 <USBD_Get_USB_Status>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3710      	adds	r7, #16
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cd2:	b580      	push	{r7, lr}
 8009cd4:	b084      	sub	sp, #16
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
 8009cda:	460b      	mov	r3, r1
 8009cdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cde:	2300      	movs	r3, #0
 8009ce0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cec:	78fa      	ldrb	r2, [r7, #3]
 8009cee:	4611      	mov	r1, r2
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f7f9 f893 	bl	8002e1c <HAL_PCD_EP_Close>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cfa:	7bfb      	ldrb	r3, [r7, #15]
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	f000 f8fb 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d02:	4603      	mov	r3, r0
 8009d04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d06:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d08:	4618      	mov	r0, r3
 8009d0a:	3710      	adds	r7, #16
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	bd80      	pop	{r7, pc}

08009d10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d20:	2300      	movs	r3, #0
 8009d22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d2a:	78fa      	ldrb	r2, [r7, #3]
 8009d2c:	4611      	mov	r1, r2
 8009d2e:	4618      	mov	r0, r3
 8009d30:	f7f9 f924 	bl	8002f7c <HAL_PCD_EP_SetStall>
 8009d34:	4603      	mov	r3, r0
 8009d36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d38:	7bfb      	ldrb	r3, [r7, #15]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 f8dc 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d40:	4603      	mov	r3, r0
 8009d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3710      	adds	r7, #16
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	6078      	str	r0, [r7, #4]
 8009d56:	460b      	mov	r3, r1
 8009d58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5e:	2300      	movs	r3, #0
 8009d60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d68:	78fa      	ldrb	r2, [r7, #3]
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7f9 f957 	bl	8003020 <HAL_PCD_EP_ClrStall>
 8009d72:	4603      	mov	r3, r0
 8009d74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d76:	7bfb      	ldrb	r3, [r7, #15]
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f000 f8bd 	bl	8009ef8 <USBD_Get_USB_Status>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d82:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009da0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	da0b      	bge.n	8009dc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009da8:	78fb      	ldrb	r3, [r7, #3]
 8009daa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dae:	68f9      	ldr	r1, [r7, #12]
 8009db0:	4613      	mov	r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	4413      	add	r3, r2
 8009db6:	00db      	lsls	r3, r3, #3
 8009db8:	440b      	add	r3, r1
 8009dba:	3312      	adds	r3, #18
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	e00b      	b.n	8009dd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009dc6:	68f9      	ldr	r1, [r7, #12]
 8009dc8:	4613      	mov	r3, r2
 8009dca:	009b      	lsls	r3, r3, #2
 8009dcc:	4413      	add	r3, r2
 8009dce:	00db      	lsls	r3, r3, #3
 8009dd0:	440b      	add	r3, r1
 8009dd2:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009dd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3714      	adds	r7, #20
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de2:	4770      	bx	lr

08009de4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009de4:	b580      	push	{r7, lr}
 8009de6:	b084      	sub	sp, #16
 8009de8:	af00      	add	r7, sp, #0
 8009dea:	6078      	str	r0, [r7, #4]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009dfe:	78fa      	ldrb	r2, [r7, #3]
 8009e00:	4611      	mov	r1, r2
 8009e02:	4618      	mov	r0, r3
 8009e04:	f7f8 ff89 	bl	8002d1a <HAL_PCD_SetAddress>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e0c:	7bfb      	ldrb	r3, [r7, #15]
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f000 f872 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}

08009e22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e22:	b580      	push	{r7, lr}
 8009e24:	b086      	sub	sp, #24
 8009e26:	af00      	add	r7, sp, #0
 8009e28:	60f8      	str	r0, [r7, #12]
 8009e2a:	607a      	str	r2, [r7, #4]
 8009e2c:	461a      	mov	r2, r3
 8009e2e:	460b      	mov	r3, r1
 8009e30:	72fb      	strb	r3, [r7, #11]
 8009e32:	4613      	mov	r3, r2
 8009e34:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e44:	893b      	ldrh	r3, [r7, #8]
 8009e46:	7af9      	ldrb	r1, [r7, #11]
 8009e48:	687a      	ldr	r2, [r7, #4]
 8009e4a:	f7f9 f860 	bl	8002f0e <HAL_PCD_EP_Transmit>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 f84f 	bl	8009ef8 <USBD_Get_USB_Status>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3718      	adds	r7, #24
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	461a      	mov	r2, r3
 8009e74:	460b      	mov	r3, r1
 8009e76:	72fb      	strb	r3, [r7, #11]
 8009e78:	4613      	mov	r3, r2
 8009e7a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e80:	2300      	movs	r3, #0
 8009e82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009e8a:	893b      	ldrh	r3, [r7, #8]
 8009e8c:	7af9      	ldrb	r1, [r7, #11]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	f7f9 f80c 	bl	8002eac <HAL_PCD_EP_Receive>
 8009e94:	4603      	mov	r3, r0
 8009e96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e98:	7dfb      	ldrb	r3, [r7, #23]
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f000 f82c 	bl	8009ef8 <USBD_Get_USB_Status>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ea4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	3718      	adds	r7, #24
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
	...

08009eb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009eb8:	4b03      	ldr	r3, [pc, #12]	@ (8009ec8 <USBD_static_malloc+0x18>)
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	20000ad0 	.word	0x20000ad0

08009ecc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]

}
 8009ed4:	bf00      	nop
 8009ed6:	370c      	adds	r7, #12
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ede:	4770      	bx	lr

08009ee0 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	4603      	mov	r3, r0
 8009f00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f06:	79fb      	ldrb	r3, [r7, #7]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d817      	bhi.n	8009f3c <USBD_Get_USB_Status+0x44>
 8009f0c:	a201      	add	r2, pc, #4	@ (adr r2, 8009f14 <USBD_Get_USB_Status+0x1c>)
 8009f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f12:	bf00      	nop
 8009f14:	08009f25 	.word	0x08009f25
 8009f18:	08009f2b 	.word	0x08009f2b
 8009f1c:	08009f31 	.word	0x08009f31
 8009f20:	08009f37 	.word	0x08009f37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f24:	2300      	movs	r3, #0
 8009f26:	73fb      	strb	r3, [r7, #15]
    break;
 8009f28:	e00b      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f2a:	2302      	movs	r3, #2
 8009f2c:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2e:	e008      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f30:	2301      	movs	r3, #1
 8009f32:	73fb      	strb	r3, [r7, #15]
    break;
 8009f34:	e005      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f36:	2302      	movs	r3, #2
 8009f38:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3a:	e002      	b.n	8009f42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f3c:	2302      	movs	r3, #2
 8009f3e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f40:	bf00      	nop
  }
  return usb_status;
 8009f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3714      	adds	r7, #20
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <memset>:
 8009f50:	4402      	add	r2, r0
 8009f52:	4603      	mov	r3, r0
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d100      	bne.n	8009f5a <memset+0xa>
 8009f58:	4770      	bx	lr
 8009f5a:	f803 1b01 	strb.w	r1, [r3], #1
 8009f5e:	e7f9      	b.n	8009f54 <memset+0x4>

08009f60 <__libc_init_array>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	4d0d      	ldr	r5, [pc, #52]	@ (8009f98 <__libc_init_array+0x38>)
 8009f64:	4c0d      	ldr	r4, [pc, #52]	@ (8009f9c <__libc_init_array+0x3c>)
 8009f66:	1b64      	subs	r4, r4, r5
 8009f68:	10a4      	asrs	r4, r4, #2
 8009f6a:	2600      	movs	r6, #0
 8009f6c:	42a6      	cmp	r6, r4
 8009f6e:	d109      	bne.n	8009f84 <__libc_init_array+0x24>
 8009f70:	4d0b      	ldr	r5, [pc, #44]	@ (8009fa0 <__libc_init_array+0x40>)
 8009f72:	4c0c      	ldr	r4, [pc, #48]	@ (8009fa4 <__libc_init_array+0x44>)
 8009f74:	f000 f818 	bl	8009fa8 <_init>
 8009f78:	1b64      	subs	r4, r4, r5
 8009f7a:	10a4      	asrs	r4, r4, #2
 8009f7c:	2600      	movs	r6, #0
 8009f7e:	42a6      	cmp	r6, r4
 8009f80:	d105      	bne.n	8009f8e <__libc_init_array+0x2e>
 8009f82:	bd70      	pop	{r4, r5, r6, pc}
 8009f84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f88:	4798      	blx	r3
 8009f8a:	3601      	adds	r6, #1
 8009f8c:	e7ee      	b.n	8009f6c <__libc_init_array+0xc>
 8009f8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f92:	4798      	blx	r3
 8009f94:	3601      	adds	r6, #1
 8009f96:	e7f2      	b.n	8009f7e <__libc_init_array+0x1e>
 8009f98:	0800a034 	.word	0x0800a034
 8009f9c:	0800a034 	.word	0x0800a034
 8009fa0:	0800a034 	.word	0x0800a034
 8009fa4:	0800a038 	.word	0x0800a038

08009fa8 <_init>:
 8009fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009faa:	bf00      	nop
 8009fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fae:	bc08      	pop	{r3}
 8009fb0:	469e      	mov	lr, r3
 8009fb2:	4770      	bx	lr

08009fb4 <_fini>:
 8009fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fb6:	bf00      	nop
 8009fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009fba:	bc08      	pop	{r3}
 8009fbc:	469e      	mov	lr, r3
 8009fbe:	4770      	bx	lr
