
GamePad_Prova.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009da0  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08009f28  08009f28  0000af28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb8  08009fb8  0000b170  2**0
                  CONTENTS
  4 .ARM          00000000  08009fb8  08009fb8  0000b170  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fb8  08009fb8  0000b170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fb8  08009fb8  0000afb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fbc  08009fbc  0000afbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08009fc0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b170  2**0
                  CONTENTS
 10 .bss          000009b4  20000170  20000170  0000b170  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000b24  20000b24  0000b170  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b170  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013963  00000000  00000000  0000b1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000035ff  00000000  00000000  0001eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00022108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c66  00000000  00000000  00023178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000207a8  00000000  00000000  00023dde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016d80  00000000  00000000  00044586  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b72ea  00000000  00000000  0005b306  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001125f0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004294  00000000  00000000  00112634  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001168c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000170 	.word	0x20000170
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009f10 	.word	0x08009f10

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000174 	.word	0x20000174
 80001c4:	08009f10 	.word	0x08009f10

080001c8 <HAL_GPIO_EXTI_Callback>:
uint8_t previous_pin_state_d4 = 0;
uint8_t previous_pin_state_d5 = 0;
uint8_t previous_pin_state_d6 = 0;
uint8_t previous_pin_state_d7 = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]

	uint8_t current_pin_state; // Sostituisci GPIOx con il tuo GPIO port
	current_pin_state = HAL_GPIO_ReadPin(GPIOD, GPIO_Pin);
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	4619      	mov	r1, r3
 80001d6:	4810      	ldr	r0, [pc, #64]	@ (8000218 <HAL_GPIO_EXTI_Callback+0x50>)
 80001d8:	f002 fa18 	bl	800260c <HAL_GPIO_ReadPin>
 80001dc:	4603      	mov	r3, r0
 80001de:	73fb      	strb	r3, [r7, #15]

	if (current_pin_state)
 80001e0:	7bfb      	ldrb	r3, [r7, #15]
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d007      	beq.n	80001f6 <HAL_GPIO_EXTI_Callback+0x2e>
		gamepad.buttons |= GPIO_Pin;
 80001e6:	4b0d      	ldr	r3, [pc, #52]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001e8:	88da      	ldrh	r2, [r3, #6]
 80001ea:	88fb      	ldrh	r3, [r7, #6]
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b29a      	uxth	r2, r3
 80001f0:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001f2:	80da      	strh	r2, [r3, #6]
	else
		gamepad.buttons &= ~GPIO_Pin;
}
 80001f4:	e00b      	b.n	800020e <HAL_GPIO_EXTI_Callback+0x46>
		gamepad.buttons &= ~GPIO_Pin;
 80001f6:	4b09      	ldr	r3, [pc, #36]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 80001f8:	88db      	ldrh	r3, [r3, #6]
 80001fa:	b21a      	sxth	r2, r3
 80001fc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000200:	43db      	mvns	r3, r3
 8000202:	b21b      	sxth	r3, r3
 8000204:	4013      	ands	r3, r2
 8000206:	b21b      	sxth	r3, r3
 8000208:	b29a      	uxth	r2, r3
 800020a:	4b04      	ldr	r3, [pc, #16]	@ (800021c <HAL_GPIO_EXTI_Callback+0x54>)
 800020c:	80da      	strh	r2, [r3, #6]
}
 800020e:	bf00      	nop
 8000210:	3710      	adds	r7, #16
 8000212:	46bd      	mov	sp, r7
 8000214:	bd80      	pop	{r7, pc}
 8000216:	bf00      	nop
 8000218:	48000c00 	.word	0x48000c00
 800021c:	20000308 	.word	0x20000308

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 fd04 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f880 	bl	800032c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa3e 	bl	80006ac <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 fa0a 	bl	8000648 <MX_DMA_Init>
  MX_I2C1_Init();
 8000234:	f000 f9c8 	bl	80005c8 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8000238:	f009 fa26 	bl	8009688 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 800023c:	f000 f8da 	bl	80003f4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000240:	f000 f956 	bl	80004f0 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1, analogBuffer1, 2); // start adc in dma mode for multichannel
 8000244:	2202      	movs	r2, #2
 8000246:	4932      	ldr	r1, [pc, #200]	@ (8000310 <main+0xf0>)
 8000248:	4832      	ldr	r0, [pc, #200]	@ (8000314 <main+0xf4>)
 800024a:	f000 ff79 	bl	8001140 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, analogBuffer2, 2); // start adc in dma mode for multichannel
 800024e:	2202      	movs	r2, #2
 8000250:	4931      	ldr	r1, [pc, #196]	@ (8000318 <main+0xf8>)
 8000252:	4832      	ldr	r0, [pc, #200]	@ (800031c <main+0xfc>)
 8000254:	f000 ff74 	bl	8001140 <HAL_ADC_Start_DMA>

  gamepad.id=1;
 8000258:	4b31      	ldr	r3, [pc, #196]	@ (8000320 <main+0x100>)
 800025a:	2201      	movs	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]

  gamepad.leftAxis[0] = 0;
 800025e:	4b30      	ldr	r3, [pc, #192]	@ (8000320 <main+0x100>)
 8000260:	2200      	movs	r2, #0
 8000262:	705a      	strb	r2, [r3, #1]
  gamepad.leftAxis[1] = 0;
 8000264:	4b2e      	ldr	r3, [pc, #184]	@ (8000320 <main+0x100>)
 8000266:	2200      	movs	r2, #0
 8000268:	709a      	strb	r2, [r3, #2]

  gamepad.rightAxis[0] = 0;
 800026a:	4b2d      	ldr	r3, [pc, #180]	@ (8000320 <main+0x100>)
 800026c:	2200      	movs	r2, #0
 800026e:	70da      	strb	r2, [r3, #3]
  gamepad.rightAxis[1] = 0;
 8000270:	4b2b      	ldr	r3, [pc, #172]	@ (8000320 <main+0x100>)
 8000272:	2200      	movs	r2, #0
 8000274:	711a      	strb	r2, [r3, #4]

  gamepad.buttons = 0;
 8000276:	4b2a      	ldr	r3, [pc, #168]	@ (8000320 <main+0x100>)
 8000278:	2200      	movs	r2, #0
 800027a:	80da      	strh	r2, [r3, #6]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  gamepad.leftAxis[0] = (analogBuffer1[0]-2048)/16;
 800027c:	4b24      	ldr	r3, [pc, #144]	@ (8000310 <main+0xf0>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000284:	091b      	lsrs	r3, r3, #4
 8000286:	b2da      	uxtb	r2, r3
 8000288:	4b25      	ldr	r3, [pc, #148]	@ (8000320 <main+0x100>)
 800028a:	705a      	strb	r2, [r3, #1]
	  gamepad.leftAxis[1] = (analogBuffer1[1]-2048)/16;
 800028c:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <main+0xf0>)
 800028e:	685b      	ldr	r3, [r3, #4]
 8000290:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000294:	091b      	lsrs	r3, r3, #4
 8000296:	b2da      	uxtb	r2, r3
 8000298:	4b21      	ldr	r3, [pc, #132]	@ (8000320 <main+0x100>)
 800029a:	709a      	strb	r2, [r3, #2]

	  gamepad.rightAxis[0] = (analogBuffer2[0]-2048)/16;
 800029c:	4b1e      	ldr	r3, [pc, #120]	@ (8000318 <main+0xf8>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002a4:	091b      	lsrs	r3, r3, #4
 80002a6:	b2da      	uxtb	r2, r3
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <main+0x100>)
 80002aa:	70da      	strb	r2, [r3, #3]
	  gamepad.rightAxis[1] = (analogBuffer2[1]-2048)/16;
 80002ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000318 <main+0xf8>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80002b4:	091b      	lsrs	r3, r3, #4
 80002b6:	b2da      	uxtb	r2, r3
 80002b8:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <main+0x100>)
 80002ba:	711a      	strb	r2, [r3, #4]

	  gamepadBuffer[0] = gamepad.id; // id
 80002bc:	4b18      	ldr	r3, [pc, #96]	@ (8000320 <main+0x100>)
 80002be:	781a      	ldrb	r2, [r3, #0]
 80002c0:	4b18      	ldr	r3, [pc, #96]	@ (8000324 <main+0x104>)
 80002c2:	701a      	strb	r2, [r3, #0]

	  gamepadBuffer[1] = gamepad.leftAxis[0]; // left movement (-1,1)
 80002c4:	4b16      	ldr	r3, [pc, #88]	@ (8000320 <main+0x100>)
 80002c6:	785a      	ldrb	r2, [r3, #1]
 80002c8:	4b16      	ldr	r3, [pc, #88]	@ (8000324 <main+0x104>)
 80002ca:	705a      	strb	r2, [r3, #1]
	  gamepadBuffer[2] = gamepad.leftAxis[1]; // right movement
 80002cc:	4b14      	ldr	r3, [pc, #80]	@ (8000320 <main+0x100>)
 80002ce:	789a      	ldrb	r2, [r3, #2]
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <main+0x104>)
 80002d2:	709a      	strb	r2, [r3, #2]

	  gamepadBuffer[3] = gamepad.rightAxis[0]; // left movement (-1,1)
 80002d4:	4b12      	ldr	r3, [pc, #72]	@ (8000320 <main+0x100>)
 80002d6:	78da      	ldrb	r2, [r3, #3]
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <main+0x104>)
 80002da:	70da      	strb	r2, [r3, #3]
	  gamepadBuffer[4] = gamepad.rightAxis[1]; // right movement
 80002dc:	4b10      	ldr	r3, [pc, #64]	@ (8000320 <main+0x100>)
 80002de:	791a      	ldrb	r2, [r3, #4]
 80002e0:	4b10      	ldr	r3, [pc, #64]	@ (8000324 <main+0x104>)
 80002e2:	711a      	strb	r2, [r3, #4]

	  gamepadBuffer[5] = (uint8_t) (0x00FF & gamepad.buttons); // buttons
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <main+0x100>)
 80002e6:	88db      	ldrh	r3, [r3, #6]
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000324 <main+0x104>)
 80002ec:	715a      	strb	r2, [r3, #5]
	  gamepadBuffer[6] = (uint8_t) ((0xFF00 & gamepad.buttons) >> 8); // buttons
 80002ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000320 <main+0x100>)
 80002f0:	88db      	ldrh	r3, [r3, #6]
 80002f2:	0a1b      	lsrs	r3, r3, #8
 80002f4:	b29b      	uxth	r3, r3
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <main+0x104>)
 80002fa:	719a      	strb	r2, [r3, #6]

	  USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, gamepadBuffer, 7);
 80002fc:	2207      	movs	r2, #7
 80002fe:	4909      	ldr	r1, [pc, #36]	@ (8000324 <main+0x104>)
 8000300:	4809      	ldr	r0, [pc, #36]	@ (8000328 <main+0x108>)
 8000302:	f008 f855 	bl	80083b0 <USBD_CUSTOM_HID_SendReport>
	  HAL_Delay(100);
 8000306:	2064      	movs	r0, #100	@ 0x64
 8000308:	f000 fcf8 	bl	8000cfc <HAL_Delay>
	  gamepad.leftAxis[0] = (analogBuffer1[0]-2048)/16;
 800030c:	bf00      	nop
 800030e:	e7b5      	b.n	800027c <main+0x5c>
 8000310:	20000310 	.word	0x20000310
 8000314:	2000018c 	.word	0x2000018c
 8000318:	20000318 	.word	0x20000318
 800031c:	200001dc 	.word	0x200001dc
 8000320:	20000308 	.word	0x20000308
 8000324:	20000320 	.word	0x20000320
 8000328:	20000334 	.word	0x20000334

0800032c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b09e      	sub	sp, #120	@ 0x78
 8000330:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000332:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000336:	2228      	movs	r2, #40	@ 0x28
 8000338:	2100      	movs	r1, #0
 800033a:	4618      	mov	r0, r3
 800033c:	f009 fdbc 	bl	8009eb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000340:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
 800034c:	60da      	str	r2, [r3, #12]
 800034e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000350:	463b      	mov	r3, r7
 8000352:	223c      	movs	r2, #60	@ 0x3c
 8000354:	2100      	movs	r1, #0
 8000356:	4618      	mov	r0, r3
 8000358:	f009 fdae 	bl	8009eb8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800035c:	2303      	movs	r3, #3
 800035e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000360:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000364:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000366:	2300      	movs	r3, #0
 8000368:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800036a:	2301      	movs	r3, #1
 800036c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800036e:	2310      	movs	r3, #16
 8000370:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000372:	2302      	movs	r3, #2
 8000374:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000376:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800037a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800037c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000380:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000382:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000386:	4618      	mov	r0, r3
 8000388:	f003 ff6c 	bl	8004264 <HAL_RCC_OscConfig>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000392:	f000 fa49 	bl	8000828 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000396:	230f      	movs	r3, #15
 8000398:	63fb      	str	r3, [r7, #60]	@ 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800039a:	2302      	movs	r3, #2
 800039c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800039e:	2300      	movs	r3, #0
 80003a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003a6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80003ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80003b0:	2101      	movs	r1, #1
 80003b2:	4618      	mov	r0, r3
 80003b4:	f004 ff94 	bl	80052e0 <HAL_RCC_ClockConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80003be:	f000 fa33 	bl	8000828 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1
 80003c2:	4b0b      	ldr	r3, [pc, #44]	@ (80003f0 <SystemClock_Config+0xc4>)
 80003c4:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80003c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ca:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL;
 80003d0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80003d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003d6:	463b      	mov	r3, r7
 80003d8:	4618      	mov	r0, r3
 80003da:	f005 f951 	bl	8005680 <HAL_RCCEx_PeriphCLKConfig>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80003e4:	f000 fa20 	bl	8000828 <Error_Handler>
  }
}
 80003e8:	bf00      	nop
 80003ea:	3778      	adds	r7, #120	@ 0x78
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	000200a0 	.word	0x000200a0

080003f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b08a      	sub	sp, #40	@ 0x28
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80003fa:	f107 031c 	add.w	r3, r7, #28
 80003fe:	2200      	movs	r2, #0
 8000400:	601a      	str	r2, [r3, #0]
 8000402:	605a      	str	r2, [r3, #4]
 8000404:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000406:	1d3b      	adds	r3, r7, #4
 8000408:	2200      	movs	r2, #0
 800040a:	601a      	str	r2, [r3, #0]
 800040c:	605a      	str	r2, [r3, #4]
 800040e:	609a      	str	r2, [r3, #8]
 8000410:	60da      	str	r2, [r3, #12]
 8000412:	611a      	str	r2, [r3, #16]
 8000414:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000416:	4b35      	ldr	r3, [pc, #212]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000418:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800041c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800041e:	4b33      	ldr	r3, [pc, #204]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000420:	2200      	movs	r2, #0
 8000422:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000424:	4b31      	ldr	r3, [pc, #196]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000426:	2200      	movs	r2, #0
 8000428:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800042a:	4b30      	ldr	r3, [pc, #192]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800042c:	2201      	movs	r2, #1
 800042e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000430:	4b2e      	ldr	r3, [pc, #184]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000432:	2201      	movs	r2, #1
 8000434:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000436:	4b2d      	ldr	r3, [pc, #180]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000438:	2200      	movs	r2, #0
 800043a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800043e:	4b2b      	ldr	r3, [pc, #172]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000440:	2200      	movs	r2, #0
 8000442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000444:	4b29      	ldr	r3, [pc, #164]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000446:	2201      	movs	r2, #1
 8000448:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800044a:	4b28      	ldr	r3, [pc, #160]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800044c:	2200      	movs	r2, #0
 800044e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000450:	4b26      	ldr	r3, [pc, #152]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000452:	2202      	movs	r2, #2
 8000454:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000456:	4b25      	ldr	r3, [pc, #148]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000458:	2201      	movs	r2, #1
 800045a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800045e:	4b23      	ldr	r3, [pc, #140]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000460:	2208      	movs	r2, #8
 8000462:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000464:	4b21      	ldr	r3, [pc, #132]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000466:	2200      	movs	r2, #0
 8000468:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800046a:	4b20      	ldr	r3, [pc, #128]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800046c:	2200      	movs	r2, #0
 800046e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000470:	481e      	ldr	r0, [pc, #120]	@ (80004ec <MX_ADC1_Init+0xf8>)
 8000472:	f000 fc85 	bl	8000d80 <HAL_ADC_Init>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 800047c:	f000 f9d4 	bl	8000828 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000484:	f107 031c 	add.w	r3, r7, #28
 8000488:	4619      	mov	r1, r3
 800048a:	4818      	ldr	r0, [pc, #96]	@ (80004ec <MX_ADC1_Init+0xf8>)
 800048c:	f001 fa5e 	bl	800194c <HAL_ADCEx_MultiModeConfigChannel>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000496:	f000 f9c7 	bl	8000828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800049a:	2301      	movs	r3, #1
 800049c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800049e:	2301      	movs	r3, #1
 80004a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 80004a6:	2307      	movs	r3, #7
 80004a8:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80004aa:	2300      	movs	r3, #0
 80004ac:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	4619      	mov	r1, r3
 80004b6:	480d      	ldr	r0, [pc, #52]	@ (80004ec <MX_ADC1_Init+0xf8>)
 80004b8:	f000 ff5e 	bl	8001378 <HAL_ADC_ConfigChannel>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80004c2:	f000 f9b1 	bl	8000828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80004c6:	2302      	movs	r3, #2
 80004c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80004ca:	2302      	movs	r3, #2
 80004cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	4619      	mov	r1, r3
 80004d2:	4806      	ldr	r0, [pc, #24]	@ (80004ec <MX_ADC1_Init+0xf8>)
 80004d4:	f000 ff50 	bl	8001378 <HAL_ADC_ConfigChannel>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 80004de:	f000 f9a3 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e2:	bf00      	nop
 80004e4:	3728      	adds	r7, #40	@ 0x28
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	2000018c 	.word	0x2000018c

080004f0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004f6:	463b      	mov	r3, r7
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000506:	4b2e      	ldr	r3, [pc, #184]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000508:	4a2e      	ldr	r2, [pc, #184]	@ (80005c4 <MX_ADC2_Init+0xd4>)
 800050a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800050c:	4b2c      	ldr	r3, [pc, #176]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800050e:	2200      	movs	r2, #0
 8000510:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000512:	4b2b      	ldr	r3, [pc, #172]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000514:	2200      	movs	r2, #0
 8000516:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000518:	4b29      	ldr	r3, [pc, #164]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800051a:	2201      	movs	r2, #1
 800051c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800051e:	4b28      	ldr	r3, [pc, #160]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000520:	2201      	movs	r2, #1
 8000522:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000524:	4b26      	ldr	r3, [pc, #152]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000526:	2200      	movs	r2, #0
 8000528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800052c:	4b24      	ldr	r3, [pc, #144]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800052e:	2200      	movs	r2, #0
 8000530:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000532:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000534:	2201      	movs	r2, #1
 8000536:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000538:	4b21      	ldr	r3, [pc, #132]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800053a:	2200      	movs	r2, #0
 800053c:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000540:	2202      	movs	r2, #2
 8000542:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000546:	2201      	movs	r2, #1
 8000548:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800054c:	4b1c      	ldr	r3, [pc, #112]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800054e:	2208      	movs	r2, #8
 8000550:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000552:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000554:	2200      	movs	r2, #0
 8000556:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000558:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800055a:	2200      	movs	r2, #0
 800055c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800055e:	4818      	ldr	r0, [pc, #96]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 8000560:	f000 fc0e 	bl	8000d80 <HAL_ADC_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800056a:	f000 f95d 	bl	8000828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800056e:	2305      	movs	r3, #5
 8000570:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000572:	2301      	movs	r3, #1
 8000574:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800057a:	2307      	movs	r3, #7
 800057c:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800057e:	2300      	movs	r3, #0
 8000580:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000582:	2300      	movs	r3, #0
 8000584:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000586:	463b      	mov	r3, r7
 8000588:	4619      	mov	r1, r3
 800058a:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 800058c:	f000 fef4 	bl	8001378 <HAL_ADC_ConfigChannel>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000596:	f000 f947 	bl	8000828 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800059a:	2306      	movs	r3, #6
 800059c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800059e:	2302      	movs	r3, #2
 80005a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005a2:	463b      	mov	r3, r7
 80005a4:	4619      	mov	r1, r3
 80005a6:	4806      	ldr	r0, [pc, #24]	@ (80005c0 <MX_ADC2_Init+0xd0>)
 80005a8:	f000 fee6 	bl	8001378 <HAL_ADC_ConfigChannel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d001      	beq.n	80005b6 <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 80005b2:	f000 f939 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005b6:	bf00      	nop
 80005b8:	3718      	adds	r7, #24
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200001dc 	.word	0x200001dc
 80005c4:	50000100 	.word	0x50000100

080005c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80005cc:	4b1b      	ldr	r3, [pc, #108]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ce:	4a1c      	ldr	r2, [pc, #112]	@ (8000640 <MX_I2C1_Init+0x78>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 80005d2:	4b1a      	ldr	r3, [pc, #104]	@ (800063c <MX_I2C1_Init+0x74>)
 80005d4:	4a1b      	ldr	r2, [pc, #108]	@ (8000644 <MX_I2C1_Init+0x7c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80005d8:	4b18      	ldr	r3, [pc, #96]	@ (800063c <MX_I2C1_Init+0x74>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b17      	ldr	r3, [pc, #92]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b15      	ldr	r3, [pc, #84]	@ (800063c <MX_I2C1_Init+0x74>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80005ea:	4b14      	ldr	r3, [pc, #80]	@ (800063c <MX_I2C1_Init+0x74>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b12      	ldr	r3, [pc, #72]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005f6:	4b11      	ldr	r3, [pc, #68]	@ (800063c <MX_I2C1_Init+0x74>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005fc:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <MX_I2C1_Init+0x74>)
 80005fe:	2200      	movs	r2, #0
 8000600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000602:	480e      	ldr	r0, [pc, #56]	@ (800063c <MX_I2C1_Init+0x74>)
 8000604:	f002 f84a 	bl	800269c <HAL_I2C_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800060e:	f000 f90b 	bl	8000828 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000612:	2100      	movs	r1, #0
 8000614:	4809      	ldr	r0, [pc, #36]	@ (800063c <MX_I2C1_Init+0x74>)
 8000616:	f002 f8dc 	bl	80027d2 <HAL_I2CEx_ConfigAnalogFilter>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000620:	f000 f902 	bl	8000828 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	4805      	ldr	r0, [pc, #20]	@ (800063c <MX_I2C1_Init+0x74>)
 8000628:	f002 f91e 	bl	8002868 <HAL_I2CEx_ConfigDigitalFilter>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000632:	f000 f8f9 	bl	8000828 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000636:	bf00      	nop
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002b4 	.word	0x200002b4
 8000640:	40005400 	.word	0x40005400
 8000644:	2000090e 	.word	0x2000090e

08000648 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800064e:	4b16      	ldr	r3, [pc, #88]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	4a15      	ldr	r2, [pc, #84]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	6153      	str	r3, [r2, #20]
 800065a:	4b13      	ldr	r3, [pc, #76]	@ (80006a8 <MX_DMA_Init+0x60>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000666:	4b10      	ldr	r3, [pc, #64]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	4a0f      	ldr	r2, [pc, #60]	@ (80006a8 <MX_DMA_Init+0x60>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	6153      	str	r3, [r2, #20]
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <MX_DMA_Init+0x60>)
 8000674:	695b      	ldr	r3, [r3, #20]
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	603b      	str	r3, [r7, #0]
 800067c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	200b      	movs	r0, #11
 8000684:	f001 fc5f 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000688:	200b      	movs	r0, #11
 800068a:	f001 fc78 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 800068e:	2200      	movs	r2, #0
 8000690:	2100      	movs	r1, #0
 8000692:	2038      	movs	r0, #56	@ 0x38
 8000694:	f001 fc57 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000698:	2038      	movs	r0, #56	@ 0x38
 800069a:	f001 fc70 	bl	8001f7e <HAL_NVIC_EnableIRQ>

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40021000 	.word	0x40021000

080006ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08c      	sub	sp, #48	@ 0x30
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c2:	4b56      	ldr	r3, [pc, #344]	@ (800081c <MX_GPIO_Init+0x170>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a55      	ldr	r2, [pc, #340]	@ (800081c <MX_GPIO_Init+0x170>)
 80006c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b53      	ldr	r3, [pc, #332]	@ (800081c <MX_GPIO_Init+0x170>)
 80006d0:	695b      	ldr	r3, [r3, #20]
 80006d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006d6:	61bb      	str	r3, [r7, #24]
 80006d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006da:	4b50      	ldr	r3, [pc, #320]	@ (800081c <MX_GPIO_Init+0x170>)
 80006dc:	695b      	ldr	r3, [r3, #20]
 80006de:	4a4f      	ldr	r2, [pc, #316]	@ (800081c <MX_GPIO_Init+0x170>)
 80006e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80006e4:	6153      	str	r3, [r2, #20]
 80006e6:	4b4d      	ldr	r3, [pc, #308]	@ (800081c <MX_GPIO_Init+0x170>)
 80006e8:	695b      	ldr	r3, [r3, #20]
 80006ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80006ee:	617b      	str	r3, [r7, #20]
 80006f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006f2:	4b4a      	ldr	r3, [pc, #296]	@ (800081c <MX_GPIO_Init+0x170>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	4a49      	ldr	r2, [pc, #292]	@ (800081c <MX_GPIO_Init+0x170>)
 80006f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80006fc:	6153      	str	r3, [r2, #20]
 80006fe:	4b47      	ldr	r3, [pc, #284]	@ (800081c <MX_GPIO_Init+0x170>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b44      	ldr	r3, [pc, #272]	@ (800081c <MX_GPIO_Init+0x170>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	4a43      	ldr	r2, [pc, #268]	@ (800081c <MX_GPIO_Init+0x170>)
 8000710:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000714:	6153      	str	r3, [r2, #20]
 8000716:	4b41      	ldr	r3, [pc, #260]	@ (800081c <MX_GPIO_Init+0x170>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <MX_GPIO_Init+0x170>)
 8000724:	695b      	ldr	r3, [r3, #20]
 8000726:	4a3d      	ldr	r2, [pc, #244]	@ (800081c <MX_GPIO_Init+0x170>)
 8000728:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800072c:	6153      	str	r3, [r2, #20]
 800072e:	4b3b      	ldr	r3, [pc, #236]	@ (800081c <MX_GPIO_Init+0x170>)
 8000730:	695b      	ldr	r3, [r3, #20]
 8000732:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b38      	ldr	r3, [pc, #224]	@ (800081c <MX_GPIO_Init+0x170>)
 800073c:	695b      	ldr	r3, [r3, #20]
 800073e:	4a37      	ldr	r2, [pc, #220]	@ (800081c <MX_GPIO_Init+0x170>)
 8000740:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000744:	6153      	str	r3, [r2, #20]
 8000746:	4b35      	ldr	r3, [pc, #212]	@ (800081c <MX_GPIO_Init+0x170>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 8000752:	2200      	movs	r2, #0
 8000754:	f64d 1108 	movw	r1, #55560	@ 0xd908
 8000758:	4831      	ldr	r0, [pc, #196]	@ (8000820 <MX_GPIO_Init+0x174>)
 800075a:	f001 ff6f 	bl	800263c <HAL_GPIO_WritePin>
                          |LD8_Pin|LD6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin LD4_Pin LD7_Pin LD9_Pin
                           LD8_Pin LD6_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LD4_Pin|LD7_Pin|LD9_Pin
 800075e:	f64d 1308 	movw	r3, #55560	@ 0xd908
 8000762:	61fb      	str	r3, [r7, #28]
                          |LD8_Pin|LD6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000764:	2301      	movs	r3, #1
 8000766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076c:	2300      	movs	r3, #0
 800076e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000770:	f107 031c 	add.w	r3, r7, #28
 8000774:	4619      	mov	r1, r3
 8000776:	482a      	ldr	r0, [pc, #168]	@ (8000820 <MX_GPIO_Init+0x174>)
 8000778:	f001 fdce 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT4_Pin */
  GPIO_InitStruct.Pin = MEMS_INT4_Pin;
 800077c:	2320      	movs	r3, #32
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000780:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000784:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	2300      	movs	r3, #0
 8000788:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT4_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 031c 	add.w	r3, r7, #28
 800078e:	4619      	mov	r1, r3
 8000790:	4823      	ldr	r0, [pc, #140]	@ (8000820 <MX_GPIO_Init+0x174>)
 8000792:	f001 fdc1 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MISOA7_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MISOA7_Pin;
 8000796:	23c0      	movs	r3, #192	@ 0xc0
 8000798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a2:	2303      	movs	r3, #3
 80007a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007a6:	2305      	movs	r3, #5
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007b4:	f001 fdb0 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80007b8:	230f      	movs	r3, #15
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007bc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80007c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c6:	f107 031c 	add.w	r3, r7, #28
 80007ca:	4619      	mov	r1, r3
 80007cc:	4815      	ldr	r0, [pc, #84]	@ (8000824 <MX_GPIO_Init+0x178>)
 80007ce:	f001 fda3 	bl	8002318 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2006      	movs	r0, #6
 80007d8:	f001 fbb5 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007dc:	2006      	movs	r0, #6
 80007de:	f001 fbce 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2100      	movs	r1, #0
 80007e6:	2007      	movs	r0, #7
 80007e8:	f001 fbad 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007ec:	2007      	movs	r0, #7
 80007ee:	f001 fbc6 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_TSC_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2008      	movs	r0, #8
 80007f8:	f001 fba5 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_TSC_IRQn);
 80007fc:	2008      	movs	r0, #8
 80007fe:	f001 fbbe 	bl	8001f7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2009      	movs	r0, #9
 8000808:	f001 fb9d 	bl	8001f46 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800080c:	2009      	movs	r0, #9
 800080e:	f001 fbb6 	bl	8001f7e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000812:	bf00      	nop
 8000814:	3730      	adds	r7, #48	@ 0x30
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	48001000 	.word	0x48001000
 8000824:	48000c00 	.word	0x48000c00

08000828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800082c:	b672      	cpsid	i
}
 800082e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000830:	bf00      	nop
 8000832:	e7fd      	b.n	8000830 <Error_Handler+0x8>

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	@ (8000878 <HAL_MspInit+0x44>)
 800083c:	699b      	ldr	r3, [r3, #24]
 800083e:	4a0e      	ldr	r2, [pc, #56]	@ (8000878 <HAL_MspInit+0x44>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	6193      	str	r3, [r2, #24]
 8000846:	4b0c      	ldr	r3, [pc, #48]	@ (8000878 <HAL_MspInit+0x44>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <HAL_MspInit+0x44>)
 8000854:	69db      	ldr	r3, [r3, #28]
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <HAL_MspInit+0x44>)
 8000858:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800085c:	61d3      	str	r3, [r2, #28]
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <HAL_MspInit+0x44>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800086a:	2007      	movs	r0, #7
 800086c:	f001 fb60 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000870:	bf00      	nop
 8000872:	3708      	adds	r7, #8
 8000874:	46bd      	mov	sp, r7
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40021000 	.word	0x40021000

0800087c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08c      	sub	sp, #48	@ 0x30
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800089c:	d156      	bne.n	800094c <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800089e:	4b67      	ldr	r3, [pc, #412]	@ (8000a3c <HAL_ADC_MspInit+0x1c0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	3301      	adds	r3, #1
 80008a4:	4a65      	ldr	r2, [pc, #404]	@ (8000a3c <HAL_ADC_MspInit+0x1c0>)
 80008a6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008a8:	4b64      	ldr	r3, [pc, #400]	@ (8000a3c <HAL_ADC_MspInit+0x1c0>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d10b      	bne.n	80008c8 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008b0:	4b63      	ldr	r3, [pc, #396]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80008b2:	695b      	ldr	r3, [r3, #20]
 80008b4:	4a62      	ldr	r2, [pc, #392]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80008b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ba:	6153      	str	r3, [r2, #20]
 80008bc:	4b60      	ldr	r3, [pc, #384]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80008be:	695b      	ldr	r3, [r3, #20]
 80008c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008c4:	61bb      	str	r3, [r7, #24]
 80008c6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b5d      	ldr	r3, [pc, #372]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80008ca:	695b      	ldr	r3, [r3, #20]
 80008cc:	4a5c      	ldr	r2, [pc, #368]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80008ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008d2:	6153      	str	r3, [r2, #20]
 80008d4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80008d6:	695b      	ldr	r3, [r3, #20]
 80008d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008dc:	617b      	str	r3, [r7, #20]
 80008de:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008e0:	2303      	movs	r3, #3
 80008e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008f6:	f001 fd0f 	bl	8002318 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80008fa:	4b52      	ldr	r3, [pc, #328]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 80008fc:	4a52      	ldr	r2, [pc, #328]	@ (8000a48 <HAL_ADC_MspInit+0x1cc>)
 80008fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000900:	4b50      	ldr	r3, [pc, #320]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000906:	4b4f      	ldr	r3, [pc, #316]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800090c:	4b4d      	ldr	r3, [pc, #308]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 800090e:	2280      	movs	r2, #128	@ 0x80
 8000910:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000912:	4b4c      	ldr	r3, [pc, #304]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000914:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000918:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800091a:	4b4a      	ldr	r3, [pc, #296]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 800091c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000920:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000922:	4b48      	ldr	r3, [pc, #288]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000924:	2220      	movs	r2, #32
 8000926:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000928:	4b46      	ldr	r3, [pc, #280]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800092e:	4845      	ldr	r0, [pc, #276]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000930:	f001 fb3f 	bl	8001fb2 <HAL_DMA_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800093a:	f7ff ff75 	bl	8000828 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4a40      	ldr	r2, [pc, #256]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000942:	639a      	str	r2, [r3, #56]	@ 0x38
 8000944:	4a3f      	ldr	r2, [pc, #252]	@ (8000a44 <HAL_ADC_MspInit+0x1c8>)
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800094a:	e072      	b.n	8000a32 <HAL_ADC_MspInit+0x1b6>
  else if(hadc->Instance==ADC2)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a3e      	ldr	r2, [pc, #248]	@ (8000a4c <HAL_ADC_MspInit+0x1d0>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d16d      	bne.n	8000a32 <HAL_ADC_MspInit+0x1b6>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000956:	4b39      	ldr	r3, [pc, #228]	@ (8000a3c <HAL_ADC_MspInit+0x1c0>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	4a37      	ldr	r2, [pc, #220]	@ (8000a3c <HAL_ADC_MspInit+0x1c0>)
 800095e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000960:	4b36      	ldr	r3, [pc, #216]	@ (8000a3c <HAL_ADC_MspInit+0x1c0>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d10b      	bne.n	8000980 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000968:	4b35      	ldr	r3, [pc, #212]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 800096a:	695b      	ldr	r3, [r3, #20]
 800096c:	4a34      	ldr	r2, [pc, #208]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 800096e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000972:	6153      	str	r3, [r2, #20]
 8000974:	4b32      	ldr	r3, [pc, #200]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000980:	4b2f      	ldr	r3, [pc, #188]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a2e      	ldr	r2, [pc, #184]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 8000986:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800098a:	6153      	str	r3, [r2, #20]
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 800098e:	695b      	ldr	r3, [r3, #20]
 8000990:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	4a28      	ldr	r2, [pc, #160]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 800099e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a2:	6153      	str	r3, [r2, #20]
 80009a4:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <HAL_ADC_MspInit+0x1c4>)
 80009a6:	695b      	ldr	r3, [r3, #20]
 80009a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
 80009ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 80009b0:	2311      	movs	r3, #17
 80009b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009b4:	2303      	movs	r3, #3
 80009b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4823      	ldr	r0, [pc, #140]	@ (8000a50 <HAL_ADC_MspInit+0x1d4>)
 80009c4:	f001 fca8 	bl	8002318 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009c8:	2320      	movs	r3, #32
 80009ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009cc:	2303      	movs	r3, #3
 80009ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d4:	f107 031c 	add.w	r3, r7, #28
 80009d8:	4619      	mov	r1, r3
 80009da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009de:	f001 fc9b 	bl	8002318 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 80009e2:	4b1c      	ldr	r3, [pc, #112]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 80009e4:	4a1c      	ldr	r2, [pc, #112]	@ (8000a58 <HAL_ADC_MspInit+0x1dc>)
 80009e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009e8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80009f4:	4b17      	ldr	r3, [pc, #92]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 80009f6:	2280      	movs	r2, #128	@ 0x80
 80009f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80009fa:	4b16      	ldr	r3, [pc, #88]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 80009fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a00:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a02:	4b14      	ldr	r3, [pc, #80]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 8000a04:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000a08:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000a0a:	4b12      	ldr	r3, [pc, #72]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000a10:	4b10      	ldr	r3, [pc, #64]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000a16:	480f      	ldr	r0, [pc, #60]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 8000a18:	f001 facb 	bl	8001fb2 <HAL_DMA_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_ADC_MspInit+0x1aa>
      Error_Handler();
 8000a22:	f7ff ff01 	bl	8000828 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4a0a      	ldr	r2, [pc, #40]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 8000a2a:	639a      	str	r2, [r3, #56]	@ 0x38
 8000a2c:	4a09      	ldr	r2, [pc, #36]	@ (8000a54 <HAL_ADC_MspInit+0x1d8>)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	@ 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000328 	.word	0x20000328
 8000a40:	40021000 	.word	0x40021000
 8000a44:	2000022c 	.word	0x2000022c
 8000a48:	40020008 	.word	0x40020008
 8000a4c:	50000100 	.word	0x50000100
 8000a50:	48000800 	.word	0x48000800
 8000a54:	20000270 	.word	0x20000270
 8000a58:	40020408 	.word	0x40020408

08000a5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a17      	ldr	r2, [pc, #92]	@ (8000ad8 <HAL_I2C_MspInit+0x7c>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d127      	bne.n	8000ace <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	4b17      	ldr	r3, [pc, #92]	@ (8000adc <HAL_I2C_MspInit+0x80>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	4a16      	ldr	r2, [pc, #88]	@ (8000adc <HAL_I2C_MspInit+0x80>)
 8000a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a88:	6153      	str	r3, [r2, #20]
 8000a8a:	4b14      	ldr	r3, [pc, #80]	@ (8000adc <HAL_I2C_MspInit+0x80>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000a92:	613b      	str	r3, [r7, #16]
 8000a94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8000a96:	23c0      	movs	r3, #192	@ 0xc0
 8000a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9a:	2312      	movs	r3, #18
 8000a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aa6:	2304      	movs	r3, #4
 8000aa8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480b      	ldr	r0, [pc, #44]	@ (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000ab2:	f001 fc31 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ab6:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <HAL_I2C_MspInit+0x80>)
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	4a08      	ldr	r2, [pc, #32]	@ (8000adc <HAL_I2C_MspInit+0x80>)
 8000abc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac0:	61d3      	str	r3, [r2, #28]
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_I2C_MspInit+0x80>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40005400 	.word	0x40005400
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	48000400 	.word	0x48000400

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr

08000b1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b1a:	b480      	push	{r7}
 8000b1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b3a:	f000 f8bf 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}

08000b42 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b42:	b580      	push	{r7, lr}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b46:	2001      	movs	r0, #1
 8000b48:	f001 fd90 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000b54:	2002      	movs	r0, #2
 8000b56:	f001 fd89 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <EXTI2_TSC_IRQHandler>:

/**
  * @brief This function handles EXTI line2 and Touch Sense controller.
  */
void EXTI2_TSC_IRQHandler(void)
{
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_TSC_IRQn 0 */

  /* USER CODE END EXTI2_TSC_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f001 fd82 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_TSC_IRQn 1 */

  /* USER CODE END EXTI2_TSC_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}

08000b6c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b70:	2008      	movs	r0, #8
 8000b72:	f001 fd7b 	bl	800266c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <DMA1_Channel1_IRQHandler+0x10>)
 8000b82:	f001 fabc 	bl	80020fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000022c 	.word	0x2000022c

08000b90 <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000b94:	4802      	ldr	r0, [pc, #8]	@ (8000ba0 <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8000b96:	f001 ffa0 	bl	8002ada <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	200007f8 	.word	0x200007f8

08000ba4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <DMA2_Channel1_IRQHandler+0x10>)
 8000baa:	f001 faa8 	bl	80020fe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000270 	.word	0x20000270

08000bb8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopForever+0xe>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopForever+0x16>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f009 f95d 	bl	8009ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c0e:	f7ff fb07 	bl	8000220 <main>

08000c12 <LoopForever>:

LoopForever:
    b LoopForever
 8000c12:	e7fe      	b.n	8000c12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000c14:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8000c20:	08009fc0 	.word	0x08009fc0
  ldr r2, =_sbss
 8000c24:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8000c28:	20000b24 	.word	0x20000b24

08000c2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC1_2_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c34:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <HAL_Init+0x28>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a07      	ldr	r2, [pc, #28]	@ (8000c58 <HAL_Init+0x28>)
 8000c3a:	f043 0310 	orr.w	r3, r3, #16
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c40:	2003      	movs	r0, #3
 8000c42:	f001 f975 	bl	8001f30 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f000 f808 	bl	8000c5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c4c:	f7ff fdf2 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40022000 	.word	0x40022000

08000c5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <HAL_InitTick+0x54>)
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <HAL_InitTick+0x58>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 f98d 	bl	8001f9a <HAL_SYSTICK_Config>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e00e      	b.n	8000ca8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2b0f      	cmp	r3, #15
 8000c8e:	d80a      	bhi.n	8000ca6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c90:	2200      	movs	r2, #0
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c98:	f001 f955 	bl	8001f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c9c:	4a06      	ldr	r2, [pc, #24]	@ (8000cb8 <HAL_InitTick+0x5c>)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	e000      	b.n	8000ca8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	20000000 	.word	0x20000000
 8000cb4:	20000008 	.word	0x20000008
 8000cb8:	20000004 	.word	0x20000004

08000cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000008 	.word	0x20000008
 8000ce0:	2000032c 	.word	0x2000032c

08000ce4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce8:	4b03      	ldr	r3, [pc, #12]	@ (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000032c 	.word	0x2000032c

08000cfc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d16:	4b0a      	ldr	r3, [pc, #40]	@ (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20000008 	.word	0x20000008

08000d44 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr

08000d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b09a      	sub	sp, #104	@ 0x68
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d101      	bne.n	8000da0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e1c9      	b.n	8001134 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000daa:	f003 0310 	and.w	r3, r3, #16
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d176      	bne.n	8000ea0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d152      	bne.n	8000e60 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2200      	movs	r2, #0
 8000dca:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fd51 	bl	800087c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d13b      	bne.n	8000e60 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f000 ff6b 	bl	8001cc4 <ADC_Disable>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	f003 0310 	and.w	r3, r3, #16
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d12f      	bne.n	8000e60 <HAL_ADC_Init+0xe0>
 8000e00:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12b      	bne.n	8000e60 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000e10:	f023 0302 	bic.w	r3, r3, #2
 8000e14:	f043 0202 	orr.w	r2, r3, #2
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	689a      	ldr	r2, [r3, #8]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8000e2a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	689a      	ldr	r2, [r3, #8]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000e3a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e3c:	4b86      	ldr	r3, [pc, #536]	@ (8001058 <HAL_ADC_Init+0x2d8>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a86      	ldr	r2, [pc, #536]	@ (800105c <HAL_ADC_Init+0x2dc>)
 8000e42:	fba2 2303 	umull	r2, r3, r2, r3
 8000e46:	0c9a      	lsrs	r2, r3, #18
 8000e48:	4613      	mov	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	4413      	add	r3, r2
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e52:	e002      	b.n	8000e5a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3b01      	subs	r3, #1
 8000e58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e5a:	68bb      	ldr	r3, [r7, #8]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d1f9      	bne.n	8000e54 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000e7c:	d110      	bne.n	8000ea0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e82:	f023 0312 	bic.w	r3, r3, #18
 8000e86:	f043 0210 	orr.w	r2, r3, #16
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e92:	f043 0201 	orr.w	r2, r3, #1
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	f003 0310 	and.w	r3, r3, #16
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f040 8136 	bne.w	800111a <HAL_ADC_Init+0x39a>
 8000eae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 8131 	bne.w	800111a <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f040 8129 	bne.w	800111a <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ecc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8000ed0:	f043 0202 	orr.w	r2, r3, #2
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000ee0:	d004      	beq.n	8000eec <HAL_ADC_Init+0x16c>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a5e      	ldr	r2, [pc, #376]	@ (8001060 <HAL_ADC_Init+0x2e0>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d101      	bne.n	8000ef0 <HAL_ADC_Init+0x170>
 8000eec:	4b5d      	ldr	r3, [pc, #372]	@ (8001064 <HAL_ADC_Init+0x2e4>)
 8000eee:	e000      	b.n	8000ef2 <HAL_ADC_Init+0x172>
 8000ef0:	4b5d      	ldr	r3, [pc, #372]	@ (8001068 <HAL_ADC_Init+0x2e8>)
 8000ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000efc:	d102      	bne.n	8000f04 <HAL_ADC_Init+0x184>
 8000efe:	4b58      	ldr	r3, [pc, #352]	@ (8001060 <HAL_ADC_Init+0x2e0>)
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	e01a      	b.n	8000f3a <HAL_ADC_Init+0x1ba>
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a55      	ldr	r2, [pc, #340]	@ (8001060 <HAL_ADC_Init+0x2e0>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d103      	bne.n	8000f16 <HAL_ADC_Init+0x196>
 8000f0e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	e011      	b.n	8000f3a <HAL_ADC_Init+0x1ba>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a54      	ldr	r2, [pc, #336]	@ (800106c <HAL_ADC_Init+0x2ec>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d102      	bne.n	8000f26 <HAL_ADC_Init+0x1a6>
 8000f20:	4b53      	ldr	r3, [pc, #332]	@ (8001070 <HAL_ADC_Init+0x2f0>)
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	e009      	b.n	8000f3a <HAL_ADC_Init+0x1ba>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a51      	ldr	r2, [pc, #324]	@ (8001070 <HAL_ADC_Init+0x2f0>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d102      	bne.n	8000f36 <HAL_ADC_Init+0x1b6>
 8000f30:	4b4e      	ldr	r3, [pc, #312]	@ (800106c <HAL_ADC_Init+0x2ec>)
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	e001      	b.n	8000f3a <HAL_ADC_Init+0x1ba>
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d108      	bne.n	8000f5a <HAL_ADC_Init+0x1da>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HAL_ADC_Init+0x1da>
 8000f56:	2301      	movs	r3, #1
 8000f58:	e000      	b.n	8000f5c <HAL_ADC_Init+0x1dc>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d11c      	bne.n	8000f9a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f60:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d010      	beq.n	8000f88 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d107      	bne.n	8000f82 <HAL_ADC_Init+0x202>
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b01      	cmp	r3, #1
 8000f7c:	d101      	bne.n	8000f82 <HAL_ADC_Init+0x202>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e000      	b.n	8000f84 <HAL_ADC_Init+0x204>
 8000f82:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d108      	bne.n	8000f9a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000f98:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7e5b      	ldrb	r3, [r3, #25]
 8000f9e:	035b      	lsls	r3, r3, #13
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000fa4:	2a01      	cmp	r2, #1
 8000fa6:	d002      	beq.n	8000fae <HAL_ADC_Init+0x22e>
 8000fa8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000fac:	e000      	b.n	8000fb0 <HAL_ADC_Init+0x230>
 8000fae:	2200      	movs	r2, #0
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	431a      	orrs	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d11b      	bne.n	8001006 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7e5b      	ldrb	r3, [r3, #25]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d109      	bne.n	8000fea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	045a      	lsls	r2, r3, #17
 8000fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fe6:	663b      	str	r3, [r7, #96]	@ 0x60
 8000fe8:	e00d      	b.n	8001006 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000ff2:	f043 0220 	orr.w	r2, r3, #32
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ffe:	f043 0201 	orr.w	r2, r3, #1
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800100a:	2b01      	cmp	r3, #1
 800100c:	d03a      	beq.n	8001084 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a16      	ldr	r2, [pc, #88]	@ (800106c <HAL_ADC_Init+0x2ec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d004      	beq.n	8001022 <HAL_ADC_Init+0x2a2>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a14      	ldr	r2, [pc, #80]	@ (8001070 <HAL_ADC_Init+0x2f0>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d128      	bne.n	8001074 <HAL_ADC_Init+0x2f4>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001026:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800102a:	d012      	beq.n	8001052 <HAL_ADC_Init+0x2d2>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001034:	d00a      	beq.n	800104c <HAL_ADC_Init+0x2cc>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800103e:	d002      	beq.n	8001046 <HAL_ADC_Init+0x2c6>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001044:	e018      	b.n	8001078 <HAL_ADC_Init+0x2f8>
 8001046:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800104a:	e015      	b.n	8001078 <HAL_ADC_Init+0x2f8>
 800104c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001050:	e012      	b.n	8001078 <HAL_ADC_Init+0x2f8>
 8001052:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001056:	e00f      	b.n	8001078 <HAL_ADC_Init+0x2f8>
 8001058:	20000000 	.word	0x20000000
 800105c:	431bde83 	.word	0x431bde83
 8001060:	50000100 	.word	0x50000100
 8001064:	50000300 	.word	0x50000300
 8001068:	50000700 	.word	0x50000700
 800106c:	50000400 	.word	0x50000400
 8001070:	50000500 	.word	0x50000500
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001078:	687a      	ldr	r2, [r7, #4]
 800107a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800107c:	4313      	orrs	r3, r2
 800107e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001080:	4313      	orrs	r3, r2
 8001082:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
 800108e:	2b00      	cmp	r3, #0
 8001090:	d114      	bne.n	80010bc <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	687a      	ldr	r2, [r7, #4]
 800109a:	6812      	ldr	r2, [r2, #0]
 800109c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80010a0:	f023 0302 	bic.w	r3, r3, #2
 80010a4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	7e1b      	ldrb	r3, [r3, #24]
 80010aa:	039a      	lsls	r2, r3, #14
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4313      	orrs	r3, r2
 80010b6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80010b8:	4313      	orrs	r3, r2
 80010ba:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68da      	ldr	r2, [r3, #12]
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <HAL_ADC_Init+0x3bc>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6812      	ldr	r2, [r2, #0]
 80010ca:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80010cc:	430b      	orrs	r3, r1
 80010ce:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	691b      	ldr	r3, [r3, #16]
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d10c      	bne.n	80010f2 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	f023 010f 	bic.w	r1, r3, #15
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	69db      	ldr	r3, [r3, #28]
 80010e6:	1e5a      	subs	r2, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	430a      	orrs	r2, r1
 80010ee:	631a      	str	r2, [r3, #48]	@ 0x30
 80010f0:	e007      	b.n	8001102 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 020f 	bic.w	r2, r2, #15
 8001100:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2200      	movs	r2, #0
 8001106:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110c:	f023 0303 	bic.w	r3, r3, #3
 8001110:	f043 0201 	orr.w	r2, r3, #1
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	641a      	str	r2, [r3, #64]	@ 0x40
 8001118:	e00a      	b.n	8001130 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800111e:	f023 0312 	bic.w	r3, r3, #18
 8001122:	f043 0210 	orr.w	r2, r3, #16
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800112a:	2301      	movs	r3, #1
 800112c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001130:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001134:	4618      	mov	r0, r3
 8001136:	3768      	adds	r7, #104	@ 0x68
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	fff0c007 	.word	0xfff0c007

08001140 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b086      	sub	sp, #24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800114c:	2300      	movs	r3, #0
 800114e:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	2b00      	cmp	r3, #0
 800115c:	f040 80f7 	bne.w	800134e <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001166:	2b01      	cmp	r3, #1
 8001168:	d101      	bne.n	800116e <HAL_ADC_Start_DMA+0x2e>
 800116a:	2302      	movs	r3, #2
 800116c:	e0f2      	b.n	8001354 <HAL_ADC_Start_DMA+0x214>
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	2201      	movs	r2, #1
 8001172:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800117e:	d004      	beq.n	800118a <HAL_ADC_Start_DMA+0x4a>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a75      	ldr	r2, [pc, #468]	@ (800135c <HAL_ADC_Start_DMA+0x21c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d109      	bne.n	800119e <HAL_ADC_Start_DMA+0x5e>
 800118a:	4b75      	ldr	r3, [pc, #468]	@ (8001360 <HAL_ADC_Start_DMA+0x220>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	f003 031f 	and.w	r3, r3, #31
 8001192:	2b00      	cmp	r3, #0
 8001194:	bf0c      	ite	eq
 8001196:	2301      	moveq	r3, #1
 8001198:	2300      	movne	r3, #0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	e008      	b.n	80011b0 <HAL_ADC_Start_DMA+0x70>
 800119e:	4b71      	ldr	r3, [pc, #452]	@ (8001364 <HAL_ADC_Start_DMA+0x224>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 031f 	and.w	r3, r3, #31
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	bf0c      	ite	eq
 80011aa:	2301      	moveq	r3, #1
 80011ac:	2300      	movne	r3, #0
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	f000 80c5 	beq.w	8001340 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 fd20 	bl	8001bfc <ADC_Enable>
 80011bc:	4603      	mov	r3, r0
 80011be:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80011c0:	7dfb      	ldrb	r3, [r7, #23]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f040 80b7 	bne.w	8001336 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011cc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80011d0:	f023 0301 	bic.w	r3, r3, #1
 80011d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80011e4:	d004      	beq.n	80011f0 <HAL_ADC_Start_DMA+0xb0>
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a5c      	ldr	r2, [pc, #368]	@ (800135c <HAL_ADC_Start_DMA+0x21c>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d106      	bne.n	80011fe <HAL_ADC_Start_DMA+0xbe>
 80011f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_ADC_Start_DMA+0x220>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 031f 	and.w	r3, r3, #31
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d010      	beq.n	800121e <HAL_ADC_Start_DMA+0xde>
 80011fc:	e005      	b.n	800120a <HAL_ADC_Start_DMA+0xca>
 80011fe:	4b59      	ldr	r3, [pc, #356]	@ (8001364 <HAL_ADC_Start_DMA+0x224>)
 8001200:	689b      	ldr	r3, [r3, #8]
 8001202:	f003 031f 	and.w	r3, r3, #31
 8001206:	2b00      	cmp	r3, #0
 8001208:	d009      	beq.n	800121e <HAL_ADC_Start_DMA+0xde>
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001212:	d004      	beq.n	800121e <HAL_ADC_Start_DMA+0xde>
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a53      	ldr	r2, [pc, #332]	@ (8001368 <HAL_ADC_Start_DMA+0x228>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d115      	bne.n	800124a <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001222:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d036      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001240:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001248:	e02d      	b.n	80012a6 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800125e:	d004      	beq.n	800126a <HAL_ADC_Start_DMA+0x12a>
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a3d      	ldr	r2, [pc, #244]	@ (800135c <HAL_ADC_Start_DMA+0x21c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d10a      	bne.n	8001280 <HAL_ADC_Start_DMA+0x140>
 800126a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001274:	2b00      	cmp	r3, #0
 8001276:	bf14      	ite	ne
 8001278:	2301      	movne	r3, #1
 800127a:	2300      	moveq	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	e008      	b.n	8001292 <HAL_ADC_Start_DMA+0x152>
 8001280:	4b39      	ldr	r3, [pc, #228]	@ (8001368 <HAL_ADC_Start_DMA+0x228>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800129a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800129e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012aa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80012b2:	d106      	bne.n	80012c2 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b8:	f023 0206 	bic.w	r2, r3, #6
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	645a      	str	r2, [r3, #68]	@ 0x44
 80012c0:	e002      	b.n	80012c8 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2200      	movs	r2, #0
 80012c6:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012d4:	4a25      	ldr	r2, [pc, #148]	@ (800136c <HAL_ADC_Start_DMA+0x22c>)
 80012d6:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012dc:	4a24      	ldr	r2, [pc, #144]	@ (8001370 <HAL_ADC_Start_DMA+0x230>)
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80012e4:	4a23      	ldr	r2, [pc, #140]	@ (8001374 <HAL_ADC_Start_DMA+0x234>)
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	221c      	movs	r2, #28
 80012ee:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f042 0210 	orr.w	r2, r2, #16
 80012fe:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 0201 	orr.w	r2, r2, #1
 800130e:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	3340      	adds	r3, #64	@ 0x40
 800131a:	4619      	mov	r1, r3
 800131c:	68ba      	ldr	r2, [r7, #8]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	f000 fe8e 	bl	8002040 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689a      	ldr	r2, [r3, #8]
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f042 0204 	orr.w	r2, r2, #4
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	e00d      	b.n	8001352 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800133e:	e008      	b.n	8001352 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800134c:	e001      	b.n	8001352 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800134e:	2302      	movs	r3, #2
 8001350:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001352:	7dfb      	ldrb	r3, [r7, #23]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3718      	adds	r7, #24
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	50000100 	.word	0x50000100
 8001360:	50000300 	.word	0x50000300
 8001364:	50000700 	.word	0x50000700
 8001368:	50000400 	.word	0x50000400
 800136c:	08001b31 	.word	0x08001b31
 8001370:	08001bab 	.word	0x08001bab
 8001374:	08001bc7 	.word	0x08001bc7

08001378 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001378:	b480      	push	{r7}
 800137a:	b09b      	sub	sp, #108	@ 0x6c
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001382:	2300      	movs	r3, #0
 8001384:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_ADC_ConfigChannel+0x22>
 8001396:	2302      	movs	r3, #2
 8001398:	e2c8      	b.n	800192c <HAL_ADC_ConfigChannel+0x5b4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 0304 	and.w	r3, r3, #4
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f040 82ac 	bne.w	800190a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d81c      	bhi.n	80013f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	4613      	mov	r3, r2
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4413      	add	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	461a      	mov	r2, r3
 80013ce:	231f      	movs	r3, #31
 80013d0:	4093      	lsls	r3, r2
 80013d2:	43db      	mvns	r3, r3
 80013d4:	4019      	ands	r1, r3
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	6818      	ldr	r0, [r3, #0]
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	430a      	orrs	r2, r1
 80013f0:	631a      	str	r2, [r3, #48]	@ 0x30
 80013f2:	e063      	b.n	80014bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b09      	cmp	r3, #9
 80013fa:	d81e      	bhi.n	800143a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685a      	ldr	r2, [r3, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	3b1e      	subs	r3, #30
 8001410:	221f      	movs	r2, #31
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	4019      	ands	r1, r3
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	6818      	ldr	r0, [r3, #0]
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685a      	ldr	r2, [r3, #4]
 8001422:	4613      	mov	r3, r2
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	3b1e      	subs	r3, #30
 800142c:	fa00 f203 	lsl.w	r2, r0, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	430a      	orrs	r2, r1
 8001436:	635a      	str	r2, [r3, #52]	@ 0x34
 8001438:	e040      	b.n	80014bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	2b0e      	cmp	r3, #14
 8001440:	d81e      	bhi.n	8001480 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	005b      	lsls	r3, r3, #1
 8001450:	4413      	add	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	3b3c      	subs	r3, #60	@ 0x3c
 8001456:	221f      	movs	r2, #31
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	4019      	ands	r1, r3
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	6818      	ldr	r0, [r3, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	3b3c      	subs	r3, #60	@ 0x3c
 8001472:	fa00 f203 	lsl.w	r2, r0, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	430a      	orrs	r2, r1
 800147c:	639a      	str	r2, [r3, #56]	@ 0x38
 800147e:	e01d      	b.n	80014bc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685a      	ldr	r2, [r3, #4]
 800148a:	4613      	mov	r3, r2
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	4413      	add	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	3b5a      	subs	r3, #90	@ 0x5a
 8001494:	221f      	movs	r2, #31
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	43db      	mvns	r3, r3
 800149c:	4019      	ands	r1, r3
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	6818      	ldr	r0, [r3, #0]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685a      	ldr	r2, [r3, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	3b5a      	subs	r3, #90	@ 0x5a
 80014b0:	fa00 f203 	lsl.w	r2, r0, r3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	430a      	orrs	r2, r1
 80014ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	f003 030c 	and.w	r3, r3, #12
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f040 80e5 	bne.w	8001696 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b09      	cmp	r3, #9
 80014d2:	d91c      	bls.n	800150e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6999      	ldr	r1, [r3, #24]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	4613      	mov	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4413      	add	r3, r2
 80014e4:	3b1e      	subs	r3, #30
 80014e6:	2207      	movs	r2, #7
 80014e8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ec:	43db      	mvns	r3, r3
 80014ee:	4019      	ands	r1, r3
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	6898      	ldr	r0, [r3, #8]
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	3b1e      	subs	r3, #30
 8001500:	fa00 f203 	lsl.w	r2, r0, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	430a      	orrs	r2, r1
 800150a:	619a      	str	r2, [r3, #24]
 800150c:	e019      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6959      	ldr	r1, [r3, #20]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	2207      	movs	r2, #7
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	4019      	ands	r1, r3
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	6898      	ldr	r0, [r3, #8]
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4613      	mov	r3, r2
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	4413      	add	r3, r2
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	695a      	ldr	r2, [r3, #20]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	68db      	ldr	r3, [r3, #12]
 800154c:	08db      	lsrs	r3, r3, #3
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	3b01      	subs	r3, #1
 8001560:	2b03      	cmp	r3, #3
 8001562:	d84f      	bhi.n	8001604 <HAL_ADC_ConfigChannel+0x28c>
 8001564:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <HAL_ADC_ConfigChannel+0x1f4>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	0800157d 	.word	0x0800157d
 8001570:	0800159f 	.word	0x0800159f
 8001574:	080015c1 	.word	0x080015c1
 8001578:	080015e3 	.word	0x080015e3
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001582:	4b99      	ldr	r3, [pc, #612]	@ (80017e8 <HAL_ADC_ConfigChannel+0x470>)
 8001584:	4013      	ands	r3, r2
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	0691      	lsls	r1, r2, #26
 800158c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800158e:	430a      	orrs	r2, r1
 8001590:	431a      	orrs	r2, r3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800159a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800159c:	e07b      	b.n	8001696 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80015a4:	4b90      	ldr	r3, [pc, #576]	@ (80017e8 <HAL_ADC_ConfigChannel+0x470>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	6812      	ldr	r2, [r2, #0]
 80015ac:	0691      	lsls	r1, r2, #26
 80015ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015b0:	430a      	orrs	r2, r1
 80015b2:	431a      	orrs	r2, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015bc:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015be:	e06a      	b.n	8001696 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80015c6:	4b88      	ldr	r3, [pc, #544]	@ (80017e8 <HAL_ADC_ConfigChannel+0x470>)
 80015c8:	4013      	ands	r3, r2
 80015ca:	683a      	ldr	r2, [r7, #0]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	0691      	lsls	r1, r2, #26
 80015d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015d2:	430a      	orrs	r2, r1
 80015d4:	431a      	orrs	r2, r3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80015de:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015e0:	e059      	b.n	8001696 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80015e8:	4b7f      	ldr	r3, [pc, #508]	@ (80017e8 <HAL_ADC_ConfigChannel+0x470>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	683a      	ldr	r2, [r7, #0]
 80015ee:	6812      	ldr	r2, [r2, #0]
 80015f0:	0691      	lsls	r1, r2, #26
 80015f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80015f4:	430a      	orrs	r2, r1
 80015f6:	431a      	orrs	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001600:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001602:	e048      	b.n	8001696 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	069b      	lsls	r3, r3, #26
 8001614:	429a      	cmp	r2, r3
 8001616:	d107      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001626:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800162e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	069b      	lsls	r3, r3, #26
 8001638:	429a      	cmp	r2, r3
 800163a:	d107      	bne.n	800164c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800164a:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001652:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	069b      	lsls	r3, r3, #26
 800165c:	429a      	cmp	r2, r3
 800165e:	d107      	bne.n	8001670 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800166e:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001676:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	069b      	lsls	r3, r3, #26
 8001680:	429a      	cmp	r2, r3
 8001682:	d107      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001692:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001694:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d108      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x33e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d101      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x33e>
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x340>
 80016b6:	2300      	movs	r3, #0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	f040 8131 	bne.w	8001920 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68db      	ldr	r3, [r3, #12]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d00f      	beq.n	80016e6 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2201      	movs	r2, #1
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80016e4:	e049      	b.n	800177a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2201      	movs	r2, #1
 80016f4:	409a      	lsls	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d91c      	bls.n	8001742 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6999      	ldr	r1, [r3, #24]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	3b1b      	subs	r3, #27
 800171a:	2207      	movs	r2, #7
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	4019      	ands	r1, r3
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	6898      	ldr	r0, [r3, #8]
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4613      	mov	r3, r2
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4413      	add	r3, r2
 8001732:	3b1b      	subs	r3, #27
 8001734:	fa00 f203 	lsl.w	r2, r0, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	619a      	str	r2, [r3, #24]
 8001740:	e01b      	b.n	800177a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6959      	ldr	r1, [r3, #20]
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	1c5a      	adds	r2, r3, #1
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	2207      	movs	r2, #7
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43db      	mvns	r3, r3
 800175c:	4019      	ands	r1, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	6898      	ldr	r0, [r3, #8]
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	1c5a      	adds	r2, r3, #1
 8001768:	4613      	mov	r3, r2
 800176a:	005b      	lsls	r3, r3, #1
 800176c:	4413      	add	r3, r2
 800176e:	fa00 f203 	lsl.w	r2, r0, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	430a      	orrs	r2, r1
 8001778:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001782:	d004      	beq.n	800178e <HAL_ADC_ConfigChannel+0x416>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a18      	ldr	r2, [pc, #96]	@ (80017ec <HAL_ADC_ConfigChannel+0x474>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_ADC_ConfigChannel+0x41a>
 800178e:	4b18      	ldr	r3, [pc, #96]	@ (80017f0 <HAL_ADC_ConfigChannel+0x478>)
 8001790:	e000      	b.n	8001794 <HAL_ADC_ConfigChannel+0x41c>
 8001792:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <HAL_ADC_ConfigChannel+0x47c>)
 8001794:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b10      	cmp	r3, #16
 800179c:	d105      	bne.n	80017aa <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800179e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d015      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d105      	bne.n	80017be <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	f040 80ac 	bne.w	8001920 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80017c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	f040 80a5 	bne.w	8001920 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017de:	d10b      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x480>
 80017e0:	4b02      	ldr	r3, [pc, #8]	@ (80017ec <HAL_ADC_ConfigChannel+0x474>)
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	e023      	b.n	800182e <HAL_ADC_ConfigChannel+0x4b6>
 80017e6:	bf00      	nop
 80017e8:	83fff000 	.word	0x83fff000
 80017ec:	50000100 	.word	0x50000100
 80017f0:	50000300 	.word	0x50000300
 80017f4:	50000700 	.word	0x50000700
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	@ (8001938 <HAL_ADC_ConfigChannel+0x5c0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d103      	bne.n	800180a <HAL_ADC_ConfigChannel+0x492>
 8001802:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e011      	b.n	800182e <HAL_ADC_ConfigChannel+0x4b6>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a4b      	ldr	r2, [pc, #300]	@ (800193c <HAL_ADC_ConfigChannel+0x5c4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d102      	bne.n	800181a <HAL_ADC_ConfigChannel+0x4a2>
 8001814:	4b4a      	ldr	r3, [pc, #296]	@ (8001940 <HAL_ADC_ConfigChannel+0x5c8>)
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e009      	b.n	800182e <HAL_ADC_ConfigChannel+0x4b6>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a48      	ldr	r2, [pc, #288]	@ (8001940 <HAL_ADC_ConfigChannel+0x5c8>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d102      	bne.n	800182a <HAL_ADC_ConfigChannel+0x4b2>
 8001824:	4b45      	ldr	r3, [pc, #276]	@ (800193c <HAL_ADC_ConfigChannel+0x5c4>)
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e001      	b.n	800182e <HAL_ADC_ConfigChannel+0x4b6>
 800182a:	2300      	movs	r3, #0
 800182c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d108      	bne.n	800184e <HAL_ADC_ConfigChannel+0x4d6>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b01      	cmp	r3, #1
 8001848:	d101      	bne.n	800184e <HAL_ADC_ConfigChannel+0x4d6>
 800184a:	2301      	movs	r3, #1
 800184c:	e000      	b.n	8001850 <HAL_ADC_ConfigChannel+0x4d8>
 800184e:	2300      	movs	r3, #0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d150      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001854:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001856:	2b00      	cmp	r3, #0
 8001858:	d010      	beq.n	800187c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 0303 	and.w	r3, r3, #3
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x4fe>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0301 	and.w	r3, r3, #1
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_ADC_ConfigChannel+0x4fe>
 8001872:	2301      	movs	r3, #1
 8001874:	e000      	b.n	8001878 <HAL_ADC_ConfigChannel+0x500>
 8001876:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001878:	2b00      	cmp	r3, #0
 800187a:	d13c      	bne.n	80018f6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2b10      	cmp	r3, #16
 8001882:	d11d      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x548>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800188c:	d118      	bne.n	80018c0 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 800188e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001898:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800189a:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <HAL_ADC_ConfigChannel+0x5cc>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2a      	ldr	r2, [pc, #168]	@ (8001948 <HAL_ADC_ConfigChannel+0x5d0>)
 80018a0:	fba2 2303 	umull	r2, r3, r2, r3
 80018a4:	0c9a      	lsrs	r2, r3, #18
 80018a6:	4613      	mov	r3, r2
 80018a8:	009b      	lsls	r3, r3, #2
 80018aa:	4413      	add	r3, r2
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b0:	e002      	b.n	80018b8 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	3b01      	subs	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f9      	bne.n	80018b2 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018be:	e02e      	b.n	800191e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2b11      	cmp	r3, #17
 80018c6:	d10b      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x568>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d0:	d106      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 80018da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018dc:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018de:	e01e      	b.n	800191e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b12      	cmp	r3, #18
 80018e6:	d11a      	bne.n	800191e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80018e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80018f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018f2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f4:	e013      	b.n	800191e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018fa:	f043 0220 	orr.w	r2, r3, #32
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8001908:	e00a      	b.n	8001920 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190e:	f043 0220 	orr.w	r2, r3, #32
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800191c:	e000      	b.n	8001920 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800191e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001928:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800192c:	4618      	mov	r0, r3
 800192e:	376c      	adds	r7, #108	@ 0x6c
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	50000100 	.word	0x50000100
 800193c:	50000400 	.word	0x50000400
 8001940:	50000500 	.word	0x50000500
 8001944:	20000000 	.word	0x20000000
 8001948:	431bde83 	.word	0x431bde83

0800194c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800194c:	b480      	push	{r7}
 800194e:	b099      	sub	sp, #100	@ 0x64
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001964:	d102      	bne.n	800196c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001966:	4b6d      	ldr	r3, [pc, #436]	@ (8001b1c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	e01a      	b.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a6a      	ldr	r2, [pc, #424]	@ (8001b1c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d103      	bne.n	800197e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8001976:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800197a:	60bb      	str	r3, [r7, #8]
 800197c:	e011      	b.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a67      	ldr	r2, [pc, #412]	@ (8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d102      	bne.n	800198e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8001988:	4b66      	ldr	r3, [pc, #408]	@ (8001b24 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800198a:	60bb      	str	r3, [r7, #8]
 800198c:	e009      	b.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a64      	ldr	r2, [pc, #400]	@ (8001b24 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d102      	bne.n	800199e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8001998:	4b61      	ldr	r3, [pc, #388]	@ (8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	e001      	b.n	80019a2 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0b0      	b.n	8001b0e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d101      	bne.n	80019ba <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80019b6:	2302      	movs	r3, #2
 80019b8:	e0a9      	b.n	8001b0e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f040 808d 	bne.w	8001aec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 8086 	bne.w	8001aec <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019e8:	d004      	beq.n	80019f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4b      	ldr	r2, [pc, #300]	@ (8001b1c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d101      	bne.n	80019f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80019f4:	4b4c      	ldr	r3, [pc, #304]	@ (8001b28 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80019f6:	e000      	b.n	80019fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80019f8:	4b4c      	ldr	r3, [pc, #304]	@ (8001b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80019fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d040      	beq.n	8001a86 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6859      	ldr	r1, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a16:	035b      	lsls	r3, r3, #13
 8001a18:	430b      	orrs	r3, r1
 8001a1a:	431a      	orrs	r2, r3
 8001a1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a1e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 0303 	and.w	r3, r3, #3
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d108      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e000      	b.n	8001a42 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8001a40:	2300      	movs	r3, #0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d15c      	bne.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f003 0303 	and.w	r3, r3, #3
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d107      	bne.n	8001a62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0301 	and.w	r3, r3, #1
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d101      	bne.n	8001a62 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a62:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d14b      	bne.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001a70:	f023 030f 	bic.w	r3, r3, #15
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	6811      	ldr	r1, [r2, #0]
 8001a78:	683a      	ldr	r2, [r7, #0]
 8001a7a:	6892      	ldr	r2, [r2, #8]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a82:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a84:	e03c      	b.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a88:	689b      	ldr	r3, [r3, #8]
 8001a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001a90:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	f003 0303 	and.w	r3, r3, #3
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d108      	bne.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d101      	bne.n	8001ab2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d123      	bne.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e000      	b.n	8001ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8001ad4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d112      	bne.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001ada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8001ae2:	f023 030f 	bic.w	r3, r3, #15
 8001ae6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ae8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aea:	e009      	b.n	8001b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af0:	f043 0220 	orr.w	r2, r3, #32
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8001afe:	e000      	b.n	8001b02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b00:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001b0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3764      	adds	r7, #100	@ 0x64
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	50000100 	.word	0x50000100
 8001b20:	50000400 	.word	0x50000400
 8001b24:	50000500 	.word	0x50000500
 8001b28:	50000300 	.word	0x50000300
 8001b2c:	50000700 	.word	0x50000700

08001b30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d126      	bne.n	8001b98 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d115      	bne.n	8001b90 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d111      	bne.n	8001b90 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d105      	bne.n	8001b90 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b88:	f043 0201 	orr.w	r2, r3, #1
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001b90:	68f8      	ldr	r0, [r7, #12]
 8001b92:	f7ff f8d7 	bl	8000d44 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001b96:	e004      	b.n	8001ba2 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	4798      	blx	r3
}
 8001ba2:	bf00      	nop
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b084      	sub	sp, #16
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bb6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f7ff f8cd 	bl	8000d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8001bbe:	bf00      	nop
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bd2:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001be4:	f043 0204 	orr.w	r2, r3, #4
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001bec:	68f8      	ldr	r0, [r7, #12]
 8001bee:	f7ff f8bd 	bl	8000d6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
	...

08001bfc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c04:	2300      	movs	r3, #0
 8001c06:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f003 0303 	and.w	r3, r3, #3
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <ADC_Enable+0x2c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <ADC_Enable+0x2c>
 8001c24:	2301      	movs	r3, #1
 8001c26:	e000      	b.n	8001c2a <ADC_Enable+0x2e>
 8001c28:	2300      	movs	r3, #0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d143      	bne.n	8001cb6 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	4b22      	ldr	r3, [pc, #136]	@ (8001cc0 <ADC_Enable+0xc4>)
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d00d      	beq.n	8001c58 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e02f      	b.n	8001cb8 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001c68:	f7ff f83c 	bl	8000ce4 <HAL_GetTick>
 8001c6c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c6e:	e01b      	b.n	8001ca8 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001c70:	f7ff f838 	bl	8000ce4 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d914      	bls.n	8001ca8 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d00d      	beq.n	8001ca8 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f043 0210 	orr.w	r2, r3, #16
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e007      	b.n	8001cb8 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d1dc      	bne.n	8001c70 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	8000003f 	.word	0x8000003f

08001cc4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b01      	cmp	r3, #1
 8001cdc:	d108      	bne.n	8001cf0 <ADC_Disable+0x2c>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d101      	bne.n	8001cf0 <ADC_Disable+0x2c>
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <ADC_Disable+0x2e>
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d047      	beq.n	8001d86 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 030d 	and.w	r3, r3, #13
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d10f      	bne.n	8001d24 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0202 	orr.w	r2, r2, #2
 8001d12:	609a      	str	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2203      	movs	r2, #3
 8001d1a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001d1c:	f7fe ffe2 	bl	8000ce4 <HAL_GetTick>
 8001d20:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d22:	e029      	b.n	8001d78 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0210 	orr.w	r2, r3, #16
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d34:	f043 0201 	orr.w	r2, r3, #1
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e023      	b.n	8001d88 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001d40:	f7fe ffd0 	bl	8000ce4 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d914      	bls.n	8001d78 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d10d      	bne.n	8001d78 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d60:	f043 0210 	orr.w	r2, r3, #16
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e007      	b.n	8001d88 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d0dc      	beq.n	8001d40 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4907      	ldr	r1, [pc, #28]	@ (8001e2c <__NVIC_EnableIRQ+0x38>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	e000e100 	.word	0xe000e100

08001e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	6039      	str	r1, [r7, #0]
 8001e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	db0a      	blt.n	8001e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	490c      	ldr	r1, [pc, #48]	@ (8001e7c <__NVIC_SetPriority+0x4c>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	0112      	lsls	r2, r2, #4
 8001e50:	b2d2      	uxtb	r2, r2
 8001e52:	440b      	add	r3, r1
 8001e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e58:	e00a      	b.n	8001e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4908      	ldr	r1, [pc, #32]	@ (8001e80 <__NVIC_SetPriority+0x50>)
 8001e60:	79fb      	ldrb	r3, [r7, #7]
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	3b04      	subs	r3, #4
 8001e68:	0112      	lsls	r2, r2, #4
 8001e6a:	b2d2      	uxtb	r2, r2
 8001e6c:	440b      	add	r3, r1
 8001e6e:	761a      	strb	r2, [r3, #24]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000e100 	.word	0xe000e100
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b089      	sub	sp, #36	@ 0x24
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	60b9      	str	r1, [r7, #8]
 8001e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	f1c3 0307 	rsb	r3, r3, #7
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	bf28      	it	cs
 8001ea2:	2304      	movcs	r3, #4
 8001ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	2b06      	cmp	r3, #6
 8001eac:	d902      	bls.n	8001eb4 <NVIC_EncodePriority+0x30>
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3b03      	subs	r3, #3
 8001eb2:	e000      	b.n	8001eb6 <NVIC_EncodePriority+0x32>
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ecc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed6:	43d9      	mvns	r1, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	4313      	orrs	r3, r2
         );
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3724      	adds	r7, #36	@ 0x24
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr
	...

08001eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001efc:	d301      	bcc.n	8001f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efe:	2301      	movs	r3, #1
 8001f00:	e00f      	b.n	8001f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f02:	4a0a      	ldr	r2, [pc, #40]	@ (8001f2c <SysTick_Config+0x40>)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f0a:	210f      	movs	r1, #15
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f10:	f7ff ff8e 	bl	8001e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f14:	4b05      	ldr	r3, [pc, #20]	@ (8001f2c <SysTick_Config+0x40>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f1a:	4b04      	ldr	r3, [pc, #16]	@ (8001f2c <SysTick_Config+0x40>)
 8001f1c:	2207      	movs	r2, #7
 8001f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff ff29 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}

08001f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	60b9      	str	r1, [r7, #8]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f54:	2300      	movs	r3, #0
 8001f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f58:	f7ff ff3e 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68b9      	ldr	r1, [r7, #8]
 8001f62:	6978      	ldr	r0, [r7, #20]
 8001f64:	f7ff ff8e 	bl	8001e84 <NVIC_EncodePriority>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f6e:	4611      	mov	r1, r2
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7ff ff5d 	bl	8001e30 <__NVIC_SetPriority>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	4603      	mov	r3, r0
 8001f86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff ff31 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f92:	bf00      	nop
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b082      	sub	sp, #8
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff ffa2 	bl	8001eec <SysTick_Config>
 8001fa8:	4603      	mov	r3, r0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b084      	sub	sp, #16
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e037      	b.n	8002038 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001fde:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001fe2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ff8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002004:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	4313      	orrs	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f940 	bl	80022a0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d101      	bne.n	8002060 <HAL_DMA_Start_IT+0x20>
 800205c:	2302      	movs	r3, #2
 800205e:	e04a      	b.n	80020f6 <HAL_DMA_Start_IT+0xb6>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2201      	movs	r2, #1
 8002064:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800206e:	2b01      	cmp	r3, #1
 8002070:	d13a      	bne.n	80020e8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2202      	movs	r2, #2
 8002076:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f022 0201 	bic.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	68b9      	ldr	r1, [r7, #8]
 8002096:	68f8      	ldr	r0, [r7, #12]
 8002098:	f000 f8d4 	bl	8002244 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d008      	beq.n	80020b6 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 020e 	orr.w	r2, r2, #14
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	e00f      	b.n	80020d6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f042 020a 	orr.w	r2, r2, #10
 80020c4:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f022 0204 	bic.w	r2, r2, #4
 80020d4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f042 0201 	orr.w	r2, r2, #1
 80020e4:	601a      	str	r2, [r3, #0]
 80020e6:	e005      	b.n	80020f4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80020f0:	2302      	movs	r3, #2
 80020f2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80020f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211a:	2204      	movs	r2, #4
 800211c:	409a      	lsls	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	4013      	ands	r3, r2
 8002122:	2b00      	cmp	r3, #0
 8002124:	d024      	beq.n	8002170 <HAL_DMA_IRQHandler+0x72>
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d01f      	beq.n	8002170 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0320 	and.w	r3, r3, #32
 800213a:	2b00      	cmp	r3, #0
 800213c:	d107      	bne.n	800214e <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0204 	bic.w	r2, r2, #4
 800214c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002156:	2104      	movs	r1, #4
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002162:	2b00      	cmp	r3, #0
 8002164:	d06a      	beq.n	800223c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800216e:	e065      	b.n	800223c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	2202      	movs	r2, #2
 8002176:	409a      	lsls	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4013      	ands	r3, r2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d02c      	beq.n	80021da <HAL_DMA_IRQHandler+0xdc>
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d027      	beq.n	80021da <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0320 	and.w	r3, r3, #32
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10b      	bne.n	80021b0 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f022 020a 	bic.w	r2, r2, #10
 80021a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021b8:	2102      	movs	r1, #2
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d035      	beq.n	800223c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80021d8:	e030      	b.n	800223c <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	2208      	movs	r2, #8
 80021e0:	409a      	lsls	r2, r3
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d028      	beq.n	800223c <HAL_DMA_IRQHandler+0x13e>
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d023      	beq.n	800223c <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 020e 	bic.w	r2, r2, #14
 8002202:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800220c:	2101      	movs	r1, #1
 800220e:	fa01 f202 	lsl.w	r2, r1, r2
 8002212:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	2b00      	cmp	r3, #0
 8002230:	d004      	beq.n	800223c <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	4798      	blx	r3
    }
  }
}
 800223a:	e7ff      	b.n	800223c <HAL_DMA_IRQHandler+0x13e>
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
 8002250:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	2101      	movs	r1, #1
 800225c:	fa01 f202 	lsl.w	r2, r1, r2
 8002260:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b10      	cmp	r3, #16
 8002270:	d108      	bne.n	8002284 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002282:	e007      	b.n	8002294 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68ba      	ldr	r2, [r7, #8]
 800228a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	60da      	str	r2, [r3, #12]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b14      	ldr	r3, [pc, #80]	@ (8002300 <DMA_CalcBaseAndBitshift+0x60>)
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d80f      	bhi.n	80022d4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	461a      	mov	r2, r3
 80022ba:	4b12      	ldr	r3, [pc, #72]	@ (8002304 <DMA_CalcBaseAndBitshift+0x64>)
 80022bc:	4413      	add	r3, r2
 80022be:	4a12      	ldr	r2, [pc, #72]	@ (8002308 <DMA_CalcBaseAndBitshift+0x68>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	009a      	lsls	r2, r3, #2
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	4a0f      	ldr	r2, [pc, #60]	@ (800230c <DMA_CalcBaseAndBitshift+0x6c>)
 80022d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80022d2:	e00e      	b.n	80022f2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <DMA_CalcBaseAndBitshift+0x70>)
 80022dc:	4413      	add	r3, r2
 80022de:	4a0a      	ldr	r2, [pc, #40]	@ (8002308 <DMA_CalcBaseAndBitshift+0x68>)
 80022e0:	fba2 2303 	umull	r2, r3, r2, r3
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	009a      	lsls	r2, r3, #2
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <DMA_CalcBaseAndBitshift+0x74>)
 80022f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80022f2:	bf00      	nop
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40020407 	.word	0x40020407
 8002304:	bffdfff8 	.word	0xbffdfff8
 8002308:	cccccccd 	.word	0xcccccccd
 800230c:	40020000 	.word	0x40020000
 8002310:	bffdfbf8 	.word	0xbffdfbf8
 8002314:	40020400 	.word	0x40020400

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002326:	e154      	b.n	80025d2 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2101      	movs	r1, #1
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	fa01 f303 	lsl.w	r3, r1, r3
 8002334:	4013      	ands	r3, r2
 8002336:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2b00      	cmp	r3, #0
 800233c:	f000 8146 	beq.w	80025cc <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	2b01      	cmp	r3, #1
 800234a:	d005      	beq.n	8002358 <HAL_GPIO_Init+0x40>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0303 	and.w	r3, r3, #3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d130      	bne.n	80023ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	2203      	movs	r2, #3
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	43db      	mvns	r3, r3
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	4013      	ands	r3, r2
 800236e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238e:	2201      	movs	r2, #1
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0201 	and.w	r2, r3, #1
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f003 0303 	and.w	r3, r3, #3
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d017      	beq.n	80023f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	2203      	movs	r2, #3
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4013      	ands	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d123      	bne.n	800244a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	08da      	lsrs	r2, r3, #3
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3208      	adds	r2, #8
 800240a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	220f      	movs	r2, #15
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
 8002436:	693a      	ldr	r2, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	08da      	lsrs	r2, r3, #3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	3208      	adds	r2, #8
 8002444:	6939      	ldr	r1, [r7, #16]
 8002446:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	2203      	movs	r2, #3
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0203 	and.w	r2, r3, #3
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	693a      	ldr	r2, [r7, #16]
 800247c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002486:	2b00      	cmp	r3, #0
 8002488:	f000 80a0 	beq.w	80025cc <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800248c:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_GPIO_Init+0x2d8>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_GPIO_Init+0x2d8>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6193      	str	r3, [r2, #24]
 8002498:	4b55      	ldr	r3, [pc, #340]	@ (80025f0 <HAL_GPIO_Init+0x2d8>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a4:	4a53      	ldr	r2, [pc, #332]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	089b      	lsrs	r3, r3, #2
 80024aa:	3302      	adds	r3, #2
 80024ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	220f      	movs	r2, #15
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43db      	mvns	r3, r3
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4013      	ands	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80024ce:	d019      	beq.n	8002504 <HAL_GPIO_Init+0x1ec>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a49      	ldr	r2, [pc, #292]	@ (80025f8 <HAL_GPIO_Init+0x2e0>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d013      	beq.n	8002500 <HAL_GPIO_Init+0x1e8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	4a48      	ldr	r2, [pc, #288]	@ (80025fc <HAL_GPIO_Init+0x2e4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d00d      	beq.n	80024fc <HAL_GPIO_Init+0x1e4>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	4a47      	ldr	r2, [pc, #284]	@ (8002600 <HAL_GPIO_Init+0x2e8>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d007      	beq.n	80024f8 <HAL_GPIO_Init+0x1e0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	4a46      	ldr	r2, [pc, #280]	@ (8002604 <HAL_GPIO_Init+0x2ec>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d101      	bne.n	80024f4 <HAL_GPIO_Init+0x1dc>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e008      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 80024f4:	2305      	movs	r3, #5
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 80024f8:	2303      	movs	r3, #3
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 8002504:	2300      	movs	r3, #0
 8002506:	697a      	ldr	r2, [r7, #20]
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4313      	orrs	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002516:	4937      	ldr	r1, [pc, #220]	@ (80025f4 <HAL_GPIO_Init+0x2dc>)
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002524:	4b38      	ldr	r3, [pc, #224]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	43db      	mvns	r3, r3
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4013      	ands	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002540:	693a      	ldr	r2, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	4313      	orrs	r3, r2
 8002546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002548:	4a2f      	ldr	r2, [pc, #188]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800254e:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	43db      	mvns	r3, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4013      	ands	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d003      	beq.n	8002572 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800256a:	693a      	ldr	r2, [r7, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	4313      	orrs	r3, r2
 8002570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002572:	4a25      	ldr	r2, [pc, #148]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002578:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	4313      	orrs	r3, r2
 800259a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800259c:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025a2:	4b19      	ldr	r3, [pc, #100]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	43db      	mvns	r3, r3
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	4013      	ands	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d003      	beq.n	80025c6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80025be:	693a      	ldr	r2, [r7, #16]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025c6:	4a10      	ldr	r2, [pc, #64]	@ (8002608 <HAL_GPIO_Init+0x2f0>)
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	3301      	adds	r3, #1
 80025d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	fa22 f303 	lsr.w	r3, r2, r3
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f47f aea3 	bne.w	8002328 <HAL_GPIO_Init+0x10>
  }
}
 80025e2:	bf00      	nop
 80025e4:	bf00      	nop
 80025e6:	371c      	adds	r7, #28
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40010000 	.word	0x40010000
 80025f8:	48000400 	.word	0x48000400
 80025fc:	48000800 	.word	0x48000800
 8002600:	48000c00 	.word	0x48000c00
 8002604:	48001000 	.word	0x48001000
 8002608:	40010400 	.word	0x40010400

0800260c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	887b      	ldrh	r3, [r7, #2]
 800261e:	4013      	ands	r3, r2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e001      	b.n	800262e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800262e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002630:	4618      	mov	r0, r3
 8002632:	3714      	adds	r7, #20
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	807b      	strh	r3, [r7, #2]
 8002648:	4613      	mov	r3, r2
 800264a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800264c:	787b      	ldrb	r3, [r7, #1]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d003      	beq.n	800265a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002652:	887a      	ldrh	r2, [r7, #2]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002658:	e002      	b.n	8002660 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800265a:	887a      	ldrh	r2, [r7, #2]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002676:	4b08      	ldr	r3, [pc, #32]	@ (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	4013      	ands	r3, r2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d006      	beq.n	8002690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002682:	4a05      	ldr	r2, [pc, #20]	@ (8002698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002684:	88fb      	ldrh	r3, [r7, #6]
 8002686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002688:	88fb      	ldrh	r3, [r7, #6]
 800268a:	4618      	mov	r0, r3
 800268c:	f7fd fd9c 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d101      	bne.n	80026ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e08d      	b.n	80027ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe f9ca 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	@ 0x24
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0201 	bic.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80026ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689a      	ldr	r2, [r3, #8]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d107      	bne.n	8002716 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689a      	ldr	r2, [r3, #8]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	e006      	b.n	8002724 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002722:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d108      	bne.n	800273e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	685a      	ldr	r2, [r3, #4]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800273a:	605a      	str	r2, [r3, #4]
 800273c:	e007      	b.n	800274e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	6812      	ldr	r2, [r2, #0]
 8002758:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800275c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002760:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68da      	ldr	r2, [r3, #12]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002770:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691a      	ldr	r2, [r3, #16]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	430a      	orrs	r2, r1
 800278a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	69d9      	ldr	r1, [r3, #28]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a1a      	ldr	r2, [r3, #32]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
 80027da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027e2:	b2db      	uxtb	r3, r3
 80027e4:	2b20      	cmp	r3, #32
 80027e6:	d138      	bne.n	800285a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d101      	bne.n	80027f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80027f2:	2302      	movs	r3, #2
 80027f4:	e032      	b.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2224      	movs	r2, #36	@ 0x24
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0201 	bic.w	r2, r2, #1
 8002814:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002824:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	430a      	orrs	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f042 0201 	orr.w	r2, r2, #1
 8002844:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2220      	movs	r2, #32
 800284a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002856:	2300      	movs	r3, #0
 8002858:	e000      	b.n	800285c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b20      	cmp	r3, #32
 800287c:	d139      	bne.n	80028f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002888:	2302      	movs	r3, #2
 800288a:	e033      	b.n	80028f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2224      	movs	r2, #36	@ 0x24
 8002898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80028ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f042 0201 	orr.w	r2, r2, #1
 80028dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80028ee:	2300      	movs	r3, #0
 80028f0:	e000      	b.n	80028f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80028f2:	2302      	movs	r3, #2
  }
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e0b9      	b.n	8002a86 <HAL_PCD_Init+0x186>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8002918:	b2db      	uxtb	r3, r3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d106      	bne.n	800292c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f007 f80e 	bl	8009948 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2203      	movs	r2, #3
 8002930:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f003 f868 	bl	8005a0e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293e:	2300      	movs	r3, #0
 8002940:	73fb      	strb	r3, [r7, #15]
 8002942:	e03e      	b.n	80029c2 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002944:	7bfa      	ldrb	r2, [r7, #15]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	440b      	add	r3, r1
 8002952:	3311      	adds	r3, #17
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002958:	7bfa      	ldrb	r2, [r7, #15]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	440b      	add	r3, r1
 8002966:	3310      	adds	r3, #16
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	009b      	lsls	r3, r3, #2
 8002974:	4413      	add	r3, r2
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	440b      	add	r3, r1
 800297a:	3313      	adds	r3, #19
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002980:	7bfa      	ldrb	r2, [r7, #15]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4413      	add	r3, r2
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	440b      	add	r3, r1
 800298e:	3320      	adds	r3, #32
 8002990:	2200      	movs	r2, #0
 8002992:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002994:	7bfa      	ldrb	r2, [r7, #15]
 8002996:	6879      	ldr	r1, [r7, #4]
 8002998:	4613      	mov	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4413      	add	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	440b      	add	r3, r1
 80029a2:	3324      	adds	r3, #36	@ 0x24
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
 80029be:	3301      	adds	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	791b      	ldrb	r3, [r3, #4]
 80029c6:	7bfa      	ldrb	r2, [r7, #15]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d3bb      	bcc.n	8002944 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	73fb      	strb	r3, [r7, #15]
 80029d0:	e044      	b.n	8002a5c <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	6879      	ldr	r1, [r7, #4]
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	440b      	add	r3, r1
 80029e0:	f203 1351 	addw	r3, r3, #337	@ 0x151
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029e8:	7bfa      	ldrb	r2, [r7, #15]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	4413      	add	r3, r2
 80029f2:	00db      	lsls	r3, r3, #3
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80029fa:	7bfa      	ldrb	r2, [r7, #15]
 80029fc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029fe:	7bfa      	ldrb	r2, [r7, #15]
 8002a00:	6879      	ldr	r1, [r7, #4]
 8002a02:	4613      	mov	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8002a10:	2200      	movs	r2, #0
 8002a12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a14:	7bfa      	ldrb	r2, [r7, #15]
 8002a16:	6879      	ldr	r1, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	4413      	add	r3, r2
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	440b      	add	r3, r1
 8002a22:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4413      	add	r3, r2
 8002a34:	00db      	lsls	r3, r3, #3
 8002a36:	440b      	add	r3, r1
 8002a38:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a40:	7bfa      	ldrb	r2, [r7, #15]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	4413      	add	r3, r2
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	440b      	add	r3, r1
 8002a4e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8002a52:	2200      	movs	r2, #0
 8002a54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	73fb      	strb	r3, [r7, #15]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	791b      	ldrb	r3, [r3, #4]
 8002a60:	7bfa      	ldrb	r2, [r7, #15]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d3b5      	bcc.n	80029d2 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002a72:	f002 ffe7 	bl	8005a44 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_PCD_Start+0x16>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e016      	b.n	8002ad2 <HAL_PCD_Start+0x44>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f002 ff95 	bl	80059e0 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002ab6:	2101      	movs	r1, #1
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f007 f9c5 	bl	8009e48 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f005 fa52 	bl	8007f6c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f005 fa4b 	bl	8007f82 <USB_ReadInterrupts>
 8002aec:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 fa99 	bl	8003030 <PCD_EP_ISR_Handler>

    return;
 8002afe:	e0bd      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d013      	beq.n	8002b32 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b1c:	b292      	uxth	r2, r2
 8002b1e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f006 ffb1 	bl	8009a8a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002b28:	2100      	movs	r1, #0
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f000 f8a9 	bl	8002c82 <HAL_PCD_SetAddress>

    return;
 8002b30:	e0a4      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00c      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b54:	e092      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00c      	beq.n	8002b7a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002b68:	b29a      	uxth	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b72:	b292      	uxth	r2, r2
 8002b74:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002b78:	e080      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d027      	beq.n	8002bd4 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0204 	bic.w	r2, r2, #4
 8002b96:	b292      	uxth	r2, r2
 8002b98:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0208 	bic.w	r2, r2, #8
 8002bae:	b292      	uxth	r2, r2
 8002bb0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f006 ffa1 	bl	8009afc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002bcc:	b292      	uxth	r2, r2
 8002bce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002bd2:	e053      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d027      	beq.n	8002c2e <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002be6:	b29a      	uxth	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 0208 	orr.w	r2, r2, #8
 8002bf0:	b292      	uxth	r2, r2
 8002bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c08:	b292      	uxth	r2, r2
 8002c0a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8002c16:	b29a      	uxth	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0204 	orr.w	r2, r2, #4
 8002c20:	b292      	uxth	r2, r2
 8002c22:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f006 ff4e 	bl	8009ac8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c2c:	e026      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00f      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002c4a:	b292      	uxth	r2, r2
 8002c4c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f006 ff0c 	bl	8009a6e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002c56:	e011      	b.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00c      	beq.n	8002c7c <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c74:	b292      	uxth	r2, r2
 8002c76:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8002c7a:	bf00      	nop
  }
}
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d101      	bne.n	8002c9c <HAL_PCD_SetAddress+0x1a>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e012      	b.n	8002cc2 <HAL_PCD_SetAddress+0x40>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f005 f946 	bl	8007f44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3708      	adds	r7, #8
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b084      	sub	sp, #16
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	6078      	str	r0, [r7, #4]
 8002cd2:	4608      	mov	r0, r1
 8002cd4:	4611      	mov	r1, r2
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4603      	mov	r3, r0
 8002cda:	70fb      	strb	r3, [r7, #3]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	803b      	strh	r3, [r7, #0]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ce8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	da0e      	bge.n	8002d0e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	f003 0207 	and.w	r2, r3, #7
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	4413      	add	r3, r2
 8002cfc:	00db      	lsls	r3, r3, #3
 8002cfe:	3310      	adds	r3, #16
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	4413      	add	r3, r2
 8002d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	705a      	strb	r2, [r3, #1]
 8002d0c:	e00e      	b.n	8002d2c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d0e:	78fb      	ldrb	r3, [r7, #3]
 8002d10:	f003 0207 	and.w	r2, r3, #7
 8002d14:	4613      	mov	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	4413      	add	r3, r2
 8002d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	f003 0307 	and.w	r3, r3, #7
 8002d32:	b2da      	uxtb	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d38:	883a      	ldrh	r2, [r7, #0]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	78ba      	ldrb	r2, [r7, #2]
 8002d42:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d44:	78bb      	ldrb	r3, [r7, #2]
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d102      	bne.n	8002d50 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d101      	bne.n	8002d5e <HAL_PCD_EP_Open+0x94>
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	e00e      	b.n	8002d7c <HAL_PCD_EP_Open+0xb2>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2201      	movs	r2, #1
 8002d62:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68f9      	ldr	r1, [r7, #12]
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f002 fe87 	bl	8005a80 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8002d7a:	7afb      	ldrb	r3, [r7, #11]
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	da0e      	bge.n	8002db6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d98:	78fb      	ldrb	r3, [r7, #3]
 8002d9a:	f003 0207 	and.w	r2, r3, #7
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	3310      	adds	r3, #16
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	4413      	add	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2201      	movs	r2, #1
 8002db2:	705a      	strb	r2, [r3, #1]
 8002db4:	e00e      	b.n	8002dd4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002db6:	78fb      	ldrb	r3, [r7, #3]
 8002db8:	f003 0207 	and.w	r2, r3, #7
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4413      	add	r3, r2
 8002dcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002dd4:	78fb      	ldrb	r3, [r7, #3]
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_PCD_EP_Close+0x6a>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e00e      	b.n	8002e0c <HAL_PCD_EP_Close+0x88>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	68f9      	ldr	r1, [r7, #12]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f003 fa03 	bl	8006208 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3710      	adds	r7, #16
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	60f8      	str	r0, [r7, #12]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	603b      	str	r3, [r7, #0]
 8002e20:	460b      	mov	r3, r1
 8002e22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e24:	7afb      	ldrb	r3, [r7, #11]
 8002e26:	f003 0207 	and.w	r2, r3, #7
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	009b      	lsls	r3, r3, #2
 8002e2e:	4413      	add	r3, r2
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	4413      	add	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	683a      	ldr	r2, [r7, #0]
 8002e46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	2200      	movs	r2, #0
 8002e52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e54:	7afb      	ldrb	r3, [r7, #11]
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6979      	ldr	r1, [r7, #20]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f003 fbbb 	bl	80065e2 <USB_EPStartXfer>

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b086      	sub	sp, #24
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	607a      	str	r2, [r7, #4]
 8002e80:	603b      	str	r3, [r7, #0]
 8002e82:	460b      	mov	r3, r1
 8002e84:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	f003 0207 	and.w	r2, r3, #7
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	4413      	add	r3, r2
 8002e92:	00db      	lsls	r3, r3, #3
 8002e94:	3310      	adds	r3, #16
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ec2:	7afb      	ldrb	r3, [r7, #11]
 8002ec4:	f003 0307 	and.w	r3, r3, #7
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6979      	ldr	r1, [r7, #20]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f003 fb84 	bl	80065e2 <USB_EPStartXfer>

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	460b      	mov	r3, r1
 8002eee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	7912      	ldrb	r2, [r2, #4]
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d901      	bls.n	8002f02 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e03e      	b.n	8002f80 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da0e      	bge.n	8002f28 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f0a:	78fb      	ldrb	r3, [r7, #3]
 8002f0c:	f003 0207 	and.w	r2, r3, #7
 8002f10:	4613      	mov	r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	4413      	add	r3, r2
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	3310      	adds	r3, #16
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	4413      	add	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2201      	movs	r2, #1
 8002f24:	705a      	strb	r2, [r3, #1]
 8002f26:	e00c      	b.n	8002f42 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	4413      	add	r3, r2
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	4413      	add	r3, r2
 8002f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	f003 0307 	and.w	r3, r3, #7
 8002f4e:	b2da      	uxtb	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d101      	bne.n	8002f62 <HAL_PCD_EP_SetStall+0x7e>
 8002f5e:	2302      	movs	r3, #2
 8002f60:	e00e      	b.n	8002f80 <HAL_PCD_EP_SetStall+0x9c>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	68f9      	ldr	r1, [r7, #12]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f004 fee8 	bl	8007d46 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3710      	adds	r7, #16
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	7912      	ldrb	r2, [r2, #4]
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e040      	b.n	8003028 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	da0e      	bge.n	8002fcc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 0207 	and.w	r2, r3, #7
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	3310      	adds	r3, #16
 8002fbe:	687a      	ldr	r2, [r7, #4]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	705a      	strb	r2, [r3, #1]
 8002fca:	e00e      	b.n	8002fea <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fcc:	78fb      	ldrb	r3, [r7, #3]
 8002fce:	f003 0207 	and.w	r2, r3, #7
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4413      	add	r3, r2
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8003002:	2b01      	cmp	r3, #1
 8003004:	d101      	bne.n	800300a <HAL_PCD_EP_ClrStall+0x82>
 8003006:	2302      	movs	r3, #2
 8003008:	e00e      	b.n	8003028 <HAL_PCD_EP_ClrStall+0xa0>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68f9      	ldr	r1, [r7, #12]
 8003018:	4618      	mov	r0, r3
 800301a:	f004 fee5 	bl	8007de8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b096      	sub	sp, #88	@ 0x58
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003038:	e3bb      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8003042:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003046:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800304a:	b2db      	uxtb	r3, r3
 800304c:	f003 030f 	and.w	r3, r3, #15
 8003050:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

    if (epindex == 0U)
 8003054:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003058:	2b00      	cmp	r3, #0
 800305a:	f040 8175 	bne.w	8003348 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800305e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003062:	f003 0310 	and.w	r3, r3, #16
 8003066:	2b00      	cmp	r3, #0
 8003068:	d14e      	bne.n	8003108 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	881b      	ldrh	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800307a:	81fb      	strh	r3, [r7, #14]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	89fb      	ldrh	r3, [r7, #14]
 8003082:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003086:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800308a:	b29b      	uxth	r3, r3
 800308c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3310      	adds	r3, #16
 8003092:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800309c:	b29b      	uxth	r3, r3
 800309e:	461a      	mov	r2, r3
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	3302      	adds	r3, #2
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80030b6:	881b      	ldrh	r3, [r3, #0]
 80030b8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80030bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030be:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80030c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c2:	695a      	ldr	r2, [r3, #20]
 80030c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	441a      	add	r2, r3
 80030ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030cc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80030ce:	2100      	movs	r1, #0
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f006 fcb2 	bl	8009a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	7b1b      	ldrb	r3, [r3, #12]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8368 	beq.w	80037b2 <PCD_EP_ISR_Handler+0x782>
 80030e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f040 8363 	bne.w	80037b2 <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	7b1b      	ldrb	r3, [r3, #12]
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	731a      	strb	r2, [r3, #12]
 8003106:	e354      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800310e:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800311a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800311e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003122:	2b00      	cmp	r3, #0
 8003124:	d034      	beq.n	8003190 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800312e:	b29b      	uxth	r3, r3
 8003130:	461a      	mov	r2, r3
 8003132:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	3306      	adds	r3, #6
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	6812      	ldr	r2, [r2, #0]
 8003142:	4413      	add	r3, r2
 8003144:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800314e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003150:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 800315c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800315e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003160:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003162:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003164:	b29b      	uxth	r3, r3
 8003166:	f004 ff62 	bl	800802e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	881b      	ldrh	r3, [r3, #0]
 8003170:	b29a      	uxth	r2, r3
 8003172:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8003176:	4013      	ands	r3, r2
 8003178:	823b      	strh	r3, [r7, #16]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	8a3a      	ldrh	r2, [r7, #16]
 8003180:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003184:	b292      	uxth	r2, r2
 8003186:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f006 fc29 	bl	80099e0 <HAL_PCD_SetupStageCallback>
 800318e:	e310      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003190:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003194:	2b00      	cmp	r3, #0
 8003196:	f280 830c 	bge.w	80037b2 <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	881b      	ldrh	r3, [r3, #0]
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80031a6:	4013      	ands	r3, r2
 80031a8:	83fb      	strh	r3, [r7, #30]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	8bfa      	ldrh	r2, [r7, #30]
 80031b0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031b4:	b292      	uxth	r2, r2
 80031b6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	461a      	mov	r2, r3
 80031c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	4413      	add	r3, r2
 80031cc:	3306      	adds	r3, #6
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6812      	ldr	r2, [r2, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80031da:	881b      	ldrh	r3, [r3, #0]
 80031dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80031e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80031e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d019      	beq.n	8003220 <PCD_EP_ISR_Handler+0x1f0>
 80031ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d015      	beq.n	8003220 <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fa:	6959      	ldr	r1, [r3, #20]
 80031fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031fe:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003202:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003204:	b29b      	uxth	r3, r3
 8003206:	f004 ff12 	bl	800802e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800320a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800320c:	695a      	ldr	r2, [r3, #20]
 800320e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003210:	69db      	ldr	r3, [r3, #28]
 8003212:	441a      	add	r2, r3
 8003214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003216:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003218:	2100      	movs	r1, #0
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f006 fbf2 	bl	8009a04 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800322a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800322e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 82bd 	bne.w	80037b2 <PCD_EP_ISR_Handler+0x782>
 8003238:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800323c:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8003240:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003244:	f000 82b5 	beq.w	80037b2 <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003256:	b29b      	uxth	r3, r3
 8003258:	461a      	mov	r2, r3
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	4413      	add	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	b29b      	uxth	r3, r3
 800326e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003272:	b29a      	uxth	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	801a      	strh	r2, [r3, #0]
 8003278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327a:	691b      	ldr	r3, [r3, #16]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d10a      	bne.n	8003296 <PCD_EP_ISR_Handler+0x266>
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	881b      	ldrh	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800328a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800328e:	b29a      	uxth	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	801a      	strh	r2, [r3, #0]
 8003294:	e039      	b.n	800330a <PCD_EP_ISR_Handler+0x2da>
 8003296:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b3e      	cmp	r3, #62	@ 0x3e
 800329c:	d818      	bhi.n	80032d0 <PCD_EP_ISR_Handler+0x2a0>
 800329e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	085b      	lsrs	r3, r3, #1
 80032a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80032a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <PCD_EP_ISR_Handler+0x288>
 80032b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b4:	3301      	adds	r3, #1
 80032b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	881b      	ldrh	r3, [r3, #0]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	029b      	lsls	r3, r3, #10
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	4313      	orrs	r3, r2
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	801a      	strh	r2, [r3, #0]
 80032ce:	e01c      	b.n	800330a <PCD_EP_ISR_Handler+0x2da>
 80032d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032d2:	691b      	ldr	r3, [r3, #16]
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80032d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	f003 031f 	and.w	r3, r3, #31
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d102      	bne.n	80032ea <PCD_EP_ISR_Handler+0x2ba>
 80032e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032e6:	3b01      	subs	r3, #1
 80032e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	881b      	ldrh	r3, [r3, #0]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	029b      	lsls	r3, r3, #10
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003300:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003304:	b29a      	uxth	r2, r3
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800331a:	827b      	strh	r3, [r7, #18]
 800331c:	8a7b      	ldrh	r3, [r7, #18]
 800331e:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8003322:	827b      	strh	r3, [r7, #18]
 8003324:	8a7b      	ldrh	r3, [r7, #18]
 8003326:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 800332a:	827b      	strh	r3, [r7, #18]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	8a7b      	ldrh	r3, [r7, #18]
 8003332:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800333a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800333e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003342:	b29b      	uxth	r3, r3
 8003344:	8013      	strh	r3, [r2, #0]
 8003346:	e234      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	461a      	mov	r2, r3
 800334e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	4413      	add	r3, r2
 8003356:	881b      	ldrh	r3, [r3, #0]
 8003358:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800335c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8003360:	2b00      	cmp	r3, #0
 8003362:	f280 80fc 	bge.w	800355e <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	461a      	mov	r2, r3
 800336c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003370:	009b      	lsls	r3, r3, #2
 8003372:	4413      	add	r3, r2
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29a      	uxth	r2, r3
 8003378:	f640 738f 	movw	r3, #3983	@ 0xf8f
 800337c:	4013      	ands	r3, r2
 800337e:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	461a      	mov	r2, r3
 8003388:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	f8b7 204a 	ldrh.w	r2, [r7, #74]	@ 0x4a
 8003394:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003398:	b292      	uxth	r2, r2
 800339a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800339c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80033b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033b4:	7b1b      	ldrb	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d125      	bne.n	8003406 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	3306      	adds	r3, #6
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	4413      	add	r3, r2
 80033d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80033dc:	881b      	ldrh	r3, [r3, #0]
 80033de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80033e2:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 80033e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8092 	beq.w	8003514 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f6:	6959      	ldr	r1, [r3, #20]
 80033f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fa:	88da      	ldrh	r2, [r3, #6]
 80033fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003400:	f004 fe15 	bl	800802e <USB_ReadPMA>
 8003404:	e086      	b.n	8003514 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003406:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003408:	78db      	ldrb	r3, [r3, #3]
 800340a:	2b02      	cmp	r3, #2
 800340c:	d10a      	bne.n	8003424 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800340e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003412:	461a      	mov	r2, r3
 8003414:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f9d9 	bl	80037ce <HAL_PCD_EP_DB_Receive>
 800341c:	4603      	mov	r3, r0
 800341e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 8003422:	e077      	b.n	8003514 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	461a      	mov	r2, r3
 800342a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800343a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800343e:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	441a      	add	r2, r3
 8003450:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8003454:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003458:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003460:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8003464:	b29b      	uxth	r3, r3
 8003466:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800347e:	2b00      	cmp	r3, #0
 8003480:	d024      	beq.n	80034cc <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800348a:	b29b      	uxth	r3, r3
 800348c:	461a      	mov	r2, r3
 800348e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	4413      	add	r3, r2
 8003496:	3302      	adds	r3, #2
 8003498:	005b      	lsls	r3, r3, #1
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6812      	ldr	r2, [r2, #0]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034a4:	881b      	ldrh	r3, [r3, #0]
 80034a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034aa:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d02e      	beq.n	8003514 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034bc:	6959      	ldr	r1, [r3, #20]
 80034be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c0:	891a      	ldrh	r2, [r3, #8]
 80034c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034c6:	f004 fdb2 	bl	800802e <USB_ReadPMA>
 80034ca:	e023      	b.n	8003514 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	461a      	mov	r2, r3
 80034d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	00db      	lsls	r3, r3, #3
 80034de:	4413      	add	r3, r2
 80034e0:	3306      	adds	r3, #6
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	687a      	ldr	r2, [r7, #4]
 80034e6:	6812      	ldr	r2, [r2, #0]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034f4:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 80034f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d009      	beq.n	8003514 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6818      	ldr	r0, [r3, #0]
 8003504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003506:	6959      	ldr	r1, [r3, #20]
 8003508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800350a:	895a      	ldrh	r2, [r3, #10]
 800350c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8003510:	f004 fd8d 	bl	800802e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800351c:	441a      	add	r2, r3
 800351e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003520:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	695a      	ldr	r2, [r3, #20]
 8003526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800352a:	441a      	add	r2, r3
 800352c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800352e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003530:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <PCD_EP_ISR_Handler+0x514>
 8003538:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 800353c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d206      	bcs.n	8003552 <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f006 fa5a 	bl	8009a04 <HAL_PCD_DataOutStageCallback>
 8003550:	e005      	b.n	800355e <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003558:	4618      	mov	r0, r3
 800355a:	f003 f842 	bl	80065e2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800355e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8123 	beq.w	80037b2 <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 800356c:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8003570:	4613      	mov	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	4413      	add	r3, r2
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3310      	adds	r3, #16
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	4413      	add	r3, r2
 800357e:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29b      	uxth	r3, r3
 8003592:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 8003596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800359a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	441a      	add	r2, r3
 80035ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80035b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	78db      	ldrb	r3, [r3, #3]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	f040 80a2 	bne.w	800370a <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 80035c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c8:	2200      	movs	r2, #0
 80035ca:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80035cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ce:	7b1b      	ldrb	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f000 8093 	beq.w	80036fc <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80035d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80035da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d046      	beq.n	8003670 <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80035e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035e4:	785b      	ldrb	r3, [r3, #1]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d126      	bne.n	8003638 <PCD_EP_ISR_Handler+0x608>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	4413      	add	r3, r2
 8003600:	627b      	str	r3, [r7, #36]	@ 0x24
 8003602:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	011a      	lsls	r2, r3, #4
 8003608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800360a:	4413      	add	r3, r2
 800360c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003610:	623b      	str	r3, [r7, #32]
 8003612:	6a3b      	ldr	r3, [r7, #32]
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	b29b      	uxth	r3, r3
 8003618:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800361c:	b29a      	uxth	r2, r3
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	801a      	strh	r2, [r3, #0]
 8003622:	6a3b      	ldr	r3, [r7, #32]
 8003624:	881b      	ldrh	r3, [r3, #0]
 8003626:	b29b      	uxth	r3, r3
 8003628:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800362c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003630:	b29a      	uxth	r2, r3
 8003632:	6a3b      	ldr	r3, [r7, #32]
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	e061      	b.n	80036fc <PCD_EP_ISR_Handler+0x6cc>
 8003638:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800363a:	785b      	ldrb	r3, [r3, #1]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d15d      	bne.n	80036fc <PCD_EP_ISR_Handler+0x6cc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800364e:	b29b      	uxth	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003654:	4413      	add	r3, r2
 8003656:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003658:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	011a      	lsls	r2, r3, #4
 800365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003660:	4413      	add	r3, r2
 8003662:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003666:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366a:	2200      	movs	r2, #0
 800366c:	801a      	strh	r2, [r3, #0]
 800366e:	e045      	b.n	80036fc <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003676:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003678:	785b      	ldrb	r3, [r3, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d126      	bne.n	80036cc <PCD_EP_ISR_Handler+0x69c>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	637b      	str	r3, [r7, #52]	@ 0x34
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800368c:	b29b      	uxth	r3, r3
 800368e:	461a      	mov	r2, r3
 8003690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003692:	4413      	add	r3, r2
 8003694:	637b      	str	r3, [r7, #52]	@ 0x34
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	011a      	lsls	r2, r3, #4
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	4413      	add	r3, r2
 80036a0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	881b      	ldrh	r3, [r3, #0]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	801a      	strh	r2, [r3, #0]
 80036b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c8:	801a      	strh	r2, [r3, #0]
 80036ca:	e017      	b.n	80036fc <PCD_EP_ISR_Handler+0x6cc>
 80036cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036ce:	785b      	ldrb	r3, [r3, #1]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d113      	bne.n	80036fc <PCD_EP_ISR_Handler+0x6cc>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80036dc:	b29b      	uxth	r3, r3
 80036de:	461a      	mov	r2, r3
 80036e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e2:	4413      	add	r3, r2
 80036e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	011a      	lsls	r2, r3, #4
 80036ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ee:	4413      	add	r3, r2
 80036f0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80036f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f8:	2200      	movs	r2, #0
 80036fa:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80036fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	4619      	mov	r1, r3
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f006 f999 	bl	8009a3a <HAL_PCD_DataInStageCallback>
 8003708:	e053      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800370a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 800370e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003712:	2b00      	cmp	r3, #0
 8003714:	d146      	bne.n	80037a4 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800371e:	b29b      	uxth	r3, r3
 8003720:	461a      	mov	r2, r3
 8003722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	3302      	adds	r3, #2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6812      	ldr	r2, [r2, #0]
 8003732:	4413      	add	r3, r2
 8003734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003738:	881b      	ldrh	r3, [r3, #0]
 800373a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800373e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 8003742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800374a:	429a      	cmp	r2, r3
 800374c:	d907      	bls.n	800375e <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 800374e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003750:	699a      	ldr	r2, [r3, #24]
 8003752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003756:	1ad2      	subs	r2, r2, r3
 8003758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800375a:	619a      	str	r2, [r3, #24]
 800375c:	e002      	b.n	8003764 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 800375e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003760:	2200      	movs	r2, #0
 8003762:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003764:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d106      	bne.n	800377a <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800376c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f006 f961 	bl	8009a3a <HAL_PCD_DataInStageCallback>
 8003778:	e01b      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800377a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377c:	695a      	ldr	r2, [r3, #20]
 800377e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003782:	441a      	add	r2, r3
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8003790:	441a      	add	r2, r3
 8003792:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003794:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800379c:	4618      	mov	r0, r3
 800379e:	f002 ff20 	bl	80065e2 <USB_EPStartXfer>
 80037a2:	e006      	b.n	80037b2 <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80037a4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80037a8:	461a      	mov	r2, r3
 80037aa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f91b 	bl	80039e8 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	b21b      	sxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f6ff ac3b 	blt.w	800303a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3758      	adds	r7, #88	@ 0x58
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b088      	sub	sp, #32
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	4613      	mov	r3, r2
 80037da:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d07e      	beq.n	80038e4 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	4413      	add	r3, r2
 80037fa:	3302      	adds	r3, #2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	6812      	ldr	r2, [r2, #0]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003808:	881b      	ldrh	r3, [r3, #0]
 800380a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800380e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	699a      	ldr	r2, [r3, #24]
 8003814:	8b7b      	ldrh	r3, [r7, #26]
 8003816:	429a      	cmp	r2, r3
 8003818:	d306      	bcc.n	8003828 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	699a      	ldr	r2, [r3, #24]
 800381e:	8b7b      	ldrh	r3, [r7, #26]
 8003820:	1ad2      	subs	r2, r2, r3
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	619a      	str	r2, [r3, #24]
 8003826:	e002      	b.n	800382e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	2200      	movs	r2, #0
 800382c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d123      	bne.n	800387e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	461a      	mov	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	b29b      	uxth	r3, r3
 8003848:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800384c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003850:	833b      	strh	r3, [r7, #24]
 8003852:	8b3b      	ldrh	r3, [r7, #24]
 8003854:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003858:	833b      	strh	r3, [r7, #24]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	461a      	mov	r2, r3
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	441a      	add	r2, r3
 8003868:	8b3b      	ldrh	r3, [r7, #24]
 800386a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800386e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003872:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800387a:	b29b      	uxth	r3, r3
 800387c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800387e:	88fb      	ldrh	r3, [r7, #6]
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b00      	cmp	r3, #0
 8003886:	d01f      	beq.n	80038c8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	461a      	mov	r2, r3
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	881b      	ldrh	r3, [r3, #0]
 8003898:	b29b      	uxth	r3, r3
 800389a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800389e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038a2:	82fb      	strh	r3, [r7, #22]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	461a      	mov	r2, r3
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	441a      	add	r2, r3
 80038b2:	8afb      	ldrh	r3, [r7, #22]
 80038b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80038b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80038bc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80038c0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80038c8:	8b7b      	ldrh	r3, [r7, #26]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	f000 8087 	beq.w	80039de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	6959      	ldr	r1, [r3, #20]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	891a      	ldrh	r2, [r3, #8]
 80038dc:	8b7b      	ldrh	r3, [r7, #26]
 80038de:	f004 fba6 	bl	800802e <USB_ReadPMA>
 80038e2:	e07c      	b.n	80039de <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	3306      	adds	r3, #6
 80038fa:	005b      	lsls	r3, r3, #1
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	6812      	ldr	r2, [r2, #0]
 8003900:	4413      	add	r3, r2
 8003902:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003906:	881b      	ldrh	r3, [r3, #0]
 8003908:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	699a      	ldr	r2, [r3, #24]
 8003912:	8b7b      	ldrh	r3, [r7, #26]
 8003914:	429a      	cmp	r2, r3
 8003916:	d306      	bcc.n	8003926 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	8b7b      	ldrh	r3, [r7, #26]
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	619a      	str	r2, [r3, #24]
 8003924:	e002      	b.n	800392c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2200      	movs	r2, #0
 800392a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	699b      	ldr	r3, [r3, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d123      	bne.n	800397c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	b29b      	uxth	r3, r3
 8003946:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800394a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800394e:	83fb      	strh	r3, [r7, #30]
 8003950:	8bfb      	ldrh	r3, [r7, #30]
 8003952:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8003956:	83fb      	strh	r3, [r7, #30]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	461a      	mov	r2, r3
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	441a      	add	r2, r3
 8003966:	8bfb      	ldrh	r3, [r7, #30]
 8003968:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800396c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003970:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003974:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003978:	b29b      	uxth	r3, r3
 800397a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003982:	2b00      	cmp	r3, #0
 8003984:	d11f      	bne.n	80039c6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800399c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039a0:	83bb      	strh	r3, [r7, #28]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	441a      	add	r2, r3
 80039b0:	8bbb      	ldrh	r3, [r7, #28]
 80039b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80039b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80039ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039be:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80039c6:	8b7b      	ldrh	r3, [r7, #26]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d008      	beq.n	80039de <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	6818      	ldr	r0, [r3, #0]
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	6959      	ldr	r1, [r3, #20]
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	895a      	ldrh	r2, [r3, #10]
 80039d8:	8b7b      	ldrh	r3, [r7, #26]
 80039da:	f004 fb28 	bl	800802e <USB_ReadPMA>
    }
  }

  return count;
 80039de:	8b7b      	ldrh	r3, [r7, #26]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}

080039e8 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0a4      	sub	sp, #144	@ 0x90
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	4613      	mov	r3, r2
 80039f4:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039f6:	88fb      	ldrh	r3, [r7, #6]
 80039f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 81dd 	beq.w	8003dbc <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	3302      	adds	r3, #2
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	6812      	ldr	r2, [r2, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a24:	881b      	ldrh	r3, [r3, #0]
 8003a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2a:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len > TxPctSize)
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	699a      	ldr	r2, [r3, #24]
 8003a32:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d907      	bls.n	8003a4a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	699a      	ldr	r2, [r3, #24]
 8003a3e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003a42:	1ad2      	subs	r2, r2, r3
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	619a      	str	r2, [r3, #24]
 8003a48:	e002      	b.n	8003a50 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f040 80b9 	bne.w	8003bcc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	785b      	ldrb	r3, [r3, #1]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d126      	bne.n	8003ab0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	461a      	mov	r2, r3
 8003a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a76:	4413      	add	r3, r2
 8003a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	011a      	lsls	r2, r3, #4
 8003a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a82:	4413      	add	r3, r2
 8003a84:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003a88:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a98:	801a      	strh	r2, [r3, #0]
 8003a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9c:	881b      	ldrh	r3, [r3, #0]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa8:	b29a      	uxth	r2, r3
 8003aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aac:	801a      	strh	r2, [r3, #0]
 8003aae:	e01a      	b.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	785b      	ldrb	r3, [r3, #1]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d116      	bne.n	8003ae6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	637b      	str	r3, [r7, #52]	@ 0x34
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003acc:	4413      	add	r3, r2
 8003ace:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	781b      	ldrb	r3, [r3, #0]
 8003ad4:	011a      	lsls	r2, r3, #4
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad8:	4413      	add	r3, r2
 8003ada:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003ade:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	785b      	ldrb	r3, [r3, #1]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d126      	bne.n	8003b42 <HAL_PCD_EP_DB_Transmit+0x15a>
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	4413      	add	r3, r2
 8003b0a:	61fb      	str	r3, [r7, #28]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	011a      	lsls	r2, r3, #4
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	4413      	add	r3, r2
 8003b16:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b26:	b29a      	uxth	r2, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	801a      	strh	r2, [r3, #0]
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e017      	b.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	785b      	ldrb	r3, [r3, #1]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d113      	bne.n	8003b72 <HAL_PCD_EP_DB_Transmit+0x18a>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	461a      	mov	r2, r3
 8003b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b58:	4413      	add	r3, r2
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	781b      	ldrb	r3, [r3, #0]
 8003b60:	011a      	lsls	r2, r3, #4
 8003b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b64:	4413      	add	r3, r2
 8003b66:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003b6a:	623b      	str	r3, [r7, #32]
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	4619      	mov	r1, r3
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f005 ff5e 	bl	8009a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f000 82fc 	beq.w	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	461a      	mov	r2, r3
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4413      	add	r3, r2
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ba0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba4:	82fb      	strh	r3, [r7, #22]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	441a      	add	r2, r3
 8003bb4:	8afb      	ldrh	r3, [r7, #22]
 8003bb6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003bba:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bbe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	8013      	strh	r3, [r2, #0]
 8003bca:	e2da      	b.n	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bcc:	88fb      	ldrh	r3, [r7, #6]
 8003bce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d021      	beq.n	8003c1a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bf0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	441a      	add	r2, r3
 8003c02:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8003c06:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c0a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003c0e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	f040 82ae 	bne.w	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	695a      	ldr	r2, [r3, #20]
 8003c2a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c2e:	441a      	add	r2, r3
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	69da      	ldr	r2, [r3, #28]
 8003c38:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c3c:	441a      	add	r2, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	6a1a      	ldr	r2, [r3, #32]
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d30b      	bcc.n	8003c66 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6a1a      	ldr	r2, [r3, #32]
 8003c5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c5e:	1ad2      	subs	r2, r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	621a      	str	r2, [r3, #32]
 8003c64:	e017      	b.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d108      	bne.n	8003c80 <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8003c6e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003c72:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8003c7e:	e00a      	b.n	8003c96 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2200      	movs	r2, #0
 8003c94:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	785b      	ldrb	r3, [r3, #1]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d165      	bne.n	8003d6a <HAL_PCD_EP_DB_Transmit+0x382>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb2:	4413      	add	r3, r2
 8003cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	011a      	lsls	r2, r3, #4
 8003cbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cd4:	801a      	strh	r2, [r3, #0]
 8003cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_PCD_EP_DB_Transmit+0x30c>
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce0:	881b      	ldrh	r3, [r3, #0]
 8003ce2:	b29b      	uxth	r3, r3
 8003ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cf0:	801a      	strh	r2, [r3, #0]
 8003cf2:	e057      	b.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003cf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003cf8:	2b3e      	cmp	r3, #62	@ 0x3e
 8003cfa:	d818      	bhi.n	8003d2e <HAL_PCD_EP_DB_Transmit+0x346>
 8003cfc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d00:	085b      	lsrs	r3, r3, #1
 8003d02:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d04:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <HAL_PCD_EP_DB_Transmit+0x32e>
 8003d10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d12:	3301      	adds	r3, #1
 8003d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29a      	uxth	r2, r3
 8003d1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	029b      	lsls	r3, r3, #10
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	4313      	orrs	r3, r2
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d2a:	801a      	strh	r2, [r3, #0]
 8003d2c:	e03a      	b.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d3a:	f003 031f 	and.w	r3, r3, #31
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <HAL_PCD_EP_DB_Transmit+0x360>
 8003d42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d44:	3b01      	subs	r3, #1
 8003d46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	881b      	ldrh	r3, [r3, #0]
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	029b      	lsls	r3, r3, #10
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	4313      	orrs	r3, r2
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d62:	b29a      	uxth	r2, r3
 8003d64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d66:	801a      	strh	r2, [r3, #0]
 8003d68:	e01c      	b.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	785b      	ldrb	r3, [r3, #1]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d118      	bne.n	8003da4 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	461a      	mov	r2, r3
 8003d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d86:	4413      	add	r3, r2
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	011a      	lsls	r2, r3, #4
 8003d90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d92:	4413      	add	r3, r2
 8003d94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003d98:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003da2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6818      	ldr	r0, [r3, #0]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	6959      	ldr	r1, [r3, #20]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	891a      	ldrh	r2, [r3, #8]
 8003db0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003db4:	b29b      	uxth	r3, r3
 8003db6:	f004 f8f4 	bl	8007fa2 <USB_WritePMA>
 8003dba:	e1e2      	b.n	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3306      	adds	r3, #6
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	4413      	add	r3, r2
 8003dda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003dde:	881b      	ldrh	r3, [r3, #0]
 8003de0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003de4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

    if (ep->xfer_len >= TxPctSize)
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	699a      	ldr	r2, [r3, #24]
 8003dec:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d307      	bcc.n	8003e04 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	699a      	ldr	r2, [r3, #24]
 8003df8:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003dfc:	1ad2      	subs	r2, r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	619a      	str	r2, [r3, #24]
 8003e02:	e002      	b.n	8003e0a <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	f040 80c0 	bne.w	8003f94 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	785b      	ldrb	r3, [r3, #1]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d126      	bne.n	8003e6a <HAL_PCD_EP_DB_Transmit+0x482>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e30:	4413      	add	r3, r2
 8003e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	011a      	lsls	r2, r3, #4
 8003e3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e42:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e52:	801a      	strh	r2, [r3, #0]
 8003e54:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e56:	881b      	ldrh	r3, [r3, #0]
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e66:	801a      	strh	r2, [r3, #0]
 8003e68:	e01a      	b.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	785b      	ldrb	r3, [r3, #1]
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d116      	bne.n	8003ea0 <HAL_PCD_EP_DB_Transmit+0x4b8>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	461a      	mov	r2, r3
 8003e84:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e86:	4413      	add	r3, r2
 8003e88:	667b      	str	r3, [r7, #100]	@ 0x64
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	011a      	lsls	r2, r3, #4
 8003e90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e92:	4413      	add	r3, r2
 8003e94:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8003e98:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	677b      	str	r3, [r7, #116]	@ 0x74
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	785b      	ldrb	r3, [r3, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d12b      	bne.n	8003f06 <HAL_PCD_EP_DB_Transmit+0x51e>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ec2:	4413      	add	r3, r2
 8003ec4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	011a      	lsls	r2, r3, #4
 8003ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ece:	4413      	add	r3, r2
 8003ed0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003ed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003ed8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ee4:	b29a      	uxth	r2, r3
 8003ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003eea:	801a      	strh	r2, [r3, #0]
 8003eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ef0:	881b      	ldrh	r3, [r3, #0]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003ef8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f02:	801a      	strh	r2, [r3, #0]
 8003f04:	e017      	b.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	785b      	ldrb	r3, [r3, #1]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d113      	bne.n	8003f36 <HAL_PCD_EP_DB_Transmit+0x54e>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	461a      	mov	r2, r3
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f1c:	4413      	add	r3, r2
 8003f1e:	677b      	str	r3, [r7, #116]	@ 0x74
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	011a      	lsls	r2, r3, #4
 8003f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f28:	4413      	add	r3, r2
 8003f2a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8003f2e:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f30:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f32:	2200      	movs	r2, #0
 8003f34:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f005 fd7c 	bl	8009a3a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f42:	88fb      	ldrh	r3, [r7, #6]
 8003f44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f040 811a 	bne.w	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	461a      	mov	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003f64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f68:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	461a      	mov	r2, r3
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	441a      	add	r2, r3
 8003f7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 8003f7e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003f82:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003f86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003f8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	8013      	strh	r3, [r2, #0]
 8003f92:	e0f6      	b.n	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003f94:	88fb      	ldrh	r3, [r7, #6]
 8003f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d121      	bne.n	8003fe2 <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fb4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fb8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	441a      	add	r2, r3
 8003fca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8003fce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003fd2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003fd6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	f040 80ca 	bne.w	8004182 <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	695a      	ldr	r2, [r3, #20]
 8003ff2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8003ff6:	441a      	add	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	69da      	ldr	r2, [r3, #28]
 8004000:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8004004:	441a      	add	r2, r3
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6a1a      	ldr	r2, [r3, #32]
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	429a      	cmp	r2, r3
 8004014:	d30b      	bcc.n	800402e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	6a1a      	ldr	r2, [r3, #32]
 8004022:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004026:	1ad2      	subs	r2, r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	621a      	str	r2, [r3, #32]
 800402c:	e017      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d108      	bne.n	8004048 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8004036:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 800403a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8004046:	e00a      	b.n	800405e <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004056:	68bb      	ldr	r3, [r7, #8]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	657b      	str	r3, [r7, #84]	@ 0x54
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d165      	bne.n	8004138 <HAL_PCD_EP_DB_Transmit+0x750>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004080:	4413      	add	r3, r2
 8004082:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	011a      	lsls	r2, r3, #4
 800408a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800408c:	4413      	add	r3, r2
 800408e:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004092:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004094:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004096:	881b      	ldrh	r3, [r3, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800409e:	b29a      	uxth	r2, r3
 80040a0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040a2:	801a      	strh	r2, [r3, #0]
 80040a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_PCD_EP_DB_Transmit+0x6da>
 80040ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040ae:	881b      	ldrh	r3, [r3, #0]
 80040b0:	b29b      	uxth	r3, r3
 80040b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040be:	801a      	strh	r2, [r3, #0]
 80040c0:	e054      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x784>
 80040c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040c6:	2b3e      	cmp	r3, #62	@ 0x3e
 80040c8:	d818      	bhi.n	80040fc <HAL_PCD_EP_DB_Transmit+0x714>
 80040ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040ce:	085b      	lsrs	r3, r3, #1
 80040d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <HAL_PCD_EP_DB_Transmit+0x6fc>
 80040de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040e0:	3301      	adds	r3, #1
 80040e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040e4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040e6:	881b      	ldrh	r3, [r3, #0]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	029b      	lsls	r3, r3, #10
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	4313      	orrs	r3, r2
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80040f8:	801a      	strh	r2, [r3, #0]
 80040fa:	e037      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x784>
 80040fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004100:	095b      	lsrs	r3, r3, #5
 8004102:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004104:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <HAL_PCD_EP_DB_Transmit+0x72e>
 8004110:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004112:	3b01      	subs	r3, #1
 8004114:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004116:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	b29a      	uxth	r2, r3
 800411c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800411e:	b29b      	uxth	r3, r3
 8004120:	029b      	lsls	r3, r3, #10
 8004122:	b29b      	uxth	r3, r3
 8004124:	4313      	orrs	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800412c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004130:	b29a      	uxth	r2, r3
 8004132:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004134:	801a      	strh	r2, [r3, #0]
 8004136:	e019      	b.n	800416c <HAL_PCD_EP_DB_Transmit+0x784>
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	785b      	ldrb	r3, [r3, #1]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d115      	bne.n	800416c <HAL_PCD_EP_DB_Transmit+0x784>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8004148:	b29b      	uxth	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800414e:	4413      	add	r3, r2
 8004150:	657b      	str	r3, [r7, #84]	@ 0x54
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	011a      	lsls	r2, r3, #4
 8004158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800415a:	4413      	add	r3, r2
 800415c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8004160:	653b      	str	r3, [r7, #80]	@ 0x50
 8004162:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004166:	b29a      	uxth	r2, r3
 8004168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800416a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	6959      	ldr	r1, [r3, #20]
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	895a      	ldrh	r2, [r3, #10]
 8004178:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800417c:	b29b      	uxth	r3, r3
 800417e:	f003 ff10 	bl	8007fa2 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4413      	add	r3, r2
 8004190:	881b      	ldrh	r3, [r3, #0]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004198:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800419c:	82bb      	strh	r3, [r7, #20]
 800419e:	8abb      	ldrh	r3, [r7, #20]
 80041a0:	f083 0310 	eor.w	r3, r3, #16
 80041a4:	82bb      	strh	r3, [r7, #20]
 80041a6:	8abb      	ldrh	r3, [r7, #20]
 80041a8:	f083 0320 	eor.w	r3, r3, #32
 80041ac:	82bb      	strh	r3, [r7, #20]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	8abb      	ldrh	r3, [r7, #20]
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80041c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3790      	adds	r7, #144	@ 0x90
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	607b      	str	r3, [r7, #4]
 80041e6:	460b      	mov	r3, r1
 80041e8:	817b      	strh	r3, [r7, #10]
 80041ea:	4613      	mov	r3, r2
 80041ec:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80041ee:	897b      	ldrh	r3, [r7, #10]
 80041f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00b      	beq.n	8004212 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80041fa:	897b      	ldrh	r3, [r7, #10]
 80041fc:	f003 0207 	and.w	r2, r3, #7
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	00db      	lsls	r3, r3, #3
 8004208:	3310      	adds	r3, #16
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4413      	add	r3, r2
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e009      	b.n	8004226 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004212:	897a      	ldrh	r2, [r7, #10]
 8004214:	4613      	mov	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	4413      	add	r3, r2
 800421a:	00db      	lsls	r3, r3, #3
 800421c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004226:	893b      	ldrh	r3, [r7, #8]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d107      	bne.n	800423c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	2200      	movs	r2, #0
 8004230:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	b29a      	uxth	r2, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	80da      	strh	r2, [r3, #6]
 800423a:	e00b      	b.n	8004254 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2201      	movs	r2, #1
 8004240:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b29a      	uxth	r2, r3
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	0c1b      	lsrs	r3, r3, #16
 800424e:	b29a      	uxth	r2, r3
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004254:	2300      	movs	r3, #0
}
 8004256:	4618      	mov	r0, r3
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
	...

08004264 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800426a:	af00      	add	r7, sp, #0
 800426c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004270:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004274:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004276:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800427a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d102      	bne.n	800428a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	f001 b823 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800428a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800428e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	f000 817d 	beq.w	800459a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80042a0:	4bbc      	ldr	r3, [pc, #752]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 030c 	and.w	r3, r3, #12
 80042a8:	2b04      	cmp	r3, #4
 80042aa:	d00c      	beq.n	80042c6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042ac:	4bb9      	ldr	r3, [pc, #740]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d15c      	bne.n	8004372 <HAL_RCC_OscConfig+0x10e>
 80042b8:	4bb6      	ldr	r3, [pc, #728]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80042c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042c4:	d155      	bne.n	8004372 <HAL_RCC_OscConfig+0x10e>
 80042c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042ca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 80042d2:	fa93 f3a3 	rbit	r3, r3
 80042d6:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042da:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042de:	fab3 f383 	clz	r3, r3
 80042e2:	b2db      	uxtb	r3, r3
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f043 0301 	orr.w	r3, r3, #1
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d102      	bne.n	80042f8 <HAL_RCC_OscConfig+0x94>
 80042f2:	4ba8      	ldr	r3, [pc, #672]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	e015      	b.n	8004324 <HAL_RCC_OscConfig+0xc0>
 80042f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042fc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004300:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8004304:	fa93 f3a3 	rbit	r3, r3
 8004308:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800430c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004310:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8004314:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8004318:	fa93 f3a3 	rbit	r3, r3
 800431c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8004320:	4b9c      	ldr	r3, [pc, #624]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004328:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 800432c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8004330:	fa92 f2a2 	rbit	r2, r2
 8004334:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8004338:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 800433c:	fab2 f282 	clz	r2, r2
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	f042 0220 	orr.w	r2, r2, #32
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	f002 021f 	and.w	r2, r2, #31
 800434c:	2101      	movs	r1, #1
 800434e:	fa01 f202 	lsl.w	r2, r1, r2
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 811f 	beq.w	8004598 <HAL_RCC_OscConfig+0x334>
 800435a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800435e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 8116 	bne.w	8004598 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f000 bfaf 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004372:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004376:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x12e>
 8004384:	4b83      	ldr	r3, [pc, #524]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a82      	ldr	r2, [pc, #520]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e036      	b.n	8004400 <HAL_RCC_OscConfig+0x19c>
 8004392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004396:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x158>
 80043a2:	4b7c      	ldr	r3, [pc, #496]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a7b      	ldr	r2, [pc, #492]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b79      	ldr	r3, [pc, #484]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a78      	ldr	r2, [pc, #480]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e021      	b.n	8004400 <HAL_RCC_OscConfig+0x19c>
 80043bc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80043c0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCC_OscConfig+0x184>
 80043ce:	4b71      	ldr	r3, [pc, #452]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a70      	ldr	r2, [pc, #448]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b6e      	ldr	r3, [pc, #440]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a6d      	ldr	r2, [pc, #436]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043e4:	6013      	str	r3, [r2, #0]
 80043e6:	e00b      	b.n	8004400 <HAL_RCC_OscConfig+0x19c>
 80043e8:	4b6a      	ldr	r3, [pc, #424]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a69      	ldr	r2, [pc, #420]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	4b67      	ldr	r3, [pc, #412]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a66      	ldr	r2, [pc, #408]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80043fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043fe:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004400:	4b64      	ldr	r3, [pc, #400]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	f023 020f 	bic.w	r2, r3, #15
 8004408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800440c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	495f      	ldr	r1, [pc, #380]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 8004416:	4313      	orrs	r3, r2
 8004418:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800441a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800441e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d059      	beq.n	80044de <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800442a:	f7fc fc5b 	bl	8000ce4 <HAL_GetTick>
 800442e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004434:	f7fc fc56 	bl	8000ce4 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b64      	cmp	r3, #100	@ 0x64
 8004442:	d902      	bls.n	800444a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	f000 bf43 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
 800444a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800444e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8004456:	fa93 f3a3 	rbit	r3, r3
 800445a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 800445e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	fab3 f383 	clz	r3, r3
 8004466:	b2db      	uxtb	r3, r3
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f043 0301 	orr.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d102      	bne.n	800447c <HAL_RCC_OscConfig+0x218>
 8004476:	4b47      	ldr	r3, [pc, #284]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	e015      	b.n	80044a8 <HAL_RCC_OscConfig+0x244>
 800447c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004480:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004484:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8004488:	fa93 f3a3 	rbit	r3, r3
 800448c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8004490:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004494:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8004498:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80044a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 80044a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80044ac:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 80044b0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80044b4:	fa92 f2a2 	rbit	r2, r2
 80044b8:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 80044bc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 80044c0:	fab2 f282 	clz	r2, r2
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	f042 0220 	orr.w	r2, r2, #32
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	f002 021f 	and.w	r2, r2, #31
 80044d0:	2101      	movs	r1, #1
 80044d2:	fa01 f202 	lsl.w	r2, r1, r2
 80044d6:	4013      	ands	r3, r2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d0ab      	beq.n	8004434 <HAL_RCC_OscConfig+0x1d0>
 80044dc:	e05d      	b.n	800459a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044de:	f7fc fc01 	bl	8000ce4 <HAL_GetTick>
 80044e2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80044e6:	e00a      	b.n	80044fe <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fc fbfc 	bl	8000ce4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	2b64      	cmp	r3, #100	@ 0x64
 80044f6:	d902      	bls.n	80044fe <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80044f8:	2303      	movs	r3, #3
 80044fa:	f000 bee9 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
 80044fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004502:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800450a:	fa93 f3a3 	rbit	r3, r3
 800450e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8004512:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004516:	fab3 f383 	clz	r3, r3
 800451a:	b2db      	uxtb	r3, r3
 800451c:	095b      	lsrs	r3, r3, #5
 800451e:	b2db      	uxtb	r3, r3
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b01      	cmp	r3, #1
 8004528:	d102      	bne.n	8004530 <HAL_RCC_OscConfig+0x2cc>
 800452a:	4b1a      	ldr	r3, [pc, #104]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	e015      	b.n	800455c <HAL_RCC_OscConfig+0x2f8>
 8004530:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004534:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800453c:	fa93 f3a3 	rbit	r3, r3
 8004540:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8004544:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004548:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800454c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004550:	fa93 f3a3 	rbit	r3, r3
 8004554:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004558:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <HAL_RCC_OscConfig+0x330>)
 800455a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800455c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004560:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8004564:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004568:	fa92 f2a2 	rbit	r2, r2
 800456c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8004570:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004574:	fab2 f282 	clz	r2, r2
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	f042 0220 	orr.w	r2, r2, #32
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	f002 021f 	and.w	r2, r2, #31
 8004584:	2101      	movs	r1, #1
 8004586:	fa01 f202 	lsl.w	r2, r1, r2
 800458a:	4013      	ands	r3, r2
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1ab      	bne.n	80044e8 <HAL_RCC_OscConfig+0x284>
 8004590:	e003      	b.n	800459a <HAL_RCC_OscConfig+0x336>
 8004592:	bf00      	nop
 8004594:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800459a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800459e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	f000 817d 	beq.w	80048aa <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80045b0:	4ba6      	ldr	r3, [pc, #664]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f003 030c 	and.w	r3, r3, #12
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80045bc:	4ba3      	ldr	r3, [pc, #652]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f003 030c 	and.w	r3, r3, #12
 80045c4:	2b08      	cmp	r3, #8
 80045c6:	d172      	bne.n	80046ae <HAL_RCC_OscConfig+0x44a>
 80045c8:	4ba0      	ldr	r3, [pc, #640]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d16c      	bne.n	80046ae <HAL_RCC_OscConfig+0x44a>
 80045d4:	2302      	movs	r3, #2
 80045d6:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045da:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 80045de:	fa93 f3a3 	rbit	r3, r3
 80045e2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 80045e6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	f043 0301 	orr.w	r3, r3, #1
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d102      	bne.n	8004604 <HAL_RCC_OscConfig+0x3a0>
 80045fe:	4b93      	ldr	r3, [pc, #588]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	e013      	b.n	800462c <HAL_RCC_OscConfig+0x3c8>
 8004604:	2302      	movs	r3, #2
 8004606:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460a:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800460e:	fa93 f3a3 	rbit	r3, r3
 8004612:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8004616:	2302      	movs	r3, #2
 8004618:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800461c:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004620:	fa93 f3a3 	rbit	r3, r3
 8004624:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8004628:	4b88      	ldr	r3, [pc, #544]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 800462a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800462c:	2202      	movs	r2, #2
 800462e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8004632:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8004636:	fa92 f2a2 	rbit	r2, r2
 800463a:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 800463e:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8004642:	fab2 f282 	clz	r2, r2
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	f042 0220 	orr.w	r2, r2, #32
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	f002 021f 	and.w	r2, r2, #31
 8004652:	2101      	movs	r1, #1
 8004654:	fa01 f202 	lsl.w	r2, r1, r2
 8004658:	4013      	ands	r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCC_OscConfig+0x410>
 800465e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004662:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d002      	beq.n	8004674 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f000 be2e 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004674:	4b75      	ldr	r3, [pc, #468]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800467c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004680:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	695b      	ldr	r3, [r3, #20]
 8004688:	21f8      	movs	r1, #248	@ 0xf8
 800468a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8004692:	fa91 f1a1 	rbit	r1, r1
 8004696:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 800469a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800469e:	fab1 f181 	clz	r1, r1
 80046a2:	b2c9      	uxtb	r1, r1
 80046a4:	408b      	lsls	r3, r1
 80046a6:	4969      	ldr	r1, [pc, #420]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 80046a8:	4313      	orrs	r3, r2
 80046aa:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ac:	e0fd      	b.n	80048aa <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80046b2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	691b      	ldr	r3, [r3, #16]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f000 8088 	beq.w	80047d0 <HAL_RCC_OscConfig+0x56c>
 80046c0:	2301      	movs	r3, #1
 80046c2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046c6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80046ca:	fa93 f3a3 	rbit	r3, r3
 80046ce:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80046d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046d6:	fab3 f383 	clz	r3, r3
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80046e0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	461a      	mov	r2, r3
 80046e8:	2301      	movs	r3, #1
 80046ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ec:	f7fc fafa 	bl	8000ce4 <HAL_GetTick>
 80046f0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f4:	e00a      	b.n	800470c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046f6:	f7fc faf5 	bl	8000ce4 <HAL_GetTick>
 80046fa:	4602      	mov	r2, r0
 80046fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d902      	bls.n	800470c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	f000 bde2 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
 800470c:	2302      	movs	r3, #2
 800470e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004712:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8004716:	fa93 f3a3 	rbit	r3, r3
 800471a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800471e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004722:	fab3 f383 	clz	r3, r3
 8004726:	b2db      	uxtb	r3, r3
 8004728:	095b      	lsrs	r3, r3, #5
 800472a:	b2db      	uxtb	r3, r3
 800472c:	f043 0301 	orr.w	r3, r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b01      	cmp	r3, #1
 8004734:	d102      	bne.n	800473c <HAL_RCC_OscConfig+0x4d8>
 8004736:	4b45      	ldr	r3, [pc, #276]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	e013      	b.n	8004764 <HAL_RCC_OscConfig+0x500>
 800473c:	2302      	movs	r3, #2
 800473e:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004746:	fa93 f3a3 	rbit	r3, r3
 800474a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800474e:	2302      	movs	r3, #2
 8004750:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8004754:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8004758:	fa93 f3a3 	rbit	r3, r3
 800475c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8004760:	4b3a      	ldr	r3, [pc, #232]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	2202      	movs	r2, #2
 8004766:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 800476a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 800476e:	fa92 f2a2 	rbit	r2, r2
 8004772:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8004776:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 800477a:	fab2 f282 	clz	r2, r2
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	f042 0220 	orr.w	r2, r2, #32
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	f002 021f 	and.w	r2, r2, #31
 800478a:	2101      	movs	r1, #1
 800478c:	fa01 f202 	lsl.w	r2, r1, r2
 8004790:	4013      	ands	r3, r2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0af      	beq.n	80046f6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b2d      	ldr	r3, [pc, #180]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800479e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80047a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	21f8      	movs	r1, #248	@ 0xf8
 80047ac:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b0:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80047b4:	fa91 f1a1 	rbit	r1, r1
 80047b8:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80047bc:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80047c0:	fab1 f181 	clz	r1, r1
 80047c4:	b2c9      	uxtb	r1, r1
 80047c6:	408b      	lsls	r3, r1
 80047c8:	4920      	ldr	r1, [pc, #128]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	600b      	str	r3, [r1, #0]
 80047ce:	e06c      	b.n	80048aa <HAL_RCC_OscConfig+0x646>
 80047d0:	2301      	movs	r3, #1
 80047d2:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 80047e2:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80047f0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	461a      	mov	r2, r3
 80047f8:	2300      	movs	r3, #0
 80047fa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047fc:	f7fc fa72 	bl	8000ce4 <HAL_GetTick>
 8004800:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004806:	f7fc fa6d 	bl	8000ce4 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d902      	bls.n	800481c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	f000 bd5a 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
 800481c:	2302      	movs	r3, #2
 800481e:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8004826:	fa93 f3a3 	rbit	r3, r3
 800482a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 800482e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004832:	fab3 f383 	clz	r3, r3
 8004836:	b2db      	uxtb	r3, r3
 8004838:	095b      	lsrs	r3, r3, #5
 800483a:	b2db      	uxtb	r3, r3
 800483c:	f043 0301 	orr.w	r3, r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	2b01      	cmp	r3, #1
 8004844:	d104      	bne.n	8004850 <HAL_RCC_OscConfig+0x5ec>
 8004846:	4b01      	ldr	r3, [pc, #4]	@ (800484c <HAL_RCC_OscConfig+0x5e8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	e015      	b.n	8004878 <HAL_RCC_OscConfig+0x614>
 800484c:	40021000 	.word	0x40021000
 8004850:	2302      	movs	r3, #2
 8004852:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004856:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800485a:	fa93 f3a3 	rbit	r3, r3
 800485e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8004862:	2302      	movs	r3, #2
 8004864:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8004868:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800486c:	fa93 f3a3 	rbit	r3, r3
 8004870:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8004874:	4bc8      	ldr	r3, [pc, #800]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004878:	2202      	movs	r2, #2
 800487a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 800487e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8004882:	fa92 f2a2 	rbit	r2, r2
 8004886:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 800488a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800488e:	fab2 f282 	clz	r2, r2
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	f042 0220 	orr.w	r2, r2, #32
 8004898:	b2d2      	uxtb	r2, r2
 800489a:	f002 021f 	and.w	r2, r2, #31
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ad      	bne.n	8004806 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048ae:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f000 8110 	beq.w	8004ae0 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80048c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d079      	beq.n	80049c4 <HAL_RCC_OscConfig+0x760>
 80048d0:	2301      	movs	r3, #1
 80048d2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80048da:	fa93 f3a3 	rbit	r3, r3
 80048de:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 80048e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048e6:	fab3 f383 	clz	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	461a      	mov	r2, r3
 80048ee:	4bab      	ldr	r3, [pc, #684]	@ (8004b9c <HAL_RCC_OscConfig+0x938>)
 80048f0:	4413      	add	r3, r2
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	461a      	mov	r2, r3
 80048f6:	2301      	movs	r3, #1
 80048f8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fa:	f7fc f9f3 	bl	8000ce4 <HAL_GetTick>
 80048fe:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004902:	e00a      	b.n	800491a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004904:	f7fc f9ee 	bl	8000ce4 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d902      	bls.n	800491a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	f000 bcdb 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
 800491a:	2302      	movs	r3, #2
 800491c:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004920:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8004924:	fa93 f3a3 	rbit	r3, r3
 8004928:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800492c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004930:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004934:	2202      	movs	r2, #2
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800493c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	fa93 f2a3 	rbit	r2, r3
 8004946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800494a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004954:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004958:	2202      	movs	r2, #2
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004960:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	fa93 f2a3 	rbit	r2, r3
 800496a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800496e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8004972:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004974:	4b88      	ldr	r3, [pc, #544]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004976:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004978:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800497c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8004980:	2102      	movs	r1, #2
 8004982:	6019      	str	r1, [r3, #0]
 8004984:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004988:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	fa93 f1a3 	rbit	r1, r3
 8004992:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004996:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800499a:	6019      	str	r1, [r3, #0]
  return result;
 800499c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049a0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	fab3 f383 	clz	r3, r3
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 031f 	and.w	r3, r3, #31
 80049b6:	2101      	movs	r1, #1
 80049b8:	fa01 f303 	lsl.w	r3, r1, r3
 80049bc:	4013      	ands	r3, r2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0a0      	beq.n	8004904 <HAL_RCC_OscConfig+0x6a0>
 80049c2:	e08d      	b.n	8004ae0 <HAL_RCC_OscConfig+0x87c>
 80049c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049c8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049d4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	fa93 f2a3 	rbit	r2, r3
 80049de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049e2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80049e6:	601a      	str	r2, [r3, #0]
  return result;
 80049e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80049ec:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80049f0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049f2:	fab3 f383 	clz	r3, r3
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b68      	ldr	r3, [pc, #416]	@ (8004b9c <HAL_RCC_OscConfig+0x938>)
 80049fc:	4413      	add	r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	461a      	mov	r2, r3
 8004a02:	2300      	movs	r3, #0
 8004a04:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a06:	f7fc f96d 	bl	8000ce4 <HAL_GetTick>
 8004a0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a10:	f7fc f968 	bl	8000ce4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d902      	bls.n	8004a26 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	f000 bc55 	b.w	80052d0 <HAL_RCC_OscConfig+0x106c>
 8004a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a2a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a2e:	2202      	movs	r2, #2
 8004a30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a32:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a36:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	fa93 f2a3 	rbit	r2, r3
 8004a40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a44:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a4e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a52:	2202      	movs	r2, #2
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a5a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	fa93 f2a3 	rbit	r2, r3
 8004a64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a68:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8004a6c:	601a      	str	r2, [r3, #0]
 8004a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a72:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004a76:	2202      	movs	r2, #2
 8004a78:	601a      	str	r2, [r3, #0]
 8004a7a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a7e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	fa93 f2a3 	rbit	r2, r3
 8004a88:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a8c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8004a90:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a92:	4b41      	ldr	r3, [pc, #260]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004a94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a96:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004a9a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004a9e:	2102      	movs	r1, #2
 8004aa0:	6019      	str	r1, [r3, #0]
 8004aa2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004aa6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	fa93 f1a3 	rbit	r1, r3
 8004ab0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ab4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004ab8:	6019      	str	r1, [r3, #0]
  return result;
 8004aba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004abe:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	fab3 f383 	clz	r3, r3
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	f003 031f 	and.w	r3, r3, #31
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8004ada:	4013      	ands	r3, r2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d197      	bne.n	8004a10 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ae4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f000 81a1 	beq.w	8004e38 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004af6:	2300      	movs	r3, #0
 8004af8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afc:	4b26      	ldr	r3, [pc, #152]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004afe:	69db      	ldr	r3, [r3, #28]
 8004b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d116      	bne.n	8004b36 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b08:	4b23      	ldr	r3, [pc, #140]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004b0a:	69db      	ldr	r3, [r3, #28]
 8004b0c:	4a22      	ldr	r2, [pc, #136]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004b0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b12:	61d3      	str	r3, [r2, #28]
 8004b14:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004b16:	69db      	ldr	r3, [r3, #28]
 8004b18:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8004b1c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b20:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004b24:	601a      	str	r2, [r3, #0]
 8004b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b2a:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8004b2e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004b30:	2301      	movs	r3, #1
 8004b32:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ba0 <HAL_RCC_OscConfig+0x93c>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11a      	bne.n	8004b78 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b42:	4b17      	ldr	r3, [pc, #92]	@ (8004ba0 <HAL_RCC_OscConfig+0x93c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a16      	ldr	r2, [pc, #88]	@ (8004ba0 <HAL_RCC_OscConfig+0x93c>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fc f8c9 	bl	8000ce4 <HAL_GetTick>
 8004b52:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	e009      	b.n	8004b6c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b58:	f7fc f8c4 	bl	8000ce4 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b64      	cmp	r3, #100	@ 0x64
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e3b1      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba0 <HAL_RCC_OscConfig+0x93c>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0ef      	beq.n	8004b58 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004b7c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d10d      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x940>
 8004b88:	4b03      	ldr	r3, [pc, #12]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	4a02      	ldr	r2, [pc, #8]	@ (8004b98 <HAL_RCC_OscConfig+0x934>)
 8004b8e:	f043 0301 	orr.w	r3, r3, #1
 8004b92:	6213      	str	r3, [r2, #32]
 8004b94:	e03c      	b.n	8004c10 <HAL_RCC_OscConfig+0x9ac>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	10908120 	.word	0x10908120
 8004ba0:	40007000 	.word	0x40007000
 8004ba4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ba8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10c      	bne.n	8004bce <HAL_RCC_OscConfig+0x96a>
 8004bb4:	4bc1      	ldr	r3, [pc, #772]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bb6:	6a1b      	ldr	r3, [r3, #32]
 8004bb8:	4ac0      	ldr	r2, [pc, #768]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bba:	f023 0301 	bic.w	r3, r3, #1
 8004bbe:	6213      	str	r3, [r2, #32]
 8004bc0:	4bbe      	ldr	r3, [pc, #760]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	4abd      	ldr	r2, [pc, #756]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bc6:	f023 0304 	bic.w	r3, r3, #4
 8004bca:	6213      	str	r3, [r2, #32]
 8004bcc:	e020      	b.n	8004c10 <HAL_RCC_OscConfig+0x9ac>
 8004bce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004bd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	2b05      	cmp	r3, #5
 8004bdc:	d10c      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x994>
 8004bde:	4bb7      	ldr	r3, [pc, #732]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	4ab6      	ldr	r2, [pc, #728]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004be4:	f043 0304 	orr.w	r3, r3, #4
 8004be8:	6213      	str	r3, [r2, #32]
 8004bea:	4bb4      	ldr	r3, [pc, #720]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4ab3      	ldr	r2, [pc, #716]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	6213      	str	r3, [r2, #32]
 8004bf6:	e00b      	b.n	8004c10 <HAL_RCC_OscConfig+0x9ac>
 8004bf8:	4bb0      	ldr	r3, [pc, #704]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bfa:	6a1b      	ldr	r3, [r3, #32]
 8004bfc:	4aaf      	ldr	r2, [pc, #700]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	6213      	str	r3, [r2, #32]
 8004c04:	4bad      	ldr	r3, [pc, #692]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	4aac      	ldr	r2, [pc, #688]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004c0a:	f023 0304 	bic.w	r3, r3, #4
 8004c0e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c10:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c14:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8081 	beq.w	8004d24 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c22:	f7fc f85f 	bl	8000ce4 <HAL_GetTick>
 8004c26:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c2a:	e00b      	b.n	8004c44 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c2c:	f7fc f85a 	bl	8000ce4 <HAL_GetTick>
 8004c30:	4602      	mov	r2, r0
 8004c32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d901      	bls.n	8004c44 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e345      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
 8004c44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c48:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c50:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c54:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	fa93 f2a3 	rbit	r2, r3
 8004c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c62:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c6c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004c70:	2202      	movs	r2, #2
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c78:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	fa93 f2a3 	rbit	r2, r3
 8004c82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c86:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004c8a:	601a      	str	r2, [r3, #0]
  return result;
 8004c8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004c90:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004c94:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c96:	fab3 f383 	clz	r3, r3
 8004c9a:	b2db      	uxtb	r3, r3
 8004c9c:	095b      	lsrs	r3, r3, #5
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d102      	bne.n	8004cb0 <HAL_RCC_OscConfig+0xa4c>
 8004caa:	4b84      	ldr	r3, [pc, #528]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	e013      	b.n	8004cd8 <HAL_RCC_OscConfig+0xa74>
 8004cb0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cb4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004cb8:	2202      	movs	r2, #2
 8004cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cc0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	fa93 f2a3 	rbit	r2, r3
 8004cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004cce:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004cd2:	601a      	str	r2, [r3, #0]
 8004cd4:	4b79      	ldr	r3, [pc, #484]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cdc:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004ce0:	2102      	movs	r1, #2
 8004ce2:	6011      	str	r1, [r2, #0]
 8004ce4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004ce8:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8004cec:	6812      	ldr	r2, [r2, #0]
 8004cee:	fa92 f1a2 	rbit	r1, r2
 8004cf2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004cf6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004cfa:	6011      	str	r1, [r2, #0]
  return result;
 8004cfc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004d00:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	fab2 f282 	clz	r2, r2
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	f002 021f 	and.w	r2, r2, #31
 8004d16:	2101      	movs	r1, #1
 8004d18:	fa01 f202 	lsl.w	r2, r1, r2
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d084      	beq.n	8004c2c <HAL_RCC_OscConfig+0x9c8>
 8004d22:	e07f      	b.n	8004e24 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d24:	f7fb ffde 	bl	8000ce4 <HAL_GetTick>
 8004d28:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d2c:	e00b      	b.n	8004d46 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d2e:	f7fb ffd9 	bl	8000ce4 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e2c4      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
 8004d46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d4a:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004d4e:	2202      	movs	r2, #2
 8004d50:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d56:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	fa93 f2a3 	rbit	r2, r3
 8004d60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d64:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004d68:	601a      	str	r2, [r3, #0]
 8004d6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d6e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004d72:	2202      	movs	r2, #2
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d7a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	fa93 f2a3 	rbit	r2, r3
 8004d84:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d88:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004d8c:	601a      	str	r2, [r3, #0]
  return result;
 8004d8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004d92:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004d96:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d98:	fab3 f383 	clz	r3, r3
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	095b      	lsrs	r3, r3, #5
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	f043 0302 	orr.w	r3, r3, #2
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d102      	bne.n	8004db2 <HAL_RCC_OscConfig+0xb4e>
 8004dac:	4b43      	ldr	r3, [pc, #268]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	e013      	b.n	8004dda <HAL_RCC_OscConfig+0xb76>
 8004db2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004db6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004dba:	2202      	movs	r2, #2
 8004dbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dc2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	fa93 f2a3 	rbit	r2, r3
 8004dcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004dd0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004dd4:	601a      	str	r2, [r3, #0]
 8004dd6:	4b39      	ldr	r3, [pc, #228]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dda:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dde:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004de2:	2102      	movs	r1, #2
 8004de4:	6011      	str	r1, [r2, #0]
 8004de6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004dea:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8004dee:	6812      	ldr	r2, [r2, #0]
 8004df0:	fa92 f1a2 	rbit	r1, r2
 8004df4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004df8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004dfc:	6011      	str	r1, [r2, #0]
  return result;
 8004dfe:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004e02:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004e06:	6812      	ldr	r2, [r2, #0]
 8004e08:	fab2 f282 	clz	r2, r2
 8004e0c:	b2d2      	uxtb	r2, r2
 8004e0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	f002 021f 	and.w	r2, r2, #31
 8004e18:	2101      	movs	r1, #1
 8004e1a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e1e:	4013      	ands	r3, r2
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d184      	bne.n	8004d2e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004e24:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d105      	bne.n	8004e38 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e2c:	4b23      	ldr	r3, [pc, #140]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	4a22      	ldr	r2, [pc, #136]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004e32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e36:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e3c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	69db      	ldr	r3, [r3, #28]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 8242 	beq.w	80052ce <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e4a:	4b1c      	ldr	r3, [pc, #112]	@ (8004ebc <HAL_RCC_OscConfig+0xc58>)
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	f003 030c 	and.w	r3, r3, #12
 8004e52:	2b08      	cmp	r3, #8
 8004e54:	f000 8213 	beq.w	800527e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e58:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e5c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	f040 8162 	bne.w	800512e <HAL_RCC_OscConfig+0xeca>
 8004e6a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e6e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004e72:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004e76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e78:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e7c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	fa93 f2a3 	rbit	r2, r3
 8004e86:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e8a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004e8e:	601a      	str	r2, [r3, #0]
  return result;
 8004e90:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004e94:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8004e98:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	fab3 f383 	clz	r3, r3
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004ea4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	461a      	mov	r2, r3
 8004eac:	2300      	movs	r3, #0
 8004eae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fb ff18 	bl	8000ce4 <HAL_GetTick>
 8004eb4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004eb8:	e00c      	b.n	8004ed4 <HAL_RCC_OscConfig+0xc70>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec0:	f7fb ff10 	bl	8000ce4 <HAL_GetTick>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d901      	bls.n	8004ed4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004ed0:	2303      	movs	r3, #3
 8004ed2:	e1fd      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
 8004ed4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ed8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004edc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ee2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ee6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	fa93 f2a3 	rbit	r2, r3
 8004ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ef4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004ef8:	601a      	str	r2, [r3, #0]
  return result;
 8004efa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004efe:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004f02:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f04:	fab3 f383 	clz	r3, r3
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	095b      	lsrs	r3, r3, #5
 8004f0c:	b2db      	uxtb	r3, r3
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d102      	bne.n	8004f1e <HAL_RCC_OscConfig+0xcba>
 8004f18:	4bb0      	ldr	r3, [pc, #704]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	e027      	b.n	8004f6e <HAL_RCC_OscConfig+0xd0a>
 8004f1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f22:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f26:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	fa93 f2a3 	rbit	r2, r3
 8004f3a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f3e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f48:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004f4c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f56:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	fa93 f2a3 	rbit	r2, r3
 8004f60:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004f64:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004f68:	601a      	str	r2, [r3, #0]
 8004f6a:	4b9c      	ldr	r3, [pc, #624]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 8004f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f72:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004f76:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004f7a:	6011      	str	r1, [r2, #0]
 8004f7c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f80:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	fa92 f1a2 	rbit	r1, r2
 8004f8a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f8e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004f92:	6011      	str	r1, [r2, #0]
  return result;
 8004f94:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8004f98:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004f9c:	6812      	ldr	r2, [r2, #0]
 8004f9e:	fab2 f282 	clz	r2, r2
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	f042 0220 	orr.w	r2, r2, #32
 8004fa8:	b2d2      	uxtb	r2, r2
 8004faa:	f002 021f 	and.w	r2, r2, #31
 8004fae:	2101      	movs	r1, #1
 8004fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d182      	bne.n	8004ec0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004fba:	4b88      	ldr	r3, [pc, #544]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fd2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	497f      	ldr	r1, [pc, #508]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	604b      	str	r3, [r1, #4]
 8004fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004fe6:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004fea:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004fee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8004ff4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	fa93 f2a3 	rbit	r2, r3
 8004ffe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005002:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005006:	601a      	str	r2, [r3, #0]
  return result;
 8005008:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800500c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8005010:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005012:	fab3 f383 	clz	r3, r3
 8005016:	b2db      	uxtb	r3, r3
 8005018:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800501c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8005020:	009b      	lsls	r3, r3, #2
 8005022:	461a      	mov	r2, r3
 8005024:	2301      	movs	r3, #1
 8005026:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005028:	f7fb fe5c 	bl	8000ce4 <HAL_GetTick>
 800502c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005030:	e009      	b.n	8005046 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005032:	f7fb fe57 	bl	8000ce4 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e144      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
 8005046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800504a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800504e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005052:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005054:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005058:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	fa93 f2a3 	rbit	r2, r3
 8005062:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005066:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800506a:	601a      	str	r2, [r3, #0]
  return result;
 800506c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005070:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8005074:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005076:	fab3 f383 	clz	r3, r3
 800507a:	b2db      	uxtb	r3, r3
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	b2db      	uxtb	r3, r3
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	b2db      	uxtb	r3, r3
 8005086:	2b01      	cmp	r3, #1
 8005088:	d102      	bne.n	8005090 <HAL_RCC_OscConfig+0xe2c>
 800508a:	4b54      	ldr	r3, [pc, #336]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	e027      	b.n	80050e0 <HAL_RCC_OscConfig+0xe7c>
 8005090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005094:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8005098:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800509c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800509e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050a2:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	fa93 f2a3 	rbit	r2, r3
 80050ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050b0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050ba:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80050be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050c8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	fa93 f2a3 	rbit	r2, r3
 80050d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80050d6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	4b3f      	ldr	r3, [pc, #252]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050e4:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80050e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80050f2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80050f6:	6812      	ldr	r2, [r2, #0]
 80050f8:	fa92 f1a2 	rbit	r1, r2
 80050fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005100:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8005104:	6011      	str	r1, [r2, #0]
  return result;
 8005106:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800510a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800510e:	6812      	ldr	r2, [r2, #0]
 8005110:	fab2 f282 	clz	r2, r2
 8005114:	b2d2      	uxtb	r2, r2
 8005116:	f042 0220 	orr.w	r2, r2, #32
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	f002 021f 	and.w	r2, r2, #31
 8005120:	2101      	movs	r1, #1
 8005122:	fa01 f202 	lsl.w	r2, r1, r2
 8005126:	4013      	ands	r3, r2
 8005128:	2b00      	cmp	r3, #0
 800512a:	d082      	beq.n	8005032 <HAL_RCC_OscConfig+0xdce>
 800512c:	e0cf      	b.n	80052ce <HAL_RCC_OscConfig+0x106a>
 800512e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005132:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005136:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800513a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800513c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005140:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	fa93 f2a3 	rbit	r2, r3
 800514a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800514e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8005152:	601a      	str	r2, [r3, #0]
  return result;
 8005154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005158:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800515c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	fab3 f383 	clz	r3, r3
 8005162:	b2db      	uxtb	r3, r3
 8005164:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8005168:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	461a      	mov	r2, r3
 8005170:	2300      	movs	r3, #0
 8005172:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005174:	f7fb fdb6 	bl	8000ce4 <HAL_GetTick>
 8005178:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800517c:	e009      	b.n	8005192 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800517e:	f7fb fdb1 	bl	8000ce4 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b02      	cmp	r3, #2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e09e      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
 8005192:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005196:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800519a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800519e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051a4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	fa93 f2a3 	rbit	r2, r3
 80051ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051b2:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80051b6:	601a      	str	r2, [r3, #0]
  return result;
 80051b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051bc:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80051c0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80051c2:	fab3 f383 	clz	r3, r3
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	f043 0301 	orr.w	r3, r3, #1
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d104      	bne.n	80051e0 <HAL_RCC_OscConfig+0xf7c>
 80051d6:	4b01      	ldr	r3, [pc, #4]	@ (80051dc <HAL_RCC_OscConfig+0xf78>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	e029      	b.n	8005230 <HAL_RCC_OscConfig+0xfcc>
 80051dc:	40021000 	.word	0x40021000
 80051e0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051e4:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80051e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80051ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80051ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80051f2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	fa93 f2a3 	rbit	r2, r3
 80051fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005200:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800520a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800520e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005218:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	fa93 f2a3 	rbit	r2, r3
 8005222:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005226:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800522a:	601a      	str	r2, [r3, #0]
 800522c:	4b2b      	ldr	r3, [pc, #172]	@ (80052dc <HAL_RCC_OscConfig+0x1078>)
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005234:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005238:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800523c:	6011      	str	r1, [r2, #0]
 800523e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005242:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8005246:	6812      	ldr	r2, [r2, #0]
 8005248:	fa92 f1a2 	rbit	r1, r2
 800524c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8005250:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8005254:	6011      	str	r1, [r2, #0]
  return result;
 8005256:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800525a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	fab2 f282 	clz	r2, r2
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	f042 0220 	orr.w	r2, r2, #32
 800526a:	b2d2      	uxtb	r2, r2
 800526c:	f002 021f 	and.w	r2, r2, #31
 8005270:	2101      	movs	r1, #1
 8005272:	fa01 f202 	lsl.w	r2, r1, r2
 8005276:	4013      	ands	r3, r2
 8005278:	2b00      	cmp	r3, #0
 800527a:	d180      	bne.n	800517e <HAL_RCC_OscConfig+0xf1a>
 800527c:	e027      	b.n	80052ce <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800527e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8005282:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	69db      	ldr	r3, [r3, #28]
 800528a:	2b01      	cmp	r3, #1
 800528c:	d101      	bne.n	8005292 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e01e      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005292:	4b12      	ldr	r3, [pc, #72]	@ (80052dc <HAL_RCC_OscConfig+0x1078>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800529a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800529e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80052a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052a6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d10b      	bne.n	80052ca <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80052b2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80052b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80052ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80052be:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d001      	beq.n	80052ce <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	40021000 	.word	0x40021000

080052e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b09e      	sub	sp, #120	@ 0x78
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80052ea:	2300      	movs	r3, #0
 80052ec:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d101      	bne.n	80052f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e162      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052f8:	4b90      	ldr	r3, [pc, #576]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f003 0307 	and.w	r3, r3, #7
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d910      	bls.n	8005328 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005306:	4b8d      	ldr	r3, [pc, #564]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f023 0207 	bic.w	r2, r3, #7
 800530e:	498b      	ldr	r1, [pc, #556]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005316:	4b89      	ldr	r3, [pc, #548]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0307 	and.w	r3, r3, #7
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e14a      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0302 	and.w	r3, r3, #2
 8005330:	2b00      	cmp	r3, #0
 8005332:	d008      	beq.n	8005346 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005334:	4b82      	ldr	r3, [pc, #520]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	497f      	ldr	r1, [pc, #508]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 8005342:	4313      	orrs	r3, r2
 8005344:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80dc 	beq.w	800550c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d13c      	bne.n	80053d6 <HAL_RCC_ClockConfig+0xf6>
 800535c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005360:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005364:	fa93 f3a3 	rbit	r3, r3
 8005368:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800536a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800536c:	fab3 f383 	clz	r3, r3
 8005370:	b2db      	uxtb	r3, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b01      	cmp	r3, #1
 800537e:	d102      	bne.n	8005386 <HAL_RCC_ClockConfig+0xa6>
 8005380:	4b6f      	ldr	r3, [pc, #444]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	e00f      	b.n	80053a6 <HAL_RCC_ClockConfig+0xc6>
 8005386:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800538a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800538c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800538e:	fa93 f3a3 	rbit	r3, r3
 8005392:	667b      	str	r3, [r7, #100]	@ 0x64
 8005394:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005398:	663b      	str	r3, [r7, #96]	@ 0x60
 800539a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80053a2:	4b67      	ldr	r3, [pc, #412]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 80053a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80053aa:	65ba      	str	r2, [r7, #88]	@ 0x58
 80053ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80053ae:	fa92 f2a2 	rbit	r2, r2
 80053b2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80053b4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80053b6:	fab2 f282 	clz	r2, r2
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	f042 0220 	orr.w	r2, r2, #32
 80053c0:	b2d2      	uxtb	r2, r2
 80053c2:	f002 021f 	and.w	r2, r2, #31
 80053c6:	2101      	movs	r1, #1
 80053c8:	fa01 f202 	lsl.w	r2, r1, r2
 80053cc:	4013      	ands	r3, r2
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d17b      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0f3      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d13c      	bne.n	8005458 <HAL_RCC_ClockConfig+0x178>
 80053de:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80053e2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80053e6:	fa93 f3a3 	rbit	r3, r3
 80053ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80053ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053ee:	fab3 f383 	clz	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	f043 0301 	orr.w	r3, r3, #1
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d102      	bne.n	8005408 <HAL_RCC_ClockConfig+0x128>
 8005402:	4b4f      	ldr	r3, [pc, #316]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	e00f      	b.n	8005428 <HAL_RCC_ClockConfig+0x148>
 8005408:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800540c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800540e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005410:	fa93 f3a3 	rbit	r3, r3
 8005414:	647b      	str	r3, [r7, #68]	@ 0x44
 8005416:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800541a:	643b      	str	r3, [r7, #64]	@ 0x40
 800541c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005424:	4b46      	ldr	r3, [pc, #280]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 8005426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005428:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800542c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800542e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005430:	fa92 f2a2 	rbit	r2, r2
 8005434:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8005436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005438:	fab2 f282 	clz	r2, r2
 800543c:	b2d2      	uxtb	r2, r2
 800543e:	f042 0220 	orr.w	r2, r2, #32
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	f002 021f 	and.w	r2, r2, #31
 8005448:	2101      	movs	r1, #1
 800544a:	fa01 f202 	lsl.w	r2, r1, r2
 800544e:	4013      	ands	r3, r2
 8005450:	2b00      	cmp	r3, #0
 8005452:	d13a      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	e0b2      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
 8005458:	2302      	movs	r3, #2
 800545a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	fa93 f3a3 	rbit	r3, r3
 8005462:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	fab3 f383 	clz	r3, r3
 800546a:	b2db      	uxtb	r3, r3
 800546c:	095b      	lsrs	r3, r3, #5
 800546e:	b2db      	uxtb	r3, r3
 8005470:	f043 0301 	orr.w	r3, r3, #1
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b01      	cmp	r3, #1
 8005478:	d102      	bne.n	8005480 <HAL_RCC_ClockConfig+0x1a0>
 800547a:	4b31      	ldr	r3, [pc, #196]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	e00d      	b.n	800549c <HAL_RCC_ClockConfig+0x1bc>
 8005480:	2302      	movs	r3, #2
 8005482:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005486:	fa93 f3a3 	rbit	r3, r3
 800548a:	627b      	str	r3, [r7, #36]	@ 0x24
 800548c:	2302      	movs	r3, #2
 800548e:	623b      	str	r3, [r7, #32]
 8005490:	6a3b      	ldr	r3, [r7, #32]
 8005492:	fa93 f3a3 	rbit	r3, r3
 8005496:	61fb      	str	r3, [r7, #28]
 8005498:	4b29      	ldr	r3, [pc, #164]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 800549a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549c:	2202      	movs	r2, #2
 800549e:	61ba      	str	r2, [r7, #24]
 80054a0:	69ba      	ldr	r2, [r7, #24]
 80054a2:	fa92 f2a2 	rbit	r2, r2
 80054a6:	617a      	str	r2, [r7, #20]
  return result;
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	fab2 f282 	clz	r2, r2
 80054ae:	b2d2      	uxtb	r2, r2
 80054b0:	f042 0220 	orr.w	r2, r2, #32
 80054b4:	b2d2      	uxtb	r2, r2
 80054b6:	f002 021f 	and.w	r2, r2, #31
 80054ba:	2101      	movs	r1, #1
 80054bc:	fa01 f202 	lsl.w	r2, r1, r2
 80054c0:	4013      	ands	r3, r2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d101      	bne.n	80054ca <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	e079      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054ca:	4b1d      	ldr	r3, [pc, #116]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	f023 0203 	bic.w	r2, r3, #3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	491a      	ldr	r1, [pc, #104]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 80054d8:	4313      	orrs	r3, r2
 80054da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054dc:	f7fb fc02 	bl	8000ce4 <HAL_GetTick>
 80054e0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054e2:	e00a      	b.n	80054fa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054e4:	f7fb fbfe 	bl	8000ce4 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e061      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054fa:	4b11      	ldr	r3, [pc, #68]	@ (8005540 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 020c 	and.w	r2, r3, #12
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	429a      	cmp	r2, r3
 800550a:	d1eb      	bne.n	80054e4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0307 	and.w	r3, r3, #7
 8005514:	683a      	ldr	r2, [r7, #0]
 8005516:	429a      	cmp	r2, r3
 8005518:	d214      	bcs.n	8005544 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800551a:	4b08      	ldr	r3, [pc, #32]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f023 0207 	bic.w	r2, r3, #7
 8005522:	4906      	ldr	r1, [pc, #24]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	4313      	orrs	r3, r2
 8005528:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800552a:	4b04      	ldr	r3, [pc, #16]	@ (800553c <HAL_RCC_ClockConfig+0x25c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0307 	and.w	r3, r3, #7
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	429a      	cmp	r2, r3
 8005536:	d005      	beq.n	8005544 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e040      	b.n	80055be <HAL_RCC_ClockConfig+0x2de>
 800553c:	40022000 	.word	0x40022000
 8005540:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 0304 	and.w	r3, r3, #4
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005550:	4b1d      	ldr	r3, [pc, #116]	@ (80055c8 <HAL_RCC_ClockConfig+0x2e8>)
 8005552:	685b      	ldr	r3, [r3, #4]
 8005554:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	491a      	ldr	r1, [pc, #104]	@ (80055c8 <HAL_RCC_ClockConfig+0x2e8>)
 800555e:	4313      	orrs	r3, r2
 8005560:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0308 	and.w	r3, r3, #8
 800556a:	2b00      	cmp	r3, #0
 800556c:	d009      	beq.n	8005582 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800556e:	4b16      	ldr	r3, [pc, #88]	@ (80055c8 <HAL_RCC_ClockConfig+0x2e8>)
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	4912      	ldr	r1, [pc, #72]	@ (80055c8 <HAL_RCC_ClockConfig+0x2e8>)
 800557e:	4313      	orrs	r3, r2
 8005580:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8005582:	f000 f829 	bl	80055d8 <HAL_RCC_GetSysClockFreq>
 8005586:	4601      	mov	r1, r0
 8005588:	4b0f      	ldr	r3, [pc, #60]	@ (80055c8 <HAL_RCC_ClockConfig+0x2e8>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005590:	22f0      	movs	r2, #240	@ 0xf0
 8005592:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	fa92 f2a2 	rbit	r2, r2
 800559a:	60fa      	str	r2, [r7, #12]
  return result;
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	fab2 f282 	clz	r2, r2
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	40d3      	lsrs	r3, r2
 80055a6:	4a09      	ldr	r2, [pc, #36]	@ (80055cc <HAL_RCC_ClockConfig+0x2ec>)
 80055a8:	5cd3      	ldrb	r3, [r2, r3]
 80055aa:	fa21 f303 	lsr.w	r3, r1, r3
 80055ae:	4a08      	ldr	r2, [pc, #32]	@ (80055d0 <HAL_RCC_ClockConfig+0x2f0>)
 80055b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80055b2:	4b08      	ldr	r3, [pc, #32]	@ (80055d4 <HAL_RCC_ClockConfig+0x2f4>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fb fb50 	bl	8000c5c <HAL_InitTick>
  
  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3778      	adds	r7, #120	@ 0x78
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}
 80055c6:	bf00      	nop
 80055c8:	40021000 	.word	0x40021000
 80055cc:	08009f88 	.word	0x08009f88
 80055d0:	20000000 	.word	0x20000000
 80055d4:	20000004 	.word	0x20000004

080055d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80055de:	2300      	movs	r3, #0
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	2300      	movs	r3, #0
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]
 80055ea:	2300      	movs	r3, #0
 80055ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80055f2:	4b1e      	ldr	r3, [pc, #120]	@ (800566c <HAL_RCC_GetSysClockFreq+0x94>)
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f003 030c 	and.w	r3, r3, #12
 80055fe:	2b04      	cmp	r3, #4
 8005600:	d002      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0x30>
 8005602:	2b08      	cmp	r3, #8
 8005604:	d003      	beq.n	800560e <HAL_RCC_GetSysClockFreq+0x36>
 8005606:	e026      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005608:	4b19      	ldr	r3, [pc, #100]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 800560a:	613b      	str	r3, [r7, #16]
      break;
 800560c:	e026      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	0c9b      	lsrs	r3, r3, #18
 8005612:	f003 030f 	and.w	r3, r3, #15
 8005616:	4a17      	ldr	r2, [pc, #92]	@ (8005674 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005618:	5cd3      	ldrb	r3, [r2, r3]
 800561a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800561c:	4b13      	ldr	r3, [pc, #76]	@ (800566c <HAL_RCC_GetSysClockFreq+0x94>)
 800561e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005620:	f003 030f 	and.w	r3, r3, #15
 8005624:	4a14      	ldr	r2, [pc, #80]	@ (8005678 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005626:	5cd3      	ldrb	r3, [r2, r3]
 8005628:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d008      	beq.n	8005646 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005634:	4a0e      	ldr	r2, [pc, #56]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	fbb2 f2f3 	udiv	r2, r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	fb02 f303 	mul.w	r3, r2, r3
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e004      	b.n	8005650 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	4a0c      	ldr	r2, [pc, #48]	@ (800567c <HAL_RCC_GetSysClockFreq+0xa4>)
 800564a:	fb02 f303 	mul.w	r3, r2, r3
 800564e:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005650:	697b      	ldr	r3, [r7, #20]
 8005652:	613b      	str	r3, [r7, #16]
      break;
 8005654:	e002      	b.n	800565c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005656:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x98>)
 8005658:	613b      	str	r3, [r7, #16]
      break;
 800565a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565c:	693b      	ldr	r3, [r7, #16]
}
 800565e:	4618      	mov	r0, r3
 8005660:	371c      	adds	r7, #28
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40021000 	.word	0x40021000
 8005670:	007a1200 	.word	0x007a1200
 8005674:	08009f98 	.word	0x08009f98
 8005678:	08009fa8 	.word	0x08009fa8
 800567c:	003d0900 	.word	0x003d0900

08005680 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b092      	sub	sp, #72	@ 0x48
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005688:	2300      	movs	r3, #0
 800568a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800568c:	2300      	movs	r3, #0
 800568e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005690:	2300      	movs	r3, #0
 8005692:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80d4 	beq.w	800584c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80056a4:	4b4e      	ldr	r3, [pc, #312]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10e      	bne.n	80056ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056b0:	4b4b      	ldr	r3, [pc, #300]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	4a4a      	ldr	r2, [pc, #296]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80056ba:	61d3      	str	r3, [r2, #28]
 80056bc:	4b48      	ldr	r3, [pc, #288]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80056be:	69db      	ldr	r3, [r3, #28]
 80056c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056c4:	60bb      	str	r3, [r7, #8]
 80056c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056c8:	2301      	movs	r3, #1
 80056ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ce:	4b45      	ldr	r3, [pc, #276]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d118      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80056da:	4b42      	ldr	r3, [pc, #264]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a41      	ldr	r2, [pc, #260]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80056e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056e6:	f7fb fafd 	bl	8000ce4 <HAL_GetTick>
 80056ea:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ec:	e008      	b.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056ee:	f7fb faf9 	bl	8000ce4 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	2b64      	cmp	r3, #100	@ 0x64
 80056fa:	d901      	bls.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80056fc:	2303      	movs	r3, #3
 80056fe:	e169      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005700:	4b38      	ldr	r3, [pc, #224]	@ (80057e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0f0      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800570c:	4b34      	ldr	r3, [pc, #208]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005714:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 8084 	beq.w	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005726:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005728:	429a      	cmp	r2, r3
 800572a:	d07c      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800572c:	4b2c      	ldr	r3, [pc, #176]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005734:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005736:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800573a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800573c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800573e:	fa93 f3a3 	rbit	r3, r3
 8005742:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8005744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005746:	fab3 f383 	clz	r3, r3
 800574a:	b2db      	uxtb	r3, r3
 800574c:	461a      	mov	r2, r3
 800574e:	4b26      	ldr	r3, [pc, #152]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005750:	4413      	add	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	461a      	mov	r2, r3
 8005756:	2301      	movs	r3, #1
 8005758:	6013      	str	r3, [r2, #0]
 800575a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800575e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005762:	fa93 f3a3 	rbit	r3, r3
 8005766:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8005768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800576a:	fab3 f383 	clz	r3, r3
 800576e:	b2db      	uxtb	r3, r3
 8005770:	461a      	mov	r2, r3
 8005772:	4b1d      	ldr	r3, [pc, #116]	@ (80057e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005774:	4413      	add	r3, r2
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	461a      	mov	r2, r3
 800577a:	2300      	movs	r3, #0
 800577c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800577e:	4a18      	ldr	r2, [pc, #96]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005782:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d04b      	beq.n	8005826 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fb faa9 	bl	8000ce4 <HAL_GetTick>
 8005792:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005794:	e00a      	b.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005796:	f7fb faa5 	bl	8000ce4 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d901      	bls.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e113      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80057ac:	2302      	movs	r3, #2
 80057ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b2:	fa93 f3a3 	rbit	r3, r3
 80057b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80057b8:	2302      	movs	r3, #2
 80057ba:	623b      	str	r3, [r7, #32]
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	fa93 f3a3 	rbit	r3, r3
 80057c2:	61fb      	str	r3, [r7, #28]
  return result;
 80057c4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057c6:	fab3 f383 	clz	r3, r3
 80057ca:	b2db      	uxtb	r3, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	b2db      	uxtb	r3, r3
 80057d0:	f043 0302 	orr.w	r3, r3, #2
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d108      	bne.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80057da:	4b01      	ldr	r3, [pc, #4]	@ (80057e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	e00d      	b.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80057e0:	40021000 	.word	0x40021000
 80057e4:	40007000 	.word	0x40007000
 80057e8:	10908100 	.word	0x10908100
 80057ec:	2302      	movs	r3, #2
 80057ee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	fa93 f3a3 	rbit	r3, r3
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	4b78      	ldr	r3, [pc, #480]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	2202      	movs	r2, #2
 80057fe:	613a      	str	r2, [r7, #16]
 8005800:	693a      	ldr	r2, [r7, #16]
 8005802:	fa92 f2a2 	rbit	r2, r2
 8005806:	60fa      	str	r2, [r7, #12]
  return result;
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	fab2 f282 	clz	r2, r2
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005814:	b2d2      	uxtb	r2, r2
 8005816:	f002 021f 	and.w	r2, r2, #31
 800581a:	2101      	movs	r1, #1
 800581c:	fa01 f202 	lsl.w	r2, r1, r2
 8005820:	4013      	ands	r3, r2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d0b7      	beq.n	8005796 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005826:	4b6d      	ldr	r3, [pc, #436]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005828:	6a1b      	ldr	r3, [r3, #32]
 800582a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	496a      	ldr	r1, [pc, #424]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005834:	4313      	orrs	r3, r2
 8005836:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005838:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800583c:	2b01      	cmp	r3, #1
 800583e:	d105      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005840:	4b66      	ldr	r3, [pc, #408]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	4a65      	ldr	r2, [pc, #404]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800584a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d008      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005858:	4b60      	ldr	r3, [pc, #384]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800585c:	f023 0203 	bic.w	r2, r3, #3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	495d      	ldr	r1, [pc, #372]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005866:	4313      	orrs	r3, r2
 8005868:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d008      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005876:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	4956      	ldr	r1, [pc, #344]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005884:	4313      	orrs	r3, r2
 8005886:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0304 	and.w	r3, r3, #4
 8005890:	2b00      	cmp	r3, #0
 8005892:	d008      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005894:	4b51      	ldr	r3, [pc, #324]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005898:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	494e      	ldr	r1, [pc, #312]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058a2:	4313      	orrs	r3, r2
 80058a4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0320 	and.w	r3, r3, #32
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d008      	beq.n	80058c4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80058b2:	4b4a      	ldr	r3, [pc, #296]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b6:	f023 0210 	bic.w	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	4947      	ldr	r1, [pc, #284]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80058d0:	4b42      	ldr	r3, [pc, #264]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	493f      	ldr	r1, [pc, #252]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d008      	beq.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80058ee:	4b3b      	ldr	r3, [pc, #236]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058f2:	f023 0220 	bic.w	r2, r3, #32
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	4938      	ldr	r1, [pc, #224]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0308 	and.w	r3, r3, #8
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800590c:	4b33      	ldr	r3, [pc, #204]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005910:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	4930      	ldr	r1, [pc, #192]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800591a:	4313      	orrs	r3, r2
 800591c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 0310 	and.w	r3, r3, #16
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800592a:	4b2c      	ldr	r3, [pc, #176]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	4929      	ldr	r1, [pc, #164]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005938:	4313      	orrs	r3, r2
 800593a:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005948:	4b24      	ldr	r3, [pc, #144]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005954:	4921      	ldr	r1, [pc, #132]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005956:	4313      	orrs	r3, r2
 8005958:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005966:	4b1d      	ldr	r3, [pc, #116]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800596a:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005972:	491a      	ldr	r1, [pc, #104]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005974:	4313      	orrs	r3, r2
 8005976:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005984:	4b15      	ldr	r3, [pc, #84]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005988:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	4912      	ldr	r1, [pc, #72]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005992:	4313      	orrs	r3, r2
 8005994:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d008      	beq.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80059a2:	4b0e      	ldr	r3, [pc, #56]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ae:	490b      	ldr	r1, [pc, #44]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059b0:	4313      	orrs	r3, r2
 80059b2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80059c0:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059c4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059cc:	4903      	ldr	r1, [pc, #12]	@ (80059dc <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80059ce:	4313      	orrs	r3, r2
 80059d0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3748      	adds	r7, #72	@ 0x48
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	40021000 	.word	0x40021000

080059e0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80059e0:	b480      	push	{r7}
 80059e2:	b085      	sub	sp, #20
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80059f0:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 80059f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3714      	adds	r7, #20
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr

08005a0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005a0e:	b480      	push	{r7}
 8005a10:	b085      	sub	sp, #20
 8005a12:	af00      	add	r7, sp, #0
 8005a14:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005a16:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8005a1a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	1d3b      	adds	r3, r7, #4
 8005a4e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2201      	movs	r2, #1
 8005a56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b09d      	sub	sp, #116	@ 0x74
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	4413      	add	r3, r2
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8005aa2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aa6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	78db      	ldrb	r3, [r3, #3]
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d81f      	bhi.n	8005af2 <USB_ActivateEndpoint+0x72>
 8005ab2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ab8 <USB_ActivateEndpoint+0x38>)
 8005ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ab8:	08005ac9 	.word	0x08005ac9
 8005abc:	08005ae5 	.word	0x08005ae5
 8005ac0:	08005afb 	.word	0x08005afb
 8005ac4:	08005ad7 	.word	0x08005ad7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ac8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005acc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ad4:	e012      	b.n	8005afc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005ad6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ada:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8005ade:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005ae2:	e00b      	b.n	8005afc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005ae4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005ae8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005aec:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8005af0:	e004      	b.n	8005afc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8005af8:	e000      	b.n	8005afc <USB_ActivateEndpoint+0x7c>
      break;
 8005afa:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	781b      	ldrb	r3, [r3, #0]
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	441a      	add	r2, r3
 8005b06:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8005b0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	4413      	add	r3, r2
 8005b28:	881b      	ldrh	r3, [r3, #0]
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	b21b      	sxth	r3, r3
 8005b2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b36:	b21a      	sxth	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	b21b      	sxth	r3, r3
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	b21b      	sxth	r3, r3
 8005b42:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	781b      	ldrb	r3, [r3, #0]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	441a      	add	r2, r3
 8005b50:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8005b54:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b58:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b5c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	7b1b      	ldrb	r3, [r3, #12]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 8178 	bne.w	8005e62 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	785b      	ldrb	r3, [r3, #1]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 8084 	beq.w	8005c84 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	61bb      	str	r3, [r7, #24]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	461a      	mov	r2, r3
 8005b8a:	69bb      	ldr	r3, [r7, #24]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	61bb      	str	r3, [r7, #24]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	011a      	lsls	r2, r3, #4
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b9e:	617b      	str	r3, [r7, #20]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	88db      	ldrh	r3, [r3, #6]
 8005ba4:	085b      	lsrs	r3, r3, #1
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	827b      	strh	r3, [r7, #18]
 8005bbe:	8a7b      	ldrh	r3, [r7, #18]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d01b      	beq.n	8005c00 <USB_ActivateEndpoint+0x180>
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	4413      	add	r3, r2
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005bde:	823b      	strh	r3, [r7, #16]
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	441a      	add	r2, r3
 8005bea:	8a3b      	ldrh	r3, [r7, #16]
 8005bec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005bf0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005bf4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bf8:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	78db      	ldrb	r3, [r3, #3]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d020      	beq.n	8005c4a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005c08:	687a      	ldr	r2, [r7, #4]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	4413      	add	r3, r2
 8005c12:	881b      	ldrh	r3, [r3, #0]
 8005c14:	b29b      	uxth	r3, r3
 8005c16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c1e:	81bb      	strh	r3, [r7, #12]
 8005c20:	89bb      	ldrh	r3, [r7, #12]
 8005c22:	f083 0320 	eor.w	r3, r3, #32
 8005c26:	81bb      	strh	r3, [r7, #12]
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	441a      	add	r2, r3
 8005c32:	89bb      	ldrh	r3, [r7, #12]
 8005c34:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c38:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	8013      	strh	r3, [r2, #0]
 8005c48:	e2d5      	b.n	80061f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	881b      	ldrh	r3, [r3, #0]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c60:	81fb      	strh	r3, [r7, #14]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	89fb      	ldrh	r3, [r7, #14]
 8005c6e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005c72:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005c76:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	8013      	strh	r3, [r2, #0]
 8005c82:	e2b8      	b.n	80061f6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	461a      	mov	r2, r3
 8005c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c94:	4413      	add	r3, r2
 8005c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	011a      	lsls	r2, r3, #4
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	88db      	ldrh	r3, [r3, #6]
 8005cac:	085b      	lsrs	r3, r3, #1
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	b29a      	uxth	r2, r3
 8005cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb6:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cc8:	4413      	add	r3, r2
 8005cca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	011a      	lsls	r2, r3, #4
 8005cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	881b      	ldrh	r3, [r3, #0]
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ce6:	b29a      	uxth	r2, r3
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	801a      	strh	r2, [r3, #0]
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d10a      	bne.n	8005d0a <USB_ActivateEndpoint+0x28a>
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d02:	b29a      	uxth	r2, r3
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	801a      	strh	r2, [r3, #0]
 8005d08:	e039      	b.n	8005d7e <USB_ActivateEndpoint+0x2fe>
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b3e      	cmp	r3, #62	@ 0x3e
 8005d10:	d818      	bhi.n	8005d44 <USB_ActivateEndpoint+0x2c4>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <USB_ActivateEndpoint+0x2ac>
 8005d26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d28:	3301      	adds	r3, #1
 8005d2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d34:	b29b      	uxth	r3, r3
 8005d36:	029b      	lsls	r3, r3, #10
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d40:	801a      	strh	r2, [r3, #0]
 8005d42:	e01c      	b.n	8005d7e <USB_ActivateEndpoint+0x2fe>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	095b      	lsrs	r3, r3, #5
 8005d4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f003 031f 	and.w	r3, r3, #31
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d102      	bne.n	8005d5e <USB_ActivateEndpoint+0x2de>
 8005d58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d60:	881b      	ldrh	r3, [r3, #0]
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	029b      	lsls	r3, r3, #10
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	b29b      	uxth	r3, r3
 8005d70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d78:	b29a      	uxth	r2, r3
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	881b      	ldrh	r3, [r3, #0]
 8005d8a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005d8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005d8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d01b      	beq.n	8005dce <USB_ActivateEndpoint+0x34e>
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	781b      	ldrb	r3, [r3, #0]
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	881b      	ldrh	r3, [r3, #0]
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005da8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dac:	843b      	strh	r3, [r7, #32]
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	441a      	add	r2, r3
 8005db8:	8c3b      	ldrh	r3, [r7, #32]
 8005dba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005dbe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005dc2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005dc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dca:	b29b      	uxth	r3, r3
 8005dcc:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d124      	bne.n	8005e20 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005dd6:	687a      	ldr	r2, [r7, #4]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	4413      	add	r3, r2
 8005de0:	881b      	ldrh	r3, [r3, #0]
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005de8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dec:	83bb      	strh	r3, [r7, #28]
 8005dee:	8bbb      	ldrh	r3, [r7, #28]
 8005df0:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8005df4:	83bb      	strh	r3, [r7, #28]
 8005df6:	8bbb      	ldrh	r3, [r7, #28]
 8005df8:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005dfc:	83bb      	strh	r3, [r7, #28]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	441a      	add	r2, r3
 8005e08:	8bbb      	ldrh	r3, [r7, #28]
 8005e0a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e0e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e12:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	8013      	strh	r3, [r2, #0]
 8005e1e:	e1ea      	b.n	80061f6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	881b      	ldrh	r3, [r3, #0]
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005e32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e36:	83fb      	strh	r3, [r7, #30]
 8005e38:	8bfb      	ldrh	r3, [r7, #30]
 8005e3a:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005e3e:	83fb      	strh	r3, [r7, #30]
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	441a      	add	r2, r3
 8005e4a:	8bfb      	ldrh	r3, [r7, #30]
 8005e4c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e50:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e54:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	8013      	strh	r3, [r2, #0]
 8005e60:	e1c9      	b.n	80061f6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	78db      	ldrb	r3, [r3, #3]
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d11e      	bne.n	8005ea8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	009b      	lsls	r3, r3, #2
 8005e72:	4413      	add	r3, r2
 8005e74:	881b      	ldrh	r3, [r3, #0]
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005e7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e80:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	441a      	add	r2, r3
 8005e8e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8005e92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005e96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005e9a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8005e9e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	8013      	strh	r3, [r2, #0]
 8005ea6:	e01d      	b.n	8005ee4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	009b      	lsls	r3, r3, #2
 8005eb0:	4413      	add	r3, r2
 8005eb2:	881b      	ldrh	r3, [r3, #0]
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8005eba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ebe:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	781b      	ldrb	r3, [r3, #0]
 8005ec8:	009b      	lsls	r3, r3, #2
 8005eca:	441a      	add	r2, r3
 8005ecc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8005ed0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ed4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005ed8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005edc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005ef4:	4413      	add	r3, r2
 8005ef6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	011a      	lsls	r2, r3, #4
 8005efe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f00:	4413      	add	r3, r2
 8005f02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	891b      	ldrh	r3, [r3, #8]
 8005f0c:	085b      	lsrs	r3, r3, #1
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	005b      	lsls	r3, r3, #1
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005f16:	801a      	strh	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	461a      	mov	r2, r3
 8005f26:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f28:	4413      	add	r3, r2
 8005f2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	011a      	lsls	r2, r3, #4
 8005f32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 8005f3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	895b      	ldrh	r3, [r3, #10]
 8005f40:	085b      	lsrs	r3, r3, #1
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	b29a      	uxth	r2, r3
 8005f48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f4a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	785b      	ldrb	r3, [r3, #1]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f040 8093 	bne.w	800607c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	881b      	ldrh	r3, [r3, #0]
 8005f62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8005f66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8005f6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01b      	beq.n	8005faa <USB_ActivateEndpoint+0x52a>
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	4413      	add	r3, r2
 8005f7c:	881b      	ldrh	r3, [r3, #0]
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005f84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f88:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	781b      	ldrb	r3, [r3, #0]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	441a      	add	r2, r3
 8005f94:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005f96:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005f9a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005f9e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005fa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	4413      	add	r3, r2
 8005fb4:	881b      	ldrh	r3, [r3, #0]
 8005fb6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8005fb8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8005fba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d01b      	beq.n	8005ffa <USB_ActivateEndpoint+0x57a>
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	4413      	add	r3, r2
 8005fcc:	881b      	ldrh	r3, [r3, #0]
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fd4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fd8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ff2:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	781b      	ldrb	r3, [r3, #0]
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4413      	add	r3, r2
 8006004:	881b      	ldrh	r3, [r3, #0]
 8006006:	b29b      	uxth	r3, r3
 8006008:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800600c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006010:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006012:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8006014:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8006018:	873b      	strh	r3, [r7, #56]	@ 0x38
 800601a:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800601c:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8006020:	873b      	strh	r3, [r7, #56]	@ 0x38
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	781b      	ldrb	r3, [r3, #0]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	441a      	add	r2, r3
 800602c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800602e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006032:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006036:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800603a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800603e:	b29b      	uxth	r3, r3
 8006040:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	009b      	lsls	r3, r3, #2
 800604a:	4413      	add	r3, r2
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006054:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006058:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	441a      	add	r2, r3
 8006064:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006066:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800606a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800606e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006076:	b29b      	uxth	r3, r3
 8006078:	8013      	strh	r3, [r2, #0]
 800607a:	e0bc      	b.n	80061f6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 800608c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8006090:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01d      	beq.n	80060d4 <USB_ActivateEndpoint+0x654>
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ae:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	441a      	add	r2, r3
 80060bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 80060c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	009b      	lsls	r3, r3, #2
 80060dc:	4413      	add	r3, r2
 80060de:	881b      	ldrh	r3, [r3, #0]
 80060e0:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80060e4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80060e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01d      	beq.n	800612c <USB_ActivateEndpoint+0x6ac>
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	441a      	add	r2, r3
 8006114:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8006118:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800611c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006120:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006124:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006128:	b29b      	uxth	r3, r3
 800612a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	78db      	ldrb	r3, [r3, #3]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d024      	beq.n	800617e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4413      	add	r3, r2
 800613e:	881b      	ldrh	r3, [r3, #0]
 8006140:	b29b      	uxth	r3, r3
 8006142:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006146:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800614a:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800614e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006152:	f083 0320 	eor.w	r3, r3, #32
 8006156:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	441a      	add	r2, r3
 8006164:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8006168:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800616c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006170:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006174:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006178:	b29b      	uxth	r3, r3
 800617a:	8013      	strh	r3, [r2, #0]
 800617c:	e01d      	b.n	80061ba <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	881b      	ldrh	r3, [r3, #0]
 800618a:	b29b      	uxth	r3, r3
 800618c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006190:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006194:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	441a      	add	r2, r3
 80061a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80061a6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061aa:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	4413      	add	r3, r2
 80061c4:	881b      	ldrh	r3, [r3, #0]
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80061cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061d0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	441a      	add	r2, r3
 80061de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80061e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80061e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80061ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80061f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3774      	adds	r7, #116	@ 0x74
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006208:	b480      	push	{r7}
 800620a:	b08d      	sub	sp, #52	@ 0x34
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	7b1b      	ldrb	r3, [r3, #12]
 8006216:	2b00      	cmp	r3, #0
 8006218:	f040 808e 	bne.w	8006338 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	785b      	ldrb	r3, [r3, #1]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d044      	beq.n	80062ae <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	881b      	ldrh	r3, [r3, #0]
 8006230:	81bb      	strh	r3, [r7, #12]
 8006232:	89bb      	ldrh	r3, [r7, #12]
 8006234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01b      	beq.n	8006274 <USB_DeactivateEndpoint+0x6c>
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	881b      	ldrh	r3, [r3, #0]
 8006248:	b29b      	uxth	r3, r3
 800624a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800624e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006252:	817b      	strh	r3, [r7, #10]
 8006254:	687a      	ldr	r2, [r7, #4]
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	781b      	ldrb	r3, [r3, #0]
 800625a:	009b      	lsls	r3, r3, #2
 800625c:	441a      	add	r2, r3
 800625e:	897b      	ldrh	r3, [r7, #10]
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800626c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	4413      	add	r3, r2
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29b      	uxth	r3, r3
 8006282:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006286:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800628a:	813b      	strh	r3, [r7, #8]
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	441a      	add	r2, r3
 8006296:	893b      	ldrh	r3, [r7, #8]
 8006298:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800629c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062a0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80062a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	8013      	strh	r3, [r2, #0]
 80062ac:	e192      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	781b      	ldrb	r3, [r3, #0]
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	4413      	add	r3, r2
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	827b      	strh	r3, [r7, #18]
 80062bc:	8a7b      	ldrh	r3, [r7, #18]
 80062be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01b      	beq.n	80062fe <USB_DeactivateEndpoint+0xf6>
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	4413      	add	r3, r2
 80062d0:	881b      	ldrh	r3, [r3, #0]
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062d8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062dc:	823b      	strh	r3, [r7, #16]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	441a      	add	r2, r3
 80062e8:	8a3b      	ldrh	r3, [r7, #16]
 80062ea:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80062ee:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80062f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80062f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	881b      	ldrh	r3, [r3, #0]
 800630a:	b29b      	uxth	r3, r3
 800630c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006310:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006314:	81fb      	strh	r3, [r7, #14]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	89fb      	ldrh	r3, [r7, #14]
 8006322:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006326:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800632a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800632e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006332:	b29b      	uxth	r3, r3
 8006334:	8013      	strh	r3, [r2, #0]
 8006336:	e14d      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	785b      	ldrb	r3, [r3, #1]
 800633c:	2b00      	cmp	r3, #0
 800633e:	f040 80a5 	bne.w	800648c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	843b      	strh	r3, [r7, #32]
 8006350:	8c3b      	ldrh	r3, [r7, #32]
 8006352:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01b      	beq.n	8006392 <USB_DeactivateEndpoint+0x18a>
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	4413      	add	r3, r2
 8006364:	881b      	ldrh	r3, [r3, #0]
 8006366:	b29b      	uxth	r3, r3
 8006368:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800636c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006370:	83fb      	strh	r3, [r7, #30]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	441a      	add	r2, r3
 800637c:	8bfb      	ldrh	r3, [r7, #30]
 800637e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006382:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006386:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800638a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800638e:	b29b      	uxth	r3, r3
 8006390:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	881b      	ldrh	r3, [r3, #0]
 800639e:	83bb      	strh	r3, [r7, #28]
 80063a0:	8bbb      	ldrh	r3, [r7, #28]
 80063a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d01b      	beq.n	80063e2 <USB_DeactivateEndpoint+0x1da>
 80063aa:	687a      	ldr	r2, [r7, #4]
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	781b      	ldrb	r3, [r3, #0]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	881b      	ldrh	r3, [r3, #0]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063c0:	837b      	strh	r3, [r7, #26]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	441a      	add	r2, r3
 80063cc:	8b7b      	ldrh	r3, [r7, #26]
 80063ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80063d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80063d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063da:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80063de:	b29b      	uxth	r3, r3
 80063e0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	881b      	ldrh	r3, [r3, #0]
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80063f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063f8:	833b      	strh	r3, [r7, #24]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	441a      	add	r2, r3
 8006404:	8b3b      	ldrh	r3, [r7, #24]
 8006406:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800640a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800640e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006412:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006416:	b29b      	uxth	r3, r3
 8006418:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800641a:	687a      	ldr	r2, [r7, #4]
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	009b      	lsls	r3, r3, #2
 8006422:	4413      	add	r3, r2
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800642c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006430:	82fb      	strh	r3, [r7, #22]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	441a      	add	r2, r3
 800643c:	8afb      	ldrh	r3, [r7, #22]
 800643e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006442:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800644a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800644e:	b29b      	uxth	r3, r3
 8006450:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	009b      	lsls	r3, r3, #2
 800645a:	4413      	add	r3, r2
 800645c:	881b      	ldrh	r3, [r3, #0]
 800645e:	b29b      	uxth	r3, r3
 8006460:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006468:	82bb      	strh	r3, [r7, #20]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	441a      	add	r2, r3
 8006474:	8abb      	ldrh	r3, [r7, #20]
 8006476:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800647a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800647e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006482:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006486:	b29b      	uxth	r3, r3
 8006488:	8013      	strh	r3, [r2, #0]
 800648a:	e0a3      	b.n	80065d4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	881b      	ldrh	r3, [r3, #0]
 8006498:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 800649a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800649c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d01b      	beq.n	80064dc <USB_DeactivateEndpoint+0x2d4>
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	4413      	add	r3, r2
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	441a      	add	r2, r3
 80064c6:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80064c8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80064cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80064d0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80064d8:	b29b      	uxth	r3, r3
 80064da:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4413      	add	r3, r2
 80064e6:	881b      	ldrh	r3, [r3, #0]
 80064e8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80064ea:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80064ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <USB_DeactivateEndpoint+0x324>
 80064f4:	687a      	ldr	r2, [r7, #4]
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	881b      	ldrh	r3, [r3, #0]
 8006500:	b29b      	uxth	r3, r3
 8006502:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006506:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800650a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800650c:	687a      	ldr	r2, [r7, #4]
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	441a      	add	r2, r3
 8006516:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006518:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800651c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006520:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006524:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006528:	b29b      	uxth	r3, r3
 800652a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	b29b      	uxth	r3, r3
 800653a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800653e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006542:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	441a      	add	r2, r3
 800654e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006550:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006554:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006558:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800655c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006560:	b29b      	uxth	r3, r3
 8006562:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	009b      	lsls	r3, r3, #2
 800656c:	4413      	add	r3, r2
 800656e:	881b      	ldrh	r3, [r3, #0]
 8006570:	b29b      	uxth	r3, r3
 8006572:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006576:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800657a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	009b      	lsls	r3, r3, #2
 8006584:	441a      	add	r2, r3
 8006586:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006588:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800658c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006594:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006598:	b29b      	uxth	r3, r3
 800659a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800659c:	687a      	ldr	r2, [r7, #4]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	4413      	add	r3, r2
 80065a6:	881b      	ldrh	r3, [r3, #0]
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80065b2:	847b      	strh	r3, [r7, #34]	@ 0x22
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	781b      	ldrb	r3, [r3, #0]
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	441a      	add	r2, r3
 80065be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80065c0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80065c4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80065c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80065cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80065d4:	2300      	movs	r3, #0
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3734      	adds	r7, #52	@ 0x34
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b0c2      	sub	sp, #264	@ 0x108
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065ec:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80065f0:	6018      	str	r0, [r3, #0]
 80065f2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80065f6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80065fa:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006600:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	785b      	ldrb	r3, [r3, #1]
 8006608:	2b01      	cmp	r3, #1
 800660a:	f040 86b7 	bne.w	800737c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800660e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006612:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	699a      	ldr	r2, [r3, #24]
 800661a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800661e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	429a      	cmp	r2, r3
 8006628:	d908      	bls.n	800663c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800662a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800662e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800663a:	e007      	b.n	800664c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800663c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006640:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800664c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006650:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	7b1b      	ldrb	r3, [r3, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d13a      	bne.n	80066d2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800665c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006660:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	6959      	ldr	r1, [r3, #20]
 8006668:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800666c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	88da      	ldrh	r2, [r3, #6]
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	b29b      	uxth	r3, r3
 800667a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800667e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006682:	6800      	ldr	r0, [r0, #0]
 8006684:	f001 fc8d 	bl	8007fa2 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006688:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800668c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	613b      	str	r3, [r7, #16]
 8006694:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006698:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80066a2:	b29b      	uxth	r3, r3
 80066a4:	461a      	mov	r2, r3
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	4413      	add	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
 80066ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066b0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	011a      	lsls	r2, r3, #4
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	4413      	add	r3, r2
 80066be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066c8:	b29a      	uxth	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	801a      	strh	r2, [r3, #0]
 80066ce:	f000 be1f 	b.w	8007310 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80066d2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066d6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	78db      	ldrb	r3, [r3, #3]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	f040 8462 	bne.w	8006fa8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80066e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6a1a      	ldr	r2, [r3, #32]
 80066f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80066f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	f240 83df 	bls.w	8006ec0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8006702:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006706:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800670a:	681a      	ldr	r2, [r3, #0]
 800670c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4413      	add	r3, r2
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	b29b      	uxth	r3, r3
 8006720:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006724:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006728:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 800672c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006730:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800673a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	441a      	add	r2, r3
 8006746:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 800674a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800674e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006752:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006756:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800675a:	b29b      	uxth	r3, r3
 800675c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800675e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006762:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	6a1a      	ldr	r2, [r3, #32]
 800676a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800676e:	1ad2      	subs	r2, r2, r3
 8006770:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006774:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800677c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006780:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006784:	681a      	ldr	r2, [r3, #0]
 8006786:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800678a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	881b      	ldrh	r3, [r3, #0]
 8006798:	b29b      	uxth	r3, r3
 800679a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 81c7 	beq.w	8006b32 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80067a4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067a8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80067b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	785b      	ldrb	r3, [r3, #1]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d177      	bne.n	80068b0 <USB_EPStartXfer+0x2ce>
 80067c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067d0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80067da:	b29b      	uxth	r3, r3
 80067dc:	461a      	mov	r2, r3
 80067de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e0:	4413      	add	r3, r2
 80067e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80067e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	011a      	lsls	r2, r3, #4
 80067f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067f4:	4413      	add	r3, r2
 80067f6:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80067fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80067fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fe:	881b      	ldrh	r3, [r3, #0]
 8006800:	b29b      	uxth	r3, r3
 8006802:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006806:	b29a      	uxth	r2, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680a:	801a      	strh	r2, [r3, #0]
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10a      	bne.n	800682a <USB_EPStartXfer+0x248>
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	881b      	ldrh	r3, [r3, #0]
 8006818:	b29b      	uxth	r3, r3
 800681a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800681e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006822:	b29a      	uxth	r2, r3
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	801a      	strh	r2, [r3, #0]
 8006828:	e067      	b.n	80068fa <USB_EPStartXfer+0x318>
 800682a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800682e:	2b3e      	cmp	r3, #62	@ 0x3e
 8006830:	d81c      	bhi.n	800686c <USB_EPStartXfer+0x28a>
 8006832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006836:	085b      	lsrs	r3, r3, #1
 8006838:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	f003 0301 	and.w	r3, r3, #1
 8006844:	2b00      	cmp	r3, #0
 8006846:	d004      	beq.n	8006852 <USB_EPStartXfer+0x270>
 8006848:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800684c:	3301      	adds	r3, #1
 800684e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006854:	881b      	ldrh	r3, [r3, #0]
 8006856:	b29a      	uxth	r2, r3
 8006858:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800685c:	b29b      	uxth	r3, r3
 800685e:	029b      	lsls	r3, r3, #10
 8006860:	b29b      	uxth	r3, r3
 8006862:	4313      	orrs	r3, r2
 8006864:	b29a      	uxth	r2, r3
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	801a      	strh	r2, [r3, #0]
 800686a:	e046      	b.n	80068fa <USB_EPStartXfer+0x318>
 800686c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2b00      	cmp	r3, #0
 8006880:	d104      	bne.n	800688c <USB_EPStartXfer+0x2aa>
 8006882:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006886:	3b01      	subs	r3, #1
 8006888:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800688c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800688e:	881b      	ldrh	r3, [r3, #0]
 8006890:	b29a      	uxth	r2, r3
 8006892:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8006896:	b29b      	uxth	r3, r3
 8006898:	029b      	lsls	r3, r3, #10
 800689a:	b29b      	uxth	r3, r3
 800689c:	4313      	orrs	r3, r2
 800689e:	b29b      	uxth	r3, r3
 80068a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068a8:	b29a      	uxth	r2, r3
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	801a      	strh	r2, [r3, #0]
 80068ae:	e024      	b.n	80068fa <USB_EPStartXfer+0x318>
 80068b0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068b4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	785b      	ldrb	r3, [r3, #1]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d11c      	bne.n	80068fa <USB_EPStartXfer+0x318>
 80068c0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068c4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	461a      	mov	r2, r3
 80068d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d4:	4413      	add	r3, r2
 80068d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80068d8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068dc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	011a      	lsls	r2, r3, #4
 80068e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e8:	4413      	add	r3, r2
 80068ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80068ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068f4:	b29a      	uxth	r2, r3
 80068f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068f8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80068fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80068fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	895b      	ldrh	r3, [r3, #10]
 8006906:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800690a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800690e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	6959      	ldr	r1, [r3, #20]
 8006916:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691a:	b29b      	uxth	r3, r3
 800691c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006920:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006924:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006928:	6800      	ldr	r0, [r0, #0]
 800692a:	f001 fb3a 	bl	8007fa2 <USB_WritePMA>
            ep->xfer_buff += len;
 800692e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006932:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	695a      	ldr	r2, [r3, #20]
 800693a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800693e:	441a      	add	r2, r3
 8006940:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800694c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	6a1a      	ldr	r2, [r3, #32]
 8006958:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800695c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	429a      	cmp	r2, r3
 8006966:	d90f      	bls.n	8006988 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8006968:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800696c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a1a      	ldr	r2, [r3, #32]
 8006974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006978:	1ad2      	subs	r2, r2, r3
 800697a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800697e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	621a      	str	r2, [r3, #32]
 8006986:	e00e      	b.n	80069a6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8006988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800698c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6a1b      	ldr	r3, [r3, #32]
 8006994:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800699c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2200      	movs	r2, #0
 80069a4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80069a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	785b      	ldrb	r3, [r3, #1]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d177      	bne.n	8006aa6 <USB_EPStartXfer+0x4c4>
 80069b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069ba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	61bb      	str	r3, [r7, #24]
 80069c2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069c6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	461a      	mov	r2, r3
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	4413      	add	r3, r2
 80069d8:	61bb      	str	r3, [r7, #24]
 80069da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80069de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	011a      	lsls	r2, r3, #4
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	4413      	add	r3, r2
 80069ec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	697b      	ldr	r3, [r7, #20]
 80069f4:	881b      	ldrh	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069fc:	b29a      	uxth	r2, r3
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <USB_EPStartXfer+0x43e>
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	801a      	strh	r2, [r3, #0]
 8006a1e:	e06d      	b.n	8006afc <USB_EPStartXfer+0x51a>
 8006a20:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a24:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a26:	d81c      	bhi.n	8006a62 <USB_EPStartXfer+0x480>
 8006a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a2c:	085b      	lsrs	r3, r3, #1
 8006a2e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a36:	f003 0301 	and.w	r3, r3, #1
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d004      	beq.n	8006a48 <USB_EPStartXfer+0x466>
 8006a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a42:	3301      	adds	r3, #1
 8006a44:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	881b      	ldrh	r3, [r3, #0]
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a52:	b29b      	uxth	r3, r3
 8006a54:	029b      	lsls	r3, r3, #10
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	801a      	strh	r2, [r3, #0]
 8006a60:	e04c      	b.n	8006afc <USB_EPStartXfer+0x51a>
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <USB_EPStartXfer+0x4a0>
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	881b      	ldrh	r3, [r3, #0]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	029b      	lsls	r3, r3, #10
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	4313      	orrs	r3, r2
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a9e:	b29a      	uxth	r2, r3
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	801a      	strh	r2, [r3, #0]
 8006aa4:	e02a      	b.n	8006afc <USB_EPStartXfer+0x51a>
 8006aa6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aaa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	785b      	ldrb	r3, [r3, #1]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d122      	bne.n	8006afc <USB_EPStartXfer+0x51a>
 8006ab6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006aba:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	623b      	str	r3, [r7, #32]
 8006ac2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ac6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	623b      	str	r3, [r7, #32]
 8006ada:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ade:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	011a      	lsls	r2, r3, #4
 8006ae8:	6a3b      	ldr	r3, [r7, #32]
 8006aea:	4413      	add	r3, r2
 8006aec:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006af0:	61fb      	str	r3, [r7, #28]
 8006af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006afc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	891b      	ldrh	r3, [r3, #8]
 8006b08:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b0c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	6959      	ldr	r1, [r3, #20]
 8006b18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006b22:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006b26:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	f001 fa39 	bl	8007fa2 <USB_WritePMA>
 8006b30:	e3ee      	b.n	8007310 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	785b      	ldrb	r3, [r3, #1]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d177      	bne.n	8006c32 <USB_EPStartXfer+0x650>
 8006b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	461a      	mov	r2, r3
 8006b60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b62:	4413      	add	r3, r2
 8006b64:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006b6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	781b      	ldrb	r3, [r3, #0]
 8006b72:	011a      	lsls	r2, r3, #4
 8006b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b76:	4413      	add	r3, r2
 8006b78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b80:	881b      	ldrh	r3, [r3, #0]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b8c:	801a      	strh	r2, [r3, #0]
 8006b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d10a      	bne.n	8006bac <USB_EPStartXfer+0x5ca>
 8006b96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b98:	881b      	ldrh	r3, [r3, #0]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba8:	801a      	strh	r2, [r3, #0]
 8006baa:	e06d      	b.n	8006c88 <USB_EPStartXfer+0x6a6>
 8006bac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb0:	2b3e      	cmp	r3, #62	@ 0x3e
 8006bb2:	d81c      	bhi.n	8006bee <USB_EPStartXfer+0x60c>
 8006bb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bc2:	f003 0301 	and.w	r3, r3, #1
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d004      	beq.n	8006bd4 <USB_EPStartXfer+0x5f2>
 8006bca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bce:	3301      	adds	r3, #1
 8006bd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bd4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bd6:	881b      	ldrh	r3, [r3, #0]
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	029b      	lsls	r3, r3, #10
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	4313      	orrs	r3, r2
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006bea:	801a      	strh	r2, [r3, #0]
 8006bec:	e04c      	b.n	8006c88 <USB_EPStartXfer+0x6a6>
 8006bee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bf2:	095b      	lsrs	r3, r3, #5
 8006bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006bfc:	f003 031f 	and.w	r3, r3, #31
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d104      	bne.n	8006c0e <USB_EPStartXfer+0x62c>
 8006c04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c10:	881b      	ldrh	r3, [r3, #0]
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	029b      	lsls	r3, r3, #10
 8006c1c:	b29b      	uxth	r3, r3
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c2e:	801a      	strh	r2, [r3, #0]
 8006c30:	e02a      	b.n	8006c88 <USB_EPStartXfer+0x6a6>
 8006c32:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c36:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	785b      	ldrb	r3, [r3, #1]
 8006c3e:	2b01      	cmp	r3, #1
 8006c40:	d122      	bne.n	8006c88 <USB_EPStartXfer+0x6a6>
 8006c42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	461a      	mov	r2, r3
 8006c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c62:	4413      	add	r3, r2
 8006c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c66:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c6a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	011a      	lsls	r2, r3, #4
 8006c74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006c76:	4413      	add	r3, r2
 8006c78:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006c7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006c82:	b29a      	uxth	r2, r3
 8006c84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c86:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006c88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	891b      	ldrh	r3, [r3, #8]
 8006c94:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6959      	ldr	r1, [r3, #20]
 8006ca4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ca8:	b29b      	uxth	r3, r3
 8006caa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006cae:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006cb2:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006cb6:	6800      	ldr	r0, [r0, #0]
 8006cb8:	f001 f973 	bl	8007fa2 <USB_WritePMA>
            ep->xfer_buff += len;
 8006cbc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cc0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	695a      	ldr	r2, [r3, #20]
 8006cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006ccc:	441a      	add	r2, r3
 8006cce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cd2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006cda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cde:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6a1a      	ldr	r2, [r3, #32]
 8006ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d90f      	bls.n	8006d16 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8006cf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006cfa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6a1a      	ldr	r2, [r3, #32]
 8006d02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006d06:	1ad2      	subs	r2, r2, r3
 8006d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	621a      	str	r2, [r3, #32]
 8006d14:	e00e      	b.n	8006d34 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	6a1b      	ldr	r3, [r3, #32]
 8006d22:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8006d26:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2200      	movs	r2, #0
 8006d32:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d38:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	785b      	ldrb	r3, [r3, #1]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d177      	bne.n	8006e40 <USB_EPStartXfer+0x85e>
 8006d50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d70:	4413      	add	r3, r2
 8006d72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006d78:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	011a      	lsls	r2, r3, #4
 8006d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d84:	4413      	add	r3, r2
 8006d86:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9a:	801a      	strh	r2, [r3, #0]
 8006d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <USB_EPStartXfer+0x7d8>
 8006da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da6:	881b      	ldrh	r3, [r3, #0]
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006dae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006db2:	b29a      	uxth	r2, r3
 8006db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db6:	801a      	strh	r2, [r3, #0]
 8006db8:	e067      	b.n	8006e8a <USB_EPStartXfer+0x8a8>
 8006dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8006dc0:	d81c      	bhi.n	8006dfc <USB_EPStartXfer+0x81a>
 8006dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dc6:	085b      	lsrs	r3, r3, #1
 8006dc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006dd0:	f003 0301 	and.w	r3, r3, #1
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d004      	beq.n	8006de2 <USB_EPStartXfer+0x800>
 8006dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ddc:	3301      	adds	r3, #1
 8006dde:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006de2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006de4:	881b      	ldrh	r3, [r3, #0]
 8006de6:	b29a      	uxth	r2, r3
 8006de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	029b      	lsls	r3, r3, #10
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	4313      	orrs	r3, r2
 8006df4:	b29a      	uxth	r2, r3
 8006df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006df8:	801a      	strh	r2, [r3, #0]
 8006dfa:	e046      	b.n	8006e8a <USB_EPStartXfer+0x8a8>
 8006dfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e00:	095b      	lsrs	r3, r3, #5
 8006e02:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e0a:	f003 031f 	and.w	r3, r3, #31
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d104      	bne.n	8006e1c <USB_EPStartXfer+0x83a>
 8006e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e16:	3b01      	subs	r3, #1
 8006e18:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e1e:	881b      	ldrh	r3, [r3, #0]
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	029b      	lsls	r3, r3, #10
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e38:	b29a      	uxth	r2, r3
 8006e3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3c:	801a      	strh	r2, [r3, #0]
 8006e3e:	e024      	b.n	8006e8a <USB_EPStartXfer+0x8a8>
 8006e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	785b      	ldrb	r3, [r3, #1]
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d11c      	bne.n	8006e8a <USB_EPStartXfer+0x8a8>
 8006e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e64:	4413      	add	r3, r2
 8006e66:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e68:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e6c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	011a      	lsls	r2, r3, #4
 8006e76:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e78:	4413      	add	r3, r2
 8006e7a:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e88:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006e8a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e8e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	895b      	ldrh	r3, [r3, #10]
 8006e96:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006e9a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006e9e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6959      	ldr	r1, [r3, #20]
 8006ea6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006eb0:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006eb4:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006eb8:	6800      	ldr	r0, [r0, #0]
 8006eba:	f001 f872 	bl	8007fa2 <USB_WritePMA>
 8006ebe:	e227      	b.n	8007310 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006ec0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ec4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	6a1b      	ldr	r3, [r3, #32]
 8006ecc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ede:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	881b      	ldrh	r3, [r3, #0]
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8006ef2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ef6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 8006efa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006efe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f08:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	441a      	add	r2, r3
 8006f14:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8006f18:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f1c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f2c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f30:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f38:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f3c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f4c:	4413      	add	r3, r2
 8006f4e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	011a      	lsls	r2, r3, #4
 8006f5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f60:	4413      	add	r3, r2
 8006f62:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8006f66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f70:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f76:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	891b      	ldrh	r3, [r3, #8]
 8006f7e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006f82:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006f86:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	6959      	ldr	r1, [r3, #20]
 8006f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8006f98:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8006f9c:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8006fa0:	6800      	ldr	r0, [r0, #0]
 8006fa2:	f000 fffe 	bl	8007fa2 <USB_WritePMA>
 8006fa6:	e1b3      	b.n	8007310 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006fa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	6a1a      	ldr	r2, [r3, #32]
 8006fb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006fb8:	1ad2      	subs	r2, r2, r3
 8006fba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006fc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006fd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	781b      	ldrb	r3, [r3, #0]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	4413      	add	r3, r2
 8006fe0:	881b      	ldrh	r3, [r3, #0]
 8006fe2:	b29b      	uxth	r3, r3
 8006fe4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 80c6 	beq.w	800717a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006fee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ff2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8006ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d177      	bne.n	80070fa <USB_EPStartXfer+0xb18>
 800700a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800700e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007016:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800701a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007024:	b29b      	uxth	r3, r3
 8007026:	461a      	mov	r2, r3
 8007028:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800702a:	4413      	add	r3, r2
 800702c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007032:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	011a      	lsls	r2, r3, #4
 800703c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800703e:	4413      	add	r3, r2
 8007040:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007044:	667b      	str	r3, [r7, #100]	@ 0x64
 8007046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	b29b      	uxth	r3, r3
 800704c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007050:	b29a      	uxth	r2, r3
 8007052:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007054:	801a      	strh	r2, [r3, #0]
 8007056:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800705a:	2b00      	cmp	r3, #0
 800705c:	d10a      	bne.n	8007074 <USB_EPStartXfer+0xa92>
 800705e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007060:	881b      	ldrh	r3, [r3, #0]
 8007062:	b29b      	uxth	r3, r3
 8007064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800706c:	b29a      	uxth	r2, r3
 800706e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007070:	801a      	strh	r2, [r3, #0]
 8007072:	e067      	b.n	8007144 <USB_EPStartXfer+0xb62>
 8007074:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007078:	2b3e      	cmp	r3, #62	@ 0x3e
 800707a:	d81c      	bhi.n	80070b6 <USB_EPStartXfer+0xad4>
 800707c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007086:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d004      	beq.n	800709c <USB_EPStartXfer+0xaba>
 8007092:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8007096:	3301      	adds	r3, #1
 8007098:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800709c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800709e:	881b      	ldrh	r3, [r3, #0]
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	029b      	lsls	r3, r3, #10
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	4313      	orrs	r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070b2:	801a      	strh	r2, [r3, #0]
 80070b4:	e046      	b.n	8007144 <USB_EPStartXfer+0xb62>
 80070b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070ba:	095b      	lsrs	r3, r3, #5
 80070bc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80070c4:	f003 031f 	and.w	r3, r3, #31
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d104      	bne.n	80070d6 <USB_EPStartXfer+0xaf4>
 80070cc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80070d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070d8:	881b      	ldrh	r3, [r3, #0]
 80070da:	b29a      	uxth	r2, r3
 80070dc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	029b      	lsls	r3, r3, #10
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4313      	orrs	r3, r2
 80070e8:	b29b      	uxth	r3, r3
 80070ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070f2:	b29a      	uxth	r2, r3
 80070f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070f6:	801a      	strh	r2, [r3, #0]
 80070f8:	e024      	b.n	8007144 <USB_EPStartXfer+0xb62>
 80070fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80070fe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	785b      	ldrb	r3, [r3, #1]
 8007106:	2b01      	cmp	r3, #1
 8007108:	d11c      	bne.n	8007144 <USB_EPStartXfer+0xb62>
 800710a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800710e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007118:	b29b      	uxth	r3, r3
 800711a:	461a      	mov	r2, r3
 800711c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800711e:	4413      	add	r3, r2
 8007120:	673b      	str	r3, [r7, #112]	@ 0x70
 8007122:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007126:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	011a      	lsls	r2, r3, #4
 8007130:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007132:	4413      	add	r3, r2
 8007134:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007138:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800713a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800713e:	b29a      	uxth	r2, r3
 8007140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007142:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8007144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007148:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	895b      	ldrh	r3, [r3, #10]
 8007150:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007154:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007158:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	6959      	ldr	r1, [r3, #20]
 8007160:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007164:	b29b      	uxth	r3, r3
 8007166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 800716a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800716e:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007172:	6800      	ldr	r0, [r0, #0]
 8007174:	f000 ff15 	bl	8007fa2 <USB_WritePMA>
 8007178:	e0ca      	b.n	8007310 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800717a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800717e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d177      	bne.n	800727a <USB_EPStartXfer+0xc98>
 800718a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800718e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007196:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800719a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80071a4:	b29b      	uxth	r3, r3
 80071a6:	461a      	mov	r2, r3
 80071a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071aa:	4413      	add	r3, r2
 80071ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80071b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	011a      	lsls	r2, r3, #4
 80071bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80071be:	4413      	add	r3, r2
 80071c0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80071c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071c8:	881b      	ldrh	r3, [r3, #0]
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071d0:	b29a      	uxth	r2, r3
 80071d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071d4:	801a      	strh	r2, [r3, #0]
 80071d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d10a      	bne.n	80071f4 <USB_EPStartXfer+0xc12>
 80071de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071e0:	881b      	ldrh	r3, [r3, #0]
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071ec:	b29a      	uxth	r2, r3
 80071ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071f0:	801a      	strh	r2, [r3, #0]
 80071f2:	e073      	b.n	80072dc <USB_EPStartXfer+0xcfa>
 80071f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80071f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80071fa:	d81c      	bhi.n	8007236 <USB_EPStartXfer+0xc54>
 80071fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007200:	085b      	lsrs	r3, r3, #1
 8007202:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d004      	beq.n	800721c <USB_EPStartXfer+0xc3a>
 8007212:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007216:	3301      	adds	r3, #1
 8007218:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800721c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800721e:	881b      	ldrh	r3, [r3, #0]
 8007220:	b29a      	uxth	r2, r3
 8007222:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007226:	b29b      	uxth	r3, r3
 8007228:	029b      	lsls	r3, r3, #10
 800722a:	b29b      	uxth	r3, r3
 800722c:	4313      	orrs	r3, r2
 800722e:	b29a      	uxth	r2, r3
 8007230:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007232:	801a      	strh	r2, [r3, #0]
 8007234:	e052      	b.n	80072dc <USB_EPStartXfer+0xcfa>
 8007236:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800723a:	095b      	lsrs	r3, r3, #5
 800723c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007240:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007244:	f003 031f 	and.w	r3, r3, #31
 8007248:	2b00      	cmp	r3, #0
 800724a:	d104      	bne.n	8007256 <USB_EPStartXfer+0xc74>
 800724c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007250:	3b01      	subs	r3, #1
 8007252:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007256:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29a      	uxth	r2, r3
 800725c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8007260:	b29b      	uxth	r3, r3
 8007262:	029b      	lsls	r3, r3, #10
 8007264:	b29b      	uxth	r3, r3
 8007266:	4313      	orrs	r3, r2
 8007268:	b29b      	uxth	r3, r3
 800726a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800726e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007272:	b29a      	uxth	r2, r3
 8007274:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007276:	801a      	strh	r2, [r3, #0]
 8007278:	e030      	b.n	80072dc <USB_EPStartXfer+0xcfa>
 800727a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800727e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	785b      	ldrb	r3, [r3, #1]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d128      	bne.n	80072dc <USB_EPStartXfer+0xcfa>
 800728a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800728e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007298:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800729c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072ae:	4413      	add	r3, r2
 80072b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	011a      	lsls	r2, r3, #4
 80072c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072c6:	4413      	add	r3, r2
 80072c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80072cc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80072d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072d4:	b29a      	uxth	r2, r3
 80072d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80072da:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	891b      	ldrh	r3, [r3, #8]
 80072e8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80072f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	6959      	ldr	r1, [r3, #20]
 80072f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007302:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007306:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800730a:	6800      	ldr	r0, [r0, #0]
 800730c:	f000 fe49 	bl	8007fa2 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007310:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007314:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800731e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	4413      	add	r3, r2
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29b      	uxth	r3, r3
 800732e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007332:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007336:	817b      	strh	r3, [r7, #10]
 8007338:	897b      	ldrh	r3, [r7, #10]
 800733a:	f083 0310 	eor.w	r3, r3, #16
 800733e:	817b      	strh	r3, [r7, #10]
 8007340:	897b      	ldrh	r3, [r7, #10]
 8007342:	f083 0320 	eor.w	r3, r3, #32
 8007346:	817b      	strh	r3, [r7, #10]
 8007348:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800734c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007350:	681a      	ldr	r2, [r3, #0]
 8007352:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007356:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	441a      	add	r2, r3
 8007362:	897b      	ldrh	r3, [r7, #10]
 8007364:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007368:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800736c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007370:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007374:	b29b      	uxth	r3, r3
 8007376:	8013      	strh	r3, [r2, #0]
 8007378:	f000 bcdf 	b.w	8007d3a <USB_EPStartXfer+0x1758>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800737c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007380:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	7b1b      	ldrb	r3, [r3, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	f040 80bc 	bne.w	8007506 <USB_EPStartXfer+0xf24>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800738e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007392:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	699a      	ldr	r2, [r3, #24]
 800739a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800739e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d917      	bls.n	80073da <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80073aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ae:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 80073ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80073ca:	1ad2      	subs	r2, r2, r3
 80073cc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073d0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	619a      	str	r2, [r3, #24]
 80073d8:	e00e      	b.n	80073f8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 80073da:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073de:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	699b      	ldr	r3, [r3, #24]
 80073e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 80073ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073ee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2200      	movs	r2, #0
 80073f6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80073fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007406:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800740a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007414:	b29b      	uxth	r3, r3
 8007416:	461a      	mov	r2, r3
 8007418:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800741c:	4413      	add	r3, r2
 800741e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007422:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007426:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	011a      	lsls	r2, r3, #4
 8007430:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007434:	4413      	add	r3, r2
 8007436:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800743a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800743e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800744a:	b29a      	uxth	r2, r3
 800744c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007450:	801a      	strh	r2, [r3, #0]
 8007452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007456:	2b00      	cmp	r3, #0
 8007458:	d10d      	bne.n	8007476 <USB_EPStartXfer+0xe94>
 800745a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	b29b      	uxth	r3, r3
 8007462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800746a:	b29a      	uxth	r2, r3
 800746c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007470:	801a      	strh	r2, [r3, #0]
 8007472:	f000 bc28 	b.w	8007cc6 <USB_EPStartXfer+0x16e4>
 8007476:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800747a:	2b3e      	cmp	r3, #62	@ 0x3e
 800747c:	d81f      	bhi.n	80074be <USB_EPStartXfer+0xedc>
 800747e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007482:	085b      	lsrs	r3, r3, #1
 8007484:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007488:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d004      	beq.n	800749e <USB_EPStartXfer+0xebc>
 8007494:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007498:	3301      	adds	r3, #1
 800749a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800749e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074a2:	881b      	ldrh	r3, [r3, #0]
 80074a4:	b29a      	uxth	r2, r3
 80074a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	029b      	lsls	r3, r3, #10
 80074ae:	b29b      	uxth	r3, r3
 80074b0:	4313      	orrs	r3, r2
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	f000 bc04 	b.w	8007cc6 <USB_EPStartXfer+0x16e4>
 80074be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80074cc:	f003 031f 	and.w	r3, r3, #31
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d104      	bne.n	80074de <USB_EPStartXfer+0xefc>
 80074d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074d8:	3b01      	subs	r3, #1
 80074da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074e2:	881b      	ldrh	r3, [r3, #0]
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	029b      	lsls	r3, r3, #10
 80074ee:	b29b      	uxth	r3, r3
 80074f0:	4313      	orrs	r3, r2
 80074f2:	b29b      	uxth	r3, r3
 80074f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074fc:	b29a      	uxth	r2, r3
 80074fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007502:	801a      	strh	r2, [r3, #0]
 8007504:	e3df      	b.n	8007cc6 <USB_EPStartXfer+0x16e4>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8007506:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800750a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	78db      	ldrb	r3, [r3, #3]
 8007512:	2b02      	cmp	r3, #2
 8007514:	f040 8218 	bne.w	8007948 <USB_EPStartXfer+0x1366>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007518:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800751c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	785b      	ldrb	r3, [r3, #1]
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 809d 	bne.w	8007664 <USB_EPStartXfer+0x1082>
 800752a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800752e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007538:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800753c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007546:	b29b      	uxth	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800754e:	4413      	add	r3, r2
 8007550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007554:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007558:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	781b      	ldrb	r3, [r3, #0]
 8007560:	011a      	lsls	r2, r3, #4
 8007562:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007566:	4413      	add	r3, r2
 8007568:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800756c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007570:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007574:	881b      	ldrh	r3, [r3, #0]
 8007576:	b29b      	uxth	r3, r3
 8007578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800757c:	b29a      	uxth	r2, r3
 800757e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007582:	801a      	strh	r2, [r3, #0]
 8007584:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007588:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	691b      	ldr	r3, [r3, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <USB_EPStartXfer+0xfcc>
 8007594:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007598:	881b      	ldrh	r3, [r3, #0]
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	e08f      	b.n	80076ce <USB_EPStartXfer+0x10ec>
 80075ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	691b      	ldr	r3, [r3, #16]
 80075ba:	2b3e      	cmp	r3, #62	@ 0x3e
 80075bc:	d826      	bhi.n	800760c <USB_EPStartXfer+0x102a>
 80075be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	691b      	ldr	r3, [r3, #16]
 80075ca:	085b      	lsrs	r3, r3, #1
 80075cc:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80075d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d004      	beq.n	80075ee <USB_EPStartXfer+0x100c>
 80075e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075e8:	3301      	adds	r3, #1
 80075ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80075ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	029b      	lsls	r3, r3, #10
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4313      	orrs	r3, r2
 8007602:	b29a      	uxth	r2, r3
 8007604:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007608:	801a      	strh	r2, [r3, #0]
 800760a:	e060      	b.n	80076ce <USB_EPStartXfer+0x10ec>
 800760c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007610:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	095b      	lsrs	r3, r3, #5
 800761a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800761e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007622:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 031f 	and.w	r3, r3, #31
 800762e:	2b00      	cmp	r3, #0
 8007630:	d104      	bne.n	800763c <USB_EPStartXfer+0x105a>
 8007632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007636:	3b01      	subs	r3, #1
 8007638:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800763c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29a      	uxth	r2, r3
 8007644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007648:	b29b      	uxth	r3, r3
 800764a:	029b      	lsls	r3, r3, #10
 800764c:	b29b      	uxth	r3, r3
 800764e:	4313      	orrs	r3, r2
 8007650:	b29b      	uxth	r3, r3
 8007652:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007656:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800765a:	b29a      	uxth	r2, r3
 800765c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007660:	801a      	strh	r2, [r3, #0]
 8007662:	e034      	b.n	80076ce <USB_EPStartXfer+0x10ec>
 8007664:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007668:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	785b      	ldrb	r3, [r3, #1]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d12c      	bne.n	80076ce <USB_EPStartXfer+0x10ec>
 8007674:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007678:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007682:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007686:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007690:	b29b      	uxth	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007698:	4413      	add	r3, r2
 800769a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800769e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	011a      	lsls	r2, r3, #4
 80076ac:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80076b0:	4413      	add	r3, r2
 80076b2:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80076b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80076ba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076be:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	691b      	ldr	r3, [r3, #16]
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80076cc:	801a      	strh	r2, [r3, #0]
 80076ce:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076d2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80076dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	785b      	ldrb	r3, [r3, #1]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f040 809d 	bne.w	8007828 <USB_EPStartXfer+0x1246>
 80076ee:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80076f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80076fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007700:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800770a:	b29b      	uxth	r3, r3
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007712:	4413      	add	r3, r2
 8007714:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007718:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800771c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	781b      	ldrb	r3, [r3, #0]
 8007724:	011a      	lsls	r2, r3, #4
 8007726:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800772a:	4413      	add	r3, r2
 800772c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007730:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007734:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007740:	b29a      	uxth	r2, r3
 8007742:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007746:	801a      	strh	r2, [r3, #0]
 8007748:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800774c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10c      	bne.n	8007772 <USB_EPStartXfer+0x1190>
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29b      	uxth	r3, r3
 8007760:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007764:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007768:	b29a      	uxth	r2, r3
 800776a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e088      	b.n	8007884 <USB_EPStartXfer+0x12a2>
 8007772:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007776:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007780:	d826      	bhi.n	80077d0 <USB_EPStartXfer+0x11ee>
 8007782:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007786:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	085b      	lsrs	r3, r3, #1
 8007790:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007794:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007798:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	691b      	ldr	r3, [r3, #16]
 80077a0:	f003 0301 	and.w	r3, r3, #1
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d004      	beq.n	80077b2 <USB_EPStartXfer+0x11d0>
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ac:	3301      	adds	r3, #1
 80077ae:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077b2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077be:	b29b      	uxth	r3, r3
 80077c0:	029b      	lsls	r3, r3, #10
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	4313      	orrs	r3, r2
 80077c6:	b29a      	uxth	r2, r3
 80077c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077cc:	801a      	strh	r2, [r3, #0]
 80077ce:	e059      	b.n	8007884 <USB_EPStartXfer+0x12a2>
 80077d0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077d4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	095b      	lsrs	r3, r3, #5
 80077de:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80077e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80077e6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 031f 	and.w	r3, r3, #31
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d104      	bne.n	8007800 <USB_EPStartXfer+0x121e>
 80077f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077fa:	3b01      	subs	r3, #1
 80077fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007800:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007804:	881b      	ldrh	r3, [r3, #0]
 8007806:	b29a      	uxth	r2, r3
 8007808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800780c:	b29b      	uxth	r3, r3
 800780e:	029b      	lsls	r3, r3, #10
 8007810:	b29b      	uxth	r3, r3
 8007812:	4313      	orrs	r3, r2
 8007814:	b29b      	uxth	r3, r3
 8007816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800781a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800781e:	b29a      	uxth	r2, r3
 8007820:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007824:	801a      	strh	r2, [r3, #0]
 8007826:	e02d      	b.n	8007884 <USB_EPStartXfer+0x12a2>
 8007828:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	785b      	ldrb	r3, [r3, #1]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d125      	bne.n	8007884 <USB_EPStartXfer+0x12a2>
 8007838:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800783c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007846:	b29b      	uxth	r3, r3
 8007848:	461a      	mov	r2, r3
 800784a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800784e:	4413      	add	r3, r2
 8007850:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007854:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007858:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	011a      	lsls	r2, r3, #4
 8007862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007866:	4413      	add	r3, r2
 8007868:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800786c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007870:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007874:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	b29a      	uxth	r2, r3
 800787e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007882:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8007884:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007888:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	2b00      	cmp	r3, #0
 8007892:	f000 8218 	beq.w	8007cc6 <USB_EPStartXfer+0x16e4>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8007896:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800789a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078a4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	009b      	lsls	r3, r3, #2
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078b6:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078ba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d005      	beq.n	80078ce <USB_EPStartXfer+0x12ec>
 80078c2:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d10d      	bne.n	80078ea <USB_EPStartXfer+0x1308>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078ce:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f040 81f5 	bne.w	8007cc6 <USB_EPStartXfer+0x16e4>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80078dc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 80078e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	f040 81ee 	bne.w	8007cc6 <USB_EPStartXfer+0x16e4>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80078ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80078f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	009b      	lsls	r3, r3, #2
 8007902:	4413      	add	r3, r2
 8007904:	881b      	ldrh	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800790c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007910:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8007914:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007918:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	009b      	lsls	r3, r3, #2
 800792c:	441a      	add	r2, r3
 800792e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8007932:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007936:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800793a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800793e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007942:	b29b      	uxth	r3, r3
 8007944:	8013      	strh	r3, [r2, #0]
 8007946:	e1be      	b.n	8007cc6 <USB_EPStartXfer+0x16e4>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007948:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	78db      	ldrb	r3, [r3, #3]
 8007954:	2b01      	cmp	r3, #1
 8007956:	f040 81b4 	bne.w	8007cc2 <USB_EPStartXfer+0x16e0>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800795a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800795e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	699a      	ldr	r2, [r3, #24]
 8007966:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800796a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	429a      	cmp	r2, r3
 8007974:	d917      	bls.n	80079a6 <USB_EPStartXfer+0x13c4>
        {
          len = ep->maxpacket;
 8007976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800797a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8007986:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800798a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007996:	1ad2      	subs	r2, r2, r3
 8007998:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800799c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	619a      	str	r2, [r3, #24]
 80079a4:	e00e      	b.n	80079c4 <USB_EPStartXfer+0x13e2>
        }
        else
        {
          len = ep->xfer_len;
 80079a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 80079b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2200      	movs	r2, #0
 80079c2:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80079c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	785b      	ldrb	r3, [r3, #1]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f040 8085 	bne.w	8007ae0 <USB_EPStartXfer+0x14fe>
 80079d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079da:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80079e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079e8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80079fa:	4413      	add	r3, r2
 80079fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007a00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	011a      	lsls	r2, r3, #4
 8007a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007a12:	4413      	add	r3, r2
 8007a14:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a18:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d10c      	bne.n	8007a52 <USB_EPStartXfer+0x1470>
 8007a38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a3c:	881b      	ldrh	r3, [r3, #0]
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a48:	b29a      	uxth	r2, r3
 8007a4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a4e:	801a      	strh	r2, [r3, #0]
 8007a50:	e077      	b.n	8007b42 <USB_EPStartXfer+0x1560>
 8007a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a56:	2b3e      	cmp	r3, #62	@ 0x3e
 8007a58:	d81e      	bhi.n	8007a98 <USB_EPStartXfer+0x14b6>
 8007a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a68:	f003 0301 	and.w	r3, r3, #1
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d004      	beq.n	8007a7a <USB_EPStartXfer+0x1498>
 8007a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a74:	3301      	adds	r3, #1
 8007a76:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007a7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29a      	uxth	r2, r3
 8007a82:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29a      	uxth	r2, r3
 8007a90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a94:	801a      	strh	r2, [r3, #0]
 8007a96:	e054      	b.n	8007b42 <USB_EPStartXfer+0x1560>
 8007a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a9c:	095b      	lsrs	r3, r3, #5
 8007a9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007aa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007aa6:	f003 031f 	and.w	r3, r3, #31
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d104      	bne.n	8007ab8 <USB_EPStartXfer+0x14d6>
 8007aae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ab2:	3b01      	subs	r3, #1
 8007ab4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8007ab8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007abc:	881b      	ldrh	r3, [r3, #0]
 8007abe:	b29a      	uxth	r2, r3
 8007ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	029b      	lsls	r3, r3, #10
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	4313      	orrs	r3, r2
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ad6:	b29a      	uxth	r2, r3
 8007ad8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007adc:	801a      	strh	r2, [r3, #0]
 8007ade:	e030      	b.n	8007b42 <USB_EPStartXfer+0x1560>
 8007ae0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	785b      	ldrb	r3, [r3, #1]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d128      	bne.n	8007b42 <USB_EPStartXfer+0x1560>
 8007af0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007af4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007afe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b14:	4413      	add	r3, r2
 8007b16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8007b1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	011a      	lsls	r2, r3, #4
 8007b28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007b2c:	4413      	add	r3, r2
 8007b2e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007b32:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007b40:	801a      	strh	r2, [r3, #0]
 8007b42:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b46:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b54:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	785b      	ldrb	r3, [r3, #1]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f040 8085 	bne.w	8007c6c <USB_EPStartXfer+0x168a>
 8007b62:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b66:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b70:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b74:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b7e:	b29b      	uxth	r3, r3
 8007b80:	461a      	mov	r2, r3
 8007b82:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b86:	4413      	add	r3, r2
 8007b88:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007b8c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b90:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	781b      	ldrb	r3, [r3, #0]
 8007b98:	011a      	lsls	r2, r3, #4
 8007b9a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007b9e:	4413      	add	r3, r2
 8007ba0:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007ba4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ba8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bac:	881b      	ldrh	r3, [r3, #0]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d10c      	bne.n	8007bde <USB_EPStartXfer+0x15fc>
 8007bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bc8:	881b      	ldrh	r3, [r3, #0]
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bd0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd4:	b29a      	uxth	r2, r3
 8007bd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007bda:	801a      	strh	r2, [r3, #0]
 8007bdc:	e073      	b.n	8007cc6 <USB_EPStartXfer+0x16e4>
 8007bde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be2:	2b3e      	cmp	r3, #62	@ 0x3e
 8007be4:	d81e      	bhi.n	8007c24 <USB_EPStartXfer+0x1642>
 8007be6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bea:	085b      	lsrs	r3, r3, #1
 8007bec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf4:	f003 0301 	and.w	r3, r3, #1
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d004      	beq.n	8007c06 <USB_EPStartXfer+0x1624>
 8007bfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c00:	3301      	adds	r3, #1
 8007c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c0a:	881b      	ldrh	r3, [r3, #0]
 8007c0c:	b29a      	uxth	r2, r3
 8007c0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	029b      	lsls	r3, r3, #10
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c20:	801a      	strh	r2, [r3, #0]
 8007c22:	e050      	b.n	8007cc6 <USB_EPStartXfer+0x16e4>
 8007c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c28:	095b      	lsrs	r3, r3, #5
 8007c2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d104      	bne.n	8007c44 <USB_EPStartXfer+0x1662>
 8007c3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c3e:	3b01      	subs	r3, #1
 8007c40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007c44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c48:	881b      	ldrh	r3, [r3, #0]
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	029b      	lsls	r3, r3, #10
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	4313      	orrs	r3, r2
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007c5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007c62:	b29a      	uxth	r2, r3
 8007c64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c68:	801a      	strh	r2, [r3, #0]
 8007c6a:	e02c      	b.n	8007cc6 <USB_EPStartXfer+0x16e4>
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	785b      	ldrb	r3, [r3, #1]
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d124      	bne.n	8007cc6 <USB_EPStartXfer+0x16e4>
 8007c7c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c80:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007c92:	4413      	add	r3, r2
 8007c94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	011a      	lsls	r2, r3, #4
 8007ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007caa:	4413      	add	r3, r2
 8007cac:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007cb0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cbe:	801a      	strh	r2, [r3, #0]
 8007cc0:	e001      	b.n	8007cc6 <USB_EPStartXfer+0x16e4>
      }
      else
      {
        return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e03a      	b.n	8007d3c <USB_EPStartXfer+0x175a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cca:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	881b      	ldrh	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007cec:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cf0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007cf4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007cf8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007cfc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d00:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007d04:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	441a      	add	r2, r3
 8007d22:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d26:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d2a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}

08007d46 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	785b      	ldrb	r3, [r3, #1]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d020      	beq.n	8007d9a <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	683b      	ldr	r3, [r7, #0]
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	881b      	ldrh	r3, [r3, #0]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d6e:	81bb      	strh	r3, [r7, #12]
 8007d70:	89bb      	ldrh	r3, [r7, #12]
 8007d72:	f083 0310 	eor.w	r3, r3, #16
 8007d76:	81bb      	strh	r3, [r7, #12]
 8007d78:	687a      	ldr	r2, [r7, #4]
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	441a      	add	r2, r3
 8007d82:	89bb      	ldrh	r3, [r7, #12]
 8007d84:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007d88:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007d8c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d90:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	8013      	strh	r3, [r2, #0]
 8007d98:	e01f      	b.n	8007dda <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	881b      	ldrh	r3, [r3, #0]
 8007da6:	b29b      	uxth	r3, r3
 8007da8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007db0:	81fb      	strh	r3, [r7, #14]
 8007db2:	89fb      	ldrh	r3, [r7, #14]
 8007db4:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007db8:	81fb      	strh	r3, [r7, #14]
 8007dba:	687a      	ldr	r2, [r7, #4]
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	781b      	ldrb	r3, [r3, #0]
 8007dc0:	009b      	lsls	r3, r3, #2
 8007dc2:	441a      	add	r2, r3
 8007dc4:	89fb      	ldrh	r3, [r7, #14]
 8007dc6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007dca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007dce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
 8007df0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	7b1b      	ldrb	r3, [r3, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 809d 	bne.w	8007f36 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	785b      	ldrb	r3, [r3, #1]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d04c      	beq.n	8007e9e <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e04:	687a      	ldr	r2, [r7, #4]
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	881b      	ldrh	r3, [r3, #0]
 8007e10:	823b      	strh	r3, [r7, #16]
 8007e12:	8a3b      	ldrh	r3, [r7, #16]
 8007e14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d01b      	beq.n	8007e54 <USB_EPClearStall+0x6c>
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	881b      	ldrh	r3, [r3, #0]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e32:	81fb      	strh	r3, [r7, #14]
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	441a      	add	r2, r3
 8007e3e:	89fb      	ldrh	r3, [r7, #14]
 8007e40:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e44:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e4c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007e50:	b29b      	uxth	r3, r3
 8007e52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	78db      	ldrb	r3, [r3, #3]
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d06c      	beq.n	8007f36 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	009b      	lsls	r3, r3, #2
 8007e64:	4413      	add	r3, r2
 8007e66:	881b      	ldrh	r3, [r3, #0]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007e6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e72:	81bb      	strh	r3, [r7, #12]
 8007e74:	89bb      	ldrh	r3, [r7, #12]
 8007e76:	f083 0320 	eor.w	r3, r3, #32
 8007e7a:	81bb      	strh	r3, [r7, #12]
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	009b      	lsls	r3, r3, #2
 8007e84:	441a      	add	r2, r3
 8007e86:	89bb      	ldrh	r3, [r7, #12]
 8007e88:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007e8c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007e90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	8013      	strh	r3, [r2, #0]
 8007e9c:	e04b      	b.n	8007f36 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	781b      	ldrb	r3, [r3, #0]
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	4413      	add	r3, r2
 8007ea8:	881b      	ldrh	r3, [r3, #0]
 8007eaa:	82fb      	strh	r3, [r7, #22]
 8007eac:	8afb      	ldrh	r3, [r7, #22]
 8007eae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d01b      	beq.n	8007eee <USB_EPClearStall+0x106>
 8007eb6:	687a      	ldr	r2, [r7, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	009b      	lsls	r3, r3, #2
 8007ebe:	4413      	add	r3, r2
 8007ec0:	881b      	ldrh	r3, [r3, #0]
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ec8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007ecc:	82bb      	strh	r3, [r7, #20]
 8007ece:	687a      	ldr	r2, [r7, #4]
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	441a      	add	r2, r3
 8007ed8:	8abb      	ldrh	r3, [r7, #20]
 8007eda:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ede:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ee2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007ee6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007f00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007f04:	827b      	strh	r3, [r7, #18]
 8007f06:	8a7b      	ldrh	r3, [r7, #18]
 8007f08:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8007f0c:	827b      	strh	r3, [r7, #18]
 8007f0e:	8a7b      	ldrh	r3, [r7, #18]
 8007f10:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007f14:	827b      	strh	r3, [r7, #18]
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	441a      	add	r2, r3
 8007f20:	8a7b      	ldrh	r3, [r7, #18]
 8007f22:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007f26:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007f2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	371c      	adds	r7, #28
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2280      	movs	r2, #128	@ 0x80
 8007f5a:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 8007f5e:	2300      	movs	r3, #0
}
 8007f60:	4618      	mov	r0, r3
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6a:	4770      	bx	lr

08007f6c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	370c      	adds	r7, #12
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f80:	4770      	bx	lr

08007f82 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b085      	sub	sp, #20
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f94:	68fb      	ldr	r3, [r7, #12]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3714      	adds	r7, #20
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b08b      	sub	sp, #44	@ 0x2c
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	60f8      	str	r0, [r7, #12]
 8007faa:	60b9      	str	r1, [r7, #8]
 8007fac:	4611      	mov	r1, r2
 8007fae:	461a      	mov	r2, r3
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	80fb      	strh	r3, [r7, #6]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007fb8:	88bb      	ldrh	r3, [r7, #4]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fc4:	68bb      	ldr	r3, [r7, #8]
 8007fc6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	005a      	lsls	r2, r3, #1
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fd4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8007fd6:	69bb      	ldr	r3, [r7, #24]
 8007fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007fda:	e01e      	b.n	800801a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 8007fdc:	69fb      	ldr	r3, [r7, #28]
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	b21a      	sxth	r2, r3
 8007fec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	b21b      	sxth	r3, r3
 8007ff4:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8007ff6:	6a3b      	ldr	r3, [r7, #32]
 8007ff8:	8a7a      	ldrh	r2, [r7, #18]
 8007ffa:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007ffc:	6a3b      	ldr	r3, [r7, #32]
 8007ffe:	3302      	adds	r3, #2
 8008000:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	3302      	adds	r3, #2
 8008006:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8008008:	69fb      	ldr	r3, [r7, #28]
 800800a:	3301      	adds	r3, #1
 800800c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	3301      	adds	r3, #1
 8008012:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8008014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008016:	3b01      	subs	r3, #1
 8008018:	627b      	str	r3, [r7, #36]	@ 0x24
 800801a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1dd      	bne.n	8007fdc <USB_WritePMA+0x3a>
  }
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	372c      	adds	r7, #44	@ 0x2c
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800802e:	b480      	push	{r7}
 8008030:	b08b      	sub	sp, #44	@ 0x2c
 8008032:	af00      	add	r7, sp, #0
 8008034:	60f8      	str	r0, [r7, #12]
 8008036:	60b9      	str	r1, [r7, #8]
 8008038:	4611      	mov	r1, r2
 800803a:	461a      	mov	r2, r3
 800803c:	460b      	mov	r3, r1
 800803e:	80fb      	strh	r3, [r7, #6]
 8008040:	4613      	mov	r3, r2
 8008042:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8008044:	88bb      	ldrh	r3, [r7, #4]
 8008046:	085b      	lsrs	r3, r3, #1
 8008048:	b29b      	uxth	r3, r3
 800804a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	005a      	lsls	r2, r3, #1
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	4413      	add	r3, r2
 800805c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008060:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8008062:	69bb      	ldr	r3, [r7, #24]
 8008064:	627b      	str	r3, [r7, #36]	@ 0x24
 8008066:	e01b      	b.n	80080a0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8008068:	6a3b      	ldr	r3, [r7, #32]
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008070:	6a3b      	ldr	r3, [r7, #32]
 8008072:	3302      	adds	r3, #2
 8008074:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	b2da      	uxtb	r2, r3
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800807e:	69fb      	ldr	r3, [r7, #28]
 8008080:	3301      	adds	r3, #1
 8008082:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b2da      	uxtb	r2, r3
 800808a:	69fb      	ldr	r3, [r7, #28]
 800808c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3301      	adds	r3, #1
 8008092:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	3302      	adds	r3, #2
 8008098:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 800809a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809c:	3b01      	subs	r3, #1
 800809e:	627b      	str	r3, [r7, #36]	@ 0x24
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d1e0      	bne.n	8008068 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80080a6:	88bb      	ldrh	r3, [r7, #4]
 80080a8:	f003 0301 	and.w	r3, r3, #1
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d007      	beq.n	80080c2 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 80080b2:	6a3b      	ldr	r3, [r7, #32]
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	b29b      	uxth	r3, r3
 80080b8:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	69fb      	ldr	r3, [r7, #28]
 80080c0:	701a      	strb	r2, [r3, #0]
  }
}
 80080c2:	bf00      	nop
 80080c4:	372c      	adds	r7, #44	@ 0x2c
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USBD_CUSTOM_HID_Init>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev,
                                     uint8_t cfgidx)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	460b      	mov	r3, r1
 80080d8:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80080da:	2300      	movs	r3, #0
 80080dc:	73fb      	strb	r3, [r7, #15]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid;

  /* Open EP IN */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPIN_ADDR, USBD_EP_TYPE_INTR,
 80080de:	2302      	movs	r3, #2
 80080e0:	2203      	movs	r2, #3
 80080e2:	2181      	movs	r1, #129	@ 0x81
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f001 fd82 	bl	8009bee <USBD_LL_OpenEP>
                 CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 1U;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2201      	movs	r2, #1
 80080ee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Open EP OUT */
  USBD_LL_OpenEP(pdev, CUSTOM_HID_EPOUT_ADDR, USBD_EP_TYPE_INTR,
 80080f0:	2302      	movs	r3, #2
 80080f2:	2203      	movs	r2, #3
 80080f4:	2101      	movs	r1, #1
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f001 fd79 	bl	8009bee <USBD_LL_OpenEP>
                 CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 1U;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  pdev->pClassData = USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 8008104:	2054      	movs	r0, #84	@ 0x54
 8008106:	f001 fe87 	bl	8009e18 <USBD_static_malloc>
 800810a:	4602      	mov	r2, r0
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008118:	2b00      	cmp	r3, #0
 800811a:	d102      	bne.n	8008122 <USBD_CUSTOM_HID_Init+0x54>
  {
    ret = 1U;
 800811c:	2301      	movs	r3, #1
 800811e:	73fb      	strb	r3, [r7, #15]
 8008120:	e012      	b.n	8008148 <USBD_CUSTOM_HID_Init+0x7a>
  }
  else
  {
    hhid = (USBD_CUSTOM_HID_HandleTypeDef *) pdev->pClassData;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008128:	60bb      	str	r3, [r7, #8]

    hhid->state = CUSTOM_HID_IDLE;
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->Init();
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008138:	685b      	ldr	r3, [r3, #4]
 800813a:	4798      	blx	r3

    /* Prepare Out endpoint to receive 1st packet */
    USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 800813c:	68ba      	ldr	r2, [r7, #8]
 800813e:	2340      	movs	r3, #64	@ 0x40
 8008140:	2101      	movs	r1, #1
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f001 fe44 	bl	8009dd0 <USBD_LL_PrepareReceive>
                           USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);
  }

  return ret;
 8008148:	7bfb      	ldrb	r3, [r7, #15]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3710      	adds	r7, #16
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_CUSTOM_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev,
                                       uint8_t cfgidx)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  /* Close CUSTOM_HID EP IN */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPIN_ADDR);
 800815e:	2181      	movs	r1, #129	@ 0x81
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 fd6a 	bl	8009c3a <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOM_HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2200      	movs	r2, #0
 800816a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close CUSTOM_HID EP OUT */
  USBD_LL_CloseEP(pdev, CUSTOM_HID_EPOUT_ADDR);
 800816c:	2101      	movs	r1, #1
 800816e:	6878      	ldr	r0, [r7, #4]
 8008170:	f001 fd63 	bl	8009c3a <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOM_HID_EPOUT_ADDR & 0xFU].is_used = 0U;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2200      	movs	r2, #0
 8008178:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00e      	beq.n	80081a4 <USBD_CUSTOM_HID_DeInit+0x52>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008196:	4618      	mov	r0, r3
 8008198:	f001 fe4c 	bl	8009e34 <USBD_static_free>
    pdev->pClassData = NULL;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2200      	movs	r2, #0
 80081a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }
  return USBD_OK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	3708      	adds	r7, #8
 80081aa:	46bd      	mov	sp, r7
 80081ac:	bd80      	pop	{r7, pc}
	...

080081b0 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                      USBD_SetupReqTypedef *req)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80081c0:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 80081c2:	2300      	movs	r3, #0
 80081c4:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 80081c6:	2300      	movs	r3, #0
 80081c8:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	81fb      	strh	r3, [r7, #14]
  uint8_t ret = USBD_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d051      	beq.n	8008282 <USBD_CUSTOM_HID_Setup+0xd2>
 80081de:	2b20      	cmp	r3, #32
 80081e0:	f040 80d8 	bne.w	8008394 <USBD_CUSTOM_HID_Setup+0x1e4>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	785b      	ldrb	r3, [r3, #1]
 80081e8:	3b02      	subs	r3, #2
 80081ea:	2b09      	cmp	r3, #9
 80081ec:	d841      	bhi.n	8008272 <USBD_CUSTOM_HID_Setup+0xc2>
 80081ee:	a201      	add	r2, pc, #4	@ (adr r2, 80081f4 <USBD_CUSTOM_HID_Setup+0x44>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	0800824d 	.word	0x0800824d
 80081f8:	0800822b 	.word	0x0800822b
 80081fc:	08008273 	.word	0x08008273
 8008200:	08008273 	.word	0x08008273
 8008204:	08008273 	.word	0x08008273
 8008208:	08008273 	.word	0x08008273
 800820c:	08008273 	.word	0x08008273
 8008210:	0800825d 	.word	0x0800825d
 8008214:	0800823b 	.word	0x0800823b
 8008218:	0800821d 	.word	0x0800821d
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	885b      	ldrh	r3, [r3, #2]
 8008220:	b2db      	uxtb	r3, r3
 8008222:	461a      	mov	r2, r3
 8008224:	693b      	ldr	r3, [r7, #16]
 8008226:	641a      	str	r2, [r3, #64]	@ 0x40
          break;
 8008228:	e02a      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	3340      	adds	r3, #64	@ 0x40
 800822e:	2201      	movs	r2, #1
 8008230:	4619      	mov	r1, r3
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f001 f9a4 	bl	8009580 <USBD_CtlSendData>
          break;
 8008238:	e022      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	885b      	ldrh	r3, [r3, #2]
 800823e:	0a1b      	lsrs	r3, r3, #8
 8008240:	b29b      	uxth	r3, r3
 8008242:	b2db      	uxtb	r3, r3
 8008244:	461a      	mov	r2, r3
 8008246:	693b      	ldr	r3, [r7, #16]
 8008248:	645a      	str	r2, [r3, #68]	@ 0x44
          break;
 800824a:	e019      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	3344      	adds	r3, #68	@ 0x44
 8008250:	2201      	movs	r2, #1
 8008252:	4619      	mov	r1, r3
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f993 	bl	8009580 <USBD_CtlSendData>
          break;
 800825a:	e011      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0xd0>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 800825c:	693b      	ldr	r3, [r7, #16]
 800825e:	2201      	movs	r2, #1
 8008260:	64da      	str	r2, [r3, #76]	@ 0x4c
          USBD_CtlPrepareRx(pdev, hhid->Report_buf, req->wLength);
 8008262:	6939      	ldr	r1, [r7, #16]
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	88db      	ldrh	r3, [r3, #6]
 8008268:	461a      	mov	r2, r3
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f001 f9b6 	bl	80095dc <USBD_CtlPrepareRx>
          break;
 8008270:	e006      	b.n	8008280 <USBD_CUSTOM_HID_Setup+0xd0>

        default:
          USBD_CtlError(pdev, req);
 8008272:	6839      	ldr	r1, [r7, #0]
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 f918 	bl	80094aa <USBD_CtlError>
          ret = USBD_FAIL;
 800827a:	2302      	movs	r3, #2
 800827c:	75fb      	strb	r3, [r7, #23]
          break;
 800827e:	bf00      	nop
      }
      break;
 8008280:	e08f      	b.n	80083a2 <USBD_CUSTOM_HID_Setup+0x1f2>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	785b      	ldrb	r3, [r3, #1]
 8008286:	2b0b      	cmp	r3, #11
 8008288:	d87c      	bhi.n	8008384 <USBD_CUSTOM_HID_Setup+0x1d4>
 800828a:	a201      	add	r2, pc, #4	@ (adr r2, 8008290 <USBD_CUSTOM_HID_Setup+0xe0>)
 800828c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008290:	080082c1 	.word	0x080082c1
 8008294:	08008385 	.word	0x08008385
 8008298:	08008385 	.word	0x08008385
 800829c:	08008385 	.word	0x08008385
 80082a0:	08008385 	.word	0x08008385
 80082a4:	08008385 	.word	0x08008385
 80082a8:	080082e9 	.word	0x080082e9
 80082ac:	08008385 	.word	0x08008385
 80082b0:	08008385 	.word	0x08008385
 80082b4:	08008385 	.word	0x08008385
 80082b8:	08008337 	.word	0x08008337
 80082bc:	0800835f 	.word	0x0800835f
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80082c6:	2b03      	cmp	r3, #3
 80082c8:	d107      	bne.n	80082da <USBD_CUSTOM_HID_Setup+0x12a>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80082ca:	f107 030e 	add.w	r3, r7, #14
 80082ce:	2202      	movs	r2, #2
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 f954 	bl	8009580 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082d8:	e05b      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 80082da:	6839      	ldr	r1, [r7, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f001 f8e4 	bl	80094aa <USBD_CtlError>
            ret = USBD_FAIL;
 80082e2:	2302      	movs	r3, #2
 80082e4:	75fb      	strb	r3, [r7, #23]
          break;
 80082e6:	e054      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == CUSTOM_HID_REPORT_DESC)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	885b      	ldrh	r3, [r3, #2]
 80082ec:	0a1b      	lsrs	r3, r3, #8
 80082ee:	b29b      	uxth	r3, r3
 80082f0:	2b22      	cmp	r3, #34	@ 0x22
 80082f2:	d10b      	bne.n	800830c <USBD_CUSTOM_HID_Setup+0x15c>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	88db      	ldrh	r3, [r3, #6]
 80082f8:	2b30      	cmp	r3, #48	@ 0x30
 80082fa:	bf28      	it	cs
 80082fc:	2330      	movcs	r3, #48	@ 0x30
 80082fe:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->pReport;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	61bb      	str	r3, [r7, #24]
 800830a:	e00d      	b.n	8008328 <USBD_CUSTOM_HID_Setup+0x178>
          }
          else
          {
            if (req->wValue >> 8 == CUSTOM_HID_DESCRIPTOR_TYPE)
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	885b      	ldrh	r3, [r3, #2]
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	b29b      	uxth	r3, r3
 8008314:	2b21      	cmp	r3, #33	@ 0x21
 8008316:	d107      	bne.n	8008328 <USBD_CUSTOM_HID_Setup+0x178>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8008318:	4b24      	ldr	r3, [pc, #144]	@ (80083ac <USBD_CUSTOM_HID_Setup+0x1fc>)
 800831a:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 800831c:	683b      	ldr	r3, [r7, #0]
 800831e:	88db      	ldrh	r3, [r3, #6]
 8008320:	2b09      	cmp	r3, #9
 8008322:	bf28      	it	cs
 8008324:	2309      	movcs	r3, #9
 8008326:	83fb      	strh	r3, [r7, #30]
            }
          }

          USBD_CtlSendData(pdev, pbuf, len);
 8008328:	8bfb      	ldrh	r3, [r7, #30]
 800832a:	461a      	mov	r2, r3
 800832c:	69b9      	ldr	r1, [r7, #24]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f001 f926 	bl	8009580 <USBD_CtlSendData>
          break;
 8008334:	e02d      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800833c:	2b03      	cmp	r3, #3
 800833e:	d107      	bne.n	8008350 <USBD_CUSTOM_HID_Setup+0x1a0>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	3348      	adds	r3, #72	@ 0x48
 8008344:	2201      	movs	r2, #1
 8008346:	4619      	mov	r1, r3
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f001 f919 	bl	8009580 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800834e:	e020      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f001 f8a9 	bl	80094aa <USBD_CtlError>
            ret = USBD_FAIL;
 8008358:	2302      	movs	r3, #2
 800835a:	75fb      	strb	r3, [r7, #23]
          break;
 800835c:	e019      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008364:	2b03      	cmp	r3, #3
 8008366:	d106      	bne.n	8008376 <USBD_CUSTOM_HID_Setup+0x1c6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008368:	683b      	ldr	r3, [r7, #0]
 800836a:	885b      	ldrh	r3, [r3, #2]
 800836c:	b2db      	uxtb	r3, r3
 800836e:	461a      	mov	r2, r3
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	649a      	str	r2, [r3, #72]	@ 0x48
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008374:	e00d      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>
            USBD_CtlError(pdev, req);
 8008376:	6839      	ldr	r1, [r7, #0]
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f001 f896 	bl	80094aa <USBD_CtlError>
            ret = USBD_FAIL;
 800837e:	2302      	movs	r3, #2
 8008380:	75fb      	strb	r3, [r7, #23]
          break;
 8008382:	e006      	b.n	8008392 <USBD_CUSTOM_HID_Setup+0x1e2>

        default:
          USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f001 f88f 	bl	80094aa <USBD_CtlError>
          ret = USBD_FAIL;
 800838c:	2302      	movs	r3, #2
 800838e:	75fb      	strb	r3, [r7, #23]
          break;
 8008390:	bf00      	nop
      }
      break;
 8008392:	e006      	b.n	80083a2 <USBD_CUSTOM_HID_Setup+0x1f2>

    default:
      USBD_CtlError(pdev, req);
 8008394:	6839      	ldr	r1, [r7, #0]
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f001 f887 	bl	80094aa <USBD_CtlError>
      ret = USBD_FAIL;
 800839c:	2302      	movs	r3, #2
 800839e:	75fb      	strb	r3, [r7, #23]
      break;
 80083a0:	bf00      	nop
  }
  return ret;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3720      	adds	r7, #32
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	200000c8 	.word	0x200000c8

080083b0 <USBD_CUSTOM_HID_SendReport>:
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef  *pdev,
                                   uint8_t *report,
                                   uint16_t len)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b086      	sub	sp, #24
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	4613      	mov	r3, r2
 80083bc:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80083c4:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083cc:	2b03      	cmp	r3, #3
 80083ce:	d111      	bne.n	80083f4 <USBD_CUSTOM_HID_SendReport+0x44>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d10a      	bne.n	80083f0 <USBD_CUSTOM_HID_SendReport+0x40>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      USBD_LL_Transmit(pdev, CUSTOM_HID_EPIN_ADDR, report, len);
 80083e2:	88fb      	ldrh	r3, [r7, #6]
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	2181      	movs	r1, #129	@ 0x81
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f001 fcce 	bl	8009d8a <USBD_LL_Transmit>
 80083ee:	e001      	b.n	80083f4 <USBD_CUSTOM_HID_SendReport+0x44>
    }
    else
    {
      return USBD_BUSY;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e000      	b.n	80083f6 <USBD_CUSTOM_HID_SendReport+0x46>
    }
  }
  return USBD_OK;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
	...

08008400 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgFSDesc);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2229      	movs	r2, #41	@ 0x29
 800840c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgFSDesc;
 800840e:	4b03      	ldr	r3, [pc, #12]	@ (800841c <USBD_CUSTOM_HID_GetFSCfgDesc+0x1c>)
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr
 800841c:	20000044 	.word	0x20000044

08008420 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8008420:	b480      	push	{r7}
 8008422:	b083      	sub	sp, #12
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_CfgHSDesc);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2229      	movs	r2, #41	@ 0x29
 800842c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgHSDesc;
 800842e:	4b03      	ldr	r3, [pc, #12]	@ (800843c <USBD_CUSTOM_HID_GetHSCfgDesc+0x1c>)
}
 8008430:	4618      	mov	r0, r3
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr
 800843c:	20000070 	.word	0x20000070

08008440 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_OtherSpeedCfgDesc);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2229      	movs	r2, #41	@ 0x29
 800844c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_OtherSpeedCfgDesc;
 800844e:	4b03      	ldr	r3, [pc, #12]	@ (800845c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	2000009c 	.word	0x2000009c

08008460 <USBD_CUSTOM_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	460b      	mov	r3, r1
 800846a:	70fb      	strb	r3, [r7, #3]
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData)->state = CUSTOM_HID_IDLE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008472:	2200      	movs	r2, #0
 8008474:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return USBD_OK;
 8008478:	2300      	movs	r3, #0
}
 800847a:	4618      	mov	r0, r3
 800847c:	370c      	adds	r7, #12
 800847e:	46bd      	mov	sp, r7
 8008480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008484:	4770      	bx	lr

08008486 <USBD_CUSTOM_HID_DataOut>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
 800848e:	460b      	mov	r3, r1
 8008490:	70fb      	strb	r3, [r7, #3]

  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008498:	60fb      	str	r3, [r7, #12]

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	68fa      	ldr	r2, [r7, #12]
 80084a4:	7810      	ldrb	r0, [r2, #0]
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	7852      	ldrb	r2, [r2, #1]
 80084aa:	4611      	mov	r1, r2
 80084ac:	4798      	blx	r3
                                                            hhid->Report_buf[1]);

  USBD_LL_PrepareReceive(pdev, CUSTOM_HID_EPOUT_ADDR, hhid->Report_buf,
 80084ae:	68fa      	ldr	r2, [r7, #12]
 80084b0:	2340      	movs	r3, #64	@ 0x40
 80084b2:	2101      	movs	r1, #1
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fc8b 	bl	8009dd0 <USBD_LL_PrepareReceive>
                         USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return USBD_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	3710      	adds	r7, #16
 80084c0:	46bd      	mov	sp, r7
 80084c2:	bd80      	pop	{r7, pc}

080084c4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b084      	sub	sp, #16
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef     *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassData;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80084d2:	60fb      	str	r3, [r7, #12]

  if (hhid->IsReportAvailable == 1U)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d10c      	bne.n	80084f6 <USBD_CUSTOM_HID_EP0_RxReady+0x32>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData)->OutEvent(hhid->Report_buf[0],
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80084e2:	68db      	ldr	r3, [r3, #12]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	7810      	ldrb	r0, [r2, #0]
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	7852      	ldrb	r2, [r2, #1]
 80084ec:	4611      	mov	r1, r2
 80084ee:	4798      	blx	r3
                                                              hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	2200      	movs	r2, #0
 80084f4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	220a      	movs	r2, #10
 800850c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 800850e:	4b03      	ldr	r3, [pc, #12]	@ (800851c <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008510:	4618      	mov	r0, r3
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	200000d4 	.word	0x200000d4

08008520 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t  USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                           USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8008520:	b480      	push	{r7}
 8008522:	b085      	sub	sp, #20
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800852a:	2302      	movs	r3, #2
 800852c:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d005      	beq.n	8008540 <USBD_CUSTOM_HID_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	683a      	ldr	r2, [r7, #0]
 8008538:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 800853c:	2300      	movs	r3, #0
 800853e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008540:	7bfb      	ldrb	r3, [r7, #15]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b084      	sub	sp, #16
 8008552:	af00      	add	r7, sp, #0
 8008554:	60f8      	str	r0, [r7, #12]
 8008556:	60b9      	str	r1, [r7, #8]
 8008558:	4613      	mov	r3, r2
 800855a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d101      	bne.n	8008566 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008562:	2302      	movs	r3, #2
 8008564:	e01a      	b.n	800859c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800856c:	2b00      	cmp	r3, #0
 800856e:	d003      	beq.n	8008578 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2200      	movs	r2, #0
 8008574:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d003      	beq.n	8008586 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	68ba      	ldr	r2, [r7, #8]
 8008582:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	79fa      	ldrb	r2, [r7, #7]
 8008592:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8008594:	68f8      	ldr	r0, [r7, #12]
 8008596:	f001 fabf 	bl	8009b18 <USBD_LL_Init>

  return USBD_OK;
 800859a:	2300      	movs	r3, #0
}
 800859c:	4618      	mov	r0, r3
 800859e:	3710      	adds	r7, #16
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}

080085a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80085a4:	b480      	push	{r7}
 80085a6:	b085      	sub	sp, #20
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d006      	beq.n	80085c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 80085c0:	2300      	movs	r3, #0
 80085c2:	73fb      	strb	r3, [r7, #15]
 80085c4:	e001      	b.n	80085ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80085c6:	2302      	movs	r3, #2
 80085c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b082      	sub	sp, #8
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f001 fae9 	bl	8009bb8 <USBD_LL_Start>

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3708      	adds	r7, #8
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80085f8:	2300      	movs	r3, #0
}
 80085fa:	4618      	mov	r0, r3
 80085fc:	370c      	adds	r7, #12
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr

08008606 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
 800860e:	460b      	mov	r3, r1
 8008610:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008612:	2302      	movs	r3, #2
 8008614:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00c      	beq.n	800863a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	78fa      	ldrb	r2, [r7, #3]
 800862a:	4611      	mov	r1, r2
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	4798      	blx	r3
 8008630:	4603      	mov	r3, r0
 8008632:	2b00      	cmp	r3, #0
 8008634:	d101      	bne.n	800863a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8008636:	2300      	movs	r3, #0
 8008638:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800863a:	7bfb      	ldrb	r3, [r7, #15]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3710      	adds	r7, #16
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	78fa      	ldrb	r2, [r7, #3]
 800865a:	4611      	mov	r1, r2
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	4798      	blx	r3

  return USBD_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3708      	adds	r7, #8
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b082      	sub	sp, #8
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
 8008672:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	4618      	mov	r0, r3
 800867e:	f000 feda 	bl	8009436 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008690:	461a      	mov	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	2b02      	cmp	r3, #2
 80086a4:	d016      	beq.n	80086d4 <USBD_LL_SetupStage+0x6a>
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d81c      	bhi.n	80086e4 <USBD_LL_SetupStage+0x7a>
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d002      	beq.n	80086b4 <USBD_LL_SetupStage+0x4a>
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d008      	beq.n	80086c4 <USBD_LL_SetupStage+0x5a>
 80086b2:	e017      	b.n	80086e4 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f9cd 	bl	8008a5c <USBD_StdDevReq>
      break;
 80086c2:	e01a      	b.n	80086fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa2f 	bl	8008b30 <USBD_StdItfReq>
      break;
 80086d2:	e012      	b.n	80086fa <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 80086da:	4619      	mov	r1, r3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f000 fa6f 	bl	8008bc0 <USBD_StdEPReq>
      break;
 80086e2:	e00a      	b.n	80086fa <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 80086ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f001 fac0 	bl	8009c78 <USBD_LL_StallEP>
      break;
 80086f8:	bf00      	nop
  }

  return USBD_OK;
 80086fa:	2300      	movs	r3, #0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b086      	sub	sp, #24
 8008708:	af00      	add	r7, sp, #0
 800870a:	60f8      	str	r0, [r7, #12]
 800870c:	460b      	mov	r3, r1
 800870e:	607a      	str	r2, [r7, #4]
 8008710:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008712:	7afb      	ldrb	r3, [r7, #11]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d14b      	bne.n	80087b0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800871e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008726:	2b03      	cmp	r3, #3
 8008728:	d134      	bne.n	8008794 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	429a      	cmp	r2, r3
 8008734:	d919      	bls.n	800876a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	691b      	ldr	r3, [r3, #16]
 800873e:	1ad2      	subs	r2, r2, r3
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	68da      	ldr	r2, [r3, #12]
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800874c:	429a      	cmp	r2, r3
 800874e:	d203      	bcs.n	8008758 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8008754:	b29b      	uxth	r3, r3
 8008756:	e002      	b.n	800875e <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008758:	697b      	ldr	r3, [r7, #20]
 800875a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800875c:	b29b      	uxth	r3, r3
 800875e:	461a      	mov	r2, r3
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	68f8      	ldr	r0, [r7, #12]
 8008764:	f000 ff58 	bl	8009618 <USBD_CtlContinueRx>
 8008768:	e038      	b.n	80087dc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00a      	beq.n	800878c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800877c:	2b03      	cmp	r3, #3
 800877e:	d105      	bne.n	800878c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	68f8      	ldr	r0, [r7, #12]
 800878a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800878c:	68f8      	ldr	r0, [r7, #12]
 800878e:	f000 ff55 	bl	800963c <USBD_CtlSendStatus>
 8008792:	e023      	b.n	80087dc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800879a:	2b05      	cmp	r3, #5
 800879c:	d11e      	bne.n	80087dc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	2200      	movs	r2, #0
 80087a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 80087a6:	2100      	movs	r1, #0
 80087a8:	68f8      	ldr	r0, [r7, #12]
 80087aa:	f001 fa65 	bl	8009c78 <USBD_LL_StallEP>
 80087ae:	e015      	b.n	80087dc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087b6:	699b      	ldr	r3, [r3, #24]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00d      	beq.n	80087d8 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d108      	bne.n	80087d8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80087cc:	699b      	ldr	r3, [r3, #24]
 80087ce:	7afa      	ldrb	r2, [r7, #11]
 80087d0:	4611      	mov	r1, r2
 80087d2:	68f8      	ldr	r0, [r7, #12]
 80087d4:	4798      	blx	r3
 80087d6:	e001      	b.n	80087dc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80087d8:	2302      	movs	r3, #2
 80087da:	e000      	b.n	80087de <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80087dc:	2300      	movs	r3, #0
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3718      	adds	r7, #24
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80087e6:	b580      	push	{r7, lr}
 80087e8:	b086      	sub	sp, #24
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	60f8      	str	r0, [r7, #12]
 80087ee:	460b      	mov	r3, r1
 80087f0:	607a      	str	r2, [r7, #4]
 80087f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80087f4:	7afb      	ldrb	r3, [r7, #11]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d17f      	bne.n	80088fa <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	3314      	adds	r3, #20
 80087fe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008806:	2b02      	cmp	r3, #2
 8008808:	d15c      	bne.n	80088c4 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 800880a:	697b      	ldr	r3, [r7, #20]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	429a      	cmp	r2, r3
 8008814:	d915      	bls.n	8008842 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	68da      	ldr	r2, [r3, #12]
 800881a:	697b      	ldr	r3, [r7, #20]
 800881c:	691b      	ldr	r3, [r3, #16]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	b29b      	uxth	r3, r3
 800882a:	461a      	mov	r2, r3
 800882c:	6879      	ldr	r1, [r7, #4]
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	f000 fec2 	bl	80095b8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008834:	2300      	movs	r3, #0
 8008836:	2200      	movs	r2, #0
 8008838:	2100      	movs	r1, #0
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f001 fac8 	bl	8009dd0 <USBD_LL_PrepareReceive>
 8008840:	e04e      	b.n	80088e0 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	697a      	ldr	r2, [r7, #20]
 8008848:	6912      	ldr	r2, [r2, #16]
 800884a:	fbb3 f1f2 	udiv	r1, r3, r2
 800884e:	fb01 f202 	mul.w	r2, r1, r2
 8008852:	1a9b      	subs	r3, r3, r2
 8008854:	2b00      	cmp	r3, #0
 8008856:	d11c      	bne.n	8008892 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8008860:	429a      	cmp	r2, r3
 8008862:	d316      	bcc.n	8008892 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	689a      	ldr	r2, [r3, #8]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800886e:	429a      	cmp	r2, r3
 8008870:	d20f      	bcs.n	8008892 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008872:	2200      	movs	r2, #0
 8008874:	2100      	movs	r1, #0
 8008876:	68f8      	ldr	r0, [r7, #12]
 8008878:	f000 fe9e 	bl	80095b8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2200      	movs	r2, #0
 8008880:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008884:	2300      	movs	r3, #0
 8008886:	2200      	movs	r2, #0
 8008888:	2100      	movs	r1, #0
 800888a:	68f8      	ldr	r0, [r7, #12]
 800888c:	f001 faa0 	bl	8009dd0 <USBD_LL_PrepareReceive>
 8008890:	e026      	b.n	80088e0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d00a      	beq.n	80088b4 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d105      	bne.n	80088b4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	68f8      	ldr	r0, [r7, #12]
 80088b2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80088b4:	2180      	movs	r1, #128	@ 0x80
 80088b6:	68f8      	ldr	r0, [r7, #12]
 80088b8:	f001 f9de 	bl	8009c78 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 fed0 	bl	8009662 <USBD_CtlReceiveStatus>
 80088c2:	e00d      	b.n	80088e0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d004      	beq.n	80088d8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d103      	bne.n	80088e0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80088d8:	2180      	movs	r1, #128	@ 0x80
 80088da:	68f8      	ldr	r0, [r7, #12]
 80088dc:	f001 f9cc 	bl	8009c78 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d11d      	bne.n	8008926 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80088ea:	68f8      	ldr	r0, [r7, #12]
 80088ec:	f7ff fe80 	bl	80085f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	2200      	movs	r2, #0
 80088f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80088f8:	e015      	b.n	8008926 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008900:	695b      	ldr	r3, [r3, #20]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d00d      	beq.n	8008922 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800890c:	2b03      	cmp	r3, #3
 800890e:	d108      	bne.n	8008922 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008916:	695b      	ldr	r3, [r3, #20]
 8008918:	7afa      	ldrb	r2, [r7, #11]
 800891a:	4611      	mov	r1, r2
 800891c:	68f8      	ldr	r0, [r7, #12]
 800891e:	4798      	blx	r3
 8008920:	e001      	b.n	8008926 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008922:	2302      	movs	r3, #2
 8008924:	e000      	b.n	8008928 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008926:	2300      	movs	r3, #0
}
 8008928:	4618      	mov	r0, r3
 800892a:	3718      	adds	r7, #24
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008930:	b580      	push	{r7, lr}
 8008932:	b082      	sub	sp, #8
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008938:	2340      	movs	r3, #64	@ 0x40
 800893a:	2200      	movs	r2, #0
 800893c:	2100      	movs	r1, #0
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f955 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2240      	movs	r2, #64	@ 0x40
 8008950:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008954:	2340      	movs	r3, #64	@ 0x40
 8008956:	2200      	movs	r2, #0
 8008958:	2180      	movs	r1, #128	@ 0x80
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 f947 	bl	8009bee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2240      	movs	r2, #64	@ 0x40
 800896a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008990:	2b00      	cmp	r3, #0
 8008992:	d009      	beq.n	80089a8 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6852      	ldr	r2, [r2, #4]
 80089a0:	b2d2      	uxtb	r2, r2
 80089a2:	4611      	mov	r1, r2
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	4798      	blx	r3
  }

  return USBD_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
 80089ba:	460b      	mov	r3, r1
 80089bc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	78fa      	ldrb	r2, [r7, #3]
 80089c2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80089c4:	2300      	movs	r3, #0
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	370c      	adds	r7, #12
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr

080089d2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80089d2:	b480      	push	{r7}
 80089d4:	b083      	sub	sp, #12
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2204      	movs	r2, #4
 80089ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a0a:	2b04      	cmp	r3, #4
 8008a0c:	d105      	bne.n	8008a1a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008a1a:	2300      	movs	r3, #0
}
 8008a1c:	4618      	mov	r0, r3
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008a28:	b580      	push	{r7, lr}
 8008a2a:	b082      	sub	sp, #8
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d10b      	bne.n	8008a52 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d005      	beq.n	8008a52 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a4c:	69db      	ldr	r3, [r3, #28]
 8008a4e:	6878      	ldr	r0, [r7, #4]
 8008a50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a66:	2300      	movs	r3, #0
 8008a68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008a72:	2b40      	cmp	r3, #64	@ 0x40
 8008a74:	d005      	beq.n	8008a82 <USBD_StdDevReq+0x26>
 8008a76:	2b40      	cmp	r3, #64	@ 0x40
 8008a78:	d84f      	bhi.n	8008b1a <USBD_StdDevReq+0xbe>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d009      	beq.n	8008a92 <USBD_StdDevReq+0x36>
 8008a7e:	2b20      	cmp	r3, #32
 8008a80:	d14b      	bne.n	8008b1a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	6839      	ldr	r1, [r7, #0]
 8008a8c:	6878      	ldr	r0, [r7, #4]
 8008a8e:	4798      	blx	r3
      break;
 8008a90:	e048      	b.n	8008b24 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	785b      	ldrb	r3, [r3, #1]
 8008a96:	2b09      	cmp	r3, #9
 8008a98:	d839      	bhi.n	8008b0e <USBD_StdDevReq+0xb2>
 8008a9a:	a201      	add	r2, pc, #4	@ (adr r2, 8008aa0 <USBD_StdDevReq+0x44>)
 8008a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aa0:	08008af1 	.word	0x08008af1
 8008aa4:	08008b05 	.word	0x08008b05
 8008aa8:	08008b0f 	.word	0x08008b0f
 8008aac:	08008afb 	.word	0x08008afb
 8008ab0:	08008b0f 	.word	0x08008b0f
 8008ab4:	08008ad3 	.word	0x08008ad3
 8008ab8:	08008ac9 	.word	0x08008ac9
 8008abc:	08008b0f 	.word	0x08008b0f
 8008ac0:	08008ae7 	.word	0x08008ae7
 8008ac4:	08008add 	.word	0x08008add
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008ac8:	6839      	ldr	r1, [r7, #0]
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9dc 	bl	8008e88 <USBD_GetDescriptor>
          break;
 8008ad0:	e022      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f000 fb3f 	bl	8009158 <USBD_SetAddress>
          break;
 8008ada:	e01d      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8008adc:	6839      	ldr	r1, [r7, #0]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f000 fb7e 	bl	80091e0 <USBD_SetConfig>
          break;
 8008ae4:	e018      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008ae6:	6839      	ldr	r1, [r7, #0]
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fc07 	bl	80092fc <USBD_GetConfig>
          break;
 8008aee:	e013      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc37 	bl	8009366 <USBD_GetStatus>
          break;
 8008af8:	e00e      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fc65 	bl	80093cc <USBD_SetFeature>
          break;
 8008b02:	e009      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fc74 	bl	80093f4 <USBD_ClrFeature>
          break;
 8008b0c:	e004      	b.n	8008b18 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8008b0e:	6839      	ldr	r1, [r7, #0]
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f000 fcca 	bl	80094aa <USBD_CtlError>
          break;
 8008b16:	bf00      	nop
      }
      break;
 8008b18:	e004      	b.n	8008b24 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fcc4 	bl	80094aa <USBD_CtlError>
      break;
 8008b22:	bf00      	nop
  }

  return ret;
 8008b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3710      	adds	r7, #16
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop

08008b30 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008b46:	2b40      	cmp	r3, #64	@ 0x40
 8008b48:	d005      	beq.n	8008b56 <USBD_StdItfReq+0x26>
 8008b4a:	2b40      	cmp	r3, #64	@ 0x40
 8008b4c:	d82e      	bhi.n	8008bac <USBD_StdItfReq+0x7c>
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d001      	beq.n	8008b56 <USBD_StdItfReq+0x26>
 8008b52:	2b20      	cmp	r3, #32
 8008b54:	d12a      	bne.n	8008bac <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	2b02      	cmp	r3, #2
 8008b60:	d81d      	bhi.n	8008b9e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	889b      	ldrh	r3, [r3, #4]
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d813      	bhi.n	8008b94 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	6839      	ldr	r1, [r7, #0]
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	88db      	ldrh	r3, [r3, #6]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d110      	bne.n	8008ba8 <USBD_StdItfReq+0x78>
 8008b86:	7bfb      	ldrb	r3, [r7, #15]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d10d      	bne.n	8008ba8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 fd55 	bl	800963c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008b92:	e009      	b.n	8008ba8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fc87 	bl	80094aa <USBD_CtlError>
          break;
 8008b9c:	e004      	b.n	8008ba8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8008b9e:	6839      	ldr	r1, [r7, #0]
 8008ba0:	6878      	ldr	r0, [r7, #4]
 8008ba2:	f000 fc82 	bl	80094aa <USBD_CtlError>
          break;
 8008ba6:	e000      	b.n	8008baa <USBD_StdItfReq+0x7a>
          break;
 8008ba8:	bf00      	nop
      }
      break;
 8008baa:	e004      	b.n	8008bb6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8008bac:	6839      	ldr	r1, [r7, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f000 fc7b 	bl	80094aa <USBD_CtlError>
      break;
 8008bb4:	bf00      	nop
  }

  return USBD_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	889b      	ldrh	r3, [r3, #4]
 8008bd2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008bdc:	2b40      	cmp	r3, #64	@ 0x40
 8008bde:	d007      	beq.n	8008bf0 <USBD_StdEPReq+0x30>
 8008be0:	2b40      	cmp	r3, #64	@ 0x40
 8008be2:	f200 8146 	bhi.w	8008e72 <USBD_StdEPReq+0x2b2>
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d00a      	beq.n	8008c00 <USBD_StdEPReq+0x40>
 8008bea:	2b20      	cmp	r3, #32
 8008bec:	f040 8141 	bne.w	8008e72 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	6839      	ldr	r1, [r7, #0]
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
      break;
 8008bfe:	e13d      	b.n	8008e7c <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	781b      	ldrb	r3, [r3, #0]
 8008c04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008c08:	2b20      	cmp	r3, #32
 8008c0a:	d10a      	bne.n	8008c22 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	4798      	blx	r3
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8008c1e:	7bfb      	ldrb	r3, [r7, #15]
 8008c20:	e12d      	b.n	8008e7e <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	785b      	ldrb	r3, [r3, #1]
 8008c26:	2b03      	cmp	r3, #3
 8008c28:	d007      	beq.n	8008c3a <USBD_StdEPReq+0x7a>
 8008c2a:	2b03      	cmp	r3, #3
 8008c2c:	f300 811b 	bgt.w	8008e66 <USBD_StdEPReq+0x2a6>
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d072      	beq.n	8008d1a <USBD_StdEPReq+0x15a>
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d03a      	beq.n	8008cae <USBD_StdEPReq+0xee>
 8008c38:	e115      	b.n	8008e66 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d002      	beq.n	8008c4a <USBD_StdEPReq+0x8a>
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d015      	beq.n	8008c74 <USBD_StdEPReq+0xb4>
 8008c48:	e02b      	b.n	8008ca2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c4a:	7bbb      	ldrb	r3, [r7, #14]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d00c      	beq.n	8008c6a <USBD_StdEPReq+0xaa>
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b80      	cmp	r3, #128	@ 0x80
 8008c54:	d009      	beq.n	8008c6a <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	4619      	mov	r1, r3
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f001 f80c 	bl	8009c78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008c60:	2180      	movs	r1, #128	@ 0x80
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 f808 	bl	8009c78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008c68:	e020      	b.n	8008cac <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fc1c 	bl	80094aa <USBD_CtlError>
              break;
 8008c72:	e01b      	b.n	8008cac <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	885b      	ldrh	r3, [r3, #2]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10e      	bne.n	8008c9a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d00b      	beq.n	8008c9a <USBD_StdEPReq+0xda>
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	2b80      	cmp	r3, #128	@ 0x80
 8008c86:	d008      	beq.n	8008c9a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	88db      	ldrh	r3, [r3, #6]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d104      	bne.n	8008c9a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008c90:	7bbb      	ldrb	r3, [r7, #14]
 8008c92:	4619      	mov	r1, r3
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f000 ffef 	bl	8009c78 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f000 fcce 	bl	800963c <USBD_CtlSendStatus>

              break;
 8008ca0:	e004      	b.n	8008cac <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008ca2:	6839      	ldr	r1, [r7, #0]
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f000 fc00 	bl	80094aa <USBD_CtlError>
              break;
 8008caa:	bf00      	nop
          }
          break;
 8008cac:	e0e0      	b.n	8008e70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d002      	beq.n	8008cbe <USBD_StdEPReq+0xfe>
 8008cb8:	2b03      	cmp	r3, #3
 8008cba:	d015      	beq.n	8008ce8 <USBD_StdEPReq+0x128>
 8008cbc:	e026      	b.n	8008d0c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cbe:	7bbb      	ldrb	r3, [r7, #14]
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00c      	beq.n	8008cde <USBD_StdEPReq+0x11e>
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b80      	cmp	r3, #128	@ 0x80
 8008cc8:	d009      	beq.n	8008cde <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	4619      	mov	r1, r3
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 ffd2 	bl	8009c78 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008cd4:	2180      	movs	r1, #128	@ 0x80
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 ffce 	bl	8009c78 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008cdc:	e01c      	b.n	8008d18 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8008cde:	6839      	ldr	r1, [r7, #0]
 8008ce0:	6878      	ldr	r0, [r7, #4]
 8008ce2:	f000 fbe2 	bl	80094aa <USBD_CtlError>
              break;
 8008ce6:	e017      	b.n	8008d18 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	885b      	ldrh	r3, [r3, #2]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d112      	bne.n	8008d16 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008cf0:	7bbb      	ldrb	r3, [r7, #14]
 8008cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d004      	beq.n	8008d04 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cfa:	7bbb      	ldrb	r3, [r7, #14]
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f000 ffd9 	bl	8009cb6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f000 fc99 	bl	800963c <USBD_CtlSendStatus>
              }
              break;
 8008d0a:	e004      	b.n	8008d16 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8008d0c:	6839      	ldr	r1, [r7, #0]
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	f000 fbcb 	bl	80094aa <USBD_CtlError>
              break;
 8008d14:	e000      	b.n	8008d18 <USBD_StdEPReq+0x158>
              break;
 8008d16:	bf00      	nop
          }
          break;
 8008d18:	e0aa      	b.n	8008e70 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d002      	beq.n	8008d2a <USBD_StdEPReq+0x16a>
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d032      	beq.n	8008d8e <USBD_StdEPReq+0x1ce>
 8008d28:	e097      	b.n	8008e5a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d2a:	7bbb      	ldrb	r3, [r7, #14]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d007      	beq.n	8008d40 <USBD_StdEPReq+0x180>
 8008d30:	7bbb      	ldrb	r3, [r7, #14]
 8008d32:	2b80      	cmp	r3, #128	@ 0x80
 8008d34:	d004      	beq.n	8008d40 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8008d36:	6839      	ldr	r1, [r7, #0]
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 fbb6 	bl	80094aa <USBD_CtlError>
                break;
 8008d3e:	e091      	b.n	8008e64 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	da0b      	bge.n	8008d60 <USBD_StdEPReq+0x1a0>
 8008d48:	7bbb      	ldrb	r3, [r7, #14]
 8008d4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008d4e:	4613      	mov	r3, r2
 8008d50:	009b      	lsls	r3, r3, #2
 8008d52:	4413      	add	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	3310      	adds	r3, #16
 8008d58:	687a      	ldr	r2, [r7, #4]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	e00b      	b.n	8008d78 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008d60:	7bbb      	ldrb	r3, [r7, #14]
 8008d62:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d66:	4613      	mov	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	4413      	add	r3, r2
 8008d6c:	009b      	lsls	r3, r3, #2
 8008d6e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	4413      	add	r3, r2
 8008d76:	3304      	adds	r3, #4
 8008d78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	2202      	movs	r2, #2
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fbfa 	bl	8009580 <USBD_CtlSendData>
              break;
 8008d8c:	e06a      	b.n	8008e64 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008d8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	da11      	bge.n	8008dba <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008d96:	7bbb      	ldrb	r3, [r7, #14]
 8008d98:	f003 020f 	and.w	r2, r3, #15
 8008d9c:	6879      	ldr	r1, [r7, #4]
 8008d9e:	4613      	mov	r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	4413      	add	r3, r2
 8008da4:	009b      	lsls	r3, r3, #2
 8008da6:	440b      	add	r3, r1
 8008da8:	3318      	adds	r3, #24
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d117      	bne.n	8008de0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008db0:	6839      	ldr	r1, [r7, #0]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fb79 	bl	80094aa <USBD_CtlError>
                  break;
 8008db8:	e054      	b.n	8008e64 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dba:	7bbb      	ldrb	r3, [r7, #14]
 8008dbc:	f003 020f 	and.w	r2, r3, #15
 8008dc0:	6879      	ldr	r1, [r7, #4]
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	440b      	add	r3, r1
 8008dcc:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008dd6:	6839      	ldr	r1, [r7, #0]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f000 fb66 	bl	80094aa <USBD_CtlError>
                  break;
 8008dde:	e041      	b.n	8008e64 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008de0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	da0b      	bge.n	8008e00 <USBD_StdEPReq+0x240>
 8008de8:	7bbb      	ldrb	r3, [r7, #14]
 8008dea:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008dee:	4613      	mov	r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	3310      	adds	r3, #16
 8008df8:	687a      	ldr	r2, [r7, #4]
 8008dfa:	4413      	add	r3, r2
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	e00b      	b.n	8008e18 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e06:	4613      	mov	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8008e12:	687a      	ldr	r2, [r7, #4]
 8008e14:	4413      	add	r3, r2
 8008e16:	3304      	adds	r3, #4
 8008e18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e1a:	7bbb      	ldrb	r3, [r7, #14]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <USBD_StdEPReq+0x266>
 8008e20:	7bbb      	ldrb	r3, [r7, #14]
 8008e22:	2b80      	cmp	r3, #128	@ 0x80
 8008e24:	d103      	bne.n	8008e2e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	601a      	str	r2, [r3, #0]
 8008e2c:	e00e      	b.n	8008e4c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	4619      	mov	r1, r3
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 ff5e 	bl	8009cf4 <USBD_LL_IsStallEP>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d003      	beq.n	8008e46 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2201      	movs	r2, #1
 8008e42:	601a      	str	r2, [r3, #0]
 8008e44:	e002      	b.n	8008e4c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8008e46:	68bb      	ldr	r3, [r7, #8]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	2202      	movs	r2, #2
 8008e50:	4619      	mov	r1, r3
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fb94 	bl	8009580 <USBD_CtlSendData>
              break;
 8008e58:	e004      	b.n	8008e64 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8008e5a:	6839      	ldr	r1, [r7, #0]
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f000 fb24 	bl	80094aa <USBD_CtlError>
              break;
 8008e62:	bf00      	nop
          }
          break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fb1e 	bl	80094aa <USBD_CtlError>
          break;
 8008e6e:	bf00      	nop
      }
      break;
 8008e70:	e004      	b.n	8008e7c <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fb18 	bl	80094aa <USBD_CtlError>
      break;
 8008e7a:	bf00      	nop
  }

  return ret;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3710      	adds	r7, #16
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
	...

08008e88 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b084      	sub	sp, #16
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
 8008e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	885b      	ldrh	r3, [r3, #2]
 8008ea2:	0a1b      	lsrs	r3, r3, #8
 8008ea4:	b29b      	uxth	r3, r3
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	2b06      	cmp	r3, #6
 8008eaa:	f200 8128 	bhi.w	80090fe <USBD_GetDescriptor+0x276>
 8008eae:	a201      	add	r2, pc, #4	@ (adr r2, 8008eb4 <USBD_GetDescriptor+0x2c>)
 8008eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb4:	08008ed1 	.word	0x08008ed1
 8008eb8:	08008ee9 	.word	0x08008ee9
 8008ebc:	08008f29 	.word	0x08008f29
 8008ec0:	080090ff 	.word	0x080090ff
 8008ec4:	080090ff 	.word	0x080090ff
 8008ec8:	0800909f 	.word	0x0800909f
 8008ecc:	080090cb 	.word	0x080090cb
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	687a      	ldr	r2, [r7, #4]
 8008eda:	7c12      	ldrb	r2, [r2, #16]
 8008edc:	f107 0108 	add.w	r1, r7, #8
 8008ee0:	4610      	mov	r0, r2
 8008ee2:	4798      	blx	r3
 8008ee4:	60f8      	str	r0, [r7, #12]
      break;
 8008ee6:	e112      	b.n	800910e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	7c1b      	ldrb	r3, [r3, #16]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d10d      	bne.n	8008f0c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008ef6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ef8:	f107 0208 	add.w	r2, r7, #8
 8008efc:	4610      	mov	r0, r2
 8008efe:	4798      	blx	r3
 8008f00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	3301      	adds	r3, #1
 8008f06:	2202      	movs	r2, #2
 8008f08:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008f0a:	e100      	b.n	800910e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f14:	f107 0208 	add.w	r2, r7, #8
 8008f18:	4610      	mov	r0, r2
 8008f1a:	4798      	blx	r3
 8008f1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	3301      	adds	r3, #1
 8008f22:	2202      	movs	r2, #2
 8008f24:	701a      	strb	r2, [r3, #0]
      break;
 8008f26:	e0f2      	b.n	800910e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	885b      	ldrh	r3, [r3, #2]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	2b05      	cmp	r3, #5
 8008f30:	f200 80ac 	bhi.w	800908c <USBD_GetDescriptor+0x204>
 8008f34:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <USBD_GetDescriptor+0xb4>)
 8008f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3a:	bf00      	nop
 8008f3c:	08008f55 	.word	0x08008f55
 8008f40:	08008f89 	.word	0x08008f89
 8008f44:	08008fbd 	.word	0x08008fbd
 8008f48:	08008ff1 	.word	0x08008ff1
 8008f4c:	08009025 	.word	0x08009025
 8008f50:	08009059 	.word	0x08009059
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d00b      	beq.n	8008f78 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	687a      	ldr	r2, [r7, #4]
 8008f6a:	7c12      	ldrb	r2, [r2, #16]
 8008f6c:	f107 0108 	add.w	r1, r7, #8
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
 8008f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008f76:	e091      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fa95 	bl	80094aa <USBD_CtlError>
            err++;
 8008f80:	7afb      	ldrb	r3, [r7, #11]
 8008f82:	3301      	adds	r3, #1
 8008f84:	72fb      	strb	r3, [r7, #11]
          break;
 8008f86:	e089      	b.n	800909c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	687a      	ldr	r2, [r7, #4]
 8008f9e:	7c12      	ldrb	r2, [r2, #16]
 8008fa0:	f107 0108 	add.w	r1, r7, #8
 8008fa4:	4610      	mov	r0, r2
 8008fa6:	4798      	blx	r3
 8008fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008faa:	e077      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fac:	6839      	ldr	r1, [r7, #0]
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 fa7b 	bl	80094aa <USBD_CtlError>
            err++;
 8008fb4:	7afb      	ldrb	r3, [r7, #11]
 8008fb6:	3301      	adds	r3, #1
 8008fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8008fba:	e06f      	b.n	800909c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fc2:	68db      	ldr	r3, [r3, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00b      	beq.n	8008fe0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	7c12      	ldrb	r2, [r2, #16]
 8008fd4:	f107 0108 	add.w	r1, r7, #8
 8008fd8:	4610      	mov	r0, r2
 8008fda:	4798      	blx	r3
 8008fdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008fde:	e05d      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fa61 	bl	80094aa <USBD_CtlError>
            err++;
 8008fe8:	7afb      	ldrb	r3, [r7, #11]
 8008fea:	3301      	adds	r3, #1
 8008fec:	72fb      	strb	r3, [r7, #11]
          break;
 8008fee:	e055      	b.n	800909c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8008ff6:	691b      	ldr	r3, [r3, #16]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d00b      	beq.n	8009014 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	687a      	ldr	r2, [r7, #4]
 8009006:	7c12      	ldrb	r2, [r2, #16]
 8009008:	f107 0108 	add.w	r1, r7, #8
 800900c:	4610      	mov	r0, r2
 800900e:	4798      	blx	r3
 8009010:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009012:	e043      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009014:	6839      	ldr	r1, [r7, #0]
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa47 	bl	80094aa <USBD_CtlError>
            err++;
 800901c:	7afb      	ldrb	r3, [r7, #11]
 800901e:	3301      	adds	r3, #1
 8009020:	72fb      	strb	r3, [r7, #11]
          break;
 8009022:	e03b      	b.n	800909c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800902a:	695b      	ldr	r3, [r3, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d00b      	beq.n	8009048 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	7c12      	ldrb	r2, [r2, #16]
 800903c:	f107 0108 	add.w	r1, r7, #8
 8009040:	4610      	mov	r0, r2
 8009042:	4798      	blx	r3
 8009044:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009046:	e029      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009048:	6839      	ldr	r1, [r7, #0]
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fa2d 	bl	80094aa <USBD_CtlError>
            err++;
 8009050:	7afb      	ldrb	r3, [r7, #11]
 8009052:	3301      	adds	r3, #1
 8009054:	72fb      	strb	r3, [r7, #11]
          break;
 8009056:	e021      	b.n	800909c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d00b      	beq.n	800907c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	687a      	ldr	r2, [r7, #4]
 800906e:	7c12      	ldrb	r2, [r2, #16]
 8009070:	f107 0108 	add.w	r1, r7, #8
 8009074:	4610      	mov	r0, r2
 8009076:	4798      	blx	r3
 8009078:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800907a:	e00f      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fa13 	bl	80094aa <USBD_CtlError>
            err++;
 8009084:	7afb      	ldrb	r3, [r7, #11]
 8009086:	3301      	adds	r3, #1
 8009088:	72fb      	strb	r3, [r7, #11]
          break;
 800908a:	e007      	b.n	800909c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800908c:	6839      	ldr	r1, [r7, #0]
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa0b 	bl	80094aa <USBD_CtlError>
          err++;
 8009094:	7afb      	ldrb	r3, [r7, #11]
 8009096:	3301      	adds	r3, #1
 8009098:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800909a:	e038      	b.n	800910e <USBD_GetDescriptor+0x286>
 800909c:	e037      	b.n	800910e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7c1b      	ldrb	r3, [r3, #16]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d109      	bne.n	80090ba <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80090ae:	f107 0208 	add.w	r2, r7, #8
 80090b2:	4610      	mov	r0, r2
 80090b4:	4798      	blx	r3
 80090b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090b8:	e029      	b.n	800910e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ba:	6839      	ldr	r1, [r7, #0]
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 f9f4 	bl	80094aa <USBD_CtlError>
        err++;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
 80090c4:	3301      	adds	r3, #1
 80090c6:	72fb      	strb	r3, [r7, #11]
      break;
 80090c8:	e021      	b.n	800910e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	7c1b      	ldrb	r3, [r3, #16]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d10d      	bne.n	80090ee <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	f107 0208 	add.w	r2, r7, #8
 80090de:	4610      	mov	r0, r2
 80090e0:	4798      	blx	r3
 80090e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	3301      	adds	r3, #1
 80090e8:	2207      	movs	r2, #7
 80090ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090ec:	e00f      	b.n	800910e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80090ee:	6839      	ldr	r1, [r7, #0]
 80090f0:	6878      	ldr	r0, [r7, #4]
 80090f2:	f000 f9da 	bl	80094aa <USBD_CtlError>
        err++;
 80090f6:	7afb      	ldrb	r3, [r7, #11]
 80090f8:	3301      	adds	r3, #1
 80090fa:	72fb      	strb	r3, [r7, #11]
      break;
 80090fc:	e007      	b.n	800910e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80090fe:	6839      	ldr	r1, [r7, #0]
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f9d2 	bl	80094aa <USBD_CtlError>
      err++;
 8009106:	7afb      	ldrb	r3, [r7, #11]
 8009108:	3301      	adds	r3, #1
 800910a:	72fb      	strb	r3, [r7, #11]
      break;
 800910c:	bf00      	nop
  }

  if (err != 0U)
 800910e:	7afb      	ldrb	r3, [r7, #11]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d11c      	bne.n	800914e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8009114:	893b      	ldrh	r3, [r7, #8]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d011      	beq.n	800913e <USBD_GetDescriptor+0x2b6>
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	88db      	ldrh	r3, [r3, #6]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d00d      	beq.n	800913e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	88da      	ldrh	r2, [r3, #6]
 8009126:	893b      	ldrh	r3, [r7, #8]
 8009128:	4293      	cmp	r3, r2
 800912a:	bf28      	it	cs
 800912c:	4613      	movcs	r3, r2
 800912e:	b29b      	uxth	r3, r3
 8009130:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009132:	893b      	ldrh	r3, [r7, #8]
 8009134:	461a      	mov	r2, r3
 8009136:	68f9      	ldr	r1, [r7, #12]
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 fa21 	bl	8009580 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	88db      	ldrh	r3, [r3, #6]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d104      	bne.n	8009150 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa78 	bl	800963c <USBD_CtlSendStatus>
 800914c:	e000      	b.n	8009150 <USBD_GetDescriptor+0x2c8>
    return;
 800914e:	bf00      	nop
    }
  }
}
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop

08009158 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b084      	sub	sp, #16
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009162:	683b      	ldr	r3, [r7, #0]
 8009164:	889b      	ldrh	r3, [r3, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d130      	bne.n	80091cc <USBD_SetAddress+0x74>
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	88db      	ldrh	r3, [r3, #6]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d12c      	bne.n	80091cc <USBD_SetAddress+0x74>
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	885b      	ldrh	r3, [r3, #2]
 8009176:	2b7f      	cmp	r3, #127	@ 0x7f
 8009178:	d828      	bhi.n	80091cc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	885b      	ldrh	r3, [r3, #2]
 800917e:	b2db      	uxtb	r3, r3
 8009180:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009184:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800918c:	2b03      	cmp	r3, #3
 800918e:	d104      	bne.n	800919a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009190:	6839      	ldr	r1, [r7, #0]
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	f000 f989 	bl	80094aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009198:	e01d      	b.n	80091d6 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	7bfa      	ldrb	r2, [r7, #15]
 800919e:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091a2:	7bfb      	ldrb	r3, [r7, #15]
 80091a4:	4619      	mov	r1, r3
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fdd0 	bl	8009d4c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 fa45 	bl	800963c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d004      	beq.n	80091c2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2202      	movs	r2, #2
 80091bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091c0:	e009      	b.n	80091d6 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091ca:	e004      	b.n	80091d6 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f000 f96b 	bl	80094aa <USBD_CtlError>
  }
}
 80091d4:	bf00      	nop
 80091d6:	bf00      	nop
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b082      	sub	sp, #8
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
 80091e8:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	b2da      	uxtb	r2, r3
 80091f0:	4b41      	ldr	r3, [pc, #260]	@ (80092f8 <USBD_SetConfig+0x118>)
 80091f2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80091f4:	4b40      	ldr	r3, [pc, #256]	@ (80092f8 <USBD_SetConfig+0x118>)
 80091f6:	781b      	ldrb	r3, [r3, #0]
 80091f8:	2b01      	cmp	r3, #1
 80091fa:	d904      	bls.n	8009206 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 f953 	bl	80094aa <USBD_CtlError>
 8009204:	e075      	b.n	80092f2 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800920c:	2b02      	cmp	r3, #2
 800920e:	d002      	beq.n	8009216 <USBD_SetConfig+0x36>
 8009210:	2b03      	cmp	r3, #3
 8009212:	d023      	beq.n	800925c <USBD_SetConfig+0x7c>
 8009214:	e062      	b.n	80092dc <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8009216:	4b38      	ldr	r3, [pc, #224]	@ (80092f8 <USBD_SetConfig+0x118>)
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	2b00      	cmp	r3, #0
 800921c:	d01a      	beq.n	8009254 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800921e:	4b36      	ldr	r3, [pc, #216]	@ (80092f8 <USBD_SetConfig+0x118>)
 8009220:	781b      	ldrb	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2203      	movs	r2, #3
 800922c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8009230:	4b31      	ldr	r3, [pc, #196]	@ (80092f8 <USBD_SetConfig+0x118>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	4619      	mov	r1, r3
 8009236:	6878      	ldr	r0, [r7, #4]
 8009238:	f7ff f9e5 	bl	8008606 <USBD_SetClassConfig>
 800923c:	4603      	mov	r3, r0
 800923e:	2b02      	cmp	r3, #2
 8009240:	d104      	bne.n	800924c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f930 	bl	80094aa <USBD_CtlError>
            return;
 800924a:	e052      	b.n	80092f2 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f9f5 	bl	800963c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009252:	e04e      	b.n	80092f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 f9f1 	bl	800963c <USBD_CtlSendStatus>
        break;
 800925a:	e04a      	b.n	80092f2 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800925c:	4b26      	ldr	r3, [pc, #152]	@ (80092f8 <USBD_SetConfig+0x118>)
 800925e:	781b      	ldrb	r3, [r3, #0]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d112      	bne.n	800928a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2202      	movs	r2, #2
 8009268:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800926c:	4b22      	ldr	r3, [pc, #136]	@ (80092f8 <USBD_SetConfig+0x118>)
 800926e:	781b      	ldrb	r3, [r3, #0]
 8009270:	461a      	mov	r2, r3
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8009276:	4b20      	ldr	r3, [pc, #128]	@ (80092f8 <USBD_SetConfig+0x118>)
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f7ff f9e1 	bl	8008644 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 f9da 	bl	800963c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8009288:	e033      	b.n	80092f2 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800928a:	4b1b      	ldr	r3, [pc, #108]	@ (80092f8 <USBD_SetConfig+0x118>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d01d      	beq.n	80092d4 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	b2db      	uxtb	r3, r3
 800929e:	4619      	mov	r1, r3
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f7ff f9cf 	bl	8008644 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80092a6:	4b14      	ldr	r3, [pc, #80]	@ (80092f8 <USBD_SetConfig+0x118>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80092b0:	4b11      	ldr	r3, [pc, #68]	@ (80092f8 <USBD_SetConfig+0x118>)
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f9a5 	bl	8008606 <USBD_SetClassConfig>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d104      	bne.n	80092cc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80092c2:	6839      	ldr	r1, [r7, #0]
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 f8f0 	bl	80094aa <USBD_CtlError>
            return;
 80092ca:	e012      	b.n	80092f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f000 f9b5 	bl	800963c <USBD_CtlSendStatus>
        break;
 80092d2:	e00e      	b.n	80092f2 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 f9b1 	bl	800963c <USBD_CtlSendStatus>
        break;
 80092da:	e00a      	b.n	80092f2 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f8e3 	bl	80094aa <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80092e4:	4b04      	ldr	r3, [pc, #16]	@ (80092f8 <USBD_SetConfig+0x118>)
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	4619      	mov	r1, r3
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff f9aa 	bl	8008644 <USBD_ClrClassConfig>
        break;
 80092f0:	bf00      	nop
    }
  }
}
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}
 80092f8:	20000330 	.word	0x20000330

080092fc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b082      	sub	sp, #8
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	88db      	ldrh	r3, [r3, #6]
 800930a:	2b01      	cmp	r3, #1
 800930c:	d004      	beq.n	8009318 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f000 f8ca 	bl	80094aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009316:	e022      	b.n	800935e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800931e:	2b02      	cmp	r3, #2
 8009320:	dc02      	bgt.n	8009328 <USBD_GetConfig+0x2c>
 8009322:	2b00      	cmp	r3, #0
 8009324:	dc03      	bgt.n	800932e <USBD_GetConfig+0x32>
 8009326:	e015      	b.n	8009354 <USBD_GetConfig+0x58>
 8009328:	2b03      	cmp	r3, #3
 800932a:	d00b      	beq.n	8009344 <USBD_GetConfig+0x48>
 800932c:	e012      	b.n	8009354 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	3308      	adds	r3, #8
 8009338:	2201      	movs	r2, #1
 800933a:	4619      	mov	r1, r3
 800933c:	6878      	ldr	r0, [r7, #4]
 800933e:	f000 f91f 	bl	8009580 <USBD_CtlSendData>
        break;
 8009342:	e00c      	b.n	800935e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	3304      	adds	r3, #4
 8009348:	2201      	movs	r2, #1
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 f917 	bl	8009580 <USBD_CtlSendData>
        break;
 8009352:	e004      	b.n	800935e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8009354:	6839      	ldr	r1, [r7, #0]
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f8a7 	bl	80094aa <USBD_CtlError>
        break;
 800935c:	bf00      	nop
}
 800935e:	bf00      	nop
 8009360:	3708      	adds	r7, #8
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
 800936c:	6078      	str	r0, [r7, #4]
 800936e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009376:	3b01      	subs	r3, #1
 8009378:	2b02      	cmp	r3, #2
 800937a:	d81e      	bhi.n	80093ba <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	88db      	ldrh	r3, [r3, #6]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d004      	beq.n	800938e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8009384:	6839      	ldr	r1, [r7, #0]
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 f88f 	bl	80094aa <USBD_CtlError>
        break;
 800938c:	e01a      	b.n	80093c4 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800939a:	2b00      	cmp	r3, #0
 800939c:	d005      	beq.n	80093aa <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68db      	ldr	r3, [r3, #12]
 80093a2:	f043 0202 	orr.w	r2, r3, #2
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	330c      	adds	r3, #12
 80093ae:	2202      	movs	r2, #2
 80093b0:	4619      	mov	r1, r3
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f8e4 	bl	8009580 <USBD_CtlSendData>
      break;
 80093b8:	e004      	b.n	80093c4 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f874 	bl	80094aa <USBD_CtlError>
      break;
 80093c2:	bf00      	nop
  }
}
 80093c4:	bf00      	nop
 80093c6:	3708      	adds	r7, #8
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}

080093cc <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	885b      	ldrh	r3, [r3, #2]
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d106      	bne.n	80093ec <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2201      	movs	r2, #1
 80093e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 80093e6:	6878      	ldr	r0, [r7, #4]
 80093e8:	f000 f928 	bl	800963c <USBD_CtlSendStatus>
  }
}
 80093ec:	bf00      	nop
 80093ee:	3708      	adds	r7, #8
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}

080093f4 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009404:	3b01      	subs	r3, #1
 8009406:	2b02      	cmp	r3, #2
 8009408:	d80b      	bhi.n	8009422 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	885b      	ldrh	r3, [r3, #2]
 800940e:	2b01      	cmp	r3, #1
 8009410:	d10c      	bne.n	800942c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 f90e 	bl	800963c <USBD_CtlSendStatus>
      }
      break;
 8009420:	e004      	b.n	800942c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009422:	6839      	ldr	r1, [r7, #0]
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f840 	bl	80094aa <USBD_CtlError>
      break;
 800942a:	e000      	b.n	800942e <USBD_ClrFeature+0x3a>
      break;
 800942c:	bf00      	nop
  }
}
 800942e:	bf00      	nop
 8009430:	3708      	adds	r7, #8
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009436:	b480      	push	{r7}
 8009438:	b083      	sub	sp, #12
 800943a:	af00      	add	r7, sp, #0
 800943c:	6078      	str	r0, [r7, #4]
 800943e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	781a      	ldrb	r2, [r3, #0]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	785a      	ldrb	r2, [r3, #1]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	3302      	adds	r3, #2
 8009454:	781b      	ldrb	r3, [r3, #0]
 8009456:	461a      	mov	r2, r3
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	3303      	adds	r3, #3
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	021b      	lsls	r3, r3, #8
 8009460:	b29b      	uxth	r3, r3
 8009462:	4413      	add	r3, r2
 8009464:	b29a      	uxth	r2, r3
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	3304      	adds	r3, #4
 800946e:	781b      	ldrb	r3, [r3, #0]
 8009470:	461a      	mov	r2, r3
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	3305      	adds	r3, #5
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	b29b      	uxth	r3, r3
 800947c:	4413      	add	r3, r2
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	3306      	adds	r3, #6
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	461a      	mov	r2, r3
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	3307      	adds	r3, #7
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	021b      	lsls	r3, r3, #8
 8009494:	b29b      	uxth	r3, r3
 8009496:	4413      	add	r3, r2
 8009498:	b29a      	uxth	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	80da      	strh	r2, [r3, #6]

}
 800949e:	bf00      	nop
 80094a0:	370c      	adds	r7, #12
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80094b4:	2180      	movs	r1, #128	@ 0x80
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f000 fbde 	bl	8009c78 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80094bc:	2100      	movs	r1, #0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fbda 	bl	8009c78 <USBD_LL_StallEP>
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}

080094cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	60f8      	str	r0, [r7, #12]
 80094d4:	60b9      	str	r1, [r7, #8]
 80094d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80094d8:	2300      	movs	r3, #0
 80094da:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d032      	beq.n	8009548 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80094e2:	68f8      	ldr	r0, [r7, #12]
 80094e4:	f000 f834 	bl	8009550 <USBD_GetLen>
 80094e8:	4603      	mov	r3, r0
 80094ea:	3301      	adds	r3, #1
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	005b      	lsls	r3, r3, #1
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80094f6:	7dfb      	ldrb	r3, [r7, #23]
 80094f8:	1c5a      	adds	r2, r3, #1
 80094fa:	75fa      	strb	r2, [r7, #23]
 80094fc:	461a      	mov	r2, r3
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4413      	add	r3, r2
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8009508:	7dfb      	ldrb	r3, [r7, #23]
 800950a:	1c5a      	adds	r2, r3, #1
 800950c:	75fa      	strb	r2, [r7, #23]
 800950e:	461a      	mov	r2, r3
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	4413      	add	r3, r2
 8009514:	2203      	movs	r2, #3
 8009516:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8009518:	e012      	b.n	8009540 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	1c5a      	adds	r2, r3, #1
 800951e:	60fa      	str	r2, [r7, #12]
 8009520:	7dfa      	ldrb	r2, [r7, #23]
 8009522:	1c51      	adds	r1, r2, #1
 8009524:	75f9      	strb	r1, [r7, #23]
 8009526:	4611      	mov	r1, r2
 8009528:	68ba      	ldr	r2, [r7, #8]
 800952a:	440a      	add	r2, r1
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	1c5a      	adds	r2, r3, #1
 8009534:	75fa      	strb	r2, [r7, #23]
 8009536:	461a      	mov	r2, r3
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4413      	add	r3, r2
 800953c:	2200      	movs	r2, #0
 800953e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	781b      	ldrb	r3, [r3, #0]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d1e8      	bne.n	800951a <USBD_GetString+0x4e>
    }
  }
}
 8009548:	bf00      	nop
 800954a:	3718      	adds	r7, #24
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800955c:	e005      	b.n	800956a <USBD_GetLen+0x1a>
  {
    len++;
 800955e:	7bfb      	ldrb	r3, [r7, #15]
 8009560:	3301      	adds	r3, #1
 8009562:	73fb      	strb	r3, [r7, #15]
    buf++;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	3301      	adds	r3, #1
 8009568:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d1f5      	bne.n	800955e <USBD_GetLen+0xe>
  }

  return len;
 8009572:	7bfb      	ldrb	r3, [r7, #15]
}
 8009574:	4618      	mov	r0, r3
 8009576:	3714      	adds	r7, #20
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	4613      	mov	r3, r2
 800958c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2202      	movs	r2, #2
 8009592:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009596:	88fa      	ldrh	r2, [r7, #6]
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800959c:	88fa      	ldrh	r2, [r7, #6]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095a2:	88fb      	ldrh	r3, [r7, #6]
 80095a4:	68ba      	ldr	r2, [r7, #8]
 80095a6:	2100      	movs	r1, #0
 80095a8:	68f8      	ldr	r0, [r7, #12]
 80095aa:	f000 fbee 	bl	8009d8a <USBD_LL_Transmit>

  return USBD_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3710      	adds	r7, #16
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	60f8      	str	r0, [r7, #12]
 80095c0:	60b9      	str	r1, [r7, #8]
 80095c2:	4613      	mov	r3, r2
 80095c4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095c6:	88fb      	ldrh	r3, [r7, #6]
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	2100      	movs	r1, #0
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 fbdc 	bl	8009d8a <USBD_LL_Transmit>

  return USBD_OK;
 80095d2:	2300      	movs	r3, #0
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3710      	adds	r7, #16
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b084      	sub	sp, #16
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2203      	movs	r2, #3
 80095ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80095f2:	88fa      	ldrh	r2, [r7, #6]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 80095fa:	88fa      	ldrh	r2, [r7, #6]
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009602:	88fb      	ldrh	r3, [r7, #6]
 8009604:	68ba      	ldr	r2, [r7, #8]
 8009606:	2100      	movs	r1, #0
 8009608:	68f8      	ldr	r0, [r7, #12]
 800960a:	f000 fbe1 	bl	8009dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800960e:	2300      	movs	r3, #0
}
 8009610:	4618      	mov	r0, r3
 8009612:	3710      	adds	r7, #16
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b084      	sub	sp, #16
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	60b9      	str	r1, [r7, #8]
 8009622:	4613      	mov	r3, r2
 8009624:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009626:	88fb      	ldrh	r3, [r7, #6]
 8009628:	68ba      	ldr	r2, [r7, #8]
 800962a:	2100      	movs	r1, #0
 800962c:	68f8      	ldr	r0, [r7, #12]
 800962e:	f000 fbcf 	bl	8009dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2204      	movs	r2, #4
 8009648:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800964c:	2300      	movs	r3, #0
 800964e:	2200      	movs	r2, #0
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 fb99 	bl	8009d8a <USBD_LL_Transmit>

  return USBD_OK;
 8009658:	2300      	movs	r3, #0
}
 800965a:	4618      	mov	r0, r3
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b082      	sub	sp, #8
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2205      	movs	r2, #5
 800966e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009672:	2300      	movs	r3, #0
 8009674:	2200      	movs	r2, #0
 8009676:	2100      	movs	r1, #0
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f000 fba9 	bl	8009dd0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800968c:	2200      	movs	r2, #0
 800968e:	4912      	ldr	r1, [pc, #72]	@ (80096d8 <MX_USB_DEVICE_Init+0x50>)
 8009690:	4812      	ldr	r0, [pc, #72]	@ (80096dc <MX_USB_DEVICE_Init+0x54>)
 8009692:	f7fe ff5c 	bl	800854e <USBD_Init>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800969c:	f7f7 f8c4 	bl	8000828 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 80096a0:	490f      	ldr	r1, [pc, #60]	@ (80096e0 <MX_USB_DEVICE_Init+0x58>)
 80096a2:	480e      	ldr	r0, [pc, #56]	@ (80096dc <MX_USB_DEVICE_Init+0x54>)
 80096a4:	f7fe ff7e 	bl	80085a4 <USBD_RegisterClass>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d001      	beq.n	80096b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096ae:	f7f7 f8bb 	bl	8000828 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 80096b2:	490c      	ldr	r1, [pc, #48]	@ (80096e4 <MX_USB_DEVICE_Init+0x5c>)
 80096b4:	4809      	ldr	r0, [pc, #36]	@ (80096dc <MX_USB_DEVICE_Init+0x54>)
 80096b6:	f7fe ff33 	bl	8008520 <USBD_CUSTOM_HID_RegisterInterface>
 80096ba:	4603      	mov	r3, r0
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d001      	beq.n	80096c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096c0:	f7f7 f8b2 	bl	8000828 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80096c4:	4805      	ldr	r0, [pc, #20]	@ (80096dc <MX_USB_DEVICE_Init+0x54>)
 80096c6:	f7fe ff87 	bl	80085d8 <USBD_Start>
 80096ca:	4603      	mov	r3, r0
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d001      	beq.n	80096d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80096d0:	f7f7 f8aa 	bl	8000828 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80096d4:	bf00      	nop
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000120 	.word	0x20000120
 80096dc:	20000334 	.word	0x20000334
 80096e0:	2000000c 	.word	0x2000000c
 80096e4:	20000110 	.word	0x20000110

080096e8 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80096e8:	b480      	push	{r7}
 80096ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80096ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80096fc:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80096fe:	4618      	mov	r0, r3
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	4603      	mov	r3, r0
 8009710:	460a      	mov	r2, r1
 8009712:	71fb      	strb	r3, [r7, #7]
 8009714:	4613      	mov	r3, r2
 8009716:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 8009718:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009728:	b480      	push	{r7}
 800972a:	b083      	sub	sp, #12
 800972c:	af00      	add	r7, sp, #0
 800972e:	4603      	mov	r3, r0
 8009730:	6039      	str	r1, [r7, #0]
 8009732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	2212      	movs	r2, #18
 8009738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800973a:	4b03      	ldr	r3, [pc, #12]	@ (8009748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800973c:	4618      	mov	r0, r3
 800973e:	370c      	adds	r7, #12
 8009740:	46bd      	mov	sp, r7
 8009742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009746:	4770      	bx	lr
 8009748:	2000013c 	.word	0x2000013c

0800974c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	4603      	mov	r3, r0
 8009754:	6039      	str	r1, [r7, #0]
 8009756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	2204      	movs	r2, #4
 800975c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800975e:	4b03      	ldr	r3, [pc, #12]	@ (800976c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009760:	4618      	mov	r0, r3
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	20000150 	.word	0x20000150

08009770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	4603      	mov	r3, r0
 8009778:	6039      	str	r1, [r7, #0]
 800977a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800977c:	79fb      	ldrb	r3, [r7, #7]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d105      	bne.n	800978e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009782:	683a      	ldr	r2, [r7, #0]
 8009784:	4907      	ldr	r1, [pc, #28]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009786:	4808      	ldr	r0, [pc, #32]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009788:	f7ff fea0 	bl	80094cc <USBD_GetString>
 800978c:	e004      	b.n	8009798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800978e:	683a      	ldr	r2, [r7, #0]
 8009790:	4904      	ldr	r1, [pc, #16]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009792:	4805      	ldr	r0, [pc, #20]	@ (80097a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009794:	f7ff fe9a 	bl	80094cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009798:	4b02      	ldr	r3, [pc, #8]	@ (80097a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800979a:	4618      	mov	r0, r3
 800979c:	3708      	adds	r7, #8
 800979e:	46bd      	mov	sp, r7
 80097a0:	bd80      	pop	{r7, pc}
 80097a2:	bf00      	nop
 80097a4:	200005f8 	.word	0x200005f8
 80097a8:	08009f28 	.word	0x08009f28

080097ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b082      	sub	sp, #8
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097b8:	683a      	ldr	r2, [r7, #0]
 80097ba:	4904      	ldr	r1, [pc, #16]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097bc:	4804      	ldr	r0, [pc, #16]	@ (80097d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097be:	f7ff fe85 	bl	80094cc <USBD_GetString>
  return USBD_StrDesc;
 80097c2:	4b02      	ldr	r3, [pc, #8]	@ (80097cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3708      	adds	r7, #8
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}
 80097cc:	200005f8 	.word	0x200005f8
 80097d0:	08009f48 	.word	0x08009f48

080097d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
 80097da:	4603      	mov	r3, r0
 80097dc:	6039      	str	r1, [r7, #0]
 80097de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	221a      	movs	r2, #26
 80097e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097e6:	f000 f843 	bl	8009870 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097ea:	4b02      	ldr	r3, [pc, #8]	@ (80097f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}
 80097f4:	20000154 	.word	0x20000154

080097f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b082      	sub	sp, #8
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	4603      	mov	r3, r0
 8009800:	6039      	str	r1, [r7, #0]
 8009802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009804:	79fb      	ldrb	r3, [r7, #7]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d105      	bne.n	8009816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800980a:	683a      	ldr	r2, [r7, #0]
 800980c:	4907      	ldr	r1, [pc, #28]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800980e:	4808      	ldr	r0, [pc, #32]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009810:	f7ff fe5c 	bl	80094cc <USBD_GetString>
 8009814:	e004      	b.n	8009820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4904      	ldr	r1, [pc, #16]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981a:	4805      	ldr	r0, [pc, #20]	@ (8009830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800981c:	f7ff fe56 	bl	80094cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009822:	4618      	mov	r0, r3
 8009824:	3708      	adds	r7, #8
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	200005f8 	.word	0x200005f8
 8009830:	08009f5c 	.word	0x08009f5c

08009834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	4603      	mov	r3, r0
 800983c:	6039      	str	r1, [r7, #0]
 800983e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009840:	79fb      	ldrb	r3, [r7, #7]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d105      	bne.n	8009852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4907      	ldr	r1, [pc, #28]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800984a:	4808      	ldr	r0, [pc, #32]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800984c:	f7ff fe3e 	bl	80094cc <USBD_GetString>
 8009850:	e004      	b.n	800985c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009852:	683a      	ldr	r2, [r7, #0]
 8009854:	4904      	ldr	r1, [pc, #16]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009856:	4805      	ldr	r0, [pc, #20]	@ (800986c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009858:	f7ff fe38 	bl	80094cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800985c:	4b02      	ldr	r3, [pc, #8]	@ (8009868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800985e:	4618      	mov	r0, r3
 8009860:	3708      	adds	r7, #8
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}
 8009866:	bf00      	nop
 8009868:	200005f8 	.word	0x200005f8
 800986c:	08009f70 	.word	0x08009f70

08009870 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009876:	4b0f      	ldr	r3, [pc, #60]	@ (80098b4 <Get_SerialNum+0x44>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800987c:	4b0e      	ldr	r3, [pc, #56]	@ (80098b8 <Get_SerialNum+0x48>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009882:	4b0e      	ldr	r3, [pc, #56]	@ (80098bc <Get_SerialNum+0x4c>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d009      	beq.n	80098aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009896:	2208      	movs	r2, #8
 8009898:	4909      	ldr	r1, [pc, #36]	@ (80098c0 <Get_SerialNum+0x50>)
 800989a:	68f8      	ldr	r0, [r7, #12]
 800989c:	f000 f814 	bl	80098c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098a0:	2204      	movs	r2, #4
 80098a2:	4908      	ldr	r1, [pc, #32]	@ (80098c4 <Get_SerialNum+0x54>)
 80098a4:	68b8      	ldr	r0, [r7, #8]
 80098a6:	f000 f80f 	bl	80098c8 <IntToUnicode>
  }
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	bf00      	nop
 80098b4:	1ffff7ac 	.word	0x1ffff7ac
 80098b8:	1ffff7b0 	.word	0x1ffff7b0
 80098bc:	1ffff7b4 	.word	0x1ffff7b4
 80098c0:	20000156 	.word	0x20000156
 80098c4:	20000166 	.word	0x20000166

080098c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098c8:	b480      	push	{r7}
 80098ca:	b087      	sub	sp, #28
 80098cc:	af00      	add	r7, sp, #0
 80098ce:	60f8      	str	r0, [r7, #12]
 80098d0:	60b9      	str	r1, [r7, #8]
 80098d2:	4613      	mov	r3, r2
 80098d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098d6:	2300      	movs	r3, #0
 80098d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098da:	2300      	movs	r3, #0
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e027      	b.n	8009930 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	0f1b      	lsrs	r3, r3, #28
 80098e4:	2b09      	cmp	r3, #9
 80098e6:	d80b      	bhi.n	8009900 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	4619      	mov	r1, r3
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	440b      	add	r3, r1
 80098f8:	3230      	adds	r2, #48	@ 0x30
 80098fa:	b2d2      	uxtb	r2, r2
 80098fc:	701a      	strb	r2, [r3, #0]
 80098fe:	e00a      	b.n	8009916 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	0f1b      	lsrs	r3, r3, #28
 8009904:	b2da      	uxtb	r2, r3
 8009906:	7dfb      	ldrb	r3, [r7, #23]
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4619      	mov	r1, r3
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	440b      	add	r3, r1
 8009910:	3237      	adds	r2, #55	@ 0x37
 8009912:	b2d2      	uxtb	r2, r2
 8009914:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	011b      	lsls	r3, r3, #4
 800991a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800991c:	7dfb      	ldrb	r3, [r7, #23]
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	3301      	adds	r3, #1
 8009922:	68ba      	ldr	r2, [r7, #8]
 8009924:	4413      	add	r3, r2
 8009926:	2200      	movs	r2, #0
 8009928:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800992a:	7dfb      	ldrb	r3, [r7, #23]
 800992c:	3301      	adds	r3, #1
 800992e:	75fb      	strb	r3, [r7, #23]
 8009930:	7dfa      	ldrb	r2, [r7, #23]
 8009932:	79fb      	ldrb	r3, [r7, #7]
 8009934:	429a      	cmp	r2, r3
 8009936:	d3d3      	bcc.n	80098e0 <IntToUnicode+0x18>
  }
}
 8009938:	bf00      	nop
 800993a:	bf00      	nop
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08a      	sub	sp, #40	@ 0x28
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009950:	f107 0314 	add.w	r3, r7, #20
 8009954:	2200      	movs	r2, #0
 8009956:	601a      	str	r2, [r3, #0]
 8009958:	605a      	str	r2, [r3, #4]
 800995a:	609a      	str	r2, [r3, #8]
 800995c:	60da      	str	r2, [r3, #12]
 800995e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <HAL_PCD_MspInit+0x90>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d131      	bne.n	80099ce <HAL_PCD_MspInit+0x86>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800996a:	4b1c      	ldr	r3, [pc, #112]	@ (80099dc <HAL_PCD_MspInit+0x94>)
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	4a1b      	ldr	r2, [pc, #108]	@ (80099dc <HAL_PCD_MspInit+0x94>)
 8009970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009974:	6153      	str	r3, [r2, #20]
 8009976:	4b19      	ldr	r3, [pc, #100]	@ (80099dc <HAL_PCD_MspInit+0x94>)
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800997e:	613b      	str	r3, [r7, #16]
 8009980:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration
    PA11     ------> USB_DM
    PA12     ------> USB_DP
    */
    GPIO_InitStruct.Pin = DM_Pin|DP_Pin;
 8009982:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8009986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009988:	2302      	movs	r3, #2
 800998a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998c:	2300      	movs	r3, #0
 800998e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009990:	2303      	movs	r3, #3
 8009992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_USB;
 8009994:	230e      	movs	r3, #14
 8009996:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009998:	f107 0314 	add.w	r3, r7, #20
 800999c:	4619      	mov	r1, r3
 800999e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80099a2:	f7f8 fcb9 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80099a6:	4b0d      	ldr	r3, [pc, #52]	@ (80099dc <HAL_PCD_MspInit+0x94>)
 80099a8:	69db      	ldr	r3, [r3, #28]
 80099aa:	4a0c      	ldr	r2, [pc, #48]	@ (80099dc <HAL_PCD_MspInit+0x94>)
 80099ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80099b0:	61d3      	str	r3, [r2, #28]
 80099b2:	4b0a      	ldr	r3, [pc, #40]	@ (80099dc <HAL_PCD_MspInit+0x94>)
 80099b4:	69db      	ldr	r3, [r3, #28]
 80099b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 80099be:	2200      	movs	r2, #0
 80099c0:	2100      	movs	r1, #0
 80099c2:	2014      	movs	r0, #20
 80099c4:	f7f8 fabf 	bl	8001f46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 80099c8:	2014      	movs	r0, #20
 80099ca:	f7f8 fad8 	bl	8001f7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80099ce:	bf00      	nop
 80099d0:	3728      	adds	r7, #40	@ 0x28
 80099d2:	46bd      	mov	sp, r7
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	40005c00 	.word	0x40005c00
 80099dc:	40021000 	.word	0x40021000

080099e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 22d0 	ldr.w	r2, [r3, #720]	@ 0x2d0
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f7fe fe37 	bl	800866a <USBD_LL_SetupStage>
}
 80099fc:	bf00      	nop
 80099fe:	3708      	adds	r7, #8
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b082      	sub	sp, #8
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	460b      	mov	r3, r1
 8009a0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009a16:	78fa      	ldrb	r2, [r7, #3]
 8009a18:	6879      	ldr	r1, [r7, #4]
 8009a1a:	4613      	mov	r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	4413      	add	r3, r2
 8009a20:	00db      	lsls	r3, r3, #3
 8009a22:	440b      	add	r3, r1
 8009a24:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	78fb      	ldrb	r3, [r7, #3]
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	f7fe fe69 	bl	8008704 <USBD_LL_DataOutStage>
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a3a:	b580      	push	{r7, lr}
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	460b      	mov	r3, r1
 8009a44:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	f8d3 02d0 	ldr.w	r0, [r3, #720]	@ 0x2d0
 8009a4c:	78fa      	ldrb	r2, [r7, #3]
 8009a4e:	6879      	ldr	r1, [r7, #4]
 8009a50:	4613      	mov	r3, r2
 8009a52:	009b      	lsls	r3, r3, #2
 8009a54:	4413      	add	r3, r2
 8009a56:	00db      	lsls	r3, r3, #3
 8009a58:	440b      	add	r3, r1
 8009a5a:	3324      	adds	r3, #36	@ 0x24
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	78fb      	ldrb	r3, [r7, #3]
 8009a60:	4619      	mov	r1, r3
 8009a62:	f7fe fec0 	bl	80087e6 <USBD_LL_DataInStage>
}
 8009a66:	bf00      	nop
 8009a68:	3708      	adds	r7, #8
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}

08009a6e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a6e:	b580      	push	{r7, lr}
 8009a70:	b082      	sub	sp, #8
 8009a72:	af00      	add	r7, sp, #0
 8009a74:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	f7fe ffd3 	bl	8008a28 <USBD_LL_SOF>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b084      	sub	sp, #16
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009a92:	2301      	movs	r3, #1
 8009a94:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	795b      	ldrb	r3, [r3, #5]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	d001      	beq.n	8009aa2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009a9e:	f7f6 fec3 	bl	8000828 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009aa8:	7bfa      	ldrb	r2, [r7, #15]
 8009aaa:	4611      	mov	r1, r2
 8009aac:	4618      	mov	r0, r3
 8009aae:	f7fe ff80 	bl	80089b2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7fe ff39 	bl	8008930 <USBD_LL_Reset>
}
 8009abe:	bf00      	nop
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
	...

08009ac8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b082      	sub	sp, #8
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe ff7b 	bl	80089d2 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	7a5b      	ldrb	r3, [r3, #9]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d005      	beq.n	8009af0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009ae4:	4b04      	ldr	r3, [pc, #16]	@ (8009af8 <HAL_PCD_SuspendCallback+0x30>)
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	4a03      	ldr	r2, [pc, #12]	@ (8009af8 <HAL_PCD_SuspendCallback+0x30>)
 8009aea:	f043 0306 	orr.w	r3, r3, #6
 8009aee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009af0:	bf00      	nop
 8009af2:	3708      	adds	r7, #8
 8009af4:	46bd      	mov	sp, r7
 8009af6:	bd80      	pop	{r7, pc}
 8009af8:	e000ed00 	.word	0xe000ed00

08009afc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b082      	sub	sp, #8
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	f8d3 32d0 	ldr.w	r3, [r3, #720]	@ 0x2d0
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	f7fe ff76 	bl	80089fc <USBD_LL_Resume>
}
 8009b10:	bf00      	nop
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b082      	sub	sp, #8
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8009b20:	4a23      	ldr	r2, [pc, #140]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8c2 32d0 	str.w	r3, [r2, #720]	@ 0x2d0
  pdev->pData = &hpcd_USB_FS;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a21      	ldr	r2, [pc, #132]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b2c:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 8009b30:	4b1f      	ldr	r3, [pc, #124]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b32:	4a20      	ldr	r2, [pc, #128]	@ (8009bb4 <USBD_LL_Init+0x9c>)
 8009b34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009b36:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b38:	2208      	movs	r2, #8
 8009b3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009b3c:	4b1c      	ldr	r3, [pc, #112]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b3e:	2202      	movs	r2, #2
 8009b40:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009b42:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b44:	2202      	movs	r2, #2
 8009b46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009b48:	4b19      	ldr	r3, [pc, #100]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009b4e:	4b18      	ldr	r3, [pc, #96]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b50:	2200      	movs	r2, #0
 8009b52:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009b54:	4816      	ldr	r0, [pc, #88]	@ (8009bb0 <USBD_LL_Init+0x98>)
 8009b56:	f7f8 fed3 	bl	8002900 <HAL_PCD_Init>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d001      	beq.n	8009b64 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8009b60:	f7f6 fe62 	bl	8000828 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b6a:	2318      	movs	r3, #24
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	2100      	movs	r1, #0
 8009b70:	f7fa fb34 	bl	80041dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b7a:	2358      	movs	r3, #88	@ 0x58
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	2180      	movs	r1, #128	@ 0x80
 8009b80:	f7fa fb2c 	bl	80041dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CUSTOM_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPIN_ADDR , PCD_SNG_BUF, 0x98);
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b8a:	2398      	movs	r3, #152	@ 0x98
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	2181      	movs	r1, #129	@ 0x81
 8009b90:	f7fa fb24 	bl	80041dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , CUSTOM_HID_EPOUT_ADDR , PCD_SNG_BUF, 0xD8);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009b9a:	23d8      	movs	r3, #216	@ 0xd8
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	2101      	movs	r1, #1
 8009ba0:	f7fa fb1c 	bl	80041dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CUSTOM_HID */
  return USBD_OK;
 8009ba4:	2300      	movs	r3, #0
}
 8009ba6:	4618      	mov	r0, r3
 8009ba8:	3708      	adds	r7, #8
 8009baa:	46bd      	mov	sp, r7
 8009bac:	bd80      	pop	{r7, pc}
 8009bae:	bf00      	nop
 8009bb0:	200007f8 	.word	0x200007f8
 8009bb4:	40005c00 	.word	0x40005c00

08009bb8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009bc4:	2300      	movs	r3, #0
 8009bc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7f8 ff5d 	bl	8002a8e <HAL_PCD_Start>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009bd8:	7bfb      	ldrb	r3, [r7, #15]
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f000 f940 	bl	8009e60 <USBD_Get_USB_Status>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3710      	adds	r7, #16
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bd80      	pop	{r7, pc}

08009bee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
 8009bf6:	4608      	mov	r0, r1
 8009bf8:	4611      	mov	r1, r2
 8009bfa:	461a      	mov	r2, r3
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	70fb      	strb	r3, [r7, #3]
 8009c00:	460b      	mov	r3, r1
 8009c02:	70bb      	strb	r3, [r7, #2]
 8009c04:	4613      	mov	r3, r2
 8009c06:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009c16:	78bb      	ldrb	r3, [r7, #2]
 8009c18:	883a      	ldrh	r2, [r7, #0]
 8009c1a:	78f9      	ldrb	r1, [r7, #3]
 8009c1c:	f7f9 f855 	bl	8002cca <HAL_PCD_EP_Open>
 8009c20:	4603      	mov	r3, r0
 8009c22:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c24:	7bfb      	ldrb	r3, [r7, #15]
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f91a 	bl	8009e60 <USBD_Get_USB_Status>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c30:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}

08009c3a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c3a:	b580      	push	{r7, lr}
 8009c3c:	b084      	sub	sp, #16
 8009c3e:	af00      	add	r7, sp, #0
 8009c40:	6078      	str	r0, [r7, #4]
 8009c42:	460b      	mov	r3, r1
 8009c44:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c46:	2300      	movs	r3, #0
 8009c48:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c54:	78fa      	ldrb	r2, [r7, #3]
 8009c56:	4611      	mov	r1, r2
 8009c58:	4618      	mov	r0, r3
 8009c5a:	f7f9 f893 	bl	8002d84 <HAL_PCD_EP_Close>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c62:	7bfb      	ldrb	r3, [r7, #15]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f000 f8fb 	bl	8009e60 <USBD_Get_USB_Status>
 8009c6a:	4603      	mov	r3, r0
 8009c6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009c6e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bd80      	pop	{r7, pc}

08009c78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	460b      	mov	r3, r1
 8009c82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009c92:	78fa      	ldrb	r2, [r7, #3]
 8009c94:	4611      	mov	r1, r2
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7f9 f924 	bl	8002ee4 <HAL_PCD_EP_SetStall>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ca0:	7bfb      	ldrb	r3, [r7, #15]
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f000 f8dc 	bl	8009e60 <USBD_Get_USB_Status>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cac:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}

08009cb6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b084      	sub	sp, #16
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	4611      	mov	r1, r2
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	f7f9 f957 	bl	8002f88 <HAL_PCD_EP_ClrStall>
 8009cda:	4603      	mov	r3, r0
 8009cdc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	f000 f8bd 	bl	8009e60 <USBD_Get_USB_Status>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b085      	sub	sp, #20
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d06:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009d08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	da0b      	bge.n	8009d28 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009d10:	78fb      	ldrb	r3, [r7, #3]
 8009d12:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d16:	68f9      	ldr	r1, [r7, #12]
 8009d18:	4613      	mov	r3, r2
 8009d1a:	009b      	lsls	r3, r3, #2
 8009d1c:	4413      	add	r3, r2
 8009d1e:	00db      	lsls	r3, r3, #3
 8009d20:	440b      	add	r3, r1
 8009d22:	3312      	adds	r3, #18
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	e00b      	b.n	8009d40 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009d28:	78fb      	ldrb	r3, [r7, #3]
 8009d2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d2e:	68f9      	ldr	r1, [r7, #12]
 8009d30:	4613      	mov	r3, r2
 8009d32:	009b      	lsls	r3, r3, #2
 8009d34:	4413      	add	r3, r2
 8009d36:	00db      	lsls	r3, r3, #3
 8009d38:	440b      	add	r3, r1
 8009d3a:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 8009d3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009d40:	4618      	mov	r0, r3
 8009d42:	3714      	adds	r7, #20
 8009d44:	46bd      	mov	sp, r7
 8009d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4a:	4770      	bx	lr

08009d4c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	460b      	mov	r3, r1
 8009d56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8009d66:	78fa      	ldrb	r2, [r7, #3]
 8009d68:	4611      	mov	r1, r2
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	f7f8 ff89 	bl	8002c82 <HAL_PCD_SetAddress>
 8009d70:	4603      	mov	r3, r0
 8009d72:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	4618      	mov	r0, r3
 8009d78:	f000 f872 	bl	8009e60 <USBD_Get_USB_Status>
 8009d7c:	4603      	mov	r3, r0
 8009d7e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d80:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	b086      	sub	sp, #24
 8009d8e:	af00      	add	r7, sp, #0
 8009d90:	60f8      	str	r0, [r7, #12]
 8009d92:	607a      	str	r2, [r7, #4]
 8009d94:	461a      	mov	r2, r3
 8009d96:	460b      	mov	r3, r1
 8009d98:	72fb      	strb	r3, [r7, #11]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009dac:	893b      	ldrh	r3, [r7, #8]
 8009dae:	7af9      	ldrb	r1, [r7, #11]
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	f7f9 f860 	bl	8002e76 <HAL_PCD_EP_Transmit>
 8009db6:	4603      	mov	r3, r0
 8009db8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dba:	7dfb      	ldrb	r3, [r7, #23]
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f000 f84f 	bl	8009e60 <USBD_Get_USB_Status>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009dc6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b086      	sub	sp, #24
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	60f8      	str	r0, [r7, #12]
 8009dd8:	607a      	str	r2, [r7, #4]
 8009dda:	461a      	mov	r2, r3
 8009ddc:	460b      	mov	r3, r1
 8009dde:	72fb      	strb	r3, [r7, #11]
 8009de0:	4613      	mov	r3, r2
 8009de2:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009de4:	2300      	movs	r3, #0
 8009de6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 8009df2:	893b      	ldrh	r3, [r7, #8]
 8009df4:	7af9      	ldrb	r1, [r7, #11]
 8009df6:	687a      	ldr	r2, [r7, #4]
 8009df8:	f7f9 f80c 	bl	8002e14 <HAL_PCD_EP_Receive>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e00:	7dfb      	ldrb	r3, [r7, #23]
 8009e02:	4618      	mov	r0, r3
 8009e04:	f000 f82c 	bl	8009e60 <USBD_Get_USB_Status>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e0e:	4618      	mov	r0, r3
 8009e10:	3718      	adds	r7, #24
 8009e12:	46bd      	mov	sp, r7
 8009e14:	bd80      	pop	{r7, pc}
	...

08009e18 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8009e20:	4b03      	ldr	r3, [pc, #12]	@ (8009e30 <USBD_static_malloc+0x18>)
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	370c      	adds	r7, #12
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	20000acc 	.word	0x20000acc

08009e34 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]

}
 8009e3c:	bf00      	nop
 8009e3e:	370c      	adds	r7, #12
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr

08009e48 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e48:	b480      	push	{r7}
 8009e4a:	b083      	sub	sp, #12
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
 8009e50:	460b      	mov	r3, r1
 8009e52:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009e54:	bf00      	nop
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b085      	sub	sp, #20
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	4603      	mov	r3, r0
 8009e68:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009e6e:	79fb      	ldrb	r3, [r7, #7]
 8009e70:	2b03      	cmp	r3, #3
 8009e72:	d817      	bhi.n	8009ea4 <USBD_Get_USB_Status+0x44>
 8009e74:	a201      	add	r2, pc, #4	@ (adr r2, 8009e7c <USBD_Get_USB_Status+0x1c>)
 8009e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e7a:	bf00      	nop
 8009e7c:	08009e8d 	.word	0x08009e8d
 8009e80:	08009e93 	.word	0x08009e93
 8009e84:	08009e99 	.word	0x08009e99
 8009e88:	08009e9f 	.word	0x08009e9f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8009e90:	e00b      	b.n	8009eaa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009e92:	2302      	movs	r3, #2
 8009e94:	73fb      	strb	r3, [r7, #15]
    break;
 8009e96:	e008      	b.n	8009eaa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009e98:	2301      	movs	r3, #1
 8009e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8009e9c:	e005      	b.n	8009eaa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009e9e:	2302      	movs	r3, #2
 8009ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea2:	e002      	b.n	8009eaa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ea8:	bf00      	nop
  }
  return usb_status;
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	3714      	adds	r7, #20
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <memset>:
 8009eb8:	4402      	add	r2, r0
 8009eba:	4603      	mov	r3, r0
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d100      	bne.n	8009ec2 <memset+0xa>
 8009ec0:	4770      	bx	lr
 8009ec2:	f803 1b01 	strb.w	r1, [r3], #1
 8009ec6:	e7f9      	b.n	8009ebc <memset+0x4>

08009ec8 <__libc_init_array>:
 8009ec8:	b570      	push	{r4, r5, r6, lr}
 8009eca:	4d0d      	ldr	r5, [pc, #52]	@ (8009f00 <__libc_init_array+0x38>)
 8009ecc:	4c0d      	ldr	r4, [pc, #52]	@ (8009f04 <__libc_init_array+0x3c>)
 8009ece:	1b64      	subs	r4, r4, r5
 8009ed0:	10a4      	asrs	r4, r4, #2
 8009ed2:	2600      	movs	r6, #0
 8009ed4:	42a6      	cmp	r6, r4
 8009ed6:	d109      	bne.n	8009eec <__libc_init_array+0x24>
 8009ed8:	4d0b      	ldr	r5, [pc, #44]	@ (8009f08 <__libc_init_array+0x40>)
 8009eda:	4c0c      	ldr	r4, [pc, #48]	@ (8009f0c <__libc_init_array+0x44>)
 8009edc:	f000 f818 	bl	8009f10 <_init>
 8009ee0:	1b64      	subs	r4, r4, r5
 8009ee2:	10a4      	asrs	r4, r4, #2
 8009ee4:	2600      	movs	r6, #0
 8009ee6:	42a6      	cmp	r6, r4
 8009ee8:	d105      	bne.n	8009ef6 <__libc_init_array+0x2e>
 8009eea:	bd70      	pop	{r4, r5, r6, pc}
 8009eec:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ef0:	4798      	blx	r3
 8009ef2:	3601      	adds	r6, #1
 8009ef4:	e7ee      	b.n	8009ed4 <__libc_init_array+0xc>
 8009ef6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009efa:	4798      	blx	r3
 8009efc:	3601      	adds	r6, #1
 8009efe:	e7f2      	b.n	8009ee6 <__libc_init_array+0x1e>
 8009f00:	08009fb8 	.word	0x08009fb8
 8009f04:	08009fb8 	.word	0x08009fb8
 8009f08:	08009fb8 	.word	0x08009fb8
 8009f0c:	08009fbc 	.word	0x08009fbc

08009f10 <_init>:
 8009f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f12:	bf00      	nop
 8009f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f16:	bc08      	pop	{r3}
 8009f18:	469e      	mov	lr, r3
 8009f1a:	4770      	bx	lr

08009f1c <_fini>:
 8009f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f1e:	bf00      	nop
 8009f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009f22:	bc08      	pop	{r3}
 8009f24:	469e      	mov	lr, r3
 8009f26:	4770      	bx	lr
